
ThirdParty_MainAvionic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800bab0  0800bab0  0001bab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfa8  0800bfa8  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfa8  0800bfa8  0001bfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfb0  0800bfb0  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfb0  0800bfb0  0001bfb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfb4  0800bfb4  0001bfb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800bfb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000250  0800c208  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  0800c208  000207dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f52  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4c  00000000  00000000  00033215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00035c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df1  00000000  00000000  00036e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fb0  00000000  00000000  00037bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016995  00000000  00000000  0005bba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d68c3  00000000  00000000  0007253e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006034  00000000  00000000  00148e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0014ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba94 	.word	0x0800ba94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	0800ba94 	.word	0x0800ba94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <TrimRead+0x1b8>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4868      	ldr	r0, [pc, #416]	; (800127c <TrimRead+0x1bc>)
 80010dc:	f003 fee6 	bl	8004eac <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <TrimRead+0x1c0>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2207      	movs	r2, #7
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <TrimRead+0x1bc>)
 80010f6:	f003 fed9 	bl	8004eac <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <TrimRead+0x1b8>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TrimRead+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <TrimRead+0x1c4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TrimRead+0x1b8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <TrimRead+0x1b8>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <TrimRead+0x1c8>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <TrimRead+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <TrimRead+0x1b8>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <TrimRead+0x1cc>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <TrimRead+0x1b8>)
 8001140:	79db      	ldrb	r3, [r3, #7]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <TrimRead+0x1b8>)
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <TrimRead+0x1d0>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <TrimRead+0x1b8>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TrimRead+0x1b8>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <TrimRead+0x1d4>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <TrimRead+0x1b8>)
 800116e:	7adb      	ldrb	r3, [r3, #11]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <TrimRead+0x1b8>)
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <TrimRead+0x1d8>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <TrimRead+0x1b8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <TrimRead+0x1b8>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <TrimRead+0x1dc>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <TrimRead+0x1b8>)
 800119a:	7bdb      	ldrb	r3, [r3, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <TrimRead+0x1b8>)
 80011a2:	7b9b      	ldrb	r3, [r3, #14]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <TrimRead+0x1e0>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <TrimRead+0x1b8>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <TrimRead+0x1b8>)
 80011b8:	7c1b      	ldrb	r3, [r3, #16]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <TrimRead+0x1e4>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <TrimRead+0x1b8>)
 80011c6:	7cdb      	ldrb	r3, [r3, #19]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <TrimRead+0x1b8>)
 80011ce:	7c9b      	ldrb	r3, [r3, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <TrimRead+0x1e8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <TrimRead+0x1b8>)
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <TrimRead+0x1b8>)
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TrimRead+0x1ec>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <TrimRead+0x1b8>)
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <TrimRead+0x1b8>)
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TrimRead+0x1f0>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <TrimRead+0x1b8>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <TrimRead+0x1f4>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <TrimRead+0x1b8>)
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <TrimRead+0x1b8>)
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <TrimRead+0x1f8>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <TrimRead+0x1b8>)
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <TrimRead+0x1fc>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <TrimRead+0x1b8>)
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <TrimRead+0x1b8>)
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	b21b      	sxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <TrimRead+0x200>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <TrimRead+0x1b8>)
 800124e:	7f9b      	ldrb	r3, [r3, #30]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TrimRead+0x1b8>)
 8001256:	7f5b      	ldrb	r3, [r3, #29]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <TrimRead+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TrimRead+0x1b8>)
 8001268:	7fdb      	ldrb	r3, [r3, #31]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <TrimRead+0x208>)
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000270 	.word	0x20000270
 800127c:	20000318 	.word	0x20000318
 8001280:	20000289 	.word	0x20000289
 8001284:	20000290 	.word	0x20000290
 8001288:	20000298 	.word	0x20000298
 800128c:	2000029a 	.word	0x2000029a
 8001290:	20000292 	.word	0x20000292
 8001294:	2000029c 	.word	0x2000029c
 8001298:	2000029e 	.word	0x2000029e
 800129c:	200002a0 	.word	0x200002a0
 80012a0:	200002a2 	.word	0x200002a2
 80012a4:	200002a4 	.word	0x200002a4
 80012a8:	200002a6 	.word	0x200002a6
 80012ac:	200002a8 	.word	0x200002a8
 80012b0:	200002aa 	.word	0x200002aa
 80012b4:	20000294 	.word	0x20000294
 80012b8:	200002ac 	.word	0x200002ac
 80012bc:	20000296 	.word	0x20000296
 80012c0:	200002ae 	.word	0x200002ae
 80012c4:	200002b0 	.word	0x200002b0
 80012c8:	200002b2 	.word	0x200002b2

080012cc <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ea:	f7ff fee9 	bl	80010c0 <TrimRead>

	uint8_t datatowrite = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012f6:	23b6      	movs	r3, #182	; 0xb6
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4858      	ldr	r0, [pc, #352]	; (8001474 <BME280_Config+0x1a8>)
 8001312:	f003 fcd1 	bl	8004cb8 <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x56>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a3      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f003 f80e 	bl	8004344 <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f2      	movs	r2, #242	; 0xf2
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <BME280_Config+0x1a8>)
 8001344:	f003 fcb8 	bl	8004cb8 <HAL_I2C_Mem_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BME280_Config+0x88>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e08a      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f002 fff5 	bl	8004344 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	22f2      	movs	r2, #242	; 0xf2
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	4840      	ldr	r0, [pc, #256]	; (8001474 <BME280_Config+0x1a8>)
 8001372:	f003 fd9b 	bl	8004eac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	429a      	cmp	r2, r3
 800137c:	d002      	beq.n	8001384 <BME280_Config+0xb8>
	{
		return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e072      	b.n	800146a <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f5      	movs	r2, #245	; 0xf5
 80013b0:	21ec      	movs	r1, #236	; 0xec
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <BME280_Config+0x1a8>)
 80013b4:	f003 fc80 	bl	8004cb8 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0xf8>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e052      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f002 ffbd 	bl	8004344 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f5      	movs	r2, #245	; 0xf5
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <BME280_Config+0x1a8>)
 80013e2:	f003 fd63 	bl	8004eac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x128>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e03a      	b.n	800146a <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ec      	movs	r1, #236	; 0xec
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <BME280_Config+0x1a8>)
 8001428:	f003 fc46 	bl	8004cb8 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x16c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e018      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f002 ff83 	bl	8004344 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f4      	movs	r2, #244	; 0xf4
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <BME280_Config+0x1a8>)
 8001456:	f003 fd29 	bl	8004eac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0x19c>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e000      	b.n	800146a <BME280_Config+0x19e>
	}
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000318 	.word	0x20000318

08001478 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <BMEReadRaw+0x8c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	22d0      	movs	r2, #208	; 0xd0
 8001490:	21ec      	movs	r1, #236	; 0xec
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <BMEReadRaw+0x90>)
 8001494:	f003 fd0a 	bl	8004eac <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BMEReadRaw+0x8c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d12a      	bne.n	80014f6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2308      	movs	r3, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	463b      	mov	r3, r7
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	22f7      	movs	r2, #247	; 0xf7
 80014b2:	21ec      	movs	r1, #236	; 0xec
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <BMEReadRaw+0x90>)
 80014b6:	f003 fcf9 	bl	8004eac <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	0912      	lsrs	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BMEReadRaw+0x94>)
 80014ce:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	031a      	lsls	r2, r3, #12
 80014d4:	793b      	ldrb	r3, [r7, #4]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4313      	orrs	r3, r2
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	0912      	lsrs	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BMEReadRaw+0x98>)
 80014e4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <BMEReadRaw+0x9c>)
 80014f0:	6013      	str	r3, [r2, #0]

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <BMEReadRaw+0x82>
	}
	else return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000026c 	.word	0x2000026c
 8001508:	20000318 	.word	0x20000318
 800150c:	200002b8 	.word	0x200002b8
 8001510:	200002b4 	.word	0x200002b4
 8001514:	200002bc 	.word	0x200002bc

08001518 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <BME280_compensate_T_int32+0x78>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <BME280_compensate_T_int32+0x74>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <BME280_compensate_T_int32+0x7c>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
	return T;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000290 	.word	0x20000290
 8001590:	20000298 	.word	0x20000298
 8001594:	2000029a 	.word	0x2000029a
 8001598:	200002c8 	.word	0x200002c8

0800159c <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b0ca      	sub	sp, #296	; 0x128
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <BME280_compensate_P_int64+0x2cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	461c      	mov	r4, r3
 80015b0:	4615      	mov	r5, r2
 80015b2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015b6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015ba:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015dc:	fba3 8903 	umull	r8, r9, r3, r3
 80015e0:	eb02 0309 	add.w	r3, r2, r9
 80015e4:	4699      	mov	r9, r3
 80015e6:	4ba1      	ldr	r3, [pc, #644]	; (800186c <BME280_compensate_P_int64+0x2d0>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015fc:	4603      	mov	r3, r0
 80015fe:	fb03 f209 	mul.w	r2, r3, r9
 8001602:	460b      	mov	r3, r1
 8001604:	fb08 f303 	mul.w	r3, r8, r3
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	fba8 1202 	umull	r1, r2, r8, r2
 8001610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800161a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001624:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001628:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <BME280_compensate_P_int64+0x2d4>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800163e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800164a:	462a      	mov	r2, r5
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001654:	4621      	mov	r1, r4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001660:	4621      	mov	r1, r4
 8001662:	fba3 1301 	umull	r1, r3, r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	460b      	mov	r3, r1
 800166c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001686:	462b      	mov	r3, r5
 8001688:	0459      	lsls	r1, r3, #17
 800168a:	4623      	mov	r3, r4
 800168c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001690:	4623      	mov	r3, r4
 8001692:	0458      	lsls	r0, r3, #17
 8001694:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001698:	1814      	adds	r4, r2, r0
 800169a:	643c      	str	r4, [r7, #64]	; 0x40
 800169c:	414b      	adcs	r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <BME280_compensate_P_int64+0x2d8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	2000      	movs	r0, #0
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	1814      	adds	r4, r2, r0
 80016d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80016d2:	414b      	adcs	r3, r1
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e6:	fb03 f102 	mul.w	r1, r3, r2
 80016ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	18ca      	adds	r2, r1, r3
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001704:	460b      	mov	r3, r1
 8001706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <BME280_compensate_P_int64+0x2dc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	462b      	mov	r3, r5
 800172c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001730:	4642      	mov	r2, r8
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	464b      	mov	r3, r9
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	4641      	mov	r1, r8
 8001744:	fba2 1201 	umull	r1, r2, r2, r1
 8001748:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800174c:	460a      	mov	r2, r1
 800174e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001752:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001768:	4623      	mov	r3, r4
 800176a:	0a18      	lsrs	r0, r3, #8
 800176c:	462b      	mov	r3, r5
 800176e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001772:	462b      	mov	r3, r5
 8001774:	1219      	asrs	r1, r3, #8
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <BME280_compensate_P_int64+0x2e0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001784:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001790:	464a      	mov	r2, r9
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179a:	4644      	mov	r4, r8
 800179c:	fb04 f303 	mul.w	r3, r4, r3
 80017a0:	441a      	add	r2, r3
 80017a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a6:	4644      	mov	r4, r8
 80017a8:	fba3 4304 	umull	r4, r3, r3, r4
 80017ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b0:	4623      	mov	r3, r4
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017cc:	464c      	mov	r4, r9
 80017ce:	0323      	lsls	r3, r4, #12
 80017d0:	4644      	mov	r4, r8
 80017d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017d6:	4644      	mov	r4, r8
 80017d8:	0322      	lsls	r2, r4, #12
 80017da:	1884      	adds	r4, r0, r2
 80017dc:	633c      	str	r4, [r7, #48]	; 0x30
 80017de:	eb41 0303 	adc.w	r3, r1, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BME280_compensate_P_int64+0x2e4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800180c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001810:	462b      	mov	r3, r5
 8001812:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001816:	4642      	mov	r2, r8
 8001818:	fb02 f203 	mul.w	r2, r2, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	4641      	mov	r1, r8
 800182a:	fba2 1201 	umull	r1, r2, r2, r1
 800182e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001832:	460a      	mov	r2, r1
 8001834:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001838:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800184e:	4629      	mov	r1, r5
 8001850:	104a      	asrs	r2, r1, #1
 8001852:	4629      	mov	r1, r5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800185a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185e:	4313      	orrs	r3, r2
 8001860:	d110      	bne.n	8001884 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001862:	2300      	movs	r3, #0
 8001864:	e154      	b.n	8001b10 <BME280_compensate_P_int64+0x574>
 8001866:	bf00      	nop
 8001868:	200002c8 	.word	0x200002c8
 800186c:	200002a4 	.word	0x200002a4
 8001870:	200002a2 	.word	0x200002a2
 8001874:	200002a0 	.word	0x200002a0
 8001878:	2000029e 	.word	0x2000029e
 800187c:	2000029c 	.word	0x2000029c
 8001880:	20000292 	.word	0x20000292
	}
	p = 1048576-adc_P;
 8001884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001888:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001892:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a89      	subs	r1, r1, r2
 80018ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80018bc:	4629      	mov	r1, r5
 80018be:	eb61 0303 	sbc.w	r3, r1, r3
 80018c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018c8:	4622      	mov	r2, r4
 80018ca:	462b      	mov	r3, r5
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6239      	str	r1, [r7, #32]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d8:	4621      	mov	r1, r4
 80018da:	1851      	adds	r1, r2, r1
 80018dc:	61b9      	str	r1, [r7, #24]
 80018de:	4629      	mov	r1, r5
 80018e0:	414b      	adcs	r3, r1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1889      	adds	r1, r1, r2
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4649      	mov	r1, r9
 8001906:	eb43 0101 	adc.w	r1, r3, r1
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	008b      	lsls	r3, r1, #2
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001922:	4641      	mov	r1, r8
 8001924:	008a      	lsls	r2, r1, #2
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	460b      	mov	r3, r1
 8001934:	462a      	mov	r2, r5
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	4603      	mov	r3, r0
 800195c:	4622      	mov	r2, r4
 800195e:	189b      	adds	r3, r3, r2
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
 8001962:	462b      	mov	r3, r5
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001970:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001974:	f7ff f9a0 	bl	8000cb8 <__aeabi_ldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <BME280_compensate_P_int64+0x580>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	17da      	asrs	r2, r3, #31
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
 800198c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0b50      	lsrs	r0, r2, #13
 80019dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e0:	1359      	asrs	r1, r3, #13
 80019e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e6:	462b      	mov	r3, r5
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	4622      	mov	r2, r4
 80019f6:	fba2 1200 	umull	r1, r2, r2, r0
 80019fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	0e4a      	lsrs	r2, r1, #25
 8001a1e:	4629      	mov	r1, r5
 8001a20:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a24:	4629      	mov	r1, r5
 8001a26:	164b      	asrs	r3, r1, #25
 8001a28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <BME280_compensate_P_int64+0x584>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	667a      	str	r2, [r7, #100]	; 0x64
 8001a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a7e:	4621      	mov	r1, r4
 8001a80:	0cca      	lsrs	r2, r1, #19
 8001a82:	4629      	mov	r1, r5
 8001a84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a88:	4629      	mov	r1, r5
 8001a8a:	14cb      	asrs	r3, r1, #19
 8001a8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a90:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a98:	1884      	adds	r4, r0, r2
 8001a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a9c:	eb41 0303 	adc.w	r3, r1, r3
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1889      	adds	r1, r1, r2
 8001aae:	6539      	str	r1, [r7, #80]	; 0x50
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0101 	adc.w	r1, r3, r1
 8001ab6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	0a18      	lsrs	r0, r3, #8
 8001ac8:	462b      	mov	r3, r5
 8001aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ace:	462b      	mov	r3, r5
 8001ad0:	1219      	asrs	r1, r3, #8
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <BME280_compensate_P_int64+0x588>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	17da      	asrs	r2, r3, #31
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aec:	464c      	mov	r4, r9
 8001aee:	0123      	lsls	r3, r4, #4
 8001af0:	4644      	mov	r4, r8
 8001af2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001af6:	4644      	mov	r4, r8
 8001af8:	0122      	lsls	r2, r4, #4
 8001afa:	1884      	adds	r4, r0, r2
 8001afc:	603c      	str	r4, [r7, #0]
 8001afe:	eb41 0303 	adc.w	r3, r1, r3
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	200002aa 	.word	0x200002aa
 8001b20:	200002a8 	.word	0x200002a8
 8001b24:	200002a6 	.word	0x200002a6

08001b28 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <bme280_compensate_H_int32+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	039a      	lsls	r2, r3, #14
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <bme280_compensate_H_int32+0xc0>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <bme280_compensate_H_int32+0xc4>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b5c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <bme280_compensate_H_int32+0xc8>)
 8001b60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b64:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b6c:	1292      	asrs	r2, r2, #10
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <bme280_compensate_H_int32+0xcc>)
 8001b70:	8809      	ldrh	r1, [r1, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	fb00 f101 	mul.w	r1, r0, r1
 8001b7a:	12c9      	asrs	r1, r1, #11
 8001b7c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b84:	1292      	asrs	r2, r2, #10
 8001b86:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <bme280_compensate_H_int32+0xd0>)
 8001b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	13db      	asrs	r3, r3, #15
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	13d2      	asrs	r2, r2, #15
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <bme280_compensate_H_int32+0xd4>)
 8001bb0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bb6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bcc:	bfa8      	it	ge
 8001bce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	131b      	asrs	r3, r3, #12
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200002c8 	.word	0x200002c8
 8001be8:	200002ae 	.word	0x200002ae
 8001bec:	200002b0 	.word	0x200002b0
 8001bf0:	200002b2 	.word	0x200002b2
 8001bf4:	20000296 	.word	0x20000296
 8001bf8:	200002ac 	.word	0x200002ac
 8001bfc:	20000294 	.word	0x20000294

08001c00 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c04:	f7ff fc38 	bl	8001478 <BMEReadRaw>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BME280_Pressure+0x78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c16:	d104      	bne.n	8001c22 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e01b      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BME280_Pressure+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcb8 	bl	800159c <BME280_compensate_P_int64>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc80 	bl	8000534 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <BME280_Pressure+0x80>)
 8001c3a:	f7fe fe1f 	bl	800087c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e003      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc8a 	bl	8000578 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002b8 	.word	0x200002b8
 8001c7c:	20000448 	.word	0x20000448
 8001c80:	40700000 	.word	0x40700000

08001c84 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c88:	f7ff fbf6 	bl	8001478 <BMEReadRaw>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BME280_Humidity+0x78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d104      	bne.n	8001ca6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <BME280_Humidity+0x7c>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <BME280_Humidity+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <bme280_compensate_H_int32>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc3e 	bl	8000534 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <BME280_Humidity+0x80>)
 8001cbe:	f7fe fddd 	bl	800087c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e003      	b.n	8001cde <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BME280_Humidity+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc48 	bl	8000578 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002bc 	.word	0x200002bc
 8001d00:	2000044c 	.word	0x2000044c
 8001d04:	40900000 	.word	0x40900000

08001d08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001d0c:	f7ff fbb4 	bl	8001478 <BMEReadRaw>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BME280_Temperature+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1e:	d104      	bne.n	8001d2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01b      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BME280_Temperature+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fbf2 	bl	8001518 <BME280_compensate_T_int32>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <BME280_Temperature+0x80>)
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e003      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002b4 	.word	0x200002b4
 8001d84:	20000444 	.word	0x20000444
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001d94:	f7ff ff34 	bl	8001c00 <BME280_Pressure>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <BME280_Altitude+0xa8>)
 8001da8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e3c <BME280_Altitude+0xac>
 8001db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <BME280_Altitude+0xb0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e28 <BME280_Altitude+0x98>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f008 fcb3 	bl	800a74c <pow>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	4915      	ldr	r1, [pc, #84]	; (8001e44 <BME280_Altitude+0xb4>)
 8001df0:	f7fe fa62 	bl	80002b8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8001e30 <BME280_Altitude+0xa0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff03 	bl	8000c18 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e16:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
}
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ccd745e4 	.word	0xccd745e4
 8001e2c:	3fc85b95 	.word	0x3fc85b95
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40e5a540 	.word	0x40e5a540
 8001e38:	200002c4 	.word	0x200002c4
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	200002c0 	.word	0x200002c0

08001e4c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001e56:	f7ff ff9b 	bl	8001d90 <BME280_Altitude>
 8001e5a:	ee10 3a10 	vmov	r3, s0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbc1 	bl	8000628 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <BME280_Kalman_Alt+0x140>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fa02 	bl	80002bc <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fba5 	bl	8000628 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9d7 	bl	80002bc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4920      	ldr	r1, [pc, #128]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fb80 	bl	8000628 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <BME280_Kalman_Alt+0x14c>)
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb70 	bl	8000628 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <BME280_Kalman_Alt+0x150>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002d0 	.word	0x200002d0
 8001f88:	0800baf0 	.word	0x0800baf0
 8001f8c:	0800baf8 	.word	0x0800baf8
 8001f90:	200002d8 	.word	0x200002d8
 8001f94:	200002e0 	.word	0x200002e0
 8001f98:	3ff00000 	.word	0x3ff00000
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001faa:	f7ff fe29 	bl	8001c00 <BME280_Pressure>
 8001fae:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb27 	bl	8000628 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <BME280_Kalman_Press+0x12c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fc39 	bl	800087c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f7fe f944 	bl	80002b8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <BME280_Kalman_Press+0x130>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe f934 	bl	80002bc <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fadd 	bl	8000628 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <BME280_Kalman_Press+0x138>)
 8002078:	f7fe f91e 	bl	80002b8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe facd 	bl	8000628 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <BME280_Kalman_Press+0x13c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f90e 	bl	80002bc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <BME280_Kalman_Press+0x124>)
 80020a6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BME280_Kalman_Press+0x134>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002e8 	.word	0x200002e8
 80020c8:	0800bb00 	.word	0x0800bb00
 80020cc:	0800bb08 	.word	0x0800bb08
 80020d0:	200002f0 	.word	0x200002f0
 80020d4:	20000010 	.word	0x20000010
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	20000018 	.word	0x20000018

080020e0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80020ea:	f7ff fdcb 	bl	8001c84 <BME280_Humidity>
 80020ee:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <BME280_Kalman_Hum+0x128>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <BME280_Kalman_Hum+0x124>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa87 	bl	8000628 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <BME280_Kalman_Hum+0x12c>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe fb99 	bl	800087c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <BME280_Kalman_Hum+0x130>)
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa62 	bl	8000628 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	f7fe f8a4 	bl	80002b8 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BME280_Kalman_Hum+0x130>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa53 	bl	8000628 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	491e      	ldr	r1, [pc, #120]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BME280_Kalman_Hum+0x130>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <BME280_Kalman_Hum+0x138>)
 80021b8:	f7fe f87e 	bl	80002b8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <BME280_Kalman_Hum+0x13c>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BME280_Kalman_Hum+0x134>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	200002f8 	.word	0x200002f8
 8002208:	0800bb10 	.word	0x0800bb10
 800220c:	0800bb18 	.word	0x0800bb18
 8002210:	20000300 	.word	0x20000300
 8002214:	20000020 	.word	0x20000020
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	20000028 	.word	0x20000028

08002220 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800222a:	f7ff fd6d 	bl	8001d08 <BME280_Temperature>
 800222e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9de 	bl	8000628 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <BME280_Kalman_Temp+0x12c>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f81f 	bl	80002bc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe faf9 	bl	800087c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <BME280_Kalman_Temp+0x130>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe f804 	bl	80002b8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9b3 	bl	8000628 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022da:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BME280_Kalman_Temp+0x128>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f99d 	bl	8000628 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BME280_Kalman_Temp+0x138>)
 80022f8:	f7fd ffde 	bl	80002b8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <BME280_Kalman_Temp+0x13c>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	ec43 2b17 	vmov	d7, r2, r3
}
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	20000308 	.word	0x20000308
 8002348:	0800bb20 	.word	0x0800bb20
 800234c:	0800bb28 	.word	0x0800bb28
 8002350:	20000310 	.word	0x20000310
 8002354:	20000030 	.word	0x20000030
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	20000038 	.word	0x20000038

08002360 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3371      	adds	r3, #113	; 0x71
 8002378:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800237a:	e002      	b.n	8002382 <prv_parse_number+0x22>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <prv_parse_number+0x30>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b20      	cmp	r3, #32
 800238e:	d0f5      	beq.n	800237c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b2d      	cmp	r3, #45	; 0x2d
 8002396:	d104      	bne.n	80023a2 <prv_parse_number+0x42>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <prv_parse_number+0x44>
 80023a2:	2300      	movs	r3, #0
 80023a4:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80023a6:	e00d      	b.n	80023c4 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3b30      	subs	r3, #48	; 0x30
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <prv_parse_number+0x7a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b2f      	cmp	r3, #47	; 0x2f
 80023d0:	d903      	bls.n	80023da <prv_parse_number+0x7a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b39      	cmp	r3, #57	; 0x39
 80023d8:	d9e6      	bls.n	80023a8 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <prv_parse_number+0x86>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	425b      	negs	r3, r3
 80023e4:	e000      	b.n	80023e8 <prv_parse_number+0x88>
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3371      	adds	r3, #113	; 0x71
 8002408:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800240a:	e002      	b.n	8002412 <prv_parse_float_number+0x1e>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <prv_parse_float_number+0x2c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b20      	cmp	r3, #32
 800241e:	d0f5      	beq.n	800240c <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002420:	2100      	movs	r1, #0
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f006 f978 	bl	8008718 <strtod>
 8002428:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800242c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002430:	ec43 2b17 	vmov	d7, r2, r3
}
 8002434:	eeb0 0a47 	vmov.f32	s0, s14
 8002438:	eef0 0a67 	vmov.f32	s1, s15
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 800244c:	2100      	movs	r1, #0
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffd0 	bl	80023f4 <prv_parse_float_number>
 8002454:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800245c:	f7fe fb94 	bl	8000b88 <__aeabi_d2iz>
 8002460:	4603      	mov	r3, r0
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <prv_parse_lat_long+0x94>)
 8002464:	fb82 1203 	smull	r1, r2, r2, r3
 8002468:	1152      	asrs	r2, r2, #5
 800246a:	17db      	asrs	r3, r3, #31
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f870 	bl	8000554 <__aeabi_i2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <prv_parse_lat_long+0x98>)
 8002482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002486:	f7fe f8cf 	bl	8000628 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002492:	f7fd ff11 	bl	80002b8 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <prv_parse_lat_long+0x9c>)
 80024a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a8:	f7fe f9e8 	bl	800087c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b4:	f7fd ff02 	bl	80002bc <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80024c8:	eeb0 0a47 	vmov.f32	s0, s14
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	51eb851f 	.word	0x51eb851f
 80024dc:	40590000 	.word	0x40590000
 80024e0:	404e0000 	.word	0x404e0000

080024e4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80024e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d169      	bne.n	80025cc <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3371      	adds	r3, #113	; 0x71
 80024fc:	2206      	movs	r2, #6
 80024fe:	49ba      	ldr	r1, [pc, #744]	; (80027e8 <prv_parse_term+0x304>)
 8002500:	4618      	mov	r0, r3
 8002502:	f006 fa22 	bl	800894a <strncmp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <prv_parse_term+0x3c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3371      	adds	r3, #113	; 0x71
 8002510:	2206      	movs	r2, #6
 8002512:	49b6      	ldr	r1, [pc, #728]	; (80027ec <prv_parse_term+0x308>)
 8002514:	4618      	mov	r0, r3
 8002516:	f006 fa18 	bl	800894a <strncmp>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002528:	e04e      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3371      	adds	r3, #113	; 0x71
 800252e:	2206      	movs	r2, #6
 8002530:	49af      	ldr	r1, [pc, #700]	; (80027f0 <prv_parse_term+0x30c>)
 8002532:	4618      	mov	r0, r3
 8002534:	f006 fa09 	bl	800894a <strncmp>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <prv_parse_term+0x6e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3371      	adds	r3, #113	; 0x71
 8002542:	2206      	movs	r2, #6
 8002544:	49ab      	ldr	r1, [pc, #684]	; (80027f4 <prv_parse_term+0x310>)
 8002546:	4618      	mov	r0, r3
 8002548:	f006 f9ff 	bl	800894a <strncmp>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800255a:	e035      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3371      	adds	r3, #113	; 0x71
 8002560:	2206      	movs	r2, #6
 8002562:	49a5      	ldr	r1, [pc, #660]	; (80027f8 <prv_parse_term+0x314>)
 8002564:	4618      	mov	r0, r3
 8002566:	f006 f9f0 	bl	800894a <strncmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <prv_parse_term+0xa0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3371      	adds	r3, #113	; 0x71
 8002574:	2206      	movs	r2, #6
 8002576:	49a1      	ldr	r1, [pc, #644]	; (80027fc <prv_parse_term+0x318>)
 8002578:	4618      	mov	r0, r3
 800257a:	f006 f9e6 	bl	800894a <strncmp>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800258c:	e01c      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3371      	adds	r3, #113	; 0x71
 8002592:	2206      	movs	r2, #6
 8002594:	499a      	ldr	r1, [pc, #616]	; (8002800 <prv_parse_term+0x31c>)
 8002596:	4618      	mov	r0, r3
 8002598:	f006 f9d7 	bl	800894a <strncmp>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <prv_parse_term+0xd2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3371      	adds	r3, #113	; 0x71
 80025a6:	2206      	movs	r2, #6
 80025a8:	4996      	ldr	r1, [pc, #600]	; (8002804 <prv_parse_term+0x320>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f006 f9cd 	bl	800894a <strncmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025be:	e003      	b.n	80025c8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e231      	b.n	8002a30 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025d2:	2900      	cmp	r1, #0
 80025d4:	f000 822b 	beq.w	8002a2e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025de:	2901      	cmp	r1, #1
 80025e0:	f040 80c9 	bne.w	8002776 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025ea:	3b01      	subs	r3, #1
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	f200 8213 	bhi.w	8002a18 <prv_parse_term+0x534>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <prv_parse_term+0x114>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002625 	.word	0x08002625
 80025fc:	0800269f 	.word	0x0800269f
 8002600:	080026b5 	.word	0x080026b5
 8002604:	080026df 	.word	0x080026df
 8002608:	080026f5 	.word	0x080026f5
 800260c:	0800271f 	.word	0x0800271f
 8002610:	08002733 	.word	0x08002733
 8002614:	08002a19 	.word	0x08002a19
 8002618:	08002747 	.word	0x08002747
 800261c:	08002a19 	.word	0x08002a19
 8002620:	0800275f 	.word	0x0800275f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800262a:	3b30      	subs	r3, #48	; 0x30
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800263e:	4413      	add	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002652:	3b30      	subs	r3, #48	; 0x30
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002666:	4413      	add	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3b30      	subs	r3, #48	; 0x30
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800267a:	3b30      	subs	r3, #48	; 0x30
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800268e:	4413      	add	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3b30      	subs	r3, #48	; 0x30
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 800269c:	e1c7      	b.n	8002a2e <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fed0 	bl	8002444 <prv_parse_lat_long>
 80026a4:	eeb0 7a40 	vmov.f32	s14, s0
 80026a8:	eef0 7a60 	vmov.f32	s15, s1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80026b2:	e1bc      	b.n	8002a2e <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026ba:	2b53      	cmp	r3, #83	; 0x53
 80026bc:	d005      	beq.n	80026ca <prv_parse_term+0x1e6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026c4:	2b73      	cmp	r3, #115	; 0x73
 80026c6:	f040 81a9 	bne.w	8002a1c <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80026d0:	4690      	mov	r8, r2
 80026d2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80026dc:	e19e      	b.n	8002a1c <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff feb0 	bl	8002444 <prv_parse_lat_long>
 80026e4:	eeb0 7a40 	vmov.f32	s14, s0
 80026e8:	eef0 7a60 	vmov.f32	s15, s1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80026f2:	e19c      	b.n	8002a2e <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026fa:	2b57      	cmp	r3, #87	; 0x57
 80026fc:	d005      	beq.n	800270a <prv_parse_term+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002704:	2b77      	cmp	r3, #119	; 0x77
 8002706:	f040 818b 	bne.w	8002a20 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002710:	4614      	mov	r4, r2
 8002712:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 800271c:	e180      	b.n	8002a20 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800271e:	2100      	movs	r1, #0
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fe1d 	bl	8002360 <prv_parse_number>
 8002726:	4603      	mov	r3, r0
 8002728:	b2da      	uxtb	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002730:	e17d      	b.n	8002a2e <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002732:	2100      	movs	r1, #0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fe13 	bl	8002360 <prv_parse_number>
 800273a:	4603      	mov	r3, r0
 800273c:	b2da      	uxtb	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002744:	e173      	b.n	8002a2e <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002746:	2100      	movs	r1, #0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fe53 	bl	80023f4 <prv_parse_float_number>
 800274e:	eeb0 7a40 	vmov.f32	s14, s0
 8002752:	eef0 7a60 	vmov.f32	s15, s1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800275c:	e167      	b.n	8002a2e <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800275e:	2100      	movs	r1, #0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fe47 	bl	80023f4 <prv_parse_float_number>
 8002766:	eeb0 7a40 	vmov.f32	s14, s0
 800276a:	eef0 7a60 	vmov.f32	s15, s1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002774:	e15b      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800277c:	2902      	cmp	r1, #2
 800277e:	f040 8083 	bne.w	8002888 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002788:	3b02      	subs	r3, #2
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d860      	bhi.n	8002850 <prv_parse_term+0x36c>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <prv_parse_term+0x2b0>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027d5 	.word	0x080027d5
 8002798:	08002851 	.word	0x08002851
 800279c:	08002851 	.word	0x08002851
 80027a0:	08002851 	.word	0x08002851
 80027a4:	08002851 	.word	0x08002851
 80027a8:	08002851 	.word	0x08002851
 80027ac:	08002851 	.word	0x08002851
 80027b0:	08002851 	.word	0x08002851
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002851 	.word	0x08002851
 80027bc:	08002851 	.word	0x08002851
 80027c0:	08002851 	.word	0x08002851
 80027c4:	08002851 	.word	0x08002851
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002821 	.word	0x08002821
 80027d0:	08002839 	.word	0x08002839
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80027d4:	2100      	movs	r1, #0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fdc2 	bl	8002360 <prv_parse_number>
 80027dc:	4603      	mov	r3, r0
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80027e6:	e122      	b.n	8002a2e <prv_parse_term+0x54a>
 80027e8:	0800bab0 	.word	0x0800bab0
 80027ec:	0800bab8 	.word	0x0800bab8
 80027f0:	0800bac0 	.word	0x0800bac0
 80027f4:	0800bac8 	.word	0x0800bac8
 80027f8:	0800bad0 	.word	0x0800bad0
 80027fc:	0800bad8 	.word	0x0800bad8
 8002800:	0800bae0 	.word	0x0800bae0
 8002804:	0800bae8 	.word	0x0800bae8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fdf2 	bl	80023f4 <prv_parse_float_number>
 8002810:	eeb0 7a40 	vmov.f32	s14, s0
 8002814:	eef0 7a60 	vmov.f32	s15, s1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800281e:	e106      	b.n	8002a2e <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002820:	2100      	movs	r1, #0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fde6 	bl	80023f4 <prv_parse_float_number>
 8002828:	eeb0 7a40 	vmov.f32	s14, s0
 800282c:	eef0 7a60 	vmov.f32	s15, s1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002836:	e0fa      	b.n	8002a2e <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002838:	2100      	movs	r1, #0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fdda 	bl	80023f4 <prv_parse_float_number>
 8002840:	eeb0 7a40 	vmov.f32	s14, s0
 8002844:	eef0 7a60 	vmov.f32	s15, s1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800284e:	e0ee      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002856:	2b02      	cmp	r3, #2
 8002858:	f240 80e4 	bls.w	8002a24 <prv_parse_term+0x540>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002862:	2b0e      	cmp	r3, #14
 8002864:	f200 80de 	bhi.w	8002a24 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002868:	2100      	movs	r1, #0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fd78 	bl	8002360 <prv_parse_number>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002878:	3b03      	subs	r3, #3
 800287a:	b2d1      	uxtb	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	460a      	mov	r2, r1
 8002882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002886:	e0cd      	b.n	8002a24 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800288e:	2903      	cmp	r1, #3
 8002890:	d11b      	bne.n	80028ca <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002898:	2b02      	cmp	r3, #2
 800289a:	d002      	beq.n	80028a2 <prv_parse_term+0x3be>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d00a      	beq.n	80028b6 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80028a0:	e0c5      	b.n	8002a2e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fd5b 	bl	8002360 <prv_parse_number>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80028b4:	e0bb      	b.n	8002a2e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80028b6:	2100      	movs	r1, #0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fd51 	bl	8002360 <prv_parse_number>
 80028be:	4603      	mov	r3, r0
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80028c8:	e0b1      	b.n	8002a2e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028d0:	2904      	cmp	r1, #4
 80028d2:	f040 80ac 	bne.w	8002a2e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80028dc:	3902      	subs	r1, #2
 80028de:	2909      	cmp	r1, #9
 80028e0:	f200 80a2 	bhi.w	8002a28 <prv_parse_term+0x544>
 80028e4:	a001      	add	r0, pc, #4	; (adr r0, 80028ec <prv_parse_term+0x408>)
 80028e6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002915 	.word	0x08002915
 80028f0:	08002a29 	.word	0x08002a29
 80028f4:	08002a29 	.word	0x08002a29
 80028f8:	08002a29 	.word	0x08002a29
 80028fc:	08002a29 	.word	0x08002a29
 8002900:	0800292f 	.word	0x0800292f
 8002904:	08002947 	.word	0x08002947
 8002908:	0800295f 	.word	0x0800295f
 800290c:	080029d9 	.word	0x080029d9
 8002910:	080029f1 	.word	0x080029f1
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800291a:	2b41      	cmp	r3, #65	; 0x41
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800292c:	e07f      	b.n	8002a2e <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800292e:	2100      	movs	r1, #0
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fd5f 	bl	80023f4 <prv_parse_float_number>
 8002936:	eeb0 7a40 	vmov.f32	s14, s0
 800293a:	eef0 7a60 	vmov.f32	s15, s1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002944:	e073      	b.n	8002a2e <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002946:	2100      	movs	r1, #0
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fd53 	bl	80023f4 <prv_parse_float_number>
 800294e:	eeb0 7a40 	vmov.f32	s14, s0
 8002952:	eef0 7a60 	vmov.f32	s15, s1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800295c:	e067      	b.n	8002a2e <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002964:	3b30      	subs	r3, #48	; 0x30
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002978:	4413      	add	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b30      	subs	r3, #48	; 0x30
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800298c:	3b30      	subs	r3, #48	; 0x30
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029a0:	4413      	add	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3b30      	subs	r3, #48	; 0x30
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80029b4:	3b30      	subs	r3, #48	; 0x30
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4413      	add	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80029c8:	4413      	add	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b30      	subs	r3, #48	; 0x30
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80029d6:	e02a      	b.n	8002a2e <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fd0a 	bl	80023f4 <prv_parse_float_number>
 80029e0:	eeb0 7a40 	vmov.f32	s14, s0
 80029e4:	eef0 7a60 	vmov.f32	s15, s1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80029ee:	e01e      	b.n	8002a2e <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80029f6:	2957      	cmp	r1, #87	; 0x57
 80029f8:	d004      	beq.n	8002a04 <prv_parse_term+0x520>
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a00:	2977      	cmp	r1, #119	; 0x77
 8002a02:	d113      	bne.n	8002a2c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002a16:	e009      	b.n	8002a2c <prv_parse_term+0x548>
                break;
 8002a18:	bf00      	nop
 8002a1a:	e008      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a1c:	bf00      	nop
 8002a1e:	e006      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a20:	bf00      	nop
 8002a22:	e004      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a24:	bf00      	nop
 8002a26:	e002      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                break;
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a2c:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a3a:	bf00      	nop

08002a3c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002a4c:	d90d      	bls.n	8002a6a <prv_check_crc+0x2e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a54:	2b39      	cmp	r3, #57	; 0x39
 8002a56:	d808      	bhi.n	8002a6a <prv_check_crc+0x2e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a5e:	3b30      	subs	r3, #48	; 0x30
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	e026      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d90d      	bls.n	8002a90 <prv_check_crc+0x54>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a7a:	2b7a      	cmp	r3, #122	; 0x7a
 8002a7c:	d808      	bhi.n	8002a90 <prv_check_crc+0x54>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a84:	3b57      	subs	r3, #87	; 0x57
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	e013      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d90d      	bls.n	8002ab6 <prv_check_crc+0x7a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aa0:	2b5a      	cmp	r3, #90	; 0x5a
 8002aa2:	d808      	bhi.n	8002ab6 <prv_check_crc+0x7a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aaa:	3b37      	subs	r3, #55	; 0x37
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	b25a      	sxtb	r2, r3
 8002ab4:	e000      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002abe:	2b2f      	cmp	r3, #47	; 0x2f
 8002ac0:	d90c      	bls.n	8002adc <prv_check_crc+0xa0>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ac8:	2b39      	cmp	r3, #57	; 0x39
 8002aca:	d807      	bhi.n	8002adc <prv_check_crc+0xa0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	e028      	b.n	8002b2e <prv_check_crc+0xf2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ae2:	2b60      	cmp	r3, #96	; 0x60
 8002ae4:	d90e      	bls.n	8002b04 <prv_check_crc+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002aec:	2b7a      	cmp	r3, #122	; 0x7a
 8002aee:	d809      	bhi.n	8002b04 <prv_check_crc+0xc8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002af6:	3b57      	subs	r3, #87	; 0x57
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	e014      	b.n	8002b2e <prv_check_crc+0xf2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d90e      	bls.n	8002b2c <prv_check_crc+0xf0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b14:	2b5a      	cmp	r3, #90	; 0x5a
 8002b16:	d809      	bhi.n	8002b2c <prv_check_crc+0xf0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b1e:	3b37      	subs	r3, #55	; 0x37
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	e000      	b.n	8002b2e <prv_check_crc+0xf2>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d136      	bne.n	8002bd2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bd0:	e061      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d121      	bne.n	8002c20 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	33a1      	adds	r3, #161	; 0xa1
 8002c16:	220c      	movs	r2, #12
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f005 ff1c 	bl	8008a56 <memcpy>
 8002c1e:	e03a      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d106      	bne.n	8002c38 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002c36:	e02e      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d129      	bne.n	8002c96 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002ca8:	22b0      	movs	r2, #176	; 0xb0
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f005 fe44 	bl	800893a <memset>
    return 1;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002ccc:	e0ad      	b.n	8002e2a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b24      	cmp	r3, #36	; 0x24
 8002cd4:	d128      	bne.n	8002d28 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3370      	adds	r3, #112	; 0x70
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fe2b 	bl	800893a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002cea:	2b0b      	cmp	r3, #11
 8002cec:	f200 8097 	bhi.w	8002e1e <lwgps_process+0x162>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d26:	e07a      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b2c      	cmp	r3, #44	; 0x2c
 8002d2e:	d11d      	bne.n	8002d6c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fbd7 	bl	80024e4 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4053      	eors	r3, r2
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002d6a:	e058      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d117      	bne.n	8002da4 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fbb5 	bl	80024e4 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002da2:	e03c      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b0d      	cmp	r3, #13
 8002daa:	d109      	bne.n	8002dc0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff fe45 	bl	8002a3c <prv_check_crc>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d032      	beq.n	8002e1e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff feca 	bl	8002b52 <prv_copy_from_tmp_memory>
 8002dbe:	e02e      	b.n	8002e1e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4053      	eors	r3, r2
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002de4:	2b0b      	cmp	r3, #11
 8002de6:	d81a      	bhi.n	8002e1e <lwgps_process+0x162>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002dee:	4619      	mov	r1, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f af4e 	bne.w	8002cce <lwgps_process+0x12>
        }
    }
    return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UART_RxCpltCallback>:
typedef union {
	float sayi;
	unsigned char array[4];
} float32toInt8;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_UART_RxCpltCallback+0x68>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d127      	bne.n	8002e9c <HAL_UART_RxCpltCallback+0x60>
		if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d010      	beq.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	b2d1      	uxtb	r1, r2
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e68:	7011      	strb	r1, [r2, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e6e:	7819      	ldrb	r1, [r3, #0]
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_UART_RxCpltCallback+0x74>)
 8002e72:	5499      	strb	r1, [r3, r2]
 8002e74:	e00d      	b.n	8002e92 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index + 1);
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <HAL_UART_RxCpltCallback+0x74>)
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <HAL_UART_RxCpltCallback+0x78>)
 8002e82:	f7ff ff1b 	bl	8002cbc <lwgps_process>
			rx_index = 0;
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002e92:	2201      	movs	r2, #1
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e96:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <HAL_UART_RxCpltCallback+0x68>)
 8002e98:	f003 fe97 	bl	8006bca <HAL_UART_Receive_IT>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200003f8 	.word	0x200003f8
 8002ea8:	200005f1 	.word	0x200005f1
 8002eac:	200005f0 	.word	0x200005f0
 8002eb0:	20000570 	.word	0x20000570
 8002eb4:	200004c0 	.word	0x200004c0

08002eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ebe:	f001 f9cf 	bl	8004260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ec2:	f000 f939 	bl	8003138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec6:	f000 fa69 	bl	800339c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002eca:	f000 f995 	bl	80031f8 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002ece:	f000 fa3b 	bl	8003348 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8002ed2:	f000 fa0f 	bl	80032f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002ed6:	f000 f9bd 	bl	8003254 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 8002eda:	487f      	ldr	r0, [pc, #508]	; (80030d8 <main+0x220>)
 8002edc:	f003 faca 	bl	8006474 <HAL_TIM_Base_Init>
	MPU6050_Init();
 8002ee0:	f000 fab4 	bl	800344c <MPU6050_Init>
	lwgps_init(&gps);
 8002ee4:	487d      	ldr	r0, [pc, #500]	; (80030dc <main+0x224>)
 8002ee6:	f7ff fedb 	bl	8002ca0 <lwgps_init>
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002eea:	2201      	movs	r2, #1
 8002eec:	497c      	ldr	r1, [pc, #496]	; (80030e0 <main+0x228>)
 8002eee:	487d      	ldr	r0, [pc, #500]	; (80030e4 <main+0x22c>)
 8002ef0:	f003 fe6b 	bl	8006bca <HAL_UART_Receive_IT>
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2303      	movs	r3, #3
 8002efe:	2201      	movs	r2, #1
 8002f00:	2105      	movs	r1, #5
 8002f02:	2002      	movs	r0, #2
 8002f04:	f7fe f9e2 	bl	80012cc <BME280_Config>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		acX = MPU6050_Kalman_Accel_X();
 8002f08:	f000 fcd4 	bl	80038b4 <MPU6050_Kalman_Accel_X>
 8002f0c:	ec53 2b10 	vmov	r2, r3, d0
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fe80 	bl	8000c18 <__aeabi_d2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <main+0x230>)
 8002f1c:	6013      	str	r3, [r2, #0]
		acY = MPU6050_Kalman_Accel_Y();
 8002f1e:	f000 fd6b 	bl	80039f8 <MPU6050_Kalman_Accel_Y>
 8002f22:	ec53 2b10 	vmov	r2, r3, d0
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7fd fe75 	bl	8000c18 <__aeabi_d2f>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <main+0x234>)
 8002f32:	6013      	str	r3, [r2, #0]
		acZ = MPU6050_Kalman_Accel_Z();
 8002f34:	f000 fe02 	bl	8003b3c <MPU6050_Kalman_Accel_Z>
 8002f38:	ec53 2b10 	vmov	r2, r3, d0
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe6a 	bl	8000c18 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <main+0x238>)
 8002f48:	6013      	str	r3, [r2, #0]
		gyX = MPU6050_Kalman_Gyro_X();
 8002f4a:	f000 fe99 	bl	8003c80 <MPU6050_Kalman_Gyro_X>
 8002f4e:	ec53 2b10 	vmov	r2, r3, d0
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	f7fd fe5f 	bl	8000c18 <__aeabi_d2f>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <main+0x23c>)
 8002f5e:	6013      	str	r3, [r2, #0]
		gyY = MPU6050_Kalman_Gyro_X();
 8002f60:	f000 fe8e 	bl	8003c80 <MPU6050_Kalman_Gyro_X>
 8002f64:	ec53 2b10 	vmov	r2, r3, d0
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fe54 	bl	8000c18 <__aeabi_d2f>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <main+0x240>)
 8002f74:	6013      	str	r3, [r2, #0]
		gyZ = MPU6050_Kalman_Gyro_X();
 8002f76:	f000 fe83 	bl	8003c80 <MPU6050_Kalman_Gyro_X>
 8002f7a:	ec53 2b10 	vmov	r2, r3, d0
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fe49 	bl	8000c18 <__aeabi_d2f>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a5c      	ldr	r2, [pc, #368]	; (80030fc <main+0x244>)
 8002f8a:	6013      	str	r3, [r2, #0]
		RollAng = MPU6050_Kalman_Roll_Angle();
 8002f8c:	f000 fbee 	bl	800376c <MPU6050_Kalman_Roll_Angle>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	4b5a      	ldr	r3, [pc, #360]	; (8003100 <main+0x248>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
		Temperature = BME280_Temperature();
 8002f9a:	f7fe feb5 	bl	8001d08 <BME280_Temperature>
 8002f9e:	ec53 2b10 	vmov	r2, r3, d0
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd fe37 	bl	8000c18 <__aeabi_d2f>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a55      	ldr	r2, [pc, #340]	; (8003104 <main+0x24c>)
 8002fae:	6013      	str	r3, [r2, #0]
		Pressure = BME280_Pressure();
 8002fb0:	f7fe fe26 	bl	8001c00 <BME280_Pressure>
 8002fb4:	ec53 2b10 	vmov	r2, r3, d0
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f7fd fe2c 	bl	8000c18 <__aeabi_d2f>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a51      	ldr	r2, [pc, #324]	; (8003108 <main+0x250>)
 8002fc4:	6013      	str	r3, [r2, #0]
		Humidity = BME280_Humidity();
 8002fc6:	f7fe fe5d 	bl	8001c84 <BME280_Humidity>
 8002fca:	ec53 2b10 	vmov	r2, r3, d0
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fe21 	bl	8000c18 <__aeabi_d2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4a4c      	ldr	r2, [pc, #304]	; (800310c <main+0x254>)
 8002fda:	6013      	str	r3, [r2, #0]
		T = BME280_Kalman_Temp(Temperature);
 8002fdc:	4b49      	ldr	r3, [pc, #292]	; (8003104 <main+0x24c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fac9 	bl	8000578 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	ec43 2b10 	vmov	d0, r2, r3
 8002fee:	f7ff f917 	bl	8002220 <BME280_Kalman_Temp>
 8002ff2:	ec53 2b10 	vmov	r2, r3, d0
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fe0d 	bl	8000c18 <__aeabi_d2f>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a43      	ldr	r2, [pc, #268]	; (8003110 <main+0x258>)
 8003002:	6013      	str	r3, [r2, #0]
		P = BME280_Kalman_Press(Pressure);
 8003004:	4b40      	ldr	r3, [pc, #256]	; (8003108 <main+0x250>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fab5 	bl	8000578 <__aeabi_f2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	ec43 2b10 	vmov	d0, r2, r3
 8003016:	f7fe ffc3 	bl	8001fa0 <BME280_Kalman_Press>
 800301a:	ec53 2b10 	vmov	r2, r3, d0
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fdf9 	bl	8000c18 <__aeabi_d2f>
 8003026:	4603      	mov	r3, r0
 8003028:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <main+0x25c>)
 800302a:	6013      	str	r3, [r2, #0]
		H = BME280_Kalman_Hum(Humidity);
 800302c:	4b37      	ldr	r3, [pc, #220]	; (800310c <main+0x254>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd faa1 	bl	8000578 <__aeabi_f2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	ec43 2b10 	vmov	d0, r2, r3
 800303e:	f7ff f84f 	bl	80020e0 <BME280_Kalman_Hum>
 8003042:	ec53 2b10 	vmov	r2, r3, d0
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fde5 	bl	8000c18 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	4a31      	ldr	r2, [pc, #196]	; (8003118 <main+0x260>)
 8003052:	6013      	str	r3, [r2, #0]
		Altitude1 = BME280_Altitude();
 8003054:	f7fe fe9c 	bl	8001d90 <BME280_Altitude>
 8003058:	eef0 7a40 	vmov.f32	s15, s0
 800305c:	4b2f      	ldr	r3, [pc, #188]	; (800311c <main+0x264>)
 800305e:	edc3 7a00 	vstr	s15, [r3]
		Alt = BME280_Kalman_Alt(Altitude1);
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <main+0x264>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa86 	bl	8000578 <__aeabi_f2d>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	ec43 2b10 	vmov	d0, r2, r3
 8003074:	f7fe feea 	bl	8001e4c <BME280_Kalman_Alt>
 8003078:	eef0 7a40 	vmov.f32	s15, s0
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <main+0x268>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
		gpsAlt = gps.altitude;
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <main+0x224>)
 8003084:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd fdc4 	bl	8000c18 <__aeabi_d2f>
 8003090:	4603      	mov	r3, r0
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <main+0x26c>)
 8003094:	6013      	str	r3, [r2, #0]
		gpsLat = gps.latitude;
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <main+0x224>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdba 	bl	8000c18 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a20      	ldr	r2, [pc, #128]	; (8003128 <main+0x270>)
 80030a8:	6013      	str	r3, [r2, #0]
		gpsLong = gps.longitude;
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <main+0x224>)
 80030ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd fdb0 	bl	8000c18 <__aeabi_d2f>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <main+0x274>)
 80030bc:	6013      	str	r3, [r2, #0]

		//  paket(sayac);
		//sayac = sayac+1;

		HAL_UART_Transmit(&huart2, buff, 54, 500);
 80030be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030c2:	2236      	movs	r2, #54	; 0x36
 80030c4:	491a      	ldr	r1, [pc, #104]	; (8003130 <main+0x278>)
 80030c6:	481b      	ldr	r0, [pc, #108]	; (8003134 <main+0x27c>)
 80030c8:	f003 fced 	bl	8006aa6 <HAL_UART_Transmit>
		HAL_Delay(500);
 80030cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030d0:	f001 f938 	bl	8004344 <HAL_Delay>
		acX = MPU6050_Kalman_Accel_X();
 80030d4:	e718      	b.n	8002f08 <main+0x50>
 80030d6:	bf00      	nop
 80030d8:	2000036c 	.word	0x2000036c
 80030dc:	200004c0 	.word	0x200004c0
 80030e0:	200005f1 	.word	0x200005f1
 80030e4:	200003f8 	.word	0x200003f8
 80030e8:	20000450 	.word	0x20000450
 80030ec:	20000454 	.word	0x20000454
 80030f0:	20000458 	.word	0x20000458
 80030f4:	2000045c 	.word	0x2000045c
 80030f8:	20000460 	.word	0x20000460
 80030fc:	20000464 	.word	0x20000464
 8003100:	2000043c 	.word	0x2000043c
 8003104:	20000444 	.word	0x20000444
 8003108:	20000448 	.word	0x20000448
 800310c:	2000044c 	.word	0x2000044c
 8003110:	2000046c 	.word	0x2000046c
 8003114:	20000470 	.word	0x20000470
 8003118:	20000474 	.word	0x20000474
 800311c:	20000440 	.word	0x20000440
 8003120:	20000468 	.word	0x20000468
 8003124:	20000478 	.word	0x20000478
 8003128:	2000047c 	.word	0x2000047c
 800312c:	20000480 	.word	0x20000480
 8003130:	20000484 	.word	0x20000484
 8003134:	200003b4 	.word	0x200003b4

08003138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b094      	sub	sp, #80	; 0x50
 800313c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	2234      	movs	r2, #52	; 0x34
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f005 fbf7 	bl	800893a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <SystemClock_Config+0xb8>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <SystemClock_Config+0xb8>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6413      	str	r3, [r2, #64]	; 0x40
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <SystemClock_Config+0xb8>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003178:	2300      	movs	r3, #0
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <SystemClock_Config+0xbc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <SystemClock_Config+0xbc>)
 8003186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <SystemClock_Config+0xbc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800319c:	2301      	movs	r3, #1
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a0:	2310      	movs	r3, #16
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 fec3 	bl	8005f38 <HAL_RCC_OscConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80031b8:	f000 f942 	bl	8003440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031bc:	230f      	movs	r3, #15
 80031be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f002 fbea 	bl	80059b0 <HAL_RCC_ClockConfig>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80031e2:	f000 f92d 	bl	8003440 <Error_Handler>
  }
}
 80031e6:	bf00      	nop
 80031e8:	3750      	adds	r7, #80	; 0x50
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000

080031f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <MX_I2C1_Init+0x50>)
 80031fe:	4a13      	ldr	r2, [pc, #76]	; (800324c <MX_I2C1_Init+0x54>)
 8003200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_I2C1_Init+0x50>)
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <MX_I2C1_Init+0x58>)
 8003206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <MX_I2C1_Init+0x50>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_I2C1_Init+0x50>)
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <MX_I2C1_Init+0x50>)
 8003216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800321a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <MX_I2C1_Init+0x50>)
 800321e:	2200      	movs	r2, #0
 8003220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <MX_I2C1_Init+0x50>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <MX_I2C1_Init+0x50>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_I2C1_Init+0x50>)
 8003230:	2200      	movs	r2, #0
 8003232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	; (8003248 <MX_I2C1_Init+0x50>)
 8003236:	f001 fbfb 	bl	8004a30 <HAL_I2C_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003240:	f000 f8fe 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000318 	.word	0x20000318
 800324c:	40005400 	.word	0x40005400
 8003250:	000186a0 	.word	0x000186a0

08003254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325a:	f107 0308 	add.w	r3, r7, #8
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003268:	463b      	mov	r3, r7
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <MX_TIM1_Init+0x98>)
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <MX_TIM1_Init+0x9c>)
 8003274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <MX_TIM1_Init+0x98>)
 8003278:	2259      	movs	r2, #89	; 0x59
 800327a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <MX_TIM1_Init+0x98>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <MX_TIM1_Init+0x98>)
 8003284:	2263      	movs	r2, #99	; 0x63
 8003286:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <MX_TIM1_Init+0x98>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <MX_TIM1_Init+0x98>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <MX_TIM1_Init+0x98>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800329a:	4814      	ldr	r0, [pc, #80]	; (80032ec <MX_TIM1_Init+0x98>)
 800329c:	f003 f8ea 	bl	8006474 <HAL_TIM_Base_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80032a6:	f000 f8cb 	bl	8003440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4619      	mov	r1, r3
 80032b6:	480d      	ldr	r0, [pc, #52]	; (80032ec <MX_TIM1_Init+0x98>)
 80032b8:	f003 f92b 	bl	8006512 <HAL_TIM_ConfigClockSource>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80032c2:	f000 f8bd 	bl	8003440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032ce:	463b      	mov	r3, r7
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <MX_TIM1_Init+0x98>)
 80032d4:	f003 fb1e 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80032de:	f000 f8af 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000036c 	.word	0x2000036c
 80032f0:	40010000 	.word	0x40010000

080032f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <MX_USART2_UART_Init+0x50>)
 80032fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 8003300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 800331a:	220c      	movs	r2, #12
 800331c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800332a:	4805      	ldr	r0, [pc, #20]	; (8003340 <MX_USART2_UART_Init+0x4c>)
 800332c:	f003 fb6e 	bl	8006a0c <HAL_UART_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003336:	f000 f883 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200003b4 	.word	0x200003b4
 8003344:	40004400 	.word	0x40004400

08003348 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <MX_USART6_UART_Init+0x50>)
 8003350:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 8003354:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003358:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 800336e:	220c      	movs	r2, #12
 8003370:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <MX_USART6_UART_Init+0x4c>)
 8003380:	f003 fb44 	bl	8006a0c <HAL_UART_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800338a:	f000 f859 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200003f8 	.word	0x200003f8
 8003398:	40011400 	.word	0x40011400

0800339c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a18      	ldr	r2, [pc, #96]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <MX_GPIO_Init+0x9c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SECOND_SEPERATION_Pin|FIRST_SEPERATION_Pin, GPIO_PIN_RESET);
 8003406:	2200      	movs	r2, #0
 8003408:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800340c:	480b      	ldr	r0, [pc, #44]	; (800343c <MX_GPIO_Init+0xa0>)
 800340e:	f001 faf5 	bl	80049fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SECOND_SEPERATION_Pin FIRST_SEPERATION_Pin */
  GPIO_InitStruct.Pin = SECOND_SEPERATION_Pin|FIRST_SEPERATION_Pin;
 8003412:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003418:	2301      	movs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	4619      	mov	r1, r3
 800342a:	4804      	ldr	r0, [pc, #16]	; (800343c <MX_GPIO_Init+0xa0>)
 800342c:	f001 f952 	bl	80046d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	40020000 	.word	0x40020000

08003440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003444:	b672      	cpsid	i
}
 8003446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003448:	e7fe      	b.n	8003448 <Error_Handler+0x8>
	...

0800344c <MPU6050_Init>:
static double Q7 = 10; //initial estimated covariance
static double P7 = 0; //initial error covariance (it must be 0)
static double K7 = 0; //initial kalman gain

void MPU6050_Init (void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8003452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003456:	9302      	str	r3, [sp, #8]
 8003458:	2301      	movs	r3, #1
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2301      	movs	r3, #1
 8003462:	2275      	movs	r2, #117	; 0x75
 8003464:	21d0      	movs	r1, #208	; 0xd0
 8003466:	4823      	ldr	r0, [pc, #140]	; (80034f4 <MPU6050_Init+0xa8>)
 8003468:	f001 fd20 	bl	8004eac <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	2b68      	cmp	r3, #104	; 0x68
 8003470:	d13b      	bne.n	80034ea <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	2301      	movs	r3, #1
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	1dbb      	adds	r3, r7, #6
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2301      	movs	r3, #1
 8003486:	226b      	movs	r2, #107	; 0x6b
 8003488:	21d0      	movs	r1, #208	; 0xd0
 800348a:	481a      	ldr	r0, [pc, #104]	; (80034f4 <MPU6050_Init+0xa8>)
 800348c:	f001 fc14 	bl	8004cb8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8003490:	2307      	movs	r3, #7
 8003492:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	2301      	movs	r3, #1
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	1dbb      	adds	r3, r7, #6
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2301      	movs	r3, #1
 80034a4:	2219      	movs	r2, #25
 80034a6:	21d0      	movs	r1, #208	; 0xd0
 80034a8:	4812      	ldr	r0, [pc, #72]	; (80034f4 <MPU6050_Init+0xa8>)
 80034aa:	f001 fc05 	bl	8004cb8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Â± 2g
		Data = 0x00;
 80034ae:	2300      	movs	r3, #0
 80034b0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80034b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	1dbb      	adds	r3, r7, #6
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	221c      	movs	r2, #28
 80034c4:	21d0      	movs	r1, #208	; 0xd0
 80034c6:	480b      	ldr	r0, [pc, #44]	; (80034f4 <MPU6050_Init+0xa8>)
 80034c8:	f001 fbf6 	bl	8004cb8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> Â± 250 Â°/s
		Data = 0x00;
 80034cc:	2300      	movs	r3, #0
 80034ce:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80034d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	2301      	movs	r3, #1
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	1dbb      	adds	r3, r7, #6
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2301      	movs	r3, #1
 80034e0:	221b      	movs	r2, #27
 80034e2:	21d0      	movs	r1, #208	; 0xd0
 80034e4:	4803      	ldr	r0, [pc, #12]	; (80034f4 <MPU6050_Init+0xa8>)
 80034e6:	f001 fbe7 	bl	8004cb8 <HAL_I2C_Mem_Write>
	}

}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000318 	.word	0x20000318

080034f8 <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 80034fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003502:	9302      	str	r3, [sp, #8]
 8003504:	2306      	movs	r3, #6
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	463b      	mov	r3, r7
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2301      	movs	r3, #1
 800350e:	223b      	movs	r2, #59	; 0x3b
 8003510:	21d0      	movs	r1, #208	; 0xd0
 8003512:	4811      	ldr	r0, [pc, #68]	; (8003558 <MPU6050_Accel_Config+0x60>)
 8003514:	f001 fcca 	bl	8004eac <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 8003518:	783b      	ldrb	r3, [r7, #0]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	b21a      	sxth	r2, r3
 800351e:	787b      	ldrb	r3, [r7, #1]
 8003520:	b21b      	sxth	r3, r3
 8003522:	4313      	orrs	r3, r2
 8003524:	b21a      	sxth	r2, r3
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <MPU6050_Accel_Config+0x64>)
 8003528:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 800352a:	78bb      	ldrb	r3, [r7, #2]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	b21a      	sxth	r2, r3
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	b21b      	sxth	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b21a      	sxth	r2, r3
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <MPU6050_Accel_Config+0x68>)
 800353a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 800353c:	793b      	ldrb	r3, [r7, #4]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	b21a      	sxth	r2, r3
 8003542:	797b      	ldrb	r3, [r7, #5]
 8003544:	b21b      	sxth	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b21a      	sxth	r2, r3
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MPU6050_Accel_Config+0x6c>)
 800354c:	801a      	strh	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000318 	.word	0x20000318
 800355c:	20000604 	.word	0x20000604
 8003560:	20000606 	.word	0x20000606
 8003564:	20000608 	.word	0x20000608

08003568 <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 800356c:	f7ff ffc4 	bl	80034f8 <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 8003570:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <MPU6050_Read_Accel_X+0x40>)
 8003572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ffec 	bl	8000554 <__aeabi_i2d>
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <MPU6050_Read_Accel_X+0x44>)
 8003582:	f7fd f97b 	bl	800087c <__aeabi_ddiv>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fb43 	bl	8000c18 <__aeabi_d2f>
 8003592:	4603      	mov	r3, r0
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <MPU6050_Read_Accel_X+0x48>)
 8003596:	6013      	str	r3, [r2, #0]
	return Ax;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <MPU6050_Read_Accel_X+0x48>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	ee07 3a90 	vmov	s15, r3
}
 80035a0:	eeb0 0a67 	vmov.f32	s0, s15
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000604 	.word	0x20000604
 80035ac:	40d00000 	.word	0x40d00000
 80035b0:	200005f4 	.word	0x200005f4

080035b4 <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80035b8:	f7ff ff9e 	bl	80034f8 <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <MPU6050_Read_Accel_Y+0x40>)
 80035be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ffc6 	bl	8000554 <__aeabi_i2d>
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <MPU6050_Read_Accel_Y+0x44>)
 80035ce:	f7fd f955 	bl	800087c <__aeabi_ddiv>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f7fd fb1d 	bl	8000c18 <__aeabi_d2f>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <MPU6050_Read_Accel_Y+0x48>)
 80035e2:	6013      	str	r3, [r2, #0]
	return Ay;
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <MPU6050_Read_Accel_Y+0x48>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	ee07 3a90 	vmov	s15, r3
}
 80035ec:	eeb0 0a67 	vmov.f32	s0, s15
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000606 	.word	0x20000606
 80035f8:	40d00000 	.word	0x40d00000
 80035fc:	200005f8 	.word	0x200005f8

08003600 <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003604:	f7ff ff78 	bl	80034f8 <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MPU6050_Read_Accel_Z+0x40>)
 800360a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fc ffa0 	bl	8000554 <__aeabi_i2d>
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <MPU6050_Read_Accel_Z+0x44>)
 800361a:	f7fd f92f 	bl	800087c <__aeabi_ddiv>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f7fd faf7 	bl	8000c18 <__aeabi_d2f>
 800362a:	4603      	mov	r3, r0
 800362c:	4a06      	ldr	r2, [pc, #24]	; (8003648 <MPU6050_Read_Accel_Z+0x48>)
 800362e:	6013      	str	r3, [r2, #0]
	return Az;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <MPU6050_Read_Accel_Z+0x48>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	ee07 3a90 	vmov	s15, r3
}
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000608 	.word	0x20000608
 8003644:	40d00000 	.word	0x40d00000
 8003648:	200005fc 	.word	0x200005fc

0800364c <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 8003652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003656:	9302      	str	r3, [sp, #8]
 8003658:	2306      	movs	r3, #6
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	463b      	mov	r3, r7
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2301      	movs	r3, #1
 8003662:	2243      	movs	r2, #67	; 0x43
 8003664:	21d0      	movs	r1, #208	; 0xd0
 8003666:	4811      	ldr	r0, [pc, #68]	; (80036ac <MPU6050_Gyro_Config+0x60>)
 8003668:	f001 fc20 	bl	8004eac <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 800366c:	783b      	ldrb	r3, [r7, #0]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	b21a      	sxth	r2, r3
 8003672:	787b      	ldrb	r3, [r7, #1]
 8003674:	b21b      	sxth	r3, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	b21a      	sxth	r2, r3
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <MPU6050_Gyro_Config+0x64>)
 800367c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 800367e:	78bb      	ldrb	r3, [r7, #2]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	b21b      	sxth	r3, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	b21a      	sxth	r2, r3
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <MPU6050_Gyro_Config+0x68>)
 800368e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8003690:	793b      	ldrb	r3, [r7, #4]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	b21a      	sxth	r2, r3
 8003696:	797b      	ldrb	r3, [r7, #5]
 8003698:	b21b      	sxth	r3, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	b21a      	sxth	r2, r3
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <MPU6050_Gyro_Config+0x6c>)
 80036a0:	801a      	strh	r2, [r3, #0]

}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000318 	.word	0x20000318
 80036b0:	2000060a 	.word	0x2000060a
 80036b4:	2000060c 	.word	0x2000060c
 80036b8:	2000060e 	.word	0x2000060e
 80036bc:	00000000 	.word	0x00000000

080036c0 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 80036c4:	f7ff ffc2 	bl	800364c <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <MPU6050_Read_Gyro_X+0x48>)
 80036ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc ff40 	bl	8000554 <__aeabi_i2d>
 80036d4:	a30a      	add	r3, pc, #40	; (adr r3, 8003700 <MPU6050_Read_Gyro_X+0x40>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f7fd f8cf 	bl	800087c <__aeabi_ddiv>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fd fa97 	bl	8000c18 <__aeabi_d2f>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <MPU6050_Read_Gyro_X+0x4c>)
 80036ee:	6013      	str	r3, [r2, #0]
	return Gx;
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <MPU6050_Read_Gyro_X+0x4c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	ee07 3a90 	vmov	s15, r3
}
 80036f8:	eeb0 0a67 	vmov.f32	s0, s15
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	00000000 	.word	0x00000000
 8003704:	40606000 	.word	0x40606000
 8003708:	2000060a 	.word	0x2000060a
 800370c:	20000600 	.word	0x20000600

08003710 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 8003716:	f000 f96f 	bl	80039f8 <MPU6050_Kalman_Accel_Y>
 800371a:	ed87 0b04 	vstr	d0, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 800371e:	f000 fa0d 	bl	8003b3c <MPU6050_Kalman_Accel_Z>
 8003722:	ed87 0b02 	vstr	d0, [r7, #8]
	float Roll = 0;
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 800372c:	ed97 1b02 	vldr	d1, [r7, #8]
 8003730:	ed97 0b04 	vldr	d0, [r7, #16]
 8003734:	f007 f808 	bl	800a748 <atan2>
 8003738:	ec51 0b10 	vmov	r0, r1, d0
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MPU6050_Roll_Angle+0x58>)
 8003742:	f7fc ff71 	bl	8000628 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f7fd fa63 	bl	8000c18 <__aeabi_d2f>
 8003752:	4603      	mov	r3, r0
 8003754:	607b      	str	r3, [r7, #4]
	return Roll;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	ee07 3a90 	vmov	s15, r3
}
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40668000 	.word	0x40668000

0800376c <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 8003772:	f7ff ffcd 	bl	8003710 <MPU6050_Roll_Angle>
 8003776:	ed87 0a01 	vstr	s0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 800377a:	4b48      	ldr	r3, [pc, #288]	; (800389c <MPU6050_Kalman_Roll_Angle+0x130>)
 800377c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003786:	f7fc ff4f 	bl	8000628 <__aeabi_dmul>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	4942      	ldr	r1, [pc, #264]	; (80038a0 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003798:	4b40      	ldr	r3, [pc, #256]	; (800389c <MPU6050_Kalman_Roll_Angle+0x130>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc ff43 	bl	8000628 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <MPU6050_Kalman_Roll_Angle+0x134>)
 80037b0:	f7fc ff3a 	bl	8000628 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <MPU6050_Kalman_Roll_Angle+0x138>)
 80037c2:	f7fc fd7b 	bl	80002bc <__adddf3>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7fd f855 	bl	800087c <__aeabi_ddiv>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4934      	ldr	r1, [pc, #208]	; (80038a8 <MPU6050_Kalman_Roll_Angle+0x13c>)
 80037d8:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fc fecb 	bl	8000578 <__aeabi_f2d>
 80037e2:	4604      	mov	r4, r0
 80037e4:	460d      	mov	r5, r1
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	492d      	ldr	r1, [pc, #180]	; (80038a0 <MPU6050_Kalman_Roll_Angle+0x134>)
 80037ec:	4b2f      	ldr	r3, [pc, #188]	; (80038ac <MPU6050_Kalman_Roll_Angle+0x140>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc ff19 	bl	8000628 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4620      	mov	r0, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	f7fc fd5b 	bl	80002b8 <__aeabi_dsub>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <MPU6050_Kalman_Roll_Angle+0x13c>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc ff0a 	bl	8000628 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <MPU6050_Kalman_Roll_Angle+0x140>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fd4b 	bl	80002bc <__adddf3>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4920      	ldr	r1, [pc, #128]	; (80038ac <MPU6050_Kalman_Roll_Angle+0x140>)
 800382c:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <MPU6050_Kalman_Roll_Angle+0x134>)
 800383c:	f7fc fef4 	bl	8000628 <__aeabi_dmul>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	4915      	ldr	r1, [pc, #84]	; (80038a0 <MPU6050_Kalman_Roll_Angle+0x134>)
 800384a:	f7fc fd35 	bl	80002b8 <__aeabi_dsub>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f7fc fee4 	bl	8000628 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MPU6050_Kalman_Roll_Angle+0x144>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f7fc fd25 	bl	80002bc <__adddf3>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4909      	ldr	r1, [pc, #36]	; (800389c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003878:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <MPU6050_Kalman_Roll_Angle+0x140>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f7fd f9c7 	bl	8000c18 <__aeabi_d2f>
 800388a:	4603      	mov	r3, r0
 800388c:	ee07 3a90 	vmov	s15, r3
}
 8003890:	eeb0 0a67 	vmov.f32	s0, s15
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bdb0      	pop	{r4, r5, r7, pc}
 800389a:	bf00      	nop
 800389c:	20000610 	.word	0x20000610
 80038a0:	3ff00000 	.word	0x3ff00000
 80038a4:	40440000 	.word	0x40440000
 80038a8:	20000618 	.word	0x20000618
 80038ac:	20000660 	.word	0x20000660
 80038b0:	20000040 	.word	0x20000040

080038b4 <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 80038ba:	f7ff fe55 	bl	8003568 <MPU6050_Read_Accel_X>
 80038be:	ee10 3a10 	vmov	r3, s0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe58 	bl	8000578 <__aeabi_f2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 80038d0:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <MPU6050_Kalman_Accel_X+0x12c>)
 80038d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <MPU6050_Kalman_Accel_X+0x130>)
 80038dc:	f7fc fea4 	bl	8000628 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4614      	mov	r4, r2
 80038e6:	461d      	mov	r5, r3
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	493d      	ldr	r1, [pc, #244]	; (80039e4 <MPU6050_Kalman_Accel_X+0x130>)
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <MPU6050_Kalman_Accel_X+0x12c>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f7fc fe98 	bl	8000628 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <MPU6050_Kalman_Accel_X+0x130>)
 8003906:	f7fc fe8f 	bl	8000628 <__aeabi_dmul>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <MPU6050_Kalman_Accel_X+0x134>)
 8003918:	f7fc fcd0 	bl	80002bc <__adddf3>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4620      	mov	r0, r4
 8003922:	4629      	mov	r1, r5
 8003924:	f7fc ffaa 	bl	800087c <__aeabi_ddiv>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	492f      	ldr	r1, [pc, #188]	; (80039ec <MPU6050_Kalman_Accel_X+0x138>)
 800392e:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	492b      	ldr	r1, [pc, #172]	; (80039e4 <MPU6050_Kalman_Accel_X+0x130>)
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <MPU6050_Kalman_Accel_X+0x13c>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f7fc fe73 	bl	8000628 <__aeabi_dmul>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800394a:	f7fc fcb5 	bl	80002b8 <__aeabi_dsub>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <MPU6050_Kalman_Accel_X+0x138>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fe64 	bl	8000628 <__aeabi_dmul>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <MPU6050_Kalman_Accel_X+0x13c>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fca5 	bl	80002bc <__adddf3>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	491e      	ldr	r1, [pc, #120]	; (80039f0 <MPU6050_Kalman_Accel_X+0x13c>)
 8003978:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <MPU6050_Kalman_Accel_X+0x138>)
 800397e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <MPU6050_Kalman_Accel_X+0x130>)
 8003988:	f7fc fe4e 	bl	8000628 <__aeabi_dmul>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	f04f 0000 	mov.w	r0, #0
 8003994:	4913      	ldr	r1, [pc, #76]	; (80039e4 <MPU6050_Kalman_Accel_X+0x130>)
 8003996:	f7fc fc8f 	bl	80002b8 <__aeabi_dsub>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MPU6050_Kalman_Accel_X+0x12c>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fe3e 	bl	8000628 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <MPU6050_Kalman_Accel_X+0x140>)
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f7fc fc7f 	bl	80002bc <__adddf3>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4907      	ldr	r1, [pc, #28]	; (80039e0 <MPU6050_Kalman_Accel_X+0x12c>)
 80039c4:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <MPU6050_Kalman_Accel_X+0x13c>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80039d2:	eeb0 0a47 	vmov.f32	s0, s14
 80039d6:	eef0 0a67 	vmov.f32	s1, s15
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bdb0      	pop	{r4, r5, r7, pc}
 80039e0:	20000620 	.word	0x20000620
 80039e4:	3ff00000 	.word	0x3ff00000
 80039e8:	40440000 	.word	0x40440000
 80039ec:	20000628 	.word	0x20000628
 80039f0:	20000668 	.word	0x20000668
 80039f4:	20000048 	.word	0x20000048

080039f8 <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 80039fe:	f7ff fdd9 	bl	80035b4 <MPU6050_Read_Accel_Y>
 8003a02:	ee10 3a10 	vmov	r3, s0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fc fdb6 	bl	8000578 <__aeabi_f2d>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8003a14:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a20:	f7fc fe02 	bl	8000628 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4614      	mov	r4, r2
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	493d      	ldr	r1, [pc, #244]	; (8003b28 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a32:	4b3c      	ldr	r3, [pc, #240]	; (8003b24 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f7fc fdf6 	bl	8000628 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a4a:	f7fc fded 	bl	8000628 <__aeabi_dmul>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <MPU6050_Kalman_Accel_Y+0x134>)
 8003a5c:	f7fc fc2e 	bl	80002bc <__adddf3>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4620      	mov	r0, r4
 8003a66:	4629      	mov	r1, r5
 8003a68:	f7fc ff08 	bl	800087c <__aeabi_ddiv>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	492f      	ldr	r1, [pc, #188]	; (8003b30 <MPU6050_Kalman_Accel_Y+0x138>)
 8003a72:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8003a76:	f04f 0000 	mov.w	r0, #0
 8003a7a:	492b      	ldr	r1, [pc, #172]	; (8003b28 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f7fc fdd1 	bl	8000628 <__aeabi_dmul>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a8e:	f7fc fc13 	bl	80002b8 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <MPU6050_Kalman_Accel_Y+0x138>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f7fc fdc2 	bl	8000628 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fc fc03 	bl	80002bc <__adddf3>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	491e      	ldr	r1, [pc, #120]	; (8003b34 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003abc:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <MPU6050_Kalman_Accel_Y+0x138>)
 8003ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <MPU6050_Kalman_Accel_Y+0x130>)
 8003acc:	f7fc fdac 	bl	8000628 <__aeabi_dmul>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	f04f 0000 	mov.w	r0, #0
 8003ad8:	4913      	ldr	r1, [pc, #76]	; (8003b28 <MPU6050_Kalman_Accel_Y+0x130>)
 8003ada:	f7fc fbed 	bl	80002b8 <__aeabi_dsub>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fd9c 	bl	8000628 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <MPU6050_Kalman_Accel_Y+0x140>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fbdd 	bl	80002bc <__adddf3>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4907      	ldr	r1, [pc, #28]	; (8003b24 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003b08:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b16:	eeb0 0a47 	vmov.f32	s0, s14
 8003b1a:	eef0 0a67 	vmov.f32	s1, s15
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bdb0      	pop	{r4, r5, r7, pc}
 8003b24:	20000630 	.word	0x20000630
 8003b28:	3ff00000 	.word	0x3ff00000
 8003b2c:	40440000 	.word	0x40440000
 8003b30:	20000638 	.word	0x20000638
 8003b34:	20000670 	.word	0x20000670
 8003b38:	20000050 	.word	0x20000050

08003b3c <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8003b42:	f7ff fd5d 	bl	8003600 <MPU6050_Read_Accel_Z>
 8003b46:	ee10 3a10 	vmov	r3, s0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fd14 	bl	8000578 <__aeabi_f2d>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <MPU6050_Kalman_Accel_Z+0x130>)
 8003b64:	f7fc fd60 	bl	8000628 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	493d      	ldr	r1, [pc, #244]	; (8003c6c <MPU6050_Kalman_Accel_Z+0x130>)
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc fd54 	bl	8000628 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <MPU6050_Kalman_Accel_Z+0x130>)
 8003b8e:	f7fc fd4b 	bl	8000628 <__aeabi_dmul>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <MPU6050_Kalman_Accel_Z+0x134>)
 8003ba0:	f7fc fb8c 	bl	80002bc <__adddf3>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4620      	mov	r0, r4
 8003baa:	4629      	mov	r1, r5
 8003bac:	f7fc fe66 	bl	800087c <__aeabi_ddiv>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	492f      	ldr	r1, [pc, #188]	; (8003c74 <MPU6050_Kalman_Accel_Z+0x138>)
 8003bb6:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	492b      	ldr	r1, [pc, #172]	; (8003c6c <MPU6050_Kalman_Accel_Z+0x130>)
 8003bc0:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f7fc fd2f 	bl	8000628 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bd2:	f7fc fb71 	bl	80002b8 <__aeabi_dsub>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <MPU6050_Kalman_Accel_Z+0x138>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fd20 	bl	8000628 <__aeabi_dmul>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f7fc fb61 	bl	80002bc <__adddf3>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	491e      	ldr	r1, [pc, #120]	; (8003c78 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003c00:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <MPU6050_Kalman_Accel_Z+0x138>)
 8003c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <MPU6050_Kalman_Accel_Z+0x130>)
 8003c10:	f7fc fd0a 	bl	8000628 <__aeabi_dmul>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	4913      	ldr	r1, [pc, #76]	; (8003c6c <MPU6050_Kalman_Accel_Z+0x130>)
 8003c1e:	f7fc fb4b 	bl	80002b8 <__aeabi_dsub>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f7fc fcfa 	bl	8000628 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <MPU6050_Kalman_Accel_Z+0x140>)
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f7fc fb3b 	bl	80002bc <__adddf3>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4907      	ldr	r1, [pc, #28]	; (8003c68 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003c4c:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c5e:	eef0 0a67 	vmov.f32	s1, s15
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bdb0      	pop	{r4, r5, r7, pc}
 8003c68:	20000640 	.word	0x20000640
 8003c6c:	3ff00000 	.word	0x3ff00000
 8003c70:	40440000 	.word	0x40440000
 8003c74:	20000648 	.word	0x20000648
 8003c78:	20000678 	.word	0x20000678
 8003c7c:	20000058 	.word	0x20000058

08003c80 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8003c80:	b5b0      	push	{r4, r5, r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8003c86:	f7ff fd1b 	bl	80036c0 <MPU6050_Read_Gyro_X>
 8003c8a:	ee10 3a10 	vmov	r3, s0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc72 	bl	8000578 <__aeabi_f2d>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 8003c9c:	4b43      	ldr	r3, [pc, #268]	; (8003dac <MPU6050_Kalman_Gyro_X+0x12c>)
 8003c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003ca8:	f7fc fcbe 	bl	8000628 <__aeabi_dmul>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	493d      	ldr	r1, [pc, #244]	; (8003db0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003cba:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <MPU6050_Kalman_Gyro_X+0x12c>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fcb2 	bl	8000628 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003cd2:	f7fc fca9 	bl	8000628 <__aeabi_dmul>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <MPU6050_Kalman_Gyro_X+0x134>)
 8003ce4:	f7fc faea 	bl	80002bc <__adddf3>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4620      	mov	r0, r4
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fc fdc4 	bl	800087c <__aeabi_ddiv>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	492f      	ldr	r1, [pc, #188]	; (8003db8 <MPU6050_Kalman_Gyro_X+0x138>)
 8003cfa:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 8003cfe:	f04f 0000 	mov.w	r0, #0
 8003d02:	492b      	ldr	r1, [pc, #172]	; (8003db0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003d04:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	f7fc fc8d 	bl	8000628 <__aeabi_dmul>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d16:	f7fc facf 	bl	80002b8 <__aeabi_dsub>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <MPU6050_Kalman_Gyro_X+0x138>)
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f7fc fc7e 	bl	8000628 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f7fc fabf 	bl	80002bc <__adddf3>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	491e      	ldr	r1, [pc, #120]	; (8003dbc <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <MPU6050_Kalman_Gyro_X+0x138>)
 8003d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003d54:	f7fc fc68 	bl	8000628 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	f04f 0000 	mov.w	r0, #0
 8003d60:	4913      	ldr	r1, [pc, #76]	; (8003db0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003d62:	f7fc faa9 	bl	80002b8 <__aeabi_dsub>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <MPU6050_Kalman_Gyro_X+0x12c>)
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f7fc fc58 	bl	8000628 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <MPU6050_Kalman_Gyro_X+0x140>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f7fc fa99 	bl	80002bc <__adddf3>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4907      	ldr	r1, [pc, #28]	; (8003dac <MPU6050_Kalman_Gyro_X+0x12c>)
 8003d90:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003da2:	eef0 0a67 	vmov.f32	s1, s15
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bdb0      	pop	{r4, r5, r7, pc}
 8003dac:	20000650 	.word	0x20000650
 8003db0:	3ff00000 	.word	0x3ff00000
 8003db4:	40440000 	.word	0x40440000
 8003db8:	20000658 	.word	0x20000658
 8003dbc:	20000680 	.word	0x20000680
 8003dc0:	20000060 	.word	0x20000060

08003dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_MspInit+0x4c>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_MspInit+0x4c>)
 8003dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_MspInit+0x4c>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_MspInit+0x4c>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <HAL_MspInit+0x4c>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_MspInit+0x4c>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_I2C_MspInit+0x84>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d12b      	bne.n	8003e8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <HAL_I2C_MspInit+0x88>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_I2C_MspInit+0x88>)
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	6313      	str	r3, [r2, #48]	; 0x30
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <HAL_I2C_MspInit+0x88>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e52:	23c0      	movs	r3, #192	; 0xc0
 8003e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e56:	2312      	movs	r3, #18
 8003e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e62:	2304      	movs	r3, #4
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <HAL_I2C_MspInit+0x8c>)
 8003e6e:	f000 fc31 	bl	80046d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_I2C_MspInit+0x88>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_I2C_MspInit+0x88>)
 8003e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_I2C_MspInit+0x88>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40005400 	.word	0x40005400
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020400 	.word	0x40020400

08003ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <HAL_TIM_Base_MspInit+0x3c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10d      	bne.n	8003ed2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_TIM_Base_MspInit+0x40>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_TIM_Base_MspInit+0x40>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_TIM_Base_MspInit+0x40>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a36      	ldr	r2, [pc, #216]	; (8003fe0 <HAL_UART_MspInit+0xf8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d12c      	bne.n	8003f64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	4b2e      	ldr	r3, [pc, #184]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f42:	230c      	movs	r3, #12
 8003f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f52:	2307      	movs	r3, #7
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f56:	f107 031c 	add.w	r3, r7, #28
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4822      	ldr	r0, [pc, #136]	; (8003fe8 <HAL_UART_MspInit+0x100>)
 8003f5e:	f000 fbb9 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f62:	e038      	b.n	8003fd6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a20      	ldr	r2, [pc, #128]	; (8003fec <HAL_UART_MspInit+0x104>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d133      	bne.n	8003fd6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f78:	f043 0320 	orr.w	r3, r3, #32
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_UART_MspInit+0xfc>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fa6:	23c0      	movs	r3, #192	; 0xc0
 8003fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fba:	f107 031c 	add.w	r3, r7, #28
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	480b      	ldr	r0, [pc, #44]	; (8003ff0 <HAL_UART_MspInit+0x108>)
 8003fc2:	f000 fb87 	bl	80046d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2047      	movs	r0, #71	; 0x47
 8003fcc:	f000 fab9 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003fd0:	2047      	movs	r0, #71	; 0x47
 8003fd2:	f000 fad2 	bl	800457a <HAL_NVIC_EnableIRQ>
}
 8003fd6:	bf00      	nop
 8003fd8:	3730      	adds	r7, #48	; 0x30
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	40011400 	.word	0x40011400
 8003ff0:	40020800 	.word	0x40020800

08003ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <NMI_Handler+0x4>

08003ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffe:	e7fe      	b.n	8003ffe <HardFault_Handler+0x4>

08004000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <MemManage_Handler+0x4>

08004006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400a:	e7fe      	b.n	800400a <BusFault_Handler+0x4>

0800400c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <UsageFault_Handler+0x4>

08004012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004040:	f000 f960 	bl	8004304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}

08004048 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <USART6_IRQHandler+0x10>)
 800404e:	f002 fded 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200003f8 	.word	0x200003f8

0800405c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return 1;
 8004060:	2301      	movs	r3, #1
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_kill>:

int _kill(int pid, int sig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004076:	f004 fcc1 	bl	80089fc <__errno>
 800407a:	4603      	mov	r3, r0
 800407c:	2216      	movs	r2, #22
 800407e:	601a      	str	r2, [r3, #0]
  return -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_exit>:

void _exit (int status)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004094:	f04f 31ff 	mov.w	r1, #4294967295
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ffe7 	bl	800406c <_kill>
  while (1) {}    /* Make sure we hang here */
 800409e:	e7fe      	b.n	800409e <_exit+0x12>

080040a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e00a      	b.n	80040c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040b2:	f3af 8000 	nop.w
 80040b6:	4601      	mov	r1, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	60ba      	str	r2, [r7, #8]
 80040be:	b2ca      	uxtb	r2, r1
 80040c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	3301      	adds	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	dbf0      	blt.n	80040b2 <_read+0x12>
  }

  return len;
 80040d0:	687b      	ldr	r3, [r7, #4]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e009      	b.n	8004100 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	60ba      	str	r2, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	dbf1      	blt.n	80040ec <_write+0x12>
  }
  return len;
 8004108:	687b      	ldr	r3, [r7, #4]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_close>:

int _close(int file)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800413a:	605a      	str	r2, [r3, #4]
  return 0;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_isatty>:

int _isatty(int file)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004152:	2301      	movs	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <_sbrk+0x5c>)
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <_sbrk+0x60>)
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <_sbrk+0x64>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <_sbrk+0x64>)
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <_sbrk+0x68>)
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <_sbrk+0x64>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d207      	bcs.n	80041bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041ac:	f004 fc26 	bl	80089fc <__errno>
 80041b0:	4603      	mov	r3, r0
 80041b2:	220c      	movs	r2, #12
 80041b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	e009      	b.n	80041d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <_sbrk+0x64>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <_sbrk+0x64>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <_sbrk+0x64>)
 80041cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20020000 	.word	0x20020000
 80041dc:	00000400 	.word	0x00000400
 80041e0:	20000688 	.word	0x20000688
 80041e4:	200007e0 	.word	0x200007e0

080041e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <SystemInit+0x20>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <SystemInit+0x20>)
 80041f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800420c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004210:	480d      	ldr	r0, [pc, #52]	; (8004248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004212:	490e      	ldr	r1, [pc, #56]	; (800424c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004214:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004218:	e002      	b.n	8004220 <LoopCopyDataInit>

0800421a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800421a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800421c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800421e:	3304      	adds	r3, #4

08004220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004224:	d3f9      	bcc.n	800421a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004226:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004228:	4c0b      	ldr	r4, [pc, #44]	; (8004258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800422a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800422c:	e001      	b.n	8004232 <LoopFillZerobss>

0800422e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800422e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004230:	3204      	adds	r2, #4

08004232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004234:	d3fb      	bcc.n	800422e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004236:	f7ff ffd7 	bl	80041e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800423a:	f004 fbe5 	bl	8008a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800423e:	f7fe fe3b 	bl	8002eb8 <main>
  bx  lr    
 8004242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800424c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004250:	0800bfb8 	.word	0x0800bfb8
  ldr r2, =_sbss
 8004254:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004258:	200007dc 	.word	0x200007dc

0800425c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800425c:	e7fe      	b.n	800425c <ADC_IRQHandler>
	...

08004260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_Init+0x40>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <HAL_Init+0x40>)
 800426a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800426e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_Init+0x40>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <HAL_Init+0x40>)
 8004276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800427a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800427c:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_Init+0x40>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <HAL_Init+0x40>)
 8004282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004288:	2003      	movs	r0, #3
 800428a:	f000 f94f 	bl	800452c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800428e:	200f      	movs	r0, #15
 8004290:	f000 f808 	bl	80042a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004294:	f7ff fd96 	bl	8003dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00

080042a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042ac:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_InitTick+0x54>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_InitTick+0x58>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f967 	bl	8004596 <HAL_SYSTICK_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e00e      	b.n	80042f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d80a      	bhi.n	80042ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042d8:	2200      	movs	r2, #0
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	f000 f92f 	bl	8004542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042e4:	4a06      	ldr	r2, [pc, #24]	; (8004300 <HAL_InitTick+0x5c>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000068 	.word	0x20000068
 80042fc:	20000070 	.word	0x20000070
 8004300:	2000006c 	.word	0x2000006c

08004304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_IncTick+0x20>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_IncTick+0x24>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4413      	add	r3, r2
 8004314:	4a04      	ldr	r2, [pc, #16]	; (8004328 <HAL_IncTick+0x24>)
 8004316:	6013      	str	r3, [r2, #0]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000070 	.word	0x20000070
 8004328:	2000068c 	.word	0x2000068c

0800432c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return uwTick;
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <HAL_GetTick+0x14>)
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	2000068c 	.word	0x2000068c

08004344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800434c:	f7ff ffee 	bl	800432c <HAL_GetTick>
 8004350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d005      	beq.n	800436a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <HAL_Delay+0x44>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800436a:	bf00      	nop
 800436c:	f7ff ffde 	bl	800432c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	429a      	cmp	r2, r3
 800437a:	d8f7      	bhi.n	800436c <HAL_Delay+0x28>
  {
  }
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000070 	.word	0x20000070

0800438c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <__NVIC_SetPriorityGrouping+0x44>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043a8:	4013      	ands	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043be:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <__NVIC_SetPriorityGrouping+0x44>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	60d3      	str	r3, [r2, #12]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <__NVIC_GetPriorityGrouping+0x18>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 0307 	and.w	r3, r3, #7
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	db0b      	blt.n	800441a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	f003 021f 	and.w	r2, r3, #31
 8004408:	4907      	ldr	r1, [pc, #28]	; (8004428 <__NVIC_EnableIRQ+0x38>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2001      	movs	r0, #1
 8004412:	fa00 f202 	lsl.w	r2, r0, r2
 8004416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	e000e100 	.word	0xe000e100

0800442c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443c:	2b00      	cmp	r3, #0
 800443e:	db0a      	blt.n	8004456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	490c      	ldr	r1, [pc, #48]	; (8004478 <__NVIC_SetPriority+0x4c>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	440b      	add	r3, r1
 8004450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004454:	e00a      	b.n	800446c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4908      	ldr	r1, [pc, #32]	; (800447c <__NVIC_SetPriority+0x50>)
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	3b04      	subs	r3, #4
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	440b      	add	r3, r1
 800446a:	761a      	strb	r2, [r3, #24]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000e100 	.word	0xe000e100
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f1c3 0307 	rsb	r3, r3, #7
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf28      	it	cs
 800449e:	2304      	movcs	r3, #4
 80044a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d902      	bls.n	80044b0 <NVIC_EncodePriority+0x30>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3b03      	subs	r3, #3
 80044ae:	e000      	b.n	80044b2 <NVIC_EncodePriority+0x32>
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43da      	mvns	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	401a      	ands	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044c8:	f04f 31ff 	mov.w	r1, #4294967295
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	43d9      	mvns	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d8:	4313      	orrs	r3, r2
         );
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044f8:	d301      	bcc.n	80044fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00f      	b.n	800451e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <SysTick_Config+0x40>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004506:	210f      	movs	r1, #15
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	f7ff ff8e 	bl	800442c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <SysTick_Config+0x40>)
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004516:	4b04      	ldr	r3, [pc, #16]	; (8004528 <SysTick_Config+0x40>)
 8004518:	2207      	movs	r2, #7
 800451a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000e010 	.word	0xe000e010

0800452c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff29 	bl	800438c <__NVIC_SetPriorityGrouping>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004554:	f7ff ff3e 	bl	80043d4 <__NVIC_GetPriorityGrouping>
 8004558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ff8e 	bl	8004480 <NVIC_EncodePriority>
 8004564:	4602      	mov	r2, r0
 8004566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff5d 	bl	800442c <__NVIC_SetPriority>
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	4603      	mov	r3, r0
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff31 	bl	80043f0 <__NVIC_EnableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ffa2 	bl	80044e8 <SysTick_Config>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045bc:	f7ff feb6 	bl	800432c <HAL_GetTick>
 80045c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d008      	beq.n	80045e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e052      	b.n	8004686 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0216 	bic.w	r2, r2, #22
 80045ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <HAL_DMA_Abort+0x62>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0208 	bic.w	r2, r2, #8
 800461e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004630:	e013      	b.n	800465a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004632:	f7ff fe7b 	bl	800432c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b05      	cmp	r3, #5
 800463e:	d90c      	bls.n	800465a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e015      	b.n	8004686 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e4      	bne.n	8004632 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	223f      	movs	r2, #63	; 0x3f
 800466e:	409a      	lsls	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d004      	beq.n	80046ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e00c      	b.n	80046c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2205      	movs	r2, #5
 80046b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e165      	b.n	80049bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f0:	2201      	movs	r2, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	f040 8154 	bne.w	80049b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d005      	beq.n	8004726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004722:	2b02      	cmp	r3, #2
 8004724:	d130      	bne.n	8004788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2203      	movs	r2, #3
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800475c:	2201      	movs	r2, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 0201 	and.w	r2, r3, #1
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b03      	cmp	r3, #3
 8004792:	d017      	beq.n	80047c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d123      	bne.n	8004818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	220f      	movs	r2, #15
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	08da      	lsrs	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3208      	adds	r2, #8
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	2203      	movs	r2, #3
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0203 	and.w	r2, r3, #3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80ae 	beq.w	80049b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	4b5d      	ldr	r3, [pc, #372]	; (80049d4 <HAL_GPIO_Init+0x300>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <HAL_GPIO_Init+0x300>)
 8004864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b5a      	ldr	r3, [pc, #360]	; (80049d4 <HAL_GPIO_Init+0x300>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004876:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_GPIO_Init+0x304>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4f      	ldr	r2, [pc, #316]	; (80049dc <HAL_GPIO_Init+0x308>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d025      	beq.n	80048ee <HAL_GPIO_Init+0x21a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4e      	ldr	r2, [pc, #312]	; (80049e0 <HAL_GPIO_Init+0x30c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01f      	beq.n	80048ea <HAL_GPIO_Init+0x216>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4d      	ldr	r2, [pc, #308]	; (80049e4 <HAL_GPIO_Init+0x310>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d019      	beq.n	80048e6 <HAL_GPIO_Init+0x212>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4c      	ldr	r2, [pc, #304]	; (80049e8 <HAL_GPIO_Init+0x314>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_GPIO_Init+0x20e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4b      	ldr	r2, [pc, #300]	; (80049ec <HAL_GPIO_Init+0x318>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00d      	beq.n	80048de <HAL_GPIO_Init+0x20a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4a      	ldr	r2, [pc, #296]	; (80049f0 <HAL_GPIO_Init+0x31c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d007      	beq.n	80048da <HAL_GPIO_Init+0x206>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a49      	ldr	r2, [pc, #292]	; (80049f4 <HAL_GPIO_Init+0x320>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_GPIO_Init+0x202>
 80048d2:	2306      	movs	r3, #6
 80048d4:	e00c      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048d6:	2307      	movs	r3, #7
 80048d8:	e00a      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048da:	2305      	movs	r3, #5
 80048dc:	e008      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048de:	2304      	movs	r3, #4
 80048e0:	e006      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048e2:	2303      	movs	r3, #3
 80048e4:	e004      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e002      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <HAL_GPIO_Init+0x21c>
 80048ee:	2300      	movs	r3, #0
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	f002 0203 	and.w	r2, r2, #3
 80048f6:	0092      	lsls	r2, r2, #2
 80048f8:	4093      	lsls	r3, r2
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004900:	4935      	ldr	r1, [pc, #212]	; (80049d8 <HAL_GPIO_Init+0x304>)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	089b      	lsrs	r3, r3, #2
 8004906:	3302      	adds	r3, #2
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800490e:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004932:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_GPIO_Init+0x324>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800495c:	4a26      	ldr	r2, [pc, #152]	; (80049f8 <HAL_GPIO_Init+0x324>)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004962:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004986:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <HAL_GPIO_Init+0x324>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	43db      	mvns	r3, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049b0:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <HAL_GPIO_Init+0x324>)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3301      	adds	r3, #1
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2b0f      	cmp	r3, #15
 80049c0:	f67f ae96 	bls.w	80046f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40020000 	.word	0x40020000
 80049e0:	40020400 	.word	0x40020400
 80049e4:	40020800 	.word	0x40020800
 80049e8:	40020c00 	.word	0x40020c00
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40021400 	.word	0x40021400
 80049f4:	40021800 	.word	0x40021800
 80049f8:	40013c00 	.word	0x40013c00

080049fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a0c:	787b      	ldrb	r3, [r7, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a18:	e003      	b.n	8004a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a1a:	887b      	ldrh	r3, [r7, #2]
 8004a1c:	041a      	lsls	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	619a      	str	r2, [r3, #24]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e12b      	b.n	8004c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff f9dc 	bl	8003e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a94:	f001 f87e 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 8004a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4a81      	ldr	r2, [pc, #516]	; (8004ca4 <HAL_I2C_Init+0x274>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d807      	bhi.n	8004ab4 <HAL_I2C_Init+0x84>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a80      	ldr	r2, [pc, #512]	; (8004ca8 <HAL_I2C_Init+0x278>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e006      	b.n	8004ac2 <HAL_I2C_Init+0x92>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a7d      	ldr	r2, [pc, #500]	; (8004cac <HAL_I2C_Init+0x27c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0e7      	b.n	8004c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a78      	ldr	r2, [pc, #480]	; (8004cb0 <HAL_I2C_Init+0x280>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0c9b      	lsrs	r3, r3, #18
 8004ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a6a      	ldr	r2, [pc, #424]	; (8004ca4 <HAL_I2C_Init+0x274>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d802      	bhi.n	8004b04 <HAL_I2C_Init+0xd4>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	3301      	adds	r3, #1
 8004b02:	e009      	b.n	8004b18 <HAL_I2C_Init+0xe8>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	4a69      	ldr	r2, [pc, #420]	; (8004cb4 <HAL_I2C_Init+0x284>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	3301      	adds	r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	495c      	ldr	r1, [pc, #368]	; (8004ca4 <HAL_I2C_Init+0x274>)
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d819      	bhi.n	8004b6c <HAL_I2C_Init+0x13c>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1e59      	subs	r1, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b4c:	400b      	ands	r3, r1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_I2C_Init+0x138>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1e59      	subs	r1, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b66:	e051      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e04f      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d111      	bne.n	8004b98 <HAL_I2C_Init+0x168>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e58      	subs	r0, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	440b      	add	r3, r1
 8004b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b86:	3301      	adds	r3, #1
 8004b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e012      	b.n	8004bbe <HAL_I2C_Init+0x18e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e58      	subs	r0, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	0099      	lsls	r1, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Init+0x196>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e022      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10e      	bne.n	8004bec <HAL_I2C_Init+0x1bc>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e58      	subs	r0, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	440b      	add	r3, r1
 8004bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be0:	3301      	adds	r3, #1
 8004be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	e00f      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1e58      	subs	r0, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	0099      	lsls	r1, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	6809      	ldr	r1, [r1, #0]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6911      	ldr	r1, [r2, #16]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68d2      	ldr	r2, [r2, #12]
 8004c46:	4311      	orrs	r1, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	000186a0 	.word	0x000186a0
 8004ca8:	001e847f 	.word	0x001e847f
 8004cac:	003d08ff 	.word	0x003d08ff
 8004cb0:	431bde83 	.word	0x431bde83
 8004cb4:	10624dd3 	.word	0x10624dd3

08004cb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	817b      	strh	r3, [r7, #10]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	813b      	strh	r3, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cd2:	f7ff fb2b 	bl	800432c <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	f040 80d9 	bne.w	8004e98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	2319      	movs	r3, #25
 8004cec:	2201      	movs	r2, #1
 8004cee:	496d      	ldr	r1, [pc, #436]	; (8004ea4 <HAL_I2C_Mem_Write+0x1ec>)
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fc7f 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0cc      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_I2C_Mem_Write+0x56>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0c5      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1e2>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d007      	beq.n	8004d34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2221      	movs	r2, #33	; 0x21
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2240      	movs	r2, #64	; 0x40
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a4d      	ldr	r2, [pc, #308]	; (8004ea8 <HAL_I2C_Mem_Write+0x1f0>)
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d76:	88f8      	ldrh	r0, [r7, #6]
 8004d78:	893a      	ldrh	r2, [r7, #8]
 8004d7a:	8979      	ldrh	r1, [r7, #10]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	4603      	mov	r3, r0
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fab6 	bl	80052f8 <I2C_RequestMemoryWrite>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d052      	beq.n	8004e38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e081      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fd00 	bl	80057a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d107      	bne.n	8004dbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e06b      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d11b      	bne.n	8004e38 <HAL_I2C_Mem_Write+0x180>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d017      	beq.n	8004e38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1aa      	bne.n	8004d96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fcec 	bl	8005822 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d107      	bne.n	8004e68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e016      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	00100002 	.word	0x00100002
 8004ea8:	ffff0000 	.word	0xffff0000

08004eac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	817b      	strh	r3, [r7, #10]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	813b      	strh	r3, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ec6:	f7ff fa31 	bl	800432c <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f040 8208 	bne.w	80052ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2319      	movs	r3, #25
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	497b      	ldr	r1, [pc, #492]	; (80050d0 <HAL_I2C_Mem_Read+0x224>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fb85 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e1fb      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_I2C_Mem_Read+0x56>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e1f4      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d007      	beq.n	8004f28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2222      	movs	r2, #34	; 0x22
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2240      	movs	r2, #64	; 0x40
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a5b      	ldr	r2, [pc, #364]	; (80050d4 <HAL_I2C_Mem_Read+0x228>)
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f6a:	88f8      	ldrh	r0, [r7, #6]
 8004f6c:	893a      	ldrh	r2, [r7, #8]
 8004f6e:	8979      	ldrh	r1, [r7, #10]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fa52 	bl	8005424 <I2C_RequestMemoryRead>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e1b0      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d113      	bne.n	8004fba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f92:	2300      	movs	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e184      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d11b      	bne.n	8004ffa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e164      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d11b      	bne.n	800503a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005010:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	e144      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005050:	e138      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	2b03      	cmp	r3, #3
 8005058:	f200 80f1 	bhi.w	800523e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	2b01      	cmp	r3, #1
 8005062:	d123      	bne.n	80050ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fc1b 	bl	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e139      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050aa:	e10b      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d14e      	bne.n	8005152 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	2200      	movs	r2, #0
 80050bc:	4906      	ldr	r1, [pc, #24]	; (80050d8 <HAL_I2C_Mem_Read+0x22c>)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fa98 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e10e      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
 80050ce:	bf00      	nop
 80050d0:	00100002 	.word	0x00100002
 80050d4:	ffff0000 	.word	0xffff0000
 80050d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005150:	e0b8      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	2200      	movs	r2, #0
 800515a:	4966      	ldr	r1, [pc, #408]	; (80052f4 <HAL_I2C_Mem_Read+0x448>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fa49 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0bf      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	2200      	movs	r2, #0
 80051b6:	494f      	ldr	r1, [pc, #316]	; (80052f4 <HAL_I2C_Mem_Read+0x448>)
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fa1b 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e091      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800523c:	e042      	b.n	80052c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fb2e 	bl	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e04c      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d118      	bne.n	80052c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f47f aec2 	bne.w	8005052 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3728      	adds	r7, #40	; 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	00010004 	.word	0x00010004

080052f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	460b      	mov	r3, r1
 800530c:	813b      	strh	r3, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2200      	movs	r2, #0
 800532a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f960 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d103      	bne.n	8005352 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e05f      	b.n	8005416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	492d      	ldr	r1, [pc, #180]	; (8005420 <I2C_RequestMemoryWrite+0x128>)
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f998 	bl	80056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e04c      	b.n	8005416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa02 	bl	80057a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e02b      	b.n	8005416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c4:	893b      	ldrh	r3, [r7, #8]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	611a      	str	r2, [r3, #16]
 80053ce:	e021      	b.n	8005414 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053d0:	893b      	ldrh	r3, [r7, #8]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	6a39      	ldr	r1, [r7, #32]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f9dc 	bl	80057a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d107      	bne.n	8005406 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e005      	b.n	8005416 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800540a:	893b      	ldrh	r3, [r7, #8]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	00010002 	.word	0x00010002

08005424 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4603      	mov	r3, r0
 8005434:	817b      	strh	r3, [r7, #10]
 8005436:	460b      	mov	r3, r1
 8005438:	813b      	strh	r3, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2200      	movs	r2, #0
 8005466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f8c2 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	d103      	bne.n	800548e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0aa      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005492:	897b      	ldrh	r3, [r7, #10]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	4952      	ldr	r1, [pc, #328]	; (80055f0 <I2C_RequestMemoryRead+0x1cc>)
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f8fa 	bl	80056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e097      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	6a39      	ldr	r1, [r7, #32]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f964 	bl	80057a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e076      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005500:	893b      	ldrh	r3, [r7, #8]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	611a      	str	r2, [r3, #16]
 800550a:	e021      	b.n	8005550 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800550c:	893b      	ldrh	r3, [r7, #8]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	b29b      	uxth	r3, r3
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	6a39      	ldr	r1, [r7, #32]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f93e 	bl	80057a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b04      	cmp	r3, #4
 8005530:	d107      	bne.n	8005542 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e050      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005546:	893b      	ldrh	r3, [r7, #8]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	6a39      	ldr	r1, [r7, #32]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f923 	bl	80057a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	2b04      	cmp	r3, #4
 8005566:	d107      	bne.n	8005578 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005576:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e035      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2200      	movs	r2, #0
 8005594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f82b 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b2:	d103      	bne.n	80055bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e013      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055c0:	897b      	ldrh	r3, [r7, #10]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	6a3a      	ldr	r2, [r7, #32]
 80055d4:	4906      	ldr	r1, [pc, #24]	; (80055f0 <I2C_RequestMemoryRead+0x1cc>)
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f863 	bl	80056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	00010002 	.word	0x00010002

080055f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005604:	e025      	b.n	8005652 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d021      	beq.n	8005652 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fe fe8d 	bl	800432c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e023      	b.n	800569a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10d      	bne.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x84>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	e00c      	b.n	8005692 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d0b6      	beq.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056b0:	e051      	b.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c0:	d123      	bne.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0204 	orr.w	r2, r3, #4
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e046      	b.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d021      	beq.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fe fe0b 	bl	800432c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d116      	bne.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f043 0220 	orr.w	r2, r3, #32
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e020      	b.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10c      	bne.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	43da      	mvns	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	e00b      	b.n	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	43da      	mvns	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d18d      	bne.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ac:	e02d      	b.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f8ce 	bl	8005950 <I2C_IsAcknowledgeFailed>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e02d      	b.n	800581a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d021      	beq.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c6:	f7fe fdb1 	bl	800432c <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d116      	bne.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f043 0220 	orr.w	r2, r3, #32
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e007      	b.n	800581a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d1ca      	bne.n	80057ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800582e:	e02d      	b.n	800588c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f88d 	bl	8005950 <I2C_IsAcknowledgeFailed>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e02d      	b.n	800589c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d021      	beq.n	800588c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005848:	f7fe fd70 	bl	800432c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	d302      	bcc.n	800585e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e007      	b.n	800589c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b04      	cmp	r3, #4
 8005898:	d1ca      	bne.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b0:	e042      	b.n	8005938 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d119      	bne.n	80058f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0210 	mvn.w	r2, #16
 80058c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e029      	b.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f4:	f7fe fd1a 	bl	800432c <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d302      	bcc.n	800590a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d116      	bne.n	8005938 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e007      	b.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d1b5      	bne.n	80058b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005966:	d11b      	bne.n	80059a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005970:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0cc      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d90c      	bls.n	80059ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b65      	ldr	r3, [pc, #404]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b63      	ldr	r3, [pc, #396]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0b8      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d020      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a04:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a58      	ldr	r2, [pc, #352]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a1c:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a52      	ldr	r2, [pc, #328]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a28:	4b50      	ldr	r3, [pc, #320]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	494d      	ldr	r1, [pc, #308]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d044      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	4b47      	ldr	r3, [pc, #284]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d119      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e07f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e06f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e067      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4934      	ldr	r1, [pc, #208]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa0:	f7fe fc44 	bl	800432c <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa8:	f7fe fc40 	bl	800432c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e04f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 020c 	and.w	r2, r3, #12
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d1eb      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d20c      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e032      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4916      	ldr	r1, [pc, #88]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	490e      	ldr	r1, [pc, #56]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b36:	f000 f855 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	490a      	ldr	r1, [pc, #40]	; (8005b70 <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	5ccb      	ldrb	r3, [r1, r3]
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fba4 	bl	80042a4 <HAL_InitTick>

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40023c00 	.word	0x40023c00
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	0800bb30 	.word	0x0800bb30
 8005b74:	20000068 	.word	0x20000068
 8005b78:	2000006c 	.word	0x2000006c

08005b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000068 	.word	0x20000068

08005b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b98:	f7ff fff0 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	0a9b      	lsrs	r3, r3, #10
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	4903      	ldr	r1, [pc, #12]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005baa:	5ccb      	ldrb	r3, [r1, r3]
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	0800bb40 	.word	0x0800bb40

08005bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bc0:	f7ff ffdc 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	0b5b      	lsrs	r3, r3, #13
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4903      	ldr	r1, [pc, #12]	; (8005be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	0800bb40 	.word	0x0800bb40

08005be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b0a6      	sub	sp, #152	; 0x98
 8005bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c0a:	4bc8      	ldr	r3, [pc, #800]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	f200 817e 	bhi.w	8005f14 <HAL_RCC_GetSysClockFreq+0x330>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c55 	.word	0x08005c55
 8005c24:	08005f15 	.word	0x08005f15
 8005c28:	08005f15 	.word	0x08005f15
 8005c2c:	08005f15 	.word	0x08005f15
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005f15 	.word	0x08005f15
 8005c38:	08005f15 	.word	0x08005f15
 8005c3c:	08005f15 	.word	0x08005f15
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005f15 	.word	0x08005f15
 8005c48:	08005f15 	.word	0x08005f15
 8005c4c:	08005f15 	.word	0x08005f15
 8005c50:	08005dcf 	.word	0x08005dcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c54:	4bb6      	ldr	r3, [pc, #728]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005c5a:	e15f      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c5c:	4bb5      	ldr	r3, [pc, #724]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005c62:	e15b      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c64:	4bb1      	ldr	r3, [pc, #708]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c70:	4bae      	ldr	r3, [pc, #696]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7c:	4bab      	ldr	r3, [pc, #684]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	2200      	movs	r2, #0
 8005c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c90:	2300      	movs	r3, #0
 8005c92:	667b      	str	r3, [r7, #100]	; 0x64
 8005c94:	4ba7      	ldr	r3, [pc, #668]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c96:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005c9a:	462a      	mov	r2, r5
 8005c9c:	fb03 f202 	mul.w	r2, r3, r2
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	4413      	add	r3, r2
 8005caa:	4aa2      	ldr	r2, [pc, #648]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x350>)
 8005cac:	4621      	mov	r1, r4
 8005cae:	fba1 1202 	umull	r1, r2, r1, r2
 8005cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cb4:	460a      	mov	r2, r1
 8005cb6:	67ba      	str	r2, [r7, #120]	; 0x78
 8005cb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005cba:	4413      	add	r3, r2
 8005cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005cc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ccc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005cd0:	f7fb f842 	bl	8000d58 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4613      	mov	r3, r2
 8005cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cde:	e064      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce0:	4b92      	ldr	r3, [pc, #584]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	099b      	lsrs	r3, r3, #6
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	653b      	str	r3, [r7, #80]	; 0x50
 8005cea:	657a      	str	r2, [r7, #84]	; 0x54
 8005cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	462b      	mov	r3, r5
 8005d00:	f04f 0000 	mov.w	r0, #0
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	0159      	lsls	r1, r3, #5
 8005d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d0e:	0150      	lsls	r0, r2, #5
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4621      	mov	r1, r4
 8005d16:	1a51      	subs	r1, r2, r1
 8005d18:	6139      	str	r1, [r7, #16]
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	eb63 0301 	sbc.w	r3, r3, r1
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d2e:	4659      	mov	r1, fp
 8005d30:	018b      	lsls	r3, r1, #6
 8005d32:	4651      	mov	r1, sl
 8005d34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d38:	4651      	mov	r1, sl
 8005d3a:	018a      	lsls	r2, r1, #6
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	ebb2 0801 	subs.w	r8, r2, r1
 8005d42:	4659      	mov	r1, fp
 8005d44:	eb63 0901 	sbc.w	r9, r3, r1
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d5c:	4690      	mov	r8, r2
 8005d5e:	4699      	mov	r9, r3
 8005d60:	4623      	mov	r3, r4
 8005d62:	eb18 0303 	adds.w	r3, r8, r3
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	462b      	mov	r3, r5
 8005d6a:	eb49 0303 	adc.w	r3, r9, r3
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	028b      	lsls	r3, r1, #10
 8005d80:	4621      	mov	r1, r4
 8005d82:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d86:	4621      	mov	r1, r4
 8005d88:	028a      	lsls	r2, r1, #10
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d92:	2200      	movs	r2, #0
 8005d94:	643b      	str	r3, [r7, #64]	; 0x40
 8005d96:	647a      	str	r2, [r7, #68]	; 0x44
 8005d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d9c:	f7fa ffdc 	bl	8000d58 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4613      	mov	r3, r2
 8005da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005daa:	4b60      	ldr	r3, [pc, #384]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	3301      	adds	r3, #1
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005dbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005dcc:	e0a6      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dce:	4b57      	ldr	r3, [pc, #348]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dda:	4b54      	ldr	r3, [pc, #336]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02a      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de6:	4b51      	ldr	r3, [pc, #324]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	099b      	lsrs	r3, r3, #6
 8005dec:	2200      	movs	r2, #0
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4b4e      	ldr	r3, [pc, #312]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x350>)
 8005dfc:	fb03 f201 	mul.w	r2, r3, r1
 8005e00:	2300      	movs	r3, #0
 8005e02:	fb00 f303 	mul.w	r3, r0, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	4a4a      	ldr	r2, [pc, #296]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x350>)
 8005e0a:	fba0 1202 	umull	r1, r2, r0, r2
 8005e0e:	677a      	str	r2, [r7, #116]	; 0x74
 8005e10:	460a      	mov	r2, r1
 8005e12:	673a      	str	r2, [r7, #112]	; 0x70
 8005e14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005e16:	4413      	add	r3, r2
 8005e18:	677b      	str	r3, [r7, #116]	; 0x74
 8005e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e1e:	2200      	movs	r2, #0
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30
 8005e22:	637a      	str	r2, [r7, #52]	; 0x34
 8005e24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005e2c:	f7fa ff94 	bl	8000d58 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4613      	mov	r3, r2
 8005e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e3a:	e05b      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	2200      	movs	r2, #0
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	2300      	movs	r3, #0
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e58:	4642      	mov	r2, r8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	f04f 0000 	mov.w	r0, #0
 8005e60:	f04f 0100 	mov.w	r1, #0
 8005e64:	0159      	lsls	r1, r3, #5
 8005e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e6a:	0150      	lsls	r0, r2, #5
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4641      	mov	r1, r8
 8005e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e76:	4649      	mov	r1, r9
 8005e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e90:	ebb2 040a 	subs.w	r4, r2, sl
 8005e94:	eb63 050b 	sbc.w	r5, r3, fp
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	00eb      	lsls	r3, r5, #3
 8005ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ea6:	00e2      	lsls	r2, r4, #3
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	18e3      	adds	r3, r4, r3
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	eb45 0303 	adc.w	r3, r5, r3
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	028b      	lsls	r3, r1, #10
 8005eca:	4621      	mov	r1, r4
 8005ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	028a      	lsls	r2, r1, #10
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005edc:	2200      	movs	r2, #0
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	61fa      	str	r2, [r7, #28]
 8005ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee6:	f7fa ff37 	bl	8000d58 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4613      	mov	r3, r2
 8005ef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x348>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	0f1b      	lsrs	r3, r3, #28
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005f12:	e003      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005f1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3798      	adds	r7, #152	; 0x98
 8005f24:	46bd      	mov	sp, r7
 8005f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	00f42400 	.word	0x00f42400
 8005f34:	017d7840 	.word	0x017d7840

08005f38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e28d      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8083 	beq.w	800605e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f58:	4b94      	ldr	r3, [pc, #592]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 030c 	and.w	r3, r3, #12
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d019      	beq.n	8005f98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f64:	4b91      	ldr	r3, [pc, #580]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f70:	4b8e      	ldr	r3, [pc, #568]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f7c:	d00c      	beq.n	8005f98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f7e:	4b8b      	ldr	r3, [pc, #556]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f86:	2b0c      	cmp	r3, #12
 8005f88:	d112      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f8a:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f96:	d10b      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	4b84      	ldr	r3, [pc, #528]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05b      	beq.n	800605c <HAL_RCC_OscConfig+0x124>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d157      	bne.n	800605c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e25a      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb8:	d106      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x90>
 8005fba:	4b7c      	ldr	r3, [pc, #496]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a7b      	ldr	r2, [pc, #492]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e01d      	b.n	8006004 <HAL_RCC_OscConfig+0xcc>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCC_OscConfig+0xb4>
 8005fd2:	4b76      	ldr	r3, [pc, #472]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a75      	ldr	r2, [pc, #468]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b73      	ldr	r3, [pc, #460]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a72      	ldr	r2, [pc, #456]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e00b      	b.n	8006004 <HAL_RCC_OscConfig+0xcc>
 8005fec:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a6e      	ldr	r2, [pc, #440]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	4b6c      	ldr	r3, [pc, #432]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a6b      	ldr	r2, [pc, #428]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8005ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d013      	beq.n	8006034 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fe f98e 	bl	800432c <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006014:	f7fe f98a 	bl	800432c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e21f      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	4b61      	ldr	r3, [pc, #388]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0xdc>
 8006032:	e014      	b.n	800605e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fe f97a 	bl	800432c <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603c:	f7fe f976 	bl	800432c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e20b      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604e:	4b57      	ldr	r3, [pc, #348]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f0      	bne.n	800603c <HAL_RCC_OscConfig+0x104>
 800605a:	e000      	b.n	800605e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d06f      	beq.n	800614a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800606a:	4b50      	ldr	r3, [pc, #320]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b00      	cmp	r3, #0
 8006074:	d017      	beq.n	80060a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006076:	4b4d      	ldr	r3, [pc, #308]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800607e:	2b08      	cmp	r3, #8
 8006080:	d105      	bne.n	800608e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006082:	4b4a      	ldr	r3, [pc, #296]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608e:	4b47      	ldr	r3, [pc, #284]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006096:	2b0c      	cmp	r3, #12
 8006098:	d11c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609a:	4b44      	ldr	r3, [pc, #272]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d116      	bne.n	80060d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a6:	4b41      	ldr	r3, [pc, #260]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_RCC_OscConfig+0x186>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d001      	beq.n	80060be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e1d3      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060be:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4937      	ldr	r1, [pc, #220]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d2:	e03a      	b.n	800614a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d020      	beq.n	800611e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060dc:	4b34      	ldr	r3, [pc, #208]	; (80061b0 <HAL_RCC_OscConfig+0x278>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fe f923 	bl	800432c <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ea:	f7fe f91f 	bl	800432c <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e1b4      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006108:	4b28      	ldr	r3, [pc, #160]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4925      	ldr	r1, [pc, #148]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]
 800611c:	e015      	b.n	800614a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611e:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <HAL_RCC_OscConfig+0x278>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fe f902 	bl	800432c <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800612c:	f7fe f8fe 	bl	800432c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e193      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613e:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d036      	beq.n	80061c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <HAL_RCC_OscConfig+0x27c>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006164:	f7fe f8e2 	bl	800432c <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800616c:	f7fe f8de 	bl	800432c <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e173      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0f0      	beq.n	800616c <HAL_RCC_OscConfig+0x234>
 800618a:	e01b      	b.n	80061c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_RCC_OscConfig+0x27c>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006192:	f7fe f8cb 	bl	800432c <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006198:	e00e      	b.n	80061b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619a:	f7fe f8c7 	bl	800432c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d907      	bls.n	80061b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e15c      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
 80061ac:	40023800 	.word	0x40023800
 80061b0:	42470000 	.word	0x42470000
 80061b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b8:	4b8a      	ldr	r3, [pc, #552]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80061ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ea      	bne.n	800619a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8097 	beq.w	8006300 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d6:	4b83      	ldr	r3, [pc, #524]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10f      	bne.n	8006202 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	4b7f      	ldr	r3, [pc, #508]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	4a7e      	ldr	r2, [pc, #504]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80061ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6413      	str	r3, [r2, #64]	; 0x40
 80061f2:	4b7c      	ldr	r3, [pc, #496]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006202:	4b79      	ldr	r3, [pc, #484]	; (80063e8 <HAL_RCC_OscConfig+0x4b0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d118      	bne.n	8006240 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800620e:	4b76      	ldr	r3, [pc, #472]	; (80063e8 <HAL_RCC_OscConfig+0x4b0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a75      	ldr	r2, [pc, #468]	; (80063e8 <HAL_RCC_OscConfig+0x4b0>)
 8006214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621a:	f7fe f887 	bl	800432c <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006222:	f7fe f883 	bl	800432c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e118      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006234:	4b6c      	ldr	r3, [pc, #432]	; (80063e8 <HAL_RCC_OscConfig+0x4b0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d106      	bne.n	8006256 <HAL_RCC_OscConfig+0x31e>
 8006248:	4b66      	ldr	r3, [pc, #408]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	4a65      	ldr	r2, [pc, #404]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6713      	str	r3, [r2, #112]	; 0x70
 8006254:	e01c      	b.n	8006290 <HAL_RCC_OscConfig+0x358>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b05      	cmp	r3, #5
 800625c:	d10c      	bne.n	8006278 <HAL_RCC_OscConfig+0x340>
 800625e:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 8006264:	f043 0304 	orr.w	r3, r3, #4
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
 800626a:	4b5e      	ldr	r3, [pc, #376]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	4a5d      	ldr	r2, [pc, #372]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	6713      	str	r3, [r2, #112]	; 0x70
 8006276:	e00b      	b.n	8006290 <HAL_RCC_OscConfig+0x358>
 8006278:	4b5a      	ldr	r3, [pc, #360]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	4a59      	ldr	r2, [pc, #356]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	6713      	str	r3, [r2, #112]	; 0x70
 8006284:	4b57      	ldr	r3, [pc, #348]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	4a56      	ldr	r2, [pc, #344]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800628a:	f023 0304 	bic.w	r3, r3, #4
 800628e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d015      	beq.n	80062c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006298:	f7fe f848 	bl	800432c <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a0:	f7fe f844 	bl	800432c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e0d7      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b6:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0ee      	beq.n	80062a0 <HAL_RCC_OscConfig+0x368>
 80062c2:	e014      	b.n	80062ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c4:	f7fe f832 	bl	800432c <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ca:	e00a      	b.n	80062e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062cc:	f7fe f82e 	bl	800432c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062da:	4293      	cmp	r3, r2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e0c1      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e2:	4b40      	ldr	r3, [pc, #256]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1ee      	bne.n	80062cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d105      	bne.n	8006300 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f4:	4b3b      	ldr	r3, [pc, #236]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	4a3a      	ldr	r2, [pc, #232]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80ad 	beq.w	8006464 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800630a:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b08      	cmp	r3, #8
 8006314:	d060      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d145      	bne.n	80063aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631e:	4b33      	ldr	r3, [pc, #204]	; (80063ec <HAL_RCC_OscConfig+0x4b4>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fe f802 	bl	800432c <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800632c:	f7fd fffe 	bl	800432c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e093      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	4b29      	ldr	r3, [pc, #164]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	019b      	lsls	r3, r3, #6
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	3b01      	subs	r3, #1
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	061b      	lsls	r3, r3, #24
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	071b      	lsls	r3, r3, #28
 8006376:	491b      	ldr	r1, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x4b4>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fd ffd3 	bl	800432c <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638a:	f7fd ffcf 	bl	800432c <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e064      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x452>
 80063a8:	e05c      	b.n	8006464 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_OscConfig+0x4b4>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fd ffbc 	bl	800432c <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fd ffb8 	bl	800432c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e04d      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_OscConfig+0x4ac>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x480>
 80063d6:	e045      	b.n	8006464 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e040      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063f0:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <HAL_RCC_OscConfig+0x538>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d030      	beq.n	8006460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d129      	bne.n	8006460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d122      	bne.n	8006460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006428:	4293      	cmp	r3, r2
 800642a:	d119      	bne.n	8006460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	3b01      	subs	r3, #1
 800643a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d10f      	bne.n	8006460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800644c:	429a      	cmp	r2, r3
 800644e:	d107      	bne.n	8006460 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800645c:	429a      	cmp	r2, r3
 800645e:	d001      	beq.n	8006464 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40023800 	.word	0x40023800

08006474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e041      	b.n	800650a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fd fd02 	bl	8003ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f000 f8f4 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_TIM_ConfigClockSource+0x1c>
 800652a:	2302      	movs	r3, #2
 800652c:	e0b4      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x186>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800654c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006554:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006566:	d03e      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0xd4>
 8006568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656c:	f200 8087 	bhi.w	800667e <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006574:	f000 8086 	beq.w	8006684 <HAL_TIM_ConfigClockSource+0x172>
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d87f      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 800657e:	2b70      	cmp	r3, #112	; 0x70
 8006580:	d01a      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0xa6>
 8006582:	2b70      	cmp	r3, #112	; 0x70
 8006584:	d87b      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 8006586:	2b60      	cmp	r3, #96	; 0x60
 8006588:	d050      	beq.n	800662c <HAL_TIM_ConfigClockSource+0x11a>
 800658a:	2b60      	cmp	r3, #96	; 0x60
 800658c:	d877      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 800658e:	2b50      	cmp	r3, #80	; 0x50
 8006590:	d03c      	beq.n	800660c <HAL_TIM_ConfigClockSource+0xfa>
 8006592:	2b50      	cmp	r3, #80	; 0x50
 8006594:	d873      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d058      	beq.n	800664c <HAL_TIM_ConfigClockSource+0x13a>
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d86f      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 800659e:	2b30      	cmp	r3, #48	; 0x30
 80065a0:	d064      	beq.n	800666c <HAL_TIM_ConfigClockSource+0x15a>
 80065a2:	2b30      	cmp	r3, #48	; 0x30
 80065a4:	d86b      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d060      	beq.n	800666c <HAL_TIM_ConfigClockSource+0x15a>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d867      	bhi.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d05c      	beq.n	800666c <HAL_TIM_ConfigClockSource+0x15a>
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d05a      	beq.n	800666c <HAL_TIM_ConfigClockSource+0x15a>
 80065b6:	e062      	b.n	800667e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6899      	ldr	r1, [r3, #8]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f000 f984 	bl	80068d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]
      break;
 80065e4:	e04f      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6899      	ldr	r1, [r3, #8]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f000 f96d 	bl	80068d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006608:	609a      	str	r2, [r3, #8]
      break;
 800660a:	e03c      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	461a      	mov	r2, r3
 800661a:	f000 f8e1 	bl	80067e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2150      	movs	r1, #80	; 0x50
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f93a 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 800662a:	e02c      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	6859      	ldr	r1, [r3, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	461a      	mov	r2, r3
 800663a:	f000 f900 	bl	800683e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2160      	movs	r1, #96	; 0x60
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f92a 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 800664a:	e01c      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	461a      	mov	r2, r3
 800665a:	f000 f8c1 	bl	80067e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2140      	movs	r1, #64	; 0x40
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f91a 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 800666a:	e00c      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f000 f911 	bl	800689e <TIM_ITRx_SetConfig>
      break;
 800667c:	e003      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e000      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006684:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a40      	ldr	r2, [pc, #256]	; (80067b4 <TIM_Base_SetConfig+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066be:	d00f      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a3d      	ldr	r2, [pc, #244]	; (80067b8 <TIM_Base_SetConfig+0x118>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3c      	ldr	r2, [pc, #240]	; (80067bc <TIM_Base_SetConfig+0x11c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3b      	ldr	r2, [pc, #236]	; (80067c0 <TIM_Base_SetConfig+0x120>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a3a      	ldr	r2, [pc, #232]	; (80067c4 <TIM_Base_SetConfig+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d108      	bne.n	80066f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <TIM_Base_SetConfig+0x114>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02b      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006700:	d027      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a2c      	ldr	r2, [pc, #176]	; (80067b8 <TIM_Base_SetConfig+0x118>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d023      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2b      	ldr	r2, [pc, #172]	; (80067bc <TIM_Base_SetConfig+0x11c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d01f      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <TIM_Base_SetConfig+0x120>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01b      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a29      	ldr	r2, [pc, #164]	; (80067c4 <TIM_Base_SetConfig+0x124>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d017      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a28      	ldr	r2, [pc, #160]	; (80067c8 <TIM_Base_SetConfig+0x128>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <TIM_Base_SetConfig+0x12c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <TIM_Base_SetConfig+0x130>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a25      	ldr	r2, [pc, #148]	; (80067d4 <TIM_Base_SetConfig+0x134>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a24      	ldr	r2, [pc, #144]	; (80067d8 <TIM_Base_SetConfig+0x138>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a23      	ldr	r2, [pc, #140]	; (80067dc <TIM_Base_SetConfig+0x13c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d108      	bne.n	8006764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <TIM_Base_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_Base_SetConfig+0xf8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <TIM_Base_SetConfig+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d103      	bne.n	80067a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	615a      	str	r2, [r3, #20]
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	40010400 	.word	0x40010400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	40001800 	.word	0x40001800
 80067d8:	40001c00 	.word	0x40001c00
 80067dc:	40002000 	.word	0x40002000

080067e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0201 	bic.w	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 030a 	bic.w	r3, r3, #10
 800681c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683e:	b480      	push	{r7}
 8006840:	b087      	sub	sp, #28
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0210 	bic.w	r2, r3, #16
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800687a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f043 0307 	orr.w	r3, r3, #7
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	609a      	str	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	021a      	lsls	r2, r3, #8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	609a      	str	r2, [r3, #8]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006928:	2302      	movs	r3, #2
 800692a:	e05a      	b.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d022      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d01d      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d018      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1a      	ldr	r2, [pc, #104]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00e      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d009      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d004      	beq.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10c      	bne.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40010400 	.word	0x40010400
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40001800 	.word	0x40001800

08006a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e03f      	b.n	8006a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fd fa58 	bl	8003ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2224      	movs	r2, #36	; 0x24
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fddf 	bl	8007614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b08a      	sub	sp, #40	; 0x28
 8006aaa:	af02      	add	r7, sp, #8
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d17c      	bne.n	8006bc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_UART_Transmit+0x2c>
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e075      	b.n	8006bc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_UART_Transmit+0x3e>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e06e      	b.n	8006bc2 <HAL_UART_Transmit+0x11c>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2221      	movs	r2, #33	; 0x21
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006afa:	f7fd fc17 	bl	800432c <HAL_GetTick>
 8006afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	88fa      	ldrh	r2, [r7, #6]
 8006b0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b14:	d108      	bne.n	8006b28 <HAL_UART_Transmit+0x82>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e003      	b.n	8006b30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b38:	e02a      	b.n	8006b90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fb1f 	bl	8007188 <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e036      	b.n	8006bc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e007      	b.n	8006b82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1cf      	bne.n	8006b3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2140      	movs	r1, #64	; 0x40
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 faef 	bl	8007188 <UART_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e006      	b.n	8006bc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e000      	b.n	8006bc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bc0:	2302      	movs	r3, #2
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d11d      	bne.n	8006c20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_UART_Receive_IT+0x26>
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e016      	b.n	8006c22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Receive_IT+0x38>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e00f      	b.n	8006c22 <HAL_UART_Receive_IT+0x58>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	461a      	mov	r2, r3
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fb24 	bl	8007264 <UART_Start_Receive_IT>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	e000      	b.n	8006c22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b0ba      	sub	sp, #232	; 0xe8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10f      	bne.n	8006c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_UART_IRQHandler+0x66>
 8006c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fc07 	bl	800749e <UART_Receive_IT>
      return;
 8006c90:	e256      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 80de 	beq.w	8006e58 <HAL_UART_IRQHandler+0x22c>
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80d1 	beq.w	8006e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_UART_IRQHandler+0xae>
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f043 0201 	orr.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_UART_IRQHandler+0xd2>
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f043 0202 	orr.w	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <HAL_UART_IRQHandler+0xf6>
 8006d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f043 0204 	orr.w	r2, r3, #4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d011      	beq.n	8006d52 <HAL_UART_IRQHandler+0x126>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f043 0208 	orr.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 81ed 	beq.w	8007136 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_UART_IRQHandler+0x14e>
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fb92 	bl	800749e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <HAL_UART_IRQHandler+0x17a>
 8006d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d04f      	beq.n	8006e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa9a 	bl	80072e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d141      	bne.n	8006e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006de6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1d9      	bne.n	8006dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d013      	beq.n	8006e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	4a7d      	ldr	r2, [pc, #500]	; (8007008 <HAL_UART_IRQHandler+0x3dc>)
 8006e14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd fc37 	bl	800468e <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e34:	e00e      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f990 	bl	800715c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	e00a      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f98c 	bl	800715c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	e006      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f988 	bl	800715c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e52:	e170      	b.n	8007136 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	bf00      	nop
    return;
 8006e56:	e16e      	b.n	8007136 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 814a 	bne.w	80070f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8143 	beq.w	80070f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 813c 	beq.w	80070f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b40      	cmp	r3, #64	; 0x40
 8006ea0:	f040 80b4 	bne.w	800700c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8140 	beq.w	800713a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	f080 8139 	bcs.w	800713a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ece:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eda:	f000 8088 	beq.w	8006fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1d9      	bne.n	8006ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e1      	bne.n	8006f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3314      	adds	r3, #20
 8006f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e3      	bne.n	8006f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbe:	f023 0310 	bic.w	r3, r3, #16
 8006fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e3      	bne.n	8006fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fd fae0 	bl	80045ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8b6 	bl	8007170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007004:	e099      	b.n	800713a <HAL_UART_IRQHandler+0x50e>
 8007006:	bf00      	nop
 8007008:	080073a7 	.word	0x080073a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007014:	b29b      	uxth	r3, r3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 808b 	beq.w	800713e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8086 	beq.w	800713e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007048:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007056:	647a      	str	r2, [r7, #68]	; 0x44
 8007058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800705c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e3      	bne.n	8007032 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	623b      	str	r3, [r7, #32]
   return(result);
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3314      	adds	r3, #20
 800708a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800708e:	633a      	str	r2, [r7, #48]	; 0x30
 8007090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e3      	bne.n	800706a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0310 	bic.w	r3, r3, #16
 80070c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070d4:	61fa      	str	r2, [r7, #28]
 80070d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	617b      	str	r3, [r7, #20]
   return(result);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e3      	bne.n	80070b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f83e 	bl	8007170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070f4:	e023      	b.n	800713e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <HAL_UART_IRQHandler+0x4ea>
 8007102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f95d 	bl	80073ce <UART_Transmit_IT>
    return;
 8007114:	e014      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <HAL_UART_IRQHandler+0x514>
 8007122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f99d 	bl	800746e <UART_EndTransmit_IT>
    return;
 8007134:	e004      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
    return;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
      return;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
      return;
 800713e:	bf00      	nop
  }
}
 8007140:	37e8      	adds	r7, #232	; 0xe8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop

08007148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b090      	sub	sp, #64	; 0x40
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007198:	e050      	b.n	800723c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d04c      	beq.n	800723c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071a8:	f7fd f8c0 	bl	800432c <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d241      	bcs.n	800723c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	330c      	adds	r3, #12
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071d8:	637a      	str	r2, [r7, #52]	; 0x34
 80071da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3314      	adds	r3, #20
 80071f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	613b      	str	r3, [r7, #16]
   return(result);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f023 0301 	bic.w	r3, r3, #1
 8007202:	63bb      	str	r3, [r7, #56]	; 0x38
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3314      	adds	r3, #20
 800720a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720c:	623a      	str	r2, [r7, #32]
 800720e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	69f9      	ldr	r1, [r7, #28]
 8007212:	6a3a      	ldr	r2, [r7, #32]
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	61bb      	str	r3, [r7, #24]
   return(result);
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e5      	bne.n	80071ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e00f      	b.n	800725c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	429a      	cmp	r2, r3
 8007258:	d09f      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3740      	adds	r7, #64	; 0x40
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2222      	movs	r2, #34	; 0x22
 800728e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0220 	orr.w	r2, r2, #32
 80072d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b095      	sub	sp, #84	; 0x54
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007308:	643a      	str	r2, [r7, #64]	; 0x40
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800730e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e5      	bne.n	80072e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3314      	adds	r3, #20
 8007322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	61fb      	str	r3, [r7, #28]
   return(result);
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	64bb      	str	r3, [r7, #72]	; 0x48
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800733c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	2b01      	cmp	r3, #1
 8007356:	d119      	bne.n	800738c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	60bb      	str	r3, [r7, #8]
   return(result);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	647b      	str	r3, [r7, #68]	; 0x44
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007378:	61ba      	str	r2, [r7, #24]
 800737a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	613b      	str	r3, [r7, #16]
   return(result);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e5      	bne.n	8007358 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
}
 800739a:	bf00      	nop
 800739c:	3754      	adds	r7, #84	; 0x54
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f7ff fecb 	bl	800715c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b21      	cmp	r3, #33	; 0x21
 80073e0:	d13e      	bne.n	8007460 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ea:	d114      	bne.n	8007416 <UART_Transmit_IT+0x48>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d110      	bne.n	8007416 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007408:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	621a      	str	r2, [r3, #32]
 8007414:	e008      	b.n	8007428 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6211      	str	r1, [r2, #32]
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29b      	uxth	r3, r3
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4619      	mov	r1, r3
 8007436:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10f      	bne.n	800745c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800744a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007484:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fe5a 	bl	8007148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b08c      	sub	sp, #48	; 0x30
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b22      	cmp	r3, #34	; 0x22
 80074b0:	f040 80ab 	bne.w	800760a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074bc:	d117      	bne.n	80074ee <UART_Receive_IT+0x50>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d113      	bne.n	80074ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	1c9a      	adds	r2, r3, #2
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	629a      	str	r2, [r3, #40]	; 0x28
 80074ec:	e026      	b.n	800753c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007500:	d007      	beq.n	8007512 <UART_Receive_IT+0x74>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <UART_Receive_IT+0x82>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	b2da      	uxtb	r2, r3
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e008      	b.n	8007532 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752c:	b2da      	uxtb	r2, r3
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4619      	mov	r1, r3
 800754a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800754c:	2b00      	cmp	r3, #0
 800754e:	d15a      	bne.n	8007606 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0220 	bic.w	r2, r2, #32
 800755e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800756e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695a      	ldr	r2, [r3, #20]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	2b01      	cmp	r3, #1
 800758e:	d135      	bne.n	80075fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	330c      	adds	r3, #12
 800759c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	613b      	str	r3, [r7, #16]
   return(result);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f023 0310 	bic.w	r3, r3, #16
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	623a      	str	r2, [r7, #32]
 80075b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	69f9      	ldr	r1, [r7, #28]
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e5      	bne.n	8007596 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	d10a      	bne.n	80075ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fdbb 	bl	8007170 <HAL_UARTEx_RxEventCallback>
 80075fa:	e002      	b.n	8007602 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fb fc1d 	bl	8002e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	e002      	b.n	800760c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	e000      	b.n	800760c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3730      	adds	r7, #48	; 0x30
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007618:	b0c0      	sub	sp, #256	; 0x100
 800761a:	af00      	add	r7, sp, #0
 800761c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007630:	68d9      	ldr	r1, [r3, #12]
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	ea40 0301 	orr.w	r3, r0, r1
 800763c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	431a      	orrs	r2, r3
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800766c:	f021 010c 	bic.w	r1, r1, #12
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800767a:	430b      	orrs	r3, r1
 800767c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800767e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	6999      	ldr	r1, [r3, #24]
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	ea40 0301 	orr.w	r3, r0, r1
 800769a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	4b8f      	ldr	r3, [pc, #572]	; (80078e0 <UART_SetConfig+0x2cc>)
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d005      	beq.n	80076b4 <UART_SetConfig+0xa0>
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b8d      	ldr	r3, [pc, #564]	; (80078e4 <UART_SetConfig+0x2d0>)
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d104      	bne.n	80076be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076b4:	f7fe fa82 	bl	8005bbc <HAL_RCC_GetPCLK2Freq>
 80076b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076bc:	e003      	b.n	80076c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076be:	f7fe fa69 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 80076c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d0:	f040 810c 	bne.w	80078ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076e6:	4622      	mov	r2, r4
 80076e8:	462b      	mov	r3, r5
 80076ea:	1891      	adds	r1, r2, r2
 80076ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80076ee:	415b      	adcs	r3, r3
 80076f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076f6:	4621      	mov	r1, r4
 80076f8:	eb12 0801 	adds.w	r8, r2, r1
 80076fc:	4629      	mov	r1, r5
 80076fe:	eb43 0901 	adc.w	r9, r3, r1
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800770e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007716:	4690      	mov	r8, r2
 8007718:	4699      	mov	r9, r3
 800771a:	4623      	mov	r3, r4
 800771c:	eb18 0303 	adds.w	r3, r8, r3
 8007720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007724:	462b      	mov	r3, r5
 8007726:	eb49 0303 	adc.w	r3, r9, r3
 800772a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800773a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800773e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007742:	460b      	mov	r3, r1
 8007744:	18db      	adds	r3, r3, r3
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
 8007748:	4613      	mov	r3, r2
 800774a:	eb42 0303 	adc.w	r3, r2, r3
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
 8007750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007754:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007758:	f7f9 fafe 	bl	8000d58 <__aeabi_uldivmod>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4b61      	ldr	r3, [pc, #388]	; (80078e8 <UART_SetConfig+0x2d4>)
 8007762:	fba3 2302 	umull	r2, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	011c      	lsls	r4, r3, #4
 800776a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007774:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007778:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	1891      	adds	r1, r2, r2
 8007782:	64b9      	str	r1, [r7, #72]	; 0x48
 8007784:	415b      	adcs	r3, r3
 8007786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800778c:	4641      	mov	r1, r8
 800778e:	eb12 0a01 	adds.w	sl, r2, r1
 8007792:	4649      	mov	r1, r9
 8007794:	eb43 0b01 	adc.w	fp, r3, r1
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ac:	4692      	mov	sl, r2
 80077ae:	469b      	mov	fp, r3
 80077b0:	4643      	mov	r3, r8
 80077b2:	eb1a 0303 	adds.w	r3, sl, r3
 80077b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077ba:	464b      	mov	r3, r9
 80077bc:	eb4b 0303 	adc.w	r3, fp, r3
 80077c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077d8:	460b      	mov	r3, r1
 80077da:	18db      	adds	r3, r3, r3
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
 80077de:	4613      	mov	r3, r2
 80077e0:	eb42 0303 	adc.w	r3, r2, r3
 80077e4:	647b      	str	r3, [r7, #68]	; 0x44
 80077e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077ee:	f7f9 fab3 	bl	8000d58 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	4b3b      	ldr	r3, [pc, #236]	; (80078e8 <UART_SetConfig+0x2d4>)
 80077fa:	fba3 2301 	umull	r2, r3, r3, r1
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	2264      	movs	r2, #100	; 0x64
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	1acb      	subs	r3, r1, r3
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800780e:	4b36      	ldr	r3, [pc, #216]	; (80078e8 <UART_SetConfig+0x2d4>)
 8007810:	fba3 2302 	umull	r2, r3, r3, r2
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800781c:	441c      	add	r4, r3
 800781e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007822:	2200      	movs	r2, #0
 8007824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007828:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800782c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	1891      	adds	r1, r2, r2
 8007836:	63b9      	str	r1, [r7, #56]	; 0x38
 8007838:	415b      	adcs	r3, r3
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007840:	4641      	mov	r1, r8
 8007842:	1851      	adds	r1, r2, r1
 8007844:	6339      	str	r1, [r7, #48]	; 0x30
 8007846:	4649      	mov	r1, r9
 8007848:	414b      	adcs	r3, r1
 800784a:	637b      	str	r3, [r7, #52]	; 0x34
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007858:	4659      	mov	r1, fp
 800785a:	00cb      	lsls	r3, r1, #3
 800785c:	4651      	mov	r1, sl
 800785e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007862:	4651      	mov	r1, sl
 8007864:	00ca      	lsls	r2, r1, #3
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	4603      	mov	r3, r0
 800786c:	4642      	mov	r2, r8
 800786e:	189b      	adds	r3, r3, r2
 8007870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007874:	464b      	mov	r3, r9
 8007876:	460a      	mov	r2, r1
 8007878:	eb42 0303 	adc.w	r3, r2, r3
 800787c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800788c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007894:	460b      	mov	r3, r1
 8007896:	18db      	adds	r3, r3, r3
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28
 800789a:	4613      	mov	r3, r2
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078aa:	f7f9 fa55 	bl	8000d58 <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <UART_SetConfig+0x2d4>)
 80078b4:	fba3 1302 	umull	r1, r3, r3, r2
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	2164      	movs	r1, #100	; 0x64
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	3332      	adds	r3, #50	; 0x32
 80078c6:	4a08      	ldr	r2, [pc, #32]	; (80078e8 <UART_SetConfig+0x2d4>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	f003 0207 	and.w	r2, r3, #7
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4422      	add	r2, r4
 80078da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078dc:	e106      	b.n	8007aec <UART_SetConfig+0x4d8>
 80078de:	bf00      	nop
 80078e0:	40011000 	.word	0x40011000
 80078e4:	40011400 	.word	0x40011400
 80078e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078fe:	4642      	mov	r2, r8
 8007900:	464b      	mov	r3, r9
 8007902:	1891      	adds	r1, r2, r2
 8007904:	6239      	str	r1, [r7, #32]
 8007906:	415b      	adcs	r3, r3
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
 800790a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800790e:	4641      	mov	r1, r8
 8007910:	1854      	adds	r4, r2, r1
 8007912:	4649      	mov	r1, r9
 8007914:	eb43 0501 	adc.w	r5, r3, r1
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	00eb      	lsls	r3, r5, #3
 8007922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007926:	00e2      	lsls	r2, r4, #3
 8007928:	4614      	mov	r4, r2
 800792a:	461d      	mov	r5, r3
 800792c:	4643      	mov	r3, r8
 800792e:	18e3      	adds	r3, r4, r3
 8007930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007934:	464b      	mov	r3, r9
 8007936:	eb45 0303 	adc.w	r3, r5, r3
 800793a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800794a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800795a:	4629      	mov	r1, r5
 800795c:	008b      	lsls	r3, r1, #2
 800795e:	4621      	mov	r1, r4
 8007960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007964:	4621      	mov	r1, r4
 8007966:	008a      	lsls	r2, r1, #2
 8007968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800796c:	f7f9 f9f4 	bl	8000d58 <__aeabi_uldivmod>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4b60      	ldr	r3, [pc, #384]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007976:	fba3 2302 	umull	r2, r3, r3, r2
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	011c      	lsls	r4, r3, #4
 800797e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007982:	2200      	movs	r2, #0
 8007984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007988:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800798c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007990:	4642      	mov	r2, r8
 8007992:	464b      	mov	r3, r9
 8007994:	1891      	adds	r1, r2, r2
 8007996:	61b9      	str	r1, [r7, #24]
 8007998:	415b      	adcs	r3, r3
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079a0:	4641      	mov	r1, r8
 80079a2:	1851      	adds	r1, r2, r1
 80079a4:	6139      	str	r1, [r7, #16]
 80079a6:	4649      	mov	r1, r9
 80079a8:	414b      	adcs	r3, r1
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079b8:	4659      	mov	r1, fp
 80079ba:	00cb      	lsls	r3, r1, #3
 80079bc:	4651      	mov	r1, sl
 80079be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c2:	4651      	mov	r1, sl
 80079c4:	00ca      	lsls	r2, r1, #3
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	4642      	mov	r2, r8
 80079ce:	189b      	adds	r3, r3, r2
 80079d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079d4:	464b      	mov	r3, r9
 80079d6:	460a      	mov	r2, r1
 80079d8:	eb42 0303 	adc.w	r3, r2, r3
 80079dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80079ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079f8:	4649      	mov	r1, r9
 80079fa:	008b      	lsls	r3, r1, #2
 80079fc:	4641      	mov	r1, r8
 80079fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a02:	4641      	mov	r1, r8
 8007a04:	008a      	lsls	r2, r1, #2
 8007a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a0a:	f7f9 f9a5 	bl	8000d58 <__aeabi_uldivmod>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	4b38      	ldr	r3, [pc, #224]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007a16:	fba3 2301 	umull	r2, r3, r3, r1
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	2264      	movs	r2, #100	; 0x64
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
 8007a22:	1acb      	subs	r3, r1, r3
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	3332      	adds	r3, #50	; 0x32
 8007a28:	4a33      	ldr	r2, [pc, #204]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a34:	441c      	add	r4, r3
 8007a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	673b      	str	r3, [r7, #112]	; 0x70
 8007a3e:	677a      	str	r2, [r7, #116]	; 0x74
 8007a40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	1891      	adds	r1, r2, r2
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	415b      	adcs	r3, r3
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a54:	4641      	mov	r1, r8
 8007a56:	1851      	adds	r1, r2, r1
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	414b      	adcs	r3, r1
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	00cb      	lsls	r3, r1, #3
 8007a70:	4651      	mov	r1, sl
 8007a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a76:	4651      	mov	r1, sl
 8007a78:	00ca      	lsls	r2, r1, #3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4642      	mov	r2, r8
 8007a82:	189b      	adds	r3, r3, r2
 8007a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a86:	464b      	mov	r3, r9
 8007a88:	460a      	mov	r2, r1
 8007a8a:	eb42 0303 	adc.w	r3, r2, r3
 8007a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	663b      	str	r3, [r7, #96]	; 0x60
 8007a9a:	667a      	str	r2, [r7, #100]	; 0x64
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	008b      	lsls	r3, r1, #2
 8007aac:	4641      	mov	r1, r8
 8007aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ab2:	4641      	mov	r1, r8
 8007ab4:	008a      	lsls	r2, r1, #2
 8007ab6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007aba:	f7f9 f94d 	bl	8000d58 <__aeabi_uldivmod>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	2164      	movs	r1, #100	; 0x64
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	3332      	adds	r3, #50	; 0x32
 8007ad6:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <UART_SetConfig+0x4e4>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	f003 020f 	and.w	r2, r3, #15
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4422      	add	r2, r4
 8007aea:	609a      	str	r2, [r3, #8]
}
 8007aec:	bf00      	nop
 8007aee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007af2:	46bd      	mov	sp, r7
 8007af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007af8:	51eb851f 	.word	0x51eb851f

08007afc <sulp>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	ec45 4b10 	vmov	d0, r4, r5
 8007b06:	4616      	mov	r6, r2
 8007b08:	f001 ff8c 	bl	8009a24 <__ulp>
 8007b0c:	ec51 0b10 	vmov	r0, r1, d0
 8007b10:	b17e      	cbz	r6, 8007b32 <sulp+0x36>
 8007b12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dd09      	ble.n	8007b32 <sulp+0x36>
 8007b1e:	051b      	lsls	r3, r3, #20
 8007b20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b24:	2400      	movs	r4, #0
 8007b26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	f7f8 fd7b 	bl	8000628 <__aeabi_dmul>
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	0000      	movs	r0, r0
	...

08007b38 <_strtod_l>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b02 	vpush	{d8}
 8007b40:	b09b      	sub	sp, #108	; 0x6c
 8007b42:	4604      	mov	r4, r0
 8007b44:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b46:	2200      	movs	r2, #0
 8007b48:	9216      	str	r2, [sp, #88]	; 0x58
 8007b4a:	460d      	mov	r5, r1
 8007b4c:	f04f 0800 	mov.w	r8, #0
 8007b50:	f04f 0900 	mov.w	r9, #0
 8007b54:	460a      	mov	r2, r1
 8007b56:	9215      	str	r2, [sp, #84]	; 0x54
 8007b58:	7811      	ldrb	r1, [r2, #0]
 8007b5a:	292b      	cmp	r1, #43	; 0x2b
 8007b5c:	d04c      	beq.n	8007bf8 <_strtod_l+0xc0>
 8007b5e:	d83a      	bhi.n	8007bd6 <_strtod_l+0x9e>
 8007b60:	290d      	cmp	r1, #13
 8007b62:	d834      	bhi.n	8007bce <_strtod_l+0x96>
 8007b64:	2908      	cmp	r1, #8
 8007b66:	d834      	bhi.n	8007bd2 <_strtod_l+0x9a>
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	d03d      	beq.n	8007be8 <_strtod_l+0xb0>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	920a      	str	r2, [sp, #40]	; 0x28
 8007b70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007b72:	7832      	ldrb	r2, [r6, #0]
 8007b74:	2a30      	cmp	r2, #48	; 0x30
 8007b76:	f040 80b4 	bne.w	8007ce2 <_strtod_l+0x1aa>
 8007b7a:	7872      	ldrb	r2, [r6, #1]
 8007b7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007b80:	2a58      	cmp	r2, #88	; 0x58
 8007b82:	d170      	bne.n	8007c66 <_strtod_l+0x12e>
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	ab16      	add	r3, sp, #88	; 0x58
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4a8e      	ldr	r2, [pc, #568]	; (8007dc8 <_strtod_l+0x290>)
 8007b90:	ab17      	add	r3, sp, #92	; 0x5c
 8007b92:	a915      	add	r1, sp, #84	; 0x54
 8007b94:	4620      	mov	r0, r4
 8007b96:	f001 f82b 	bl	8008bf0 <__gethex>
 8007b9a:	f010 070f 	ands.w	r7, r0, #15
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	d005      	beq.n	8007bae <_strtod_l+0x76>
 8007ba2:	2f06      	cmp	r7, #6
 8007ba4:	d12a      	bne.n	8007bfc <_strtod_l+0xc4>
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9615      	str	r6, [sp, #84]	; 0x54
 8007bac:	930a      	str	r3, [sp, #40]	; 0x28
 8007bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 857f 	bne.w	80086b4 <_strtod_l+0xb7c>
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb8:	b1db      	cbz	r3, 8007bf2 <_strtod_l+0xba>
 8007bba:	4642      	mov	r2, r8
 8007bbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007bc0:	ec43 2b10 	vmov	d0, r2, r3
 8007bc4:	b01b      	add	sp, #108	; 0x6c
 8007bc6:	ecbd 8b02 	vpop	{d8}
 8007bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bce:	2920      	cmp	r1, #32
 8007bd0:	d1cc      	bne.n	8007b6c <_strtod_l+0x34>
 8007bd2:	3201      	adds	r2, #1
 8007bd4:	e7bf      	b.n	8007b56 <_strtod_l+0x1e>
 8007bd6:	292d      	cmp	r1, #45	; 0x2d
 8007bd8:	d1c8      	bne.n	8007b6c <_strtod_l+0x34>
 8007bda:	2101      	movs	r1, #1
 8007bdc:	910a      	str	r1, [sp, #40]	; 0x28
 8007bde:	1c51      	adds	r1, r2, #1
 8007be0:	9115      	str	r1, [sp, #84]	; 0x54
 8007be2:	7852      	ldrb	r2, [r2, #1]
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	d1c3      	bne.n	8007b70 <_strtod_l+0x38>
 8007be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bea:	9515      	str	r5, [sp, #84]	; 0x54
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 855f 	bne.w	80086b0 <_strtod_l+0xb78>
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	e7e3      	b.n	8007bc0 <_strtod_l+0x88>
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	e7ef      	b.n	8007bdc <_strtod_l+0xa4>
 8007bfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007bfe:	b13a      	cbz	r2, 8007c10 <_strtod_l+0xd8>
 8007c00:	2135      	movs	r1, #53	; 0x35
 8007c02:	a818      	add	r0, sp, #96	; 0x60
 8007c04:	f002 f80b 	bl	8009c1e <__copybits>
 8007c08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 fbde 	bl	80093cc <_Bfree>
 8007c10:	3f01      	subs	r7, #1
 8007c12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c14:	2f04      	cmp	r7, #4
 8007c16:	d806      	bhi.n	8007c26 <_strtod_l+0xee>
 8007c18:	e8df f007 	tbb	[pc, r7]
 8007c1c:	201d0314 	.word	0x201d0314
 8007c20:	14          	.byte	0x14
 8007c21:	00          	.byte	0x00
 8007c22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007c26:	05e9      	lsls	r1, r5, #23
 8007c28:	bf48      	it	mi
 8007c2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c32:	0d1b      	lsrs	r3, r3, #20
 8007c34:	051b      	lsls	r3, r3, #20
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1b9      	bne.n	8007bae <_strtod_l+0x76>
 8007c3a:	f000 fedf 	bl	80089fc <__errno>
 8007c3e:	2322      	movs	r3, #34	; 0x22
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	e7b4      	b.n	8007bae <_strtod_l+0x76>
 8007c44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007c48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007c54:	e7e7      	b.n	8007c26 <_strtod_l+0xee>
 8007c56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007dd0 <_strtod_l+0x298>
 8007c5a:	e7e4      	b.n	8007c26 <_strtod_l+0xee>
 8007c5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007c60:	f04f 38ff 	mov.w	r8, #4294967295
 8007c64:	e7df      	b.n	8007c26 <_strtod_l+0xee>
 8007c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	9215      	str	r2, [sp, #84]	; 0x54
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b30      	cmp	r3, #48	; 0x30
 8007c70:	d0f9      	beq.n	8007c66 <_strtod_l+0x12e>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d09b      	beq.n	8007bae <_strtod_l+0x76>
 8007c76:	2301      	movs	r3, #1
 8007c78:	f04f 0a00 	mov.w	sl, #0
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007c86:	46d3      	mov	fp, sl
 8007c88:	220a      	movs	r2, #10
 8007c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007c8c:	7806      	ldrb	r6, [r0, #0]
 8007c8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007c92:	b2d9      	uxtb	r1, r3
 8007c94:	2909      	cmp	r1, #9
 8007c96:	d926      	bls.n	8007ce6 <_strtod_l+0x1ae>
 8007c98:	494c      	ldr	r1, [pc, #304]	; (8007dcc <_strtod_l+0x294>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f000 fe55 	bl	800894a <strncmp>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d030      	beq.n	8007d06 <_strtod_l+0x1ce>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	9005      	str	r0, [sp, #20]
 8007caa:	465e      	mov	r6, fp
 8007cac:	4603      	mov	r3, r0
 8007cae:	2a65      	cmp	r2, #101	; 0x65
 8007cb0:	d001      	beq.n	8007cb6 <_strtod_l+0x17e>
 8007cb2:	2a45      	cmp	r2, #69	; 0x45
 8007cb4:	d113      	bne.n	8007cde <_strtod_l+0x1a6>
 8007cb6:	b91e      	cbnz	r6, 8007cc0 <_strtod_l+0x188>
 8007cb8:	9a04      	ldr	r2, [sp, #16]
 8007cba:	4302      	orrs	r2, r0
 8007cbc:	d094      	beq.n	8007be8 <_strtod_l+0xb0>
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007cc2:	1c6a      	adds	r2, r5, #1
 8007cc4:	9215      	str	r2, [sp, #84]	; 0x54
 8007cc6:	786a      	ldrb	r2, [r5, #1]
 8007cc8:	2a2b      	cmp	r2, #43	; 0x2b
 8007cca:	d074      	beq.n	8007db6 <_strtod_l+0x27e>
 8007ccc:	2a2d      	cmp	r2, #45	; 0x2d
 8007cce:	d078      	beq.n	8007dc2 <_strtod_l+0x28a>
 8007cd0:	f04f 0c00 	mov.w	ip, #0
 8007cd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007cd8:	2909      	cmp	r1, #9
 8007cda:	d97f      	bls.n	8007ddc <_strtod_l+0x2a4>
 8007cdc:	9515      	str	r5, [sp, #84]	; 0x54
 8007cde:	2700      	movs	r7, #0
 8007ce0:	e09e      	b.n	8007e20 <_strtod_l+0x2e8>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e7c8      	b.n	8007c78 <_strtod_l+0x140>
 8007ce6:	f1bb 0f08 	cmp.w	fp, #8
 8007cea:	bfd8      	it	le
 8007cec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007cee:	f100 0001 	add.w	r0, r0, #1
 8007cf2:	bfda      	itte	le
 8007cf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007cf8:	9309      	strle	r3, [sp, #36]	; 0x24
 8007cfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007cfe:	f10b 0b01 	add.w	fp, fp, #1
 8007d02:	9015      	str	r0, [sp, #84]	; 0x54
 8007d04:	e7c1      	b.n	8007c8a <_strtod_l+0x152>
 8007d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	9215      	str	r2, [sp, #84]	; 0x54
 8007d0c:	785a      	ldrb	r2, [r3, #1]
 8007d0e:	f1bb 0f00 	cmp.w	fp, #0
 8007d12:	d037      	beq.n	8007d84 <_strtod_l+0x24c>
 8007d14:	9005      	str	r0, [sp, #20]
 8007d16:	465e      	mov	r6, fp
 8007d18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d1c:	2b09      	cmp	r3, #9
 8007d1e:	d912      	bls.n	8007d46 <_strtod_l+0x20e>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e7c4      	b.n	8007cae <_strtod_l+0x176>
 8007d24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	9215      	str	r2, [sp, #84]	; 0x54
 8007d2a:	785a      	ldrb	r2, [r3, #1]
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	2a30      	cmp	r2, #48	; 0x30
 8007d30:	d0f8      	beq.n	8007d24 <_strtod_l+0x1ec>
 8007d32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	f200 84c1 	bhi.w	80086be <_strtod_l+0xb86>
 8007d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d3e:	9005      	str	r0, [sp, #20]
 8007d40:	2000      	movs	r0, #0
 8007d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d44:	4606      	mov	r6, r0
 8007d46:	3a30      	subs	r2, #48	; 0x30
 8007d48:	f100 0301 	add.w	r3, r0, #1
 8007d4c:	d014      	beq.n	8007d78 <_strtod_l+0x240>
 8007d4e:	9905      	ldr	r1, [sp, #20]
 8007d50:	4419      	add	r1, r3
 8007d52:	9105      	str	r1, [sp, #20]
 8007d54:	4633      	mov	r3, r6
 8007d56:	eb00 0c06 	add.w	ip, r0, r6
 8007d5a:	210a      	movs	r1, #10
 8007d5c:	4563      	cmp	r3, ip
 8007d5e:	d113      	bne.n	8007d88 <_strtod_l+0x250>
 8007d60:	1833      	adds	r3, r6, r0
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	f106 0601 	add.w	r6, r6, #1
 8007d68:	4406      	add	r6, r0
 8007d6a:	dc1a      	bgt.n	8007da2 <_strtod_l+0x26a>
 8007d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d6e:	230a      	movs	r3, #10
 8007d70:	fb03 2301 	mla	r3, r3, r1, r2
 8007d74:	9309      	str	r3, [sp, #36]	; 0x24
 8007d76:	2300      	movs	r3, #0
 8007d78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d7a:	1c51      	adds	r1, r2, #1
 8007d7c:	9115      	str	r1, [sp, #84]	; 0x54
 8007d7e:	7852      	ldrb	r2, [r2, #1]
 8007d80:	4618      	mov	r0, r3
 8007d82:	e7c9      	b.n	8007d18 <_strtod_l+0x1e0>
 8007d84:	4658      	mov	r0, fp
 8007d86:	e7d2      	b.n	8007d2e <_strtod_l+0x1f6>
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	f103 0301 	add.w	r3, r3, #1
 8007d8e:	dc03      	bgt.n	8007d98 <_strtod_l+0x260>
 8007d90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d92:	434f      	muls	r7, r1
 8007d94:	9709      	str	r7, [sp, #36]	; 0x24
 8007d96:	e7e1      	b.n	8007d5c <_strtod_l+0x224>
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	bfd8      	it	le
 8007d9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007da0:	e7dc      	b.n	8007d5c <_strtod_l+0x224>
 8007da2:	2e10      	cmp	r6, #16
 8007da4:	bfdc      	itt	le
 8007da6:	230a      	movle	r3, #10
 8007da8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007dac:	e7e3      	b.n	8007d76 <_strtod_l+0x23e>
 8007dae:	2300      	movs	r3, #0
 8007db0:	9305      	str	r3, [sp, #20]
 8007db2:	2301      	movs	r3, #1
 8007db4:	e780      	b.n	8007cb8 <_strtod_l+0x180>
 8007db6:	f04f 0c00 	mov.w	ip, #0
 8007dba:	1caa      	adds	r2, r5, #2
 8007dbc:	9215      	str	r2, [sp, #84]	; 0x54
 8007dbe:	78aa      	ldrb	r2, [r5, #2]
 8007dc0:	e788      	b.n	8007cd4 <_strtod_l+0x19c>
 8007dc2:	f04f 0c01 	mov.w	ip, #1
 8007dc6:	e7f8      	b.n	8007dba <_strtod_l+0x282>
 8007dc8:	0800bb58 	.word	0x0800bb58
 8007dcc:	0800bb48 	.word	0x0800bb48
 8007dd0:	7ff00000 	.word	0x7ff00000
 8007dd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007dd6:	1c51      	adds	r1, r2, #1
 8007dd8:	9115      	str	r1, [sp, #84]	; 0x54
 8007dda:	7852      	ldrb	r2, [r2, #1]
 8007ddc:	2a30      	cmp	r2, #48	; 0x30
 8007dde:	d0f9      	beq.n	8007dd4 <_strtod_l+0x29c>
 8007de0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007de4:	2908      	cmp	r1, #8
 8007de6:	f63f af7a 	bhi.w	8007cde <_strtod_l+0x1a6>
 8007dea:	3a30      	subs	r2, #48	; 0x30
 8007dec:	9208      	str	r2, [sp, #32]
 8007dee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007df0:	920c      	str	r2, [sp, #48]	; 0x30
 8007df2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007df4:	1c57      	adds	r7, r2, #1
 8007df6:	9715      	str	r7, [sp, #84]	; 0x54
 8007df8:	7852      	ldrb	r2, [r2, #1]
 8007dfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007dfe:	f1be 0f09 	cmp.w	lr, #9
 8007e02:	d938      	bls.n	8007e76 <_strtod_l+0x33e>
 8007e04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e06:	1a7f      	subs	r7, r7, r1
 8007e08:	2f08      	cmp	r7, #8
 8007e0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007e0e:	dc03      	bgt.n	8007e18 <_strtod_l+0x2e0>
 8007e10:	9908      	ldr	r1, [sp, #32]
 8007e12:	428f      	cmp	r7, r1
 8007e14:	bfa8      	it	ge
 8007e16:	460f      	movge	r7, r1
 8007e18:	f1bc 0f00 	cmp.w	ip, #0
 8007e1c:	d000      	beq.n	8007e20 <_strtod_l+0x2e8>
 8007e1e:	427f      	negs	r7, r7
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	d14f      	bne.n	8007ec4 <_strtod_l+0x38c>
 8007e24:	9904      	ldr	r1, [sp, #16]
 8007e26:	4301      	orrs	r1, r0
 8007e28:	f47f aec1 	bne.w	8007bae <_strtod_l+0x76>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f47f aedb 	bne.w	8007be8 <_strtod_l+0xb0>
 8007e32:	2a69      	cmp	r2, #105	; 0x69
 8007e34:	d029      	beq.n	8007e8a <_strtod_l+0x352>
 8007e36:	dc26      	bgt.n	8007e86 <_strtod_l+0x34e>
 8007e38:	2a49      	cmp	r2, #73	; 0x49
 8007e3a:	d026      	beq.n	8007e8a <_strtod_l+0x352>
 8007e3c:	2a4e      	cmp	r2, #78	; 0x4e
 8007e3e:	f47f aed3 	bne.w	8007be8 <_strtod_l+0xb0>
 8007e42:	499b      	ldr	r1, [pc, #620]	; (80080b0 <_strtod_l+0x578>)
 8007e44:	a815      	add	r0, sp, #84	; 0x54
 8007e46:	f001 f913 	bl	8009070 <__match>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f aecc 	beq.w	8007be8 <_strtod_l+0xb0>
 8007e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b28      	cmp	r3, #40	; 0x28
 8007e56:	d12f      	bne.n	8007eb8 <_strtod_l+0x380>
 8007e58:	4996      	ldr	r1, [pc, #600]	; (80080b4 <_strtod_l+0x57c>)
 8007e5a:	aa18      	add	r2, sp, #96	; 0x60
 8007e5c:	a815      	add	r0, sp, #84	; 0x54
 8007e5e:	f001 f91b 	bl	8009098 <__hexnan>
 8007e62:	2805      	cmp	r0, #5
 8007e64:	d128      	bne.n	8007eb8 <_strtod_l+0x380>
 8007e66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007e70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007e74:	e69b      	b.n	8007bae <_strtod_l+0x76>
 8007e76:	9f08      	ldr	r7, [sp, #32]
 8007e78:	210a      	movs	r1, #10
 8007e7a:	fb01 2107 	mla	r1, r1, r7, r2
 8007e7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007e82:	9208      	str	r2, [sp, #32]
 8007e84:	e7b5      	b.n	8007df2 <_strtod_l+0x2ba>
 8007e86:	2a6e      	cmp	r2, #110	; 0x6e
 8007e88:	e7d9      	b.n	8007e3e <_strtod_l+0x306>
 8007e8a:	498b      	ldr	r1, [pc, #556]	; (80080b8 <_strtod_l+0x580>)
 8007e8c:	a815      	add	r0, sp, #84	; 0x54
 8007e8e:	f001 f8ef 	bl	8009070 <__match>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f43f aea8 	beq.w	8007be8 <_strtod_l+0xb0>
 8007e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e9a:	4988      	ldr	r1, [pc, #544]	; (80080bc <_strtod_l+0x584>)
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	a815      	add	r0, sp, #84	; 0x54
 8007ea0:	9315      	str	r3, [sp, #84]	; 0x54
 8007ea2:	f001 f8e5 	bl	8009070 <__match>
 8007ea6:	b910      	cbnz	r0, 8007eae <_strtod_l+0x376>
 8007ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eaa:	3301      	adds	r3, #1
 8007eac:	9315      	str	r3, [sp, #84]	; 0x54
 8007eae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80080cc <_strtod_l+0x594>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	e67a      	b.n	8007bae <_strtod_l+0x76>
 8007eb8:	4881      	ldr	r0, [pc, #516]	; (80080c0 <_strtod_l+0x588>)
 8007eba:	f000 fddd 	bl	8008a78 <nan>
 8007ebe:	ec59 8b10 	vmov	r8, r9, d0
 8007ec2:	e674      	b.n	8007bae <_strtod_l+0x76>
 8007ec4:	9b05      	ldr	r3, [sp, #20]
 8007ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ec8:	1afb      	subs	r3, r7, r3
 8007eca:	f1bb 0f00 	cmp.w	fp, #0
 8007ece:	bf08      	it	eq
 8007ed0:	46b3      	moveq	fp, r6
 8007ed2:	2e10      	cmp	r6, #16
 8007ed4:	9308      	str	r3, [sp, #32]
 8007ed6:	4635      	mov	r5, r6
 8007ed8:	bfa8      	it	ge
 8007eda:	2510      	movge	r5, #16
 8007edc:	f7f8 fb2a 	bl	8000534 <__aeabi_ui2d>
 8007ee0:	2e09      	cmp	r6, #9
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	dd13      	ble.n	8007f10 <_strtod_l+0x3d8>
 8007ee8:	4b76      	ldr	r3, [pc, #472]	; (80080c4 <_strtod_l+0x58c>)
 8007eea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007eee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ef2:	f7f8 fb99 	bl	8000628 <__aeabi_dmul>
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	4650      	mov	r0, sl
 8007efa:	4689      	mov	r9, r1
 8007efc:	f7f8 fb1a 	bl	8000534 <__aeabi_ui2d>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 f9d8 	bl	80002bc <__adddf3>
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	2e0f      	cmp	r6, #15
 8007f12:	dc38      	bgt.n	8007f86 <_strtod_l+0x44e>
 8007f14:	9b08      	ldr	r3, [sp, #32]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f43f ae49 	beq.w	8007bae <_strtod_l+0x76>
 8007f1c:	dd24      	ble.n	8007f68 <_strtod_l+0x430>
 8007f1e:	2b16      	cmp	r3, #22
 8007f20:	dc0b      	bgt.n	8007f3a <_strtod_l+0x402>
 8007f22:	4968      	ldr	r1, [pc, #416]	; (80080c4 <_strtod_l+0x58c>)
 8007f24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	f7f8 fb7a 	bl	8000628 <__aeabi_dmul>
 8007f34:	4680      	mov	r8, r0
 8007f36:	4689      	mov	r9, r1
 8007f38:	e639      	b.n	8007bae <_strtod_l+0x76>
 8007f3a:	9a08      	ldr	r2, [sp, #32]
 8007f3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007f40:	4293      	cmp	r3, r2
 8007f42:	db20      	blt.n	8007f86 <_strtod_l+0x44e>
 8007f44:	4c5f      	ldr	r4, [pc, #380]	; (80080c4 <_strtod_l+0x58c>)
 8007f46:	f1c6 060f 	rsb	r6, r6, #15
 8007f4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f56:	f7f8 fb67 	bl	8000628 <__aeabi_dmul>
 8007f5a:	9b08      	ldr	r3, [sp, #32]
 8007f5c:	1b9e      	subs	r6, r3, r6
 8007f5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007f62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f66:	e7e3      	b.n	8007f30 <_strtod_l+0x3f8>
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	3316      	adds	r3, #22
 8007f6c:	db0b      	blt.n	8007f86 <_strtod_l+0x44e>
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	1bdf      	subs	r7, r3, r7
 8007f72:	4b54      	ldr	r3, [pc, #336]	; (80080c4 <_strtod_l+0x58c>)
 8007f74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	4649      	mov	r1, r9
 8007f80:	f7f8 fc7c 	bl	800087c <__aeabi_ddiv>
 8007f84:	e7d6      	b.n	8007f34 <_strtod_l+0x3fc>
 8007f86:	9b08      	ldr	r3, [sp, #32]
 8007f88:	1b75      	subs	r5, r6, r5
 8007f8a:	441d      	add	r5, r3
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	dd70      	ble.n	8008072 <_strtod_l+0x53a>
 8007f90:	f015 030f 	ands.w	r3, r5, #15
 8007f94:	d00a      	beq.n	8007fac <_strtod_l+0x474>
 8007f96:	494b      	ldr	r1, [pc, #300]	; (80080c4 <_strtod_l+0x58c>)
 8007f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa4:	f7f8 fb40 	bl	8000628 <__aeabi_dmul>
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4689      	mov	r9, r1
 8007fac:	f035 050f 	bics.w	r5, r5, #15
 8007fb0:	d04d      	beq.n	800804e <_strtod_l+0x516>
 8007fb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007fb6:	dd22      	ble.n	8007ffe <_strtod_l+0x4c6>
 8007fb8:	2500      	movs	r5, #0
 8007fba:	46ab      	mov	fp, r5
 8007fbc:	9509      	str	r5, [sp, #36]	; 0x24
 8007fbe:	9505      	str	r5, [sp, #20]
 8007fc0:	2322      	movs	r3, #34	; 0x22
 8007fc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80080cc <_strtod_l+0x594>
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	f04f 0800 	mov.w	r8, #0
 8007fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f43f aded 	beq.w	8007bae <_strtod_l+0x76>
 8007fd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f001 f9f8 	bl	80093cc <_Bfree>
 8007fdc:	9905      	ldr	r1, [sp, #20]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f001 f9f4 	bl	80093cc <_Bfree>
 8007fe4:	4659      	mov	r1, fp
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f001 f9f0 	bl	80093cc <_Bfree>
 8007fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f001 f9ec 	bl	80093cc <_Bfree>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f001 f9e8 	bl	80093cc <_Bfree>
 8007ffc:	e5d7      	b.n	8007bae <_strtod_l+0x76>
 8007ffe:	4b32      	ldr	r3, [pc, #200]	; (80080c8 <_strtod_l+0x590>)
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	2300      	movs	r3, #0
 8008004:	112d      	asrs	r5, r5, #4
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	469a      	mov	sl, r3
 800800c:	2d01      	cmp	r5, #1
 800800e:	dc21      	bgt.n	8008054 <_strtod_l+0x51c>
 8008010:	b10b      	cbz	r3, 8008016 <_strtod_l+0x4de>
 8008012:	4680      	mov	r8, r0
 8008014:	4689      	mov	r9, r1
 8008016:	492c      	ldr	r1, [pc, #176]	; (80080c8 <_strtod_l+0x590>)
 8008018:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800801c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008020:	4642      	mov	r2, r8
 8008022:	464b      	mov	r3, r9
 8008024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008028:	f7f8 fafe 	bl	8000628 <__aeabi_dmul>
 800802c:	4b27      	ldr	r3, [pc, #156]	; (80080cc <_strtod_l+0x594>)
 800802e:	460a      	mov	r2, r1
 8008030:	400b      	ands	r3, r1
 8008032:	4927      	ldr	r1, [pc, #156]	; (80080d0 <_strtod_l+0x598>)
 8008034:	428b      	cmp	r3, r1
 8008036:	4680      	mov	r8, r0
 8008038:	d8be      	bhi.n	8007fb8 <_strtod_l+0x480>
 800803a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800803e:	428b      	cmp	r3, r1
 8008040:	bf86      	itte	hi
 8008042:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80080d4 <_strtod_l+0x59c>
 8008046:	f04f 38ff 	movhi.w	r8, #4294967295
 800804a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800804e:	2300      	movs	r3, #0
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	e07b      	b.n	800814c <_strtod_l+0x614>
 8008054:	07ea      	lsls	r2, r5, #31
 8008056:	d505      	bpl.n	8008064 <_strtod_l+0x52c>
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 fae3 	bl	8000628 <__aeabi_dmul>
 8008062:	2301      	movs	r3, #1
 8008064:	9a04      	ldr	r2, [sp, #16]
 8008066:	3208      	adds	r2, #8
 8008068:	f10a 0a01 	add.w	sl, sl, #1
 800806c:	106d      	asrs	r5, r5, #1
 800806e:	9204      	str	r2, [sp, #16]
 8008070:	e7cc      	b.n	800800c <_strtod_l+0x4d4>
 8008072:	d0ec      	beq.n	800804e <_strtod_l+0x516>
 8008074:	426d      	negs	r5, r5
 8008076:	f015 020f 	ands.w	r2, r5, #15
 800807a:	d00a      	beq.n	8008092 <_strtod_l+0x55a>
 800807c:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <_strtod_l+0x58c>)
 800807e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008082:	4640      	mov	r0, r8
 8008084:	4649      	mov	r1, r9
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f7f8 fbf7 	bl	800087c <__aeabi_ddiv>
 800808e:	4680      	mov	r8, r0
 8008090:	4689      	mov	r9, r1
 8008092:	112d      	asrs	r5, r5, #4
 8008094:	d0db      	beq.n	800804e <_strtod_l+0x516>
 8008096:	2d1f      	cmp	r5, #31
 8008098:	dd1e      	ble.n	80080d8 <_strtod_l+0x5a0>
 800809a:	2500      	movs	r5, #0
 800809c:	46ab      	mov	fp, r5
 800809e:	9509      	str	r5, [sp, #36]	; 0x24
 80080a0:	9505      	str	r5, [sp, #20]
 80080a2:	2322      	movs	r3, #34	; 0x22
 80080a4:	f04f 0800 	mov.w	r8, #0
 80080a8:	f04f 0900 	mov.w	r9, #0
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	e78d      	b.n	8007fcc <_strtod_l+0x494>
 80080b0:	0800bb53 	.word	0x0800bb53
 80080b4:	0800bb6c 	.word	0x0800bb6c
 80080b8:	0800bb4a 	.word	0x0800bb4a
 80080bc:	0800bb4d 	.word	0x0800bb4d
 80080c0:	0800bed0 	.word	0x0800bed0
 80080c4:	0800bcc0 	.word	0x0800bcc0
 80080c8:	0800bc98 	.word	0x0800bc98
 80080cc:	7ff00000 	.word	0x7ff00000
 80080d0:	7ca00000 	.word	0x7ca00000
 80080d4:	7fefffff 	.word	0x7fefffff
 80080d8:	f015 0310 	ands.w	r3, r5, #16
 80080dc:	bf18      	it	ne
 80080de:	236a      	movne	r3, #106	; 0x6a
 80080e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008484 <_strtod_l+0x94c>
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	2300      	movs	r3, #0
 80080ec:	07ea      	lsls	r2, r5, #31
 80080ee:	d504      	bpl.n	80080fa <_strtod_l+0x5c2>
 80080f0:	e9da 2300 	ldrd	r2, r3, [sl]
 80080f4:	f7f8 fa98 	bl	8000628 <__aeabi_dmul>
 80080f8:	2301      	movs	r3, #1
 80080fa:	106d      	asrs	r5, r5, #1
 80080fc:	f10a 0a08 	add.w	sl, sl, #8
 8008100:	d1f4      	bne.n	80080ec <_strtod_l+0x5b4>
 8008102:	b10b      	cbz	r3, 8008108 <_strtod_l+0x5d0>
 8008104:	4680      	mov	r8, r0
 8008106:	4689      	mov	r9, r1
 8008108:	9b04      	ldr	r3, [sp, #16]
 800810a:	b1bb      	cbz	r3, 800813c <_strtod_l+0x604>
 800810c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008110:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008114:	2b00      	cmp	r3, #0
 8008116:	4649      	mov	r1, r9
 8008118:	dd10      	ble.n	800813c <_strtod_l+0x604>
 800811a:	2b1f      	cmp	r3, #31
 800811c:	f340 811e 	ble.w	800835c <_strtod_l+0x824>
 8008120:	2b34      	cmp	r3, #52	; 0x34
 8008122:	bfde      	ittt	le
 8008124:	f04f 33ff 	movle.w	r3, #4294967295
 8008128:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800812c:	4093      	lslle	r3, r2
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	bfcc      	ite	gt
 8008134:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008138:	ea03 0901 	andle.w	r9, r3, r1
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 fcd8 	bl	8000af8 <__aeabi_dcmpeq>
 8008148:	2800      	cmp	r0, #0
 800814a:	d1a6      	bne.n	800809a <_strtod_l+0x562>
 800814c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008152:	4633      	mov	r3, r6
 8008154:	465a      	mov	r2, fp
 8008156:	4620      	mov	r0, r4
 8008158:	f001 f9a0 	bl	800949c <__s2b>
 800815c:	9009      	str	r0, [sp, #36]	; 0x24
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f af2a 	beq.w	8007fb8 <_strtod_l+0x480>
 8008164:	9a08      	ldr	r2, [sp, #32]
 8008166:	9b05      	ldr	r3, [sp, #20]
 8008168:	2a00      	cmp	r2, #0
 800816a:	eba3 0307 	sub.w	r3, r3, r7
 800816e:	bfa8      	it	ge
 8008170:	2300      	movge	r3, #0
 8008172:	930c      	str	r3, [sp, #48]	; 0x30
 8008174:	2500      	movs	r5, #0
 8008176:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800817a:	9312      	str	r3, [sp, #72]	; 0x48
 800817c:	46ab      	mov	fp, r5
 800817e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008180:	4620      	mov	r0, r4
 8008182:	6859      	ldr	r1, [r3, #4]
 8008184:	f001 f8e2 	bl	800934c <_Balloc>
 8008188:	9005      	str	r0, [sp, #20]
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f af18 	beq.w	8007fc0 <_strtod_l+0x488>
 8008190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	3202      	adds	r2, #2
 8008196:	f103 010c 	add.w	r1, r3, #12
 800819a:	0092      	lsls	r2, r2, #2
 800819c:	300c      	adds	r0, #12
 800819e:	f000 fc5a 	bl	8008a56 <memcpy>
 80081a2:	ec49 8b10 	vmov	d0, r8, r9
 80081a6:	aa18      	add	r2, sp, #96	; 0x60
 80081a8:	a917      	add	r1, sp, #92	; 0x5c
 80081aa:	4620      	mov	r0, r4
 80081ac:	f001 fcaa 	bl	8009b04 <__d2b>
 80081b0:	ec49 8b18 	vmov	d8, r8, r9
 80081b4:	9016      	str	r0, [sp, #88]	; 0x58
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f af02 	beq.w	8007fc0 <_strtod_l+0x488>
 80081bc:	2101      	movs	r1, #1
 80081be:	4620      	mov	r0, r4
 80081c0:	f001 fa04 	bl	80095cc <__i2b>
 80081c4:	4683      	mov	fp, r0
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f43f aefa 	beq.w	8007fc0 <_strtod_l+0x488>
 80081cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80081ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	bfab      	itete	ge
 80081d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80081d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80081d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80081da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80081de:	bfac      	ite	ge
 80081e0:	eb06 0a03 	addge.w	sl, r6, r3
 80081e4:	1b9f      	sublt	r7, r3, r6
 80081e6:	9b04      	ldr	r3, [sp, #16]
 80081e8:	1af6      	subs	r6, r6, r3
 80081ea:	4416      	add	r6, r2
 80081ec:	4ba0      	ldr	r3, [pc, #640]	; (8008470 <_strtod_l+0x938>)
 80081ee:	3e01      	subs	r6, #1
 80081f0:	429e      	cmp	r6, r3
 80081f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80081f6:	f280 80c4 	bge.w	8008382 <_strtod_l+0x84a>
 80081fa:	1b9b      	subs	r3, r3, r6
 80081fc:	2b1f      	cmp	r3, #31
 80081fe:	eba2 0203 	sub.w	r2, r2, r3
 8008202:	f04f 0101 	mov.w	r1, #1
 8008206:	f300 80b0 	bgt.w	800836a <_strtod_l+0x832>
 800820a:	fa01 f303 	lsl.w	r3, r1, r3
 800820e:	930e      	str	r3, [sp, #56]	; 0x38
 8008210:	2300      	movs	r3, #0
 8008212:	930d      	str	r3, [sp, #52]	; 0x34
 8008214:	eb0a 0602 	add.w	r6, sl, r2
 8008218:	9b04      	ldr	r3, [sp, #16]
 800821a:	45b2      	cmp	sl, r6
 800821c:	4417      	add	r7, r2
 800821e:	441f      	add	r7, r3
 8008220:	4653      	mov	r3, sl
 8008222:	bfa8      	it	ge
 8008224:	4633      	movge	r3, r6
 8008226:	42bb      	cmp	r3, r7
 8008228:	bfa8      	it	ge
 800822a:	463b      	movge	r3, r7
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfc2      	ittt	gt
 8008230:	1af6      	subgt	r6, r6, r3
 8008232:	1aff      	subgt	r7, r7, r3
 8008234:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd17      	ble.n	800826e <_strtod_l+0x736>
 800823e:	4659      	mov	r1, fp
 8008240:	461a      	mov	r2, r3
 8008242:	4620      	mov	r0, r4
 8008244:	f001 fa82 	bl	800974c <__pow5mult>
 8008248:	4683      	mov	fp, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	f43f aeb8 	beq.w	8007fc0 <_strtod_l+0x488>
 8008250:	4601      	mov	r1, r0
 8008252:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008254:	4620      	mov	r0, r4
 8008256:	f001 f9cf 	bl	80095f8 <__multiply>
 800825a:	900b      	str	r0, [sp, #44]	; 0x2c
 800825c:	2800      	cmp	r0, #0
 800825e:	f43f aeaf 	beq.w	8007fc0 <_strtod_l+0x488>
 8008262:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008264:	4620      	mov	r0, r4
 8008266:	f001 f8b1 	bl	80093cc <_Bfree>
 800826a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800826c:	9316      	str	r3, [sp, #88]	; 0x58
 800826e:	2e00      	cmp	r6, #0
 8008270:	f300 808c 	bgt.w	800838c <_strtod_l+0x854>
 8008274:	9b08      	ldr	r3, [sp, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd08      	ble.n	800828c <_strtod_l+0x754>
 800827a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800827c:	9905      	ldr	r1, [sp, #20]
 800827e:	4620      	mov	r0, r4
 8008280:	f001 fa64 	bl	800974c <__pow5mult>
 8008284:	9005      	str	r0, [sp, #20]
 8008286:	2800      	cmp	r0, #0
 8008288:	f43f ae9a 	beq.w	8007fc0 <_strtod_l+0x488>
 800828c:	2f00      	cmp	r7, #0
 800828e:	dd08      	ble.n	80082a2 <_strtod_l+0x76a>
 8008290:	9905      	ldr	r1, [sp, #20]
 8008292:	463a      	mov	r2, r7
 8008294:	4620      	mov	r0, r4
 8008296:	f001 fab3 	bl	8009800 <__lshift>
 800829a:	9005      	str	r0, [sp, #20]
 800829c:	2800      	cmp	r0, #0
 800829e:	f43f ae8f 	beq.w	8007fc0 <_strtod_l+0x488>
 80082a2:	f1ba 0f00 	cmp.w	sl, #0
 80082a6:	dd08      	ble.n	80082ba <_strtod_l+0x782>
 80082a8:	4659      	mov	r1, fp
 80082aa:	4652      	mov	r2, sl
 80082ac:	4620      	mov	r0, r4
 80082ae:	f001 faa7 	bl	8009800 <__lshift>
 80082b2:	4683      	mov	fp, r0
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f43f ae83 	beq.w	8007fc0 <_strtod_l+0x488>
 80082ba:	9a05      	ldr	r2, [sp, #20]
 80082bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082be:	4620      	mov	r0, r4
 80082c0:	f001 fb26 	bl	8009910 <__mdiff>
 80082c4:	4605      	mov	r5, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f43f ae7a 	beq.w	8007fc0 <_strtod_l+0x488>
 80082cc:	68c3      	ldr	r3, [r0, #12]
 80082ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d0:	2300      	movs	r3, #0
 80082d2:	60c3      	str	r3, [r0, #12]
 80082d4:	4659      	mov	r1, fp
 80082d6:	f001 faff 	bl	80098d8 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	da60      	bge.n	80083a0 <_strtod_l+0x868>
 80082de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e0:	ea53 0308 	orrs.w	r3, r3, r8
 80082e4:	f040 8084 	bne.w	80083f0 <_strtod_l+0x8b8>
 80082e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d17f      	bne.n	80083f0 <_strtod_l+0x8b8>
 80082f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082f4:	0d1b      	lsrs	r3, r3, #20
 80082f6:	051b      	lsls	r3, r3, #20
 80082f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80082fc:	d978      	bls.n	80083f0 <_strtod_l+0x8b8>
 80082fe:	696b      	ldr	r3, [r5, #20]
 8008300:	b913      	cbnz	r3, 8008308 <_strtod_l+0x7d0>
 8008302:	692b      	ldr	r3, [r5, #16]
 8008304:	2b01      	cmp	r3, #1
 8008306:	dd73      	ble.n	80083f0 <_strtod_l+0x8b8>
 8008308:	4629      	mov	r1, r5
 800830a:	2201      	movs	r2, #1
 800830c:	4620      	mov	r0, r4
 800830e:	f001 fa77 	bl	8009800 <__lshift>
 8008312:	4659      	mov	r1, fp
 8008314:	4605      	mov	r5, r0
 8008316:	f001 fadf 	bl	80098d8 <__mcmp>
 800831a:	2800      	cmp	r0, #0
 800831c:	dd68      	ble.n	80083f0 <_strtod_l+0x8b8>
 800831e:	9904      	ldr	r1, [sp, #16]
 8008320:	4a54      	ldr	r2, [pc, #336]	; (8008474 <_strtod_l+0x93c>)
 8008322:	464b      	mov	r3, r9
 8008324:	2900      	cmp	r1, #0
 8008326:	f000 8084 	beq.w	8008432 <_strtod_l+0x8fa>
 800832a:	ea02 0109 	and.w	r1, r2, r9
 800832e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008332:	dc7e      	bgt.n	8008432 <_strtod_l+0x8fa>
 8008334:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008338:	f77f aeb3 	ble.w	80080a2 <_strtod_l+0x56a>
 800833c:	4b4e      	ldr	r3, [pc, #312]	; (8008478 <_strtod_l+0x940>)
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	2200      	movs	r2, #0
 8008344:	f7f8 f970 	bl	8000628 <__aeabi_dmul>
 8008348:	4b4a      	ldr	r3, [pc, #296]	; (8008474 <_strtod_l+0x93c>)
 800834a:	400b      	ands	r3, r1
 800834c:	4680      	mov	r8, r0
 800834e:	4689      	mov	r9, r1
 8008350:	2b00      	cmp	r3, #0
 8008352:	f47f ae3f 	bne.w	8007fd4 <_strtod_l+0x49c>
 8008356:	2322      	movs	r3, #34	; 0x22
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	e63b      	b.n	8007fd4 <_strtod_l+0x49c>
 800835c:	f04f 32ff 	mov.w	r2, #4294967295
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	ea03 0808 	and.w	r8, r3, r8
 8008368:	e6e8      	b.n	800813c <_strtod_l+0x604>
 800836a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800836e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008372:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008376:	36e2      	adds	r6, #226	; 0xe2
 8008378:	fa01 f306 	lsl.w	r3, r1, r6
 800837c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008380:	e748      	b.n	8008214 <_strtod_l+0x6dc>
 8008382:	2100      	movs	r1, #0
 8008384:	2301      	movs	r3, #1
 8008386:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800838a:	e743      	b.n	8008214 <_strtod_l+0x6dc>
 800838c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800838e:	4632      	mov	r2, r6
 8008390:	4620      	mov	r0, r4
 8008392:	f001 fa35 	bl	8009800 <__lshift>
 8008396:	9016      	str	r0, [sp, #88]	; 0x58
 8008398:	2800      	cmp	r0, #0
 800839a:	f47f af6b 	bne.w	8008274 <_strtod_l+0x73c>
 800839e:	e60f      	b.n	8007fc0 <_strtod_l+0x488>
 80083a0:	46ca      	mov	sl, r9
 80083a2:	d171      	bne.n	8008488 <_strtod_l+0x950>
 80083a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083aa:	b352      	cbz	r2, 8008402 <_strtod_l+0x8ca>
 80083ac:	4a33      	ldr	r2, [pc, #204]	; (800847c <_strtod_l+0x944>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d12a      	bne.n	8008408 <_strtod_l+0x8d0>
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	4641      	mov	r1, r8
 80083b6:	b1fb      	cbz	r3, 80083f8 <_strtod_l+0x8c0>
 80083b8:	4b2e      	ldr	r3, [pc, #184]	; (8008474 <_strtod_l+0x93c>)
 80083ba:	ea09 0303 	and.w	r3, r9, r3
 80083be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083c2:	f04f 32ff 	mov.w	r2, #4294967295
 80083c6:	d81a      	bhi.n	80083fe <_strtod_l+0x8c6>
 80083c8:	0d1b      	lsrs	r3, r3, #20
 80083ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083ce:	fa02 f303 	lsl.w	r3, r2, r3
 80083d2:	4299      	cmp	r1, r3
 80083d4:	d118      	bne.n	8008408 <_strtod_l+0x8d0>
 80083d6:	4b2a      	ldr	r3, [pc, #168]	; (8008480 <_strtod_l+0x948>)
 80083d8:	459a      	cmp	sl, r3
 80083da:	d102      	bne.n	80083e2 <_strtod_l+0x8aa>
 80083dc:	3101      	adds	r1, #1
 80083de:	f43f adef 	beq.w	8007fc0 <_strtod_l+0x488>
 80083e2:	4b24      	ldr	r3, [pc, #144]	; (8008474 <_strtod_l+0x93c>)
 80083e4:	ea0a 0303 	and.w	r3, sl, r3
 80083e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80083ec:	f04f 0800 	mov.w	r8, #0
 80083f0:	9b04      	ldr	r3, [sp, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1a2      	bne.n	800833c <_strtod_l+0x804>
 80083f6:	e5ed      	b.n	8007fd4 <_strtod_l+0x49c>
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	e7e9      	b.n	80083d2 <_strtod_l+0x89a>
 80083fe:	4613      	mov	r3, r2
 8008400:	e7e7      	b.n	80083d2 <_strtod_l+0x89a>
 8008402:	ea53 0308 	orrs.w	r3, r3, r8
 8008406:	d08a      	beq.n	800831e <_strtod_l+0x7e6>
 8008408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840a:	b1e3      	cbz	r3, 8008446 <_strtod_l+0x90e>
 800840c:	ea13 0f0a 	tst.w	r3, sl
 8008410:	d0ee      	beq.n	80083f0 <_strtod_l+0x8b8>
 8008412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	4640      	mov	r0, r8
 8008418:	4649      	mov	r1, r9
 800841a:	b1c3      	cbz	r3, 800844e <_strtod_l+0x916>
 800841c:	f7ff fb6e 	bl	8007afc <sulp>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	ec51 0b18 	vmov	r0, r1, d8
 8008428:	f7f7 ff48 	bl	80002bc <__adddf3>
 800842c:	4680      	mov	r8, r0
 800842e:	4689      	mov	r9, r1
 8008430:	e7de      	b.n	80083f0 <_strtod_l+0x8b8>
 8008432:	4013      	ands	r3, r2
 8008434:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008438:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800843c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008440:	f04f 38ff 	mov.w	r8, #4294967295
 8008444:	e7d4      	b.n	80083f0 <_strtod_l+0x8b8>
 8008446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008448:	ea13 0f08 	tst.w	r3, r8
 800844c:	e7e0      	b.n	8008410 <_strtod_l+0x8d8>
 800844e:	f7ff fb55 	bl	8007afc <sulp>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	ec51 0b18 	vmov	r0, r1, d8
 800845a:	f7f7 ff2d 	bl	80002b8 <__aeabi_dsub>
 800845e:	2200      	movs	r2, #0
 8008460:	2300      	movs	r3, #0
 8008462:	4680      	mov	r8, r0
 8008464:	4689      	mov	r9, r1
 8008466:	f7f8 fb47 	bl	8000af8 <__aeabi_dcmpeq>
 800846a:	2800      	cmp	r0, #0
 800846c:	d0c0      	beq.n	80083f0 <_strtod_l+0x8b8>
 800846e:	e618      	b.n	80080a2 <_strtod_l+0x56a>
 8008470:	fffffc02 	.word	0xfffffc02
 8008474:	7ff00000 	.word	0x7ff00000
 8008478:	39500000 	.word	0x39500000
 800847c:	000fffff 	.word	0x000fffff
 8008480:	7fefffff 	.word	0x7fefffff
 8008484:	0800bb80 	.word	0x0800bb80
 8008488:	4659      	mov	r1, fp
 800848a:	4628      	mov	r0, r5
 800848c:	f001 fb94 	bl	8009bb8 <__ratio>
 8008490:	ec57 6b10 	vmov	r6, r7, d0
 8008494:	ee10 0a10 	vmov	r0, s0
 8008498:	2200      	movs	r2, #0
 800849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800849e:	4639      	mov	r1, r7
 80084a0:	f7f8 fb3e 	bl	8000b20 <__aeabi_dcmple>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d071      	beq.n	800858c <_strtod_l+0xa54>
 80084a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d17c      	bne.n	80085a8 <_strtod_l+0xa70>
 80084ae:	f1b8 0f00 	cmp.w	r8, #0
 80084b2:	d15a      	bne.n	800856a <_strtod_l+0xa32>
 80084b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d15d      	bne.n	8008578 <_strtod_l+0xa40>
 80084bc:	4b90      	ldr	r3, [pc, #576]	; (8008700 <_strtod_l+0xbc8>)
 80084be:	2200      	movs	r2, #0
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 fb22 	bl	8000b0c <__aeabi_dcmplt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d15c      	bne.n	8008586 <_strtod_l+0xa4e>
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	4b8c      	ldr	r3, [pc, #560]	; (8008704 <_strtod_l+0xbcc>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	f7f8 f8a8 	bl	8000628 <__aeabi_dmul>
 80084d8:	4606      	mov	r6, r0
 80084da:	460f      	mov	r7, r1
 80084dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80084e0:	9606      	str	r6, [sp, #24]
 80084e2:	9307      	str	r3, [sp, #28]
 80084e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80084ec:	4b86      	ldr	r3, [pc, #536]	; (8008708 <_strtod_l+0xbd0>)
 80084ee:	ea0a 0303 	and.w	r3, sl, r3
 80084f2:	930d      	str	r3, [sp, #52]	; 0x34
 80084f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084f6:	4b85      	ldr	r3, [pc, #532]	; (800870c <_strtod_l+0xbd4>)
 80084f8:	429a      	cmp	r2, r3
 80084fa:	f040 8090 	bne.w	800861e <_strtod_l+0xae6>
 80084fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008502:	ec49 8b10 	vmov	d0, r8, r9
 8008506:	f001 fa8d 	bl	8009a24 <__ulp>
 800850a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800850e:	ec51 0b10 	vmov	r0, r1, d0
 8008512:	f7f8 f889 	bl	8000628 <__aeabi_dmul>
 8008516:	4642      	mov	r2, r8
 8008518:	464b      	mov	r3, r9
 800851a:	f7f7 fecf 	bl	80002bc <__adddf3>
 800851e:	460b      	mov	r3, r1
 8008520:	4979      	ldr	r1, [pc, #484]	; (8008708 <_strtod_l+0xbd0>)
 8008522:	4a7b      	ldr	r2, [pc, #492]	; (8008710 <_strtod_l+0xbd8>)
 8008524:	4019      	ands	r1, r3
 8008526:	4291      	cmp	r1, r2
 8008528:	4680      	mov	r8, r0
 800852a:	d944      	bls.n	80085b6 <_strtod_l+0xa7e>
 800852c:	ee18 2a90 	vmov	r2, s17
 8008530:	4b78      	ldr	r3, [pc, #480]	; (8008714 <_strtod_l+0xbdc>)
 8008532:	429a      	cmp	r2, r3
 8008534:	d104      	bne.n	8008540 <_strtod_l+0xa08>
 8008536:	ee18 3a10 	vmov	r3, s16
 800853a:	3301      	adds	r3, #1
 800853c:	f43f ad40 	beq.w	8007fc0 <_strtod_l+0x488>
 8008540:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008714 <_strtod_l+0xbdc>
 8008544:	f04f 38ff 	mov.w	r8, #4294967295
 8008548:	9916      	ldr	r1, [sp, #88]	; 0x58
 800854a:	4620      	mov	r0, r4
 800854c:	f000 ff3e 	bl	80093cc <_Bfree>
 8008550:	9905      	ldr	r1, [sp, #20]
 8008552:	4620      	mov	r0, r4
 8008554:	f000 ff3a 	bl	80093cc <_Bfree>
 8008558:	4659      	mov	r1, fp
 800855a:	4620      	mov	r0, r4
 800855c:	f000 ff36 	bl	80093cc <_Bfree>
 8008560:	4629      	mov	r1, r5
 8008562:	4620      	mov	r0, r4
 8008564:	f000 ff32 	bl	80093cc <_Bfree>
 8008568:	e609      	b.n	800817e <_strtod_l+0x646>
 800856a:	f1b8 0f01 	cmp.w	r8, #1
 800856e:	d103      	bne.n	8008578 <_strtod_l+0xa40>
 8008570:	f1b9 0f00 	cmp.w	r9, #0
 8008574:	f43f ad95 	beq.w	80080a2 <_strtod_l+0x56a>
 8008578:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80086d0 <_strtod_l+0xb98>
 800857c:	4f60      	ldr	r7, [pc, #384]	; (8008700 <_strtod_l+0xbc8>)
 800857e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008582:	2600      	movs	r6, #0
 8008584:	e7ae      	b.n	80084e4 <_strtod_l+0x9ac>
 8008586:	4f5f      	ldr	r7, [pc, #380]	; (8008704 <_strtod_l+0xbcc>)
 8008588:	2600      	movs	r6, #0
 800858a:	e7a7      	b.n	80084dc <_strtod_l+0x9a4>
 800858c:	4b5d      	ldr	r3, [pc, #372]	; (8008704 <_strtod_l+0xbcc>)
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	2200      	movs	r2, #0
 8008594:	f7f8 f848 	bl	8000628 <__aeabi_dmul>
 8008598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d09c      	beq.n	80084dc <_strtod_l+0x9a4>
 80085a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80085a6:	e79d      	b.n	80084e4 <_strtod_l+0x9ac>
 80085a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80086d8 <_strtod_l+0xba0>
 80085ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085b0:	ec57 6b17 	vmov	r6, r7, d7
 80085b4:	e796      	b.n	80084e4 <_strtod_l+0x9ac>
 80085b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	46ca      	mov	sl, r9
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1c2      	bne.n	8008548 <_strtod_l+0xa10>
 80085c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085c8:	0d1b      	lsrs	r3, r3, #20
 80085ca:	051b      	lsls	r3, r3, #20
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d1bb      	bne.n	8008548 <_strtod_l+0xa10>
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f8 fbd8 	bl	8000d88 <__aeabi_d2lz>
 80085d8:	f7f7 fff8 	bl	80005cc <__aeabi_l2d>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f7 fe68 	bl	80002b8 <__aeabi_dsub>
 80085e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ee:	ea43 0308 	orr.w	r3, r3, r8
 80085f2:	4313      	orrs	r3, r2
 80085f4:	4606      	mov	r6, r0
 80085f6:	460f      	mov	r7, r1
 80085f8:	d054      	beq.n	80086a4 <_strtod_l+0xb6c>
 80085fa:	a339      	add	r3, pc, #228	; (adr r3, 80086e0 <_strtod_l+0xba8>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f7f8 fa84 	bl	8000b0c <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f47f ace5 	bne.w	8007fd4 <_strtod_l+0x49c>
 800860a:	a337      	add	r3, pc, #220	; (adr r3, 80086e8 <_strtod_l+0xbb0>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f8 fa98 	bl	8000b48 <__aeabi_dcmpgt>
 8008618:	2800      	cmp	r0, #0
 800861a:	d095      	beq.n	8008548 <_strtod_l+0xa10>
 800861c:	e4da      	b.n	8007fd4 <_strtod_l+0x49c>
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	b333      	cbz	r3, 8008670 <_strtod_l+0xb38>
 8008622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008624:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008628:	d822      	bhi.n	8008670 <_strtod_l+0xb38>
 800862a:	a331      	add	r3, pc, #196	; (adr r3, 80086f0 <_strtod_l+0xbb8>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f8 fa74 	bl	8000b20 <__aeabi_dcmple>
 8008638:	b1a0      	cbz	r0, 8008664 <_strtod_l+0xb2c>
 800863a:	4639      	mov	r1, r7
 800863c:	4630      	mov	r0, r6
 800863e:	f7f8 facb 	bl	8000bd8 <__aeabi_d2uiz>
 8008642:	2801      	cmp	r0, #1
 8008644:	bf38      	it	cc
 8008646:	2001      	movcc	r0, #1
 8008648:	f7f7 ff74 	bl	8000534 <__aeabi_ui2d>
 800864c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864e:	4606      	mov	r6, r0
 8008650:	460f      	mov	r7, r1
 8008652:	bb23      	cbnz	r3, 800869e <_strtod_l+0xb66>
 8008654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008658:	9010      	str	r0, [sp, #64]	; 0x40
 800865a:	9311      	str	r3, [sp, #68]	; 0x44
 800865c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008660:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008668:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800866c:	1a9b      	subs	r3, r3, r2
 800866e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008670:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008674:	eeb0 0a48 	vmov.f32	s0, s16
 8008678:	eef0 0a68 	vmov.f32	s1, s17
 800867c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008680:	f001 f9d0 	bl	8009a24 <__ulp>
 8008684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008688:	ec53 2b10 	vmov	r2, r3, d0
 800868c:	f7f7 ffcc 	bl	8000628 <__aeabi_dmul>
 8008690:	ec53 2b18 	vmov	r2, r3, d8
 8008694:	f7f7 fe12 	bl	80002bc <__adddf3>
 8008698:	4680      	mov	r8, r0
 800869a:	4689      	mov	r9, r1
 800869c:	e78d      	b.n	80085ba <_strtod_l+0xa82>
 800869e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80086a2:	e7db      	b.n	800865c <_strtod_l+0xb24>
 80086a4:	a314      	add	r3, pc, #80	; (adr r3, 80086f8 <_strtod_l+0xbc0>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f8 fa2f 	bl	8000b0c <__aeabi_dcmplt>
 80086ae:	e7b3      	b.n	8008618 <_strtod_l+0xae0>
 80086b0:	2300      	movs	r3, #0
 80086b2:	930a      	str	r3, [sp, #40]	; 0x28
 80086b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	f7ff ba7c 	b.w	8007bb6 <_strtod_l+0x7e>
 80086be:	2a65      	cmp	r2, #101	; 0x65
 80086c0:	f43f ab75 	beq.w	8007dae <_strtod_l+0x276>
 80086c4:	2a45      	cmp	r2, #69	; 0x45
 80086c6:	f43f ab72 	beq.w	8007dae <_strtod_l+0x276>
 80086ca:	2301      	movs	r3, #1
 80086cc:	f7ff bbaa 	b.w	8007e24 <_strtod_l+0x2ec>
 80086d0:	00000000 	.word	0x00000000
 80086d4:	bff00000 	.word	0xbff00000
 80086d8:	00000000 	.word	0x00000000
 80086dc:	3ff00000 	.word	0x3ff00000
 80086e0:	94a03595 	.word	0x94a03595
 80086e4:	3fdfffff 	.word	0x3fdfffff
 80086e8:	35afe535 	.word	0x35afe535
 80086ec:	3fe00000 	.word	0x3fe00000
 80086f0:	ffc00000 	.word	0xffc00000
 80086f4:	41dfffff 	.word	0x41dfffff
 80086f8:	94a03595 	.word	0x94a03595
 80086fc:	3fcfffff 	.word	0x3fcfffff
 8008700:	3ff00000 	.word	0x3ff00000
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	7ff00000 	.word	0x7ff00000
 800870c:	7fe00000 	.word	0x7fe00000
 8008710:	7c9fffff 	.word	0x7c9fffff
 8008714:	7fefffff 	.word	0x7fefffff

08008718 <strtod>:
 8008718:	460a      	mov	r2, r1
 800871a:	4601      	mov	r1, r0
 800871c:	4802      	ldr	r0, [pc, #8]	; (8008728 <strtod+0x10>)
 800871e:	4b03      	ldr	r3, [pc, #12]	; (800872c <strtod+0x14>)
 8008720:	6800      	ldr	r0, [r0, #0]
 8008722:	f7ff ba09 	b.w	8007b38 <_strtod_l>
 8008726:	bf00      	nop
 8008728:	20000238 	.word	0x20000238
 800872c:	20000080 	.word	0x20000080

08008730 <std>:
 8008730:	2300      	movs	r3, #0
 8008732:	b510      	push	{r4, lr}
 8008734:	4604      	mov	r4, r0
 8008736:	e9c0 3300 	strd	r3, r3, [r0]
 800873a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800873e:	6083      	str	r3, [r0, #8]
 8008740:	8181      	strh	r1, [r0, #12]
 8008742:	6643      	str	r3, [r0, #100]	; 0x64
 8008744:	81c2      	strh	r2, [r0, #14]
 8008746:	6183      	str	r3, [r0, #24]
 8008748:	4619      	mov	r1, r3
 800874a:	2208      	movs	r2, #8
 800874c:	305c      	adds	r0, #92	; 0x5c
 800874e:	f000 f8f4 	bl	800893a <memset>
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <std+0x58>)
 8008754:	6263      	str	r3, [r4, #36]	; 0x24
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <std+0x5c>)
 8008758:	62a3      	str	r3, [r4, #40]	; 0x28
 800875a:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <std+0x60>)
 800875c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800875e:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <std+0x64>)
 8008760:	6323      	str	r3, [r4, #48]	; 0x30
 8008762:	4b0d      	ldr	r3, [pc, #52]	; (8008798 <std+0x68>)
 8008764:	6224      	str	r4, [r4, #32]
 8008766:	429c      	cmp	r4, r3
 8008768:	d006      	beq.n	8008778 <std+0x48>
 800876a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800876e:	4294      	cmp	r4, r2
 8008770:	d002      	beq.n	8008778 <std+0x48>
 8008772:	33d0      	adds	r3, #208	; 0xd0
 8008774:	429c      	cmp	r4, r3
 8008776:	d105      	bne.n	8008784 <std+0x54>
 8008778:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800877c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008780:	f000 b966 	b.w	8008a50 <__retarget_lock_init_recursive>
 8008784:	bd10      	pop	{r4, pc}
 8008786:	bf00      	nop
 8008788:	080088b5 	.word	0x080088b5
 800878c:	080088d7 	.word	0x080088d7
 8008790:	0800890f 	.word	0x0800890f
 8008794:	08008933 	.word	0x08008933
 8008798:	20000690 	.word	0x20000690

0800879c <stdio_exit_handler>:
 800879c:	4a02      	ldr	r2, [pc, #8]	; (80087a8 <stdio_exit_handler+0xc>)
 800879e:	4903      	ldr	r1, [pc, #12]	; (80087ac <stdio_exit_handler+0x10>)
 80087a0:	4803      	ldr	r0, [pc, #12]	; (80087b0 <stdio_exit_handler+0x14>)
 80087a2:	f000 b869 	b.w	8008878 <_fwalk_sglue>
 80087a6:	bf00      	nop
 80087a8:	20000074 	.word	0x20000074
 80087ac:	08009dcd 	.word	0x08009dcd
 80087b0:	200001ec 	.word	0x200001ec

080087b4 <cleanup_stdio>:
 80087b4:	6841      	ldr	r1, [r0, #4]
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <cleanup_stdio+0x34>)
 80087b8:	4299      	cmp	r1, r3
 80087ba:	b510      	push	{r4, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	d001      	beq.n	80087c4 <cleanup_stdio+0x10>
 80087c0:	f001 fb04 	bl	8009dcc <_fflush_r>
 80087c4:	68a1      	ldr	r1, [r4, #8]
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <cleanup_stdio+0x38>)
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <cleanup_stdio+0x1e>
 80087cc:	4620      	mov	r0, r4
 80087ce:	f001 fafd 	bl	8009dcc <_fflush_r>
 80087d2:	68e1      	ldr	r1, [r4, #12]
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <cleanup_stdio+0x3c>)
 80087d6:	4299      	cmp	r1, r3
 80087d8:	d004      	beq.n	80087e4 <cleanup_stdio+0x30>
 80087da:	4620      	mov	r0, r4
 80087dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e0:	f001 baf4 	b.w	8009dcc <_fflush_r>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	bf00      	nop
 80087e8:	20000690 	.word	0x20000690
 80087ec:	200006f8 	.word	0x200006f8
 80087f0:	20000760 	.word	0x20000760

080087f4 <global_stdio_init.part.0>:
 80087f4:	b510      	push	{r4, lr}
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <global_stdio_init.part.0+0x30>)
 80087f8:	4c0b      	ldr	r4, [pc, #44]	; (8008828 <global_stdio_init.part.0+0x34>)
 80087fa:	4a0c      	ldr	r2, [pc, #48]	; (800882c <global_stdio_init.part.0+0x38>)
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	4620      	mov	r0, r4
 8008800:	2200      	movs	r2, #0
 8008802:	2104      	movs	r1, #4
 8008804:	f7ff ff94 	bl	8008730 <std>
 8008808:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800880c:	2201      	movs	r2, #1
 800880e:	2109      	movs	r1, #9
 8008810:	f7ff ff8e 	bl	8008730 <std>
 8008814:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008818:	2202      	movs	r2, #2
 800881a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881e:	2112      	movs	r1, #18
 8008820:	f7ff bf86 	b.w	8008730 <std>
 8008824:	200007c8 	.word	0x200007c8
 8008828:	20000690 	.word	0x20000690
 800882c:	0800879d 	.word	0x0800879d

08008830 <__sfp_lock_acquire>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__sfp_lock_acquire+0x8>)
 8008832:	f000 b90e 	b.w	8008a52 <__retarget_lock_acquire_recursive>
 8008836:	bf00      	nop
 8008838:	200007d1 	.word	0x200007d1

0800883c <__sfp_lock_release>:
 800883c:	4801      	ldr	r0, [pc, #4]	; (8008844 <__sfp_lock_release+0x8>)
 800883e:	f000 b909 	b.w	8008a54 <__retarget_lock_release_recursive>
 8008842:	bf00      	nop
 8008844:	200007d1 	.word	0x200007d1

08008848 <__sinit>:
 8008848:	b510      	push	{r4, lr}
 800884a:	4604      	mov	r4, r0
 800884c:	f7ff fff0 	bl	8008830 <__sfp_lock_acquire>
 8008850:	6a23      	ldr	r3, [r4, #32]
 8008852:	b11b      	cbz	r3, 800885c <__sinit+0x14>
 8008854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008858:	f7ff bff0 	b.w	800883c <__sfp_lock_release>
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <__sinit+0x28>)
 800885e:	6223      	str	r3, [r4, #32]
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <__sinit+0x2c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f5      	bne.n	8008854 <__sinit+0xc>
 8008868:	f7ff ffc4 	bl	80087f4 <global_stdio_init.part.0>
 800886c:	e7f2      	b.n	8008854 <__sinit+0xc>
 800886e:	bf00      	nop
 8008870:	080087b5 	.word	0x080087b5
 8008874:	200007c8 	.word	0x200007c8

08008878 <_fwalk_sglue>:
 8008878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800887c:	4607      	mov	r7, r0
 800887e:	4688      	mov	r8, r1
 8008880:	4614      	mov	r4, r2
 8008882:	2600      	movs	r6, #0
 8008884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008888:	f1b9 0901 	subs.w	r9, r9, #1
 800888c:	d505      	bpl.n	800889a <_fwalk_sglue+0x22>
 800888e:	6824      	ldr	r4, [r4, #0]
 8008890:	2c00      	cmp	r4, #0
 8008892:	d1f7      	bne.n	8008884 <_fwalk_sglue+0xc>
 8008894:	4630      	mov	r0, r6
 8008896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d907      	bls.n	80088b0 <_fwalk_sglue+0x38>
 80088a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a4:	3301      	adds	r3, #1
 80088a6:	d003      	beq.n	80088b0 <_fwalk_sglue+0x38>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4638      	mov	r0, r7
 80088ac:	47c0      	blx	r8
 80088ae:	4306      	orrs	r6, r0
 80088b0:	3568      	adds	r5, #104	; 0x68
 80088b2:	e7e9      	b.n	8008888 <_fwalk_sglue+0x10>

080088b4 <__sread>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	f000 f87a 	bl	80089b4 <_read_r>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	bfab      	itete	ge
 80088c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088c6:	89a3      	ldrhlt	r3, [r4, #12]
 80088c8:	181b      	addge	r3, r3, r0
 80088ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ce:	bfac      	ite	ge
 80088d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088d2:	81a3      	strhlt	r3, [r4, #12]
 80088d4:	bd10      	pop	{r4, pc}

080088d6 <__swrite>:
 80088d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	461f      	mov	r7, r3
 80088dc:	898b      	ldrh	r3, [r1, #12]
 80088de:	05db      	lsls	r3, r3, #23
 80088e0:	4605      	mov	r5, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	4616      	mov	r6, r2
 80088e6:	d505      	bpl.n	80088f4 <__swrite+0x1e>
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	2302      	movs	r3, #2
 80088ee:	2200      	movs	r2, #0
 80088f0:	f000 f84e 	bl	8008990 <_lseek_r>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	4628      	mov	r0, r5
 8008906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	f000 b865 	b.w	80089d8 <_write_r>

0800890e <__sseek>:
 800890e:	b510      	push	{r4, lr}
 8008910:	460c      	mov	r4, r1
 8008912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008916:	f000 f83b 	bl	8008990 <_lseek_r>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	bf15      	itete	ne
 8008920:	6560      	strne	r0, [r4, #84]	; 0x54
 8008922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800892a:	81a3      	strheq	r3, [r4, #12]
 800892c:	bf18      	it	ne
 800892e:	81a3      	strhne	r3, [r4, #12]
 8008930:	bd10      	pop	{r4, pc}

08008932 <__sclose>:
 8008932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008936:	f000 b81b 	b.w	8008970 <_close_r>

0800893a <memset>:
 800893a:	4402      	add	r2, r0
 800893c:	4603      	mov	r3, r0
 800893e:	4293      	cmp	r3, r2
 8008940:	d100      	bne.n	8008944 <memset+0xa>
 8008942:	4770      	bx	lr
 8008944:	f803 1b01 	strb.w	r1, [r3], #1
 8008948:	e7f9      	b.n	800893e <memset+0x4>

0800894a <strncmp>:
 800894a:	b510      	push	{r4, lr}
 800894c:	b16a      	cbz	r2, 800896a <strncmp+0x20>
 800894e:	3901      	subs	r1, #1
 8008950:	1884      	adds	r4, r0, r2
 8008952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008956:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800895a:	429a      	cmp	r2, r3
 800895c:	d103      	bne.n	8008966 <strncmp+0x1c>
 800895e:	42a0      	cmp	r0, r4
 8008960:	d001      	beq.n	8008966 <strncmp+0x1c>
 8008962:	2a00      	cmp	r2, #0
 8008964:	d1f5      	bne.n	8008952 <strncmp+0x8>
 8008966:	1ad0      	subs	r0, r2, r3
 8008968:	bd10      	pop	{r4, pc}
 800896a:	4610      	mov	r0, r2
 800896c:	e7fc      	b.n	8008968 <strncmp+0x1e>
	...

08008970 <_close_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d06      	ldr	r5, [pc, #24]	; (800898c <_close_r+0x1c>)
 8008974:	2300      	movs	r3, #0
 8008976:	4604      	mov	r4, r0
 8008978:	4608      	mov	r0, r1
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	f7fb fbc9 	bl	8004112 <_close>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_close_r+0x1a>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_close_r+0x1a>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	200007cc 	.word	0x200007cc

08008990 <_lseek_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_lseek_r+0x20>)
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7fb fbde 	bl	8004160 <_lseek>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_lseek_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_lseek_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	200007cc 	.word	0x200007cc

080089b4 <_read_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_read_r+0x20>)
 80089b8:	4604      	mov	r4, r0
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	602a      	str	r2, [r5, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f7fb fb6c 	bl	80040a0 <_read>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_read_r+0x1e>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_read_r+0x1e>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	200007cc 	.word	0x200007cc

080089d8 <_write_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d07      	ldr	r5, [pc, #28]	; (80089f8 <_write_r+0x20>)
 80089dc:	4604      	mov	r4, r0
 80089de:	4608      	mov	r0, r1
 80089e0:	4611      	mov	r1, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7fb fb77 	bl	80040da <_write>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_write_r+0x1e>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_write_r+0x1e>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	200007cc 	.word	0x200007cc

080089fc <__errno>:
 80089fc:	4b01      	ldr	r3, [pc, #4]	; (8008a04 <__errno+0x8>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000238 	.word	0x20000238

08008a08 <__libc_init_array>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	4d0d      	ldr	r5, [pc, #52]	; (8008a40 <__libc_init_array+0x38>)
 8008a0c:	4c0d      	ldr	r4, [pc, #52]	; (8008a44 <__libc_init_array+0x3c>)
 8008a0e:	1b64      	subs	r4, r4, r5
 8008a10:	10a4      	asrs	r4, r4, #2
 8008a12:	2600      	movs	r6, #0
 8008a14:	42a6      	cmp	r6, r4
 8008a16:	d109      	bne.n	8008a2c <__libc_init_array+0x24>
 8008a18:	4d0b      	ldr	r5, [pc, #44]	; (8008a48 <__libc_init_array+0x40>)
 8008a1a:	4c0c      	ldr	r4, [pc, #48]	; (8008a4c <__libc_init_array+0x44>)
 8008a1c:	f003 f83a 	bl	800ba94 <_init>
 8008a20:	1b64      	subs	r4, r4, r5
 8008a22:	10a4      	asrs	r4, r4, #2
 8008a24:	2600      	movs	r6, #0
 8008a26:	42a6      	cmp	r6, r4
 8008a28:	d105      	bne.n	8008a36 <__libc_init_array+0x2e>
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a30:	4798      	blx	r3
 8008a32:	3601      	adds	r6, #1
 8008a34:	e7ee      	b.n	8008a14 <__libc_init_array+0xc>
 8008a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3a:	4798      	blx	r3
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	e7f2      	b.n	8008a26 <__libc_init_array+0x1e>
 8008a40:	0800bfb0 	.word	0x0800bfb0
 8008a44:	0800bfb0 	.word	0x0800bfb0
 8008a48:	0800bfb0 	.word	0x0800bfb0
 8008a4c:	0800bfb4 	.word	0x0800bfb4

08008a50 <__retarget_lock_init_recursive>:
 8008a50:	4770      	bx	lr

08008a52 <__retarget_lock_acquire_recursive>:
 8008a52:	4770      	bx	lr

08008a54 <__retarget_lock_release_recursive>:
 8008a54:	4770      	bx	lr

08008a56 <memcpy>:
 8008a56:	440a      	add	r2, r1
 8008a58:	4291      	cmp	r1, r2
 8008a5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a5e:	d100      	bne.n	8008a62 <memcpy+0xc>
 8008a60:	4770      	bx	lr
 8008a62:	b510      	push	{r4, lr}
 8008a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a6c:	4291      	cmp	r1, r2
 8008a6e:	d1f9      	bne.n	8008a64 <memcpy+0xe>
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	0000      	movs	r0, r0
 8008a74:	0000      	movs	r0, r0
	...

08008a78 <nan>:
 8008a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a80 <nan+0x8>
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	00000000 	.word	0x00000000
 8008a84:	7ff80000 	.word	0x7ff80000

08008a88 <_free_r>:
 8008a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a8a:	2900      	cmp	r1, #0
 8008a8c:	d044      	beq.n	8008b18 <_free_r+0x90>
 8008a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a92:	9001      	str	r0, [sp, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f1a1 0404 	sub.w	r4, r1, #4
 8008a9a:	bfb8      	it	lt
 8008a9c:	18e4      	addlt	r4, r4, r3
 8008a9e:	f000 fc49 	bl	8009334 <__malloc_lock>
 8008aa2:	4a1e      	ldr	r2, [pc, #120]	; (8008b1c <_free_r+0x94>)
 8008aa4:	9801      	ldr	r0, [sp, #4]
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	b933      	cbnz	r3, 8008ab8 <_free_r+0x30>
 8008aaa:	6063      	str	r3, [r4, #4]
 8008aac:	6014      	str	r4, [r2, #0]
 8008aae:	b003      	add	sp, #12
 8008ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab4:	f000 bc44 	b.w	8009340 <__malloc_unlock>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d908      	bls.n	8008ace <_free_r+0x46>
 8008abc:	6825      	ldr	r5, [r4, #0]
 8008abe:	1961      	adds	r1, r4, r5
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf01      	itttt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	1949      	addeq	r1, r1, r5
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	e7ed      	b.n	8008aaa <_free_r+0x22>
 8008ace:	461a      	mov	r2, r3
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	b10b      	cbz	r3, 8008ad8 <_free_r+0x50>
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d9fa      	bls.n	8008ace <_free_r+0x46>
 8008ad8:	6811      	ldr	r1, [r2, #0]
 8008ada:	1855      	adds	r5, r2, r1
 8008adc:	42a5      	cmp	r5, r4
 8008ade:	d10b      	bne.n	8008af8 <_free_r+0x70>
 8008ae0:	6824      	ldr	r4, [r4, #0]
 8008ae2:	4421      	add	r1, r4
 8008ae4:	1854      	adds	r4, r2, r1
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	6011      	str	r1, [r2, #0]
 8008aea:	d1e0      	bne.n	8008aae <_free_r+0x26>
 8008aec:	681c      	ldr	r4, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	6053      	str	r3, [r2, #4]
 8008af2:	440c      	add	r4, r1
 8008af4:	6014      	str	r4, [r2, #0]
 8008af6:	e7da      	b.n	8008aae <_free_r+0x26>
 8008af8:	d902      	bls.n	8008b00 <_free_r+0x78>
 8008afa:	230c      	movs	r3, #12
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	e7d6      	b.n	8008aae <_free_r+0x26>
 8008b00:	6825      	ldr	r5, [r4, #0]
 8008b02:	1961      	adds	r1, r4, r5
 8008b04:	428b      	cmp	r3, r1
 8008b06:	bf04      	itt	eq
 8008b08:	6819      	ldreq	r1, [r3, #0]
 8008b0a:	685b      	ldreq	r3, [r3, #4]
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	bf04      	itt	eq
 8008b10:	1949      	addeq	r1, r1, r5
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	6054      	str	r4, [r2, #4]
 8008b16:	e7ca      	b.n	8008aae <_free_r+0x26>
 8008b18:	b003      	add	sp, #12
 8008b1a:	bd30      	pop	{r4, r5, pc}
 8008b1c:	200007d4 	.word	0x200007d4

08008b20 <rshift>:
 8008b20:	6903      	ldr	r3, [r0, #16]
 8008b22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b2e:	f100 0414 	add.w	r4, r0, #20
 8008b32:	dd45      	ble.n	8008bc0 <rshift+0xa0>
 8008b34:	f011 011f 	ands.w	r1, r1, #31
 8008b38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b40:	d10c      	bne.n	8008b5c <rshift+0x3c>
 8008b42:	f100 0710 	add.w	r7, r0, #16
 8008b46:	4629      	mov	r1, r5
 8008b48:	42b1      	cmp	r1, r6
 8008b4a:	d334      	bcc.n	8008bb6 <rshift+0x96>
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	1eea      	subs	r2, r5, #3
 8008b52:	4296      	cmp	r6, r2
 8008b54:	bf38      	it	cc
 8008b56:	2300      	movcc	r3, #0
 8008b58:	4423      	add	r3, r4
 8008b5a:	e015      	b.n	8008b88 <rshift+0x68>
 8008b5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b60:	f1c1 0820 	rsb	r8, r1, #32
 8008b64:	40cf      	lsrs	r7, r1
 8008b66:	f105 0e04 	add.w	lr, r5, #4
 8008b6a:	46a1      	mov	r9, r4
 8008b6c:	4576      	cmp	r6, lr
 8008b6e:	46f4      	mov	ip, lr
 8008b70:	d815      	bhi.n	8008b9e <rshift+0x7e>
 8008b72:	1a9a      	subs	r2, r3, r2
 8008b74:	0092      	lsls	r2, r2, #2
 8008b76:	3a04      	subs	r2, #4
 8008b78:	3501      	adds	r5, #1
 8008b7a:	42ae      	cmp	r6, r5
 8008b7c:	bf38      	it	cc
 8008b7e:	2200      	movcc	r2, #0
 8008b80:	18a3      	adds	r3, r4, r2
 8008b82:	50a7      	str	r7, [r4, r2]
 8008b84:	b107      	cbz	r7, 8008b88 <rshift+0x68>
 8008b86:	3304      	adds	r3, #4
 8008b88:	1b1a      	subs	r2, r3, r4
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b90:	bf08      	it	eq
 8008b92:	2300      	moveq	r3, #0
 8008b94:	6102      	str	r2, [r0, #16]
 8008b96:	bf08      	it	eq
 8008b98:	6143      	streq	r3, [r0, #20]
 8008b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b9e:	f8dc c000 	ldr.w	ip, [ip]
 8008ba2:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ba6:	ea4c 0707 	orr.w	r7, ip, r7
 8008baa:	f849 7b04 	str.w	r7, [r9], #4
 8008bae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bb2:	40cf      	lsrs	r7, r1
 8008bb4:	e7da      	b.n	8008b6c <rshift+0x4c>
 8008bb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bba:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bbe:	e7c3      	b.n	8008b48 <rshift+0x28>
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	e7e1      	b.n	8008b88 <rshift+0x68>

08008bc4 <__hexdig_fun>:
 8008bc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bc8:	2b09      	cmp	r3, #9
 8008bca:	d802      	bhi.n	8008bd2 <__hexdig_fun+0xe>
 8008bcc:	3820      	subs	r0, #32
 8008bce:	b2c0      	uxtb	r0, r0
 8008bd0:	4770      	bx	lr
 8008bd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	d801      	bhi.n	8008bde <__hexdig_fun+0x1a>
 8008bda:	3847      	subs	r0, #71	; 0x47
 8008bdc:	e7f7      	b.n	8008bce <__hexdig_fun+0xa>
 8008bde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d801      	bhi.n	8008bea <__hexdig_fun+0x26>
 8008be6:	3827      	subs	r0, #39	; 0x27
 8008be8:	e7f1      	b.n	8008bce <__hexdig_fun+0xa>
 8008bea:	2000      	movs	r0, #0
 8008bec:	4770      	bx	lr
	...

08008bf0 <__gethex>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	4617      	mov	r7, r2
 8008bf6:	680a      	ldr	r2, [r1, #0]
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	f102 0b02 	add.w	fp, r2, #2
 8008bfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c06:	4681      	mov	r9, r0
 8008c08:	468a      	mov	sl, r1
 8008c0a:	9302      	str	r3, [sp, #8]
 8008c0c:	32fe      	adds	r2, #254	; 0xfe
 8008c0e:	eb02 030b 	add.w	r3, r2, fp
 8008c12:	46d8      	mov	r8, fp
 8008c14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	2830      	cmp	r0, #48	; 0x30
 8008c1c:	d0f7      	beq.n	8008c0e <__gethex+0x1e>
 8008c1e:	f7ff ffd1 	bl	8008bc4 <__hexdig_fun>
 8008c22:	4604      	mov	r4, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d138      	bne.n	8008c9a <__gethex+0xaa>
 8008c28:	49a7      	ldr	r1, [pc, #668]	; (8008ec8 <__gethex+0x2d8>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	f7ff fe8c 	bl	800894a <strncmp>
 8008c32:	4606      	mov	r6, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d169      	bne.n	8008d0c <__gethex+0x11c>
 8008c38:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008c3c:	465d      	mov	r5, fp
 8008c3e:	f7ff ffc1 	bl	8008bc4 <__hexdig_fun>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d064      	beq.n	8008d10 <__gethex+0x120>
 8008c46:	465a      	mov	r2, fp
 8008c48:	7810      	ldrb	r0, [r2, #0]
 8008c4a:	2830      	cmp	r0, #48	; 0x30
 8008c4c:	4690      	mov	r8, r2
 8008c4e:	f102 0201 	add.w	r2, r2, #1
 8008c52:	d0f9      	beq.n	8008c48 <__gethex+0x58>
 8008c54:	f7ff ffb6 	bl	8008bc4 <__hexdig_fun>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	fab0 f480 	clz	r4, r0
 8008c5e:	0964      	lsrs	r4, r4, #5
 8008c60:	465e      	mov	r6, fp
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	4642      	mov	r2, r8
 8008c66:	4615      	mov	r5, r2
 8008c68:	3201      	adds	r2, #1
 8008c6a:	7828      	ldrb	r0, [r5, #0]
 8008c6c:	f7ff ffaa 	bl	8008bc4 <__hexdig_fun>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1f8      	bne.n	8008c66 <__gethex+0x76>
 8008c74:	4994      	ldr	r1, [pc, #592]	; (8008ec8 <__gethex+0x2d8>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7ff fe66 	bl	800894a <strncmp>
 8008c7e:	b978      	cbnz	r0, 8008ca0 <__gethex+0xb0>
 8008c80:	b946      	cbnz	r6, 8008c94 <__gethex+0xa4>
 8008c82:	1c6e      	adds	r6, r5, #1
 8008c84:	4632      	mov	r2, r6
 8008c86:	4615      	mov	r5, r2
 8008c88:	3201      	adds	r2, #1
 8008c8a:	7828      	ldrb	r0, [r5, #0]
 8008c8c:	f7ff ff9a 	bl	8008bc4 <__hexdig_fun>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d1f8      	bne.n	8008c86 <__gethex+0x96>
 8008c94:	1b73      	subs	r3, r6, r5
 8008c96:	009e      	lsls	r6, r3, #2
 8008c98:	e004      	b.n	8008ca4 <__gethex+0xb4>
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	4626      	mov	r6, r4
 8008c9e:	e7e1      	b.n	8008c64 <__gethex+0x74>
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	d1f7      	bne.n	8008c94 <__gethex+0xa4>
 8008ca4:	782b      	ldrb	r3, [r5, #0]
 8008ca6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008caa:	2b50      	cmp	r3, #80	; 0x50
 8008cac:	d13d      	bne.n	8008d2a <__gethex+0x13a>
 8008cae:	786b      	ldrb	r3, [r5, #1]
 8008cb0:	2b2b      	cmp	r3, #43	; 0x2b
 8008cb2:	d02f      	beq.n	8008d14 <__gethex+0x124>
 8008cb4:	2b2d      	cmp	r3, #45	; 0x2d
 8008cb6:	d031      	beq.n	8008d1c <__gethex+0x12c>
 8008cb8:	1c69      	adds	r1, r5, #1
 8008cba:	f04f 0b00 	mov.w	fp, #0
 8008cbe:	7808      	ldrb	r0, [r1, #0]
 8008cc0:	f7ff ff80 	bl	8008bc4 <__hexdig_fun>
 8008cc4:	1e42      	subs	r2, r0, #1
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	2a18      	cmp	r2, #24
 8008cca:	d82e      	bhi.n	8008d2a <__gethex+0x13a>
 8008ccc:	f1a0 0210 	sub.w	r2, r0, #16
 8008cd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cd4:	f7ff ff76 	bl	8008bc4 <__hexdig_fun>
 8008cd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cdc:	fa5f fc8c 	uxtb.w	ip, ip
 8008ce0:	f1bc 0f18 	cmp.w	ip, #24
 8008ce4:	d91d      	bls.n	8008d22 <__gethex+0x132>
 8008ce6:	f1bb 0f00 	cmp.w	fp, #0
 8008cea:	d000      	beq.n	8008cee <__gethex+0xfe>
 8008cec:	4252      	negs	r2, r2
 8008cee:	4416      	add	r6, r2
 8008cf0:	f8ca 1000 	str.w	r1, [sl]
 8008cf4:	b1dc      	cbz	r4, 8008d2e <__gethex+0x13e>
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bf14      	ite	ne
 8008cfc:	f04f 0800 	movne.w	r8, #0
 8008d00:	f04f 0806 	moveq.w	r8, #6
 8008d04:	4640      	mov	r0, r8
 8008d06:	b005      	add	sp, #20
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	4645      	mov	r5, r8
 8008d0e:	4626      	mov	r6, r4
 8008d10:	2401      	movs	r4, #1
 8008d12:	e7c7      	b.n	8008ca4 <__gethex+0xb4>
 8008d14:	f04f 0b00 	mov.w	fp, #0
 8008d18:	1ca9      	adds	r1, r5, #2
 8008d1a:	e7d0      	b.n	8008cbe <__gethex+0xce>
 8008d1c:	f04f 0b01 	mov.w	fp, #1
 8008d20:	e7fa      	b.n	8008d18 <__gethex+0x128>
 8008d22:	230a      	movs	r3, #10
 8008d24:	fb03 0002 	mla	r0, r3, r2, r0
 8008d28:	e7d0      	b.n	8008ccc <__gethex+0xdc>
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	e7e0      	b.n	8008cf0 <__gethex+0x100>
 8008d2e:	eba5 0308 	sub.w	r3, r5, r8
 8008d32:	3b01      	subs	r3, #1
 8008d34:	4621      	mov	r1, r4
 8008d36:	2b07      	cmp	r3, #7
 8008d38:	dc0a      	bgt.n	8008d50 <__gethex+0x160>
 8008d3a:	4648      	mov	r0, r9
 8008d3c:	f000 fb06 	bl	800934c <_Balloc>
 8008d40:	4604      	mov	r4, r0
 8008d42:	b940      	cbnz	r0, 8008d56 <__gethex+0x166>
 8008d44:	4b61      	ldr	r3, [pc, #388]	; (8008ecc <__gethex+0x2dc>)
 8008d46:	4602      	mov	r2, r0
 8008d48:	21e4      	movs	r1, #228	; 0xe4
 8008d4a:	4861      	ldr	r0, [pc, #388]	; (8008ed0 <__gethex+0x2e0>)
 8008d4c:	f001 f876 	bl	8009e3c <__assert_func>
 8008d50:	3101      	adds	r1, #1
 8008d52:	105b      	asrs	r3, r3, #1
 8008d54:	e7ef      	b.n	8008d36 <__gethex+0x146>
 8008d56:	f100 0a14 	add.w	sl, r0, #20
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	495a      	ldr	r1, [pc, #360]	; (8008ec8 <__gethex+0x2d8>)
 8008d5e:	f8cd a004 	str.w	sl, [sp, #4]
 8008d62:	469b      	mov	fp, r3
 8008d64:	45a8      	cmp	r8, r5
 8008d66:	d342      	bcc.n	8008dee <__gethex+0x1fe>
 8008d68:	9801      	ldr	r0, [sp, #4]
 8008d6a:	f840 bb04 	str.w	fp, [r0], #4
 8008d6e:	eba0 000a 	sub.w	r0, r0, sl
 8008d72:	1080      	asrs	r0, r0, #2
 8008d74:	6120      	str	r0, [r4, #16]
 8008d76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008d7a:	4658      	mov	r0, fp
 8008d7c:	f000 fbd8 	bl	8009530 <__hi0bits>
 8008d80:	683d      	ldr	r5, [r7, #0]
 8008d82:	eba8 0000 	sub.w	r0, r8, r0
 8008d86:	42a8      	cmp	r0, r5
 8008d88:	dd59      	ble.n	8008e3e <__gethex+0x24e>
 8008d8a:	eba0 0805 	sub.w	r8, r0, r5
 8008d8e:	4641      	mov	r1, r8
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 ff67 	bl	8009c64 <__any_on>
 8008d96:	4683      	mov	fp, r0
 8008d98:	b1b8      	cbz	r0, 8008dca <__gethex+0x1da>
 8008d9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8008d9e:	1159      	asrs	r1, r3, #5
 8008da0:	f003 021f 	and.w	r2, r3, #31
 8008da4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008da8:	f04f 0b01 	mov.w	fp, #1
 8008dac:	fa0b f202 	lsl.w	r2, fp, r2
 8008db0:	420a      	tst	r2, r1
 8008db2:	d00a      	beq.n	8008dca <__gethex+0x1da>
 8008db4:	455b      	cmp	r3, fp
 8008db6:	dd06      	ble.n	8008dc6 <__gethex+0x1d6>
 8008db8:	f1a8 0102 	sub.w	r1, r8, #2
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 ff51 	bl	8009c64 <__any_on>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d138      	bne.n	8008e38 <__gethex+0x248>
 8008dc6:	f04f 0b02 	mov.w	fp, #2
 8008dca:	4641      	mov	r1, r8
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7ff fea7 	bl	8008b20 <rshift>
 8008dd2:	4446      	add	r6, r8
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	42b3      	cmp	r3, r6
 8008dd8:	da41      	bge.n	8008e5e <__gethex+0x26e>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4648      	mov	r0, r9
 8008dde:	f000 faf5 	bl	80093cc <_Bfree>
 8008de2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008de4:	2300      	movs	r3, #0
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008dec:	e78a      	b.n	8008d04 <__gethex+0x114>
 8008dee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008df2:	2a2e      	cmp	r2, #46	; 0x2e
 8008df4:	d014      	beq.n	8008e20 <__gethex+0x230>
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d106      	bne.n	8008e08 <__gethex+0x218>
 8008dfa:	9b01      	ldr	r3, [sp, #4]
 8008dfc:	f843 bb04 	str.w	fp, [r3], #4
 8008e00:	f04f 0b00 	mov.w	fp, #0
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	465b      	mov	r3, fp
 8008e08:	7828      	ldrb	r0, [r5, #0]
 8008e0a:	9303      	str	r3, [sp, #12]
 8008e0c:	f7ff feda 	bl	8008bc4 <__hexdig_fun>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	f000 000f 	and.w	r0, r0, #15
 8008e16:	4098      	lsls	r0, r3
 8008e18:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	e7a1      	b.n	8008d64 <__gethex+0x174>
 8008e20:	45a8      	cmp	r8, r5
 8008e22:	d8e8      	bhi.n	8008df6 <__gethex+0x206>
 8008e24:	2201      	movs	r2, #1
 8008e26:	4628      	mov	r0, r5
 8008e28:	9303      	str	r3, [sp, #12]
 8008e2a:	f7ff fd8e 	bl	800894a <strncmp>
 8008e2e:	4926      	ldr	r1, [pc, #152]	; (8008ec8 <__gethex+0x2d8>)
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d1df      	bne.n	8008df6 <__gethex+0x206>
 8008e36:	e795      	b.n	8008d64 <__gethex+0x174>
 8008e38:	f04f 0b03 	mov.w	fp, #3
 8008e3c:	e7c5      	b.n	8008dca <__gethex+0x1da>
 8008e3e:	da0b      	bge.n	8008e58 <__gethex+0x268>
 8008e40:	eba5 0800 	sub.w	r8, r5, r0
 8008e44:	4621      	mov	r1, r4
 8008e46:	4642      	mov	r2, r8
 8008e48:	4648      	mov	r0, r9
 8008e4a:	f000 fcd9 	bl	8009800 <__lshift>
 8008e4e:	eba6 0608 	sub.w	r6, r6, r8
 8008e52:	4604      	mov	r4, r0
 8008e54:	f100 0a14 	add.w	sl, r0, #20
 8008e58:	f04f 0b00 	mov.w	fp, #0
 8008e5c:	e7ba      	b.n	8008dd4 <__gethex+0x1e4>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	42b3      	cmp	r3, r6
 8008e62:	dd73      	ble.n	8008f4c <__gethex+0x35c>
 8008e64:	1b9e      	subs	r6, r3, r6
 8008e66:	42b5      	cmp	r5, r6
 8008e68:	dc34      	bgt.n	8008ed4 <__gethex+0x2e4>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d023      	beq.n	8008eb8 <__gethex+0x2c8>
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d025      	beq.n	8008ec0 <__gethex+0x2d0>
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d115      	bne.n	8008ea4 <__gethex+0x2b4>
 8008e78:	42b5      	cmp	r5, r6
 8008e7a:	d113      	bne.n	8008ea4 <__gethex+0x2b4>
 8008e7c:	2d01      	cmp	r5, #1
 8008e7e:	d10b      	bne.n	8008e98 <__gethex+0x2a8>
 8008e80:	9a02      	ldr	r2, [sp, #8]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	2301      	movs	r3, #1
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	f8ca 3000 	str.w	r3, [sl]
 8008e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e90:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008e94:	601c      	str	r4, [r3, #0]
 8008e96:	e735      	b.n	8008d04 <__gethex+0x114>
 8008e98:	1e69      	subs	r1, r5, #1
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fee2 	bl	8009c64 <__any_on>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d1ed      	bne.n	8008e80 <__gethex+0x290>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4648      	mov	r0, r9
 8008ea8:	f000 fa90 	bl	80093cc <_Bfree>
 8008eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008eb6:	e725      	b.n	8008d04 <__gethex+0x114>
 8008eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f2      	bne.n	8008ea4 <__gethex+0x2b4>
 8008ebe:	e7df      	b.n	8008e80 <__gethex+0x290>
 8008ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1dc      	bne.n	8008e80 <__gethex+0x290>
 8008ec6:	e7ed      	b.n	8008ea4 <__gethex+0x2b4>
 8008ec8:	0800bb48 	.word	0x0800bb48
 8008ecc:	0800bbb0 	.word	0x0800bbb0
 8008ed0:	0800bbc1 	.word	0x0800bbc1
 8008ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008ed8:	f1bb 0f00 	cmp.w	fp, #0
 8008edc:	d133      	bne.n	8008f46 <__gethex+0x356>
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	d004      	beq.n	8008eee <__gethex+0x2fe>
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f000 febc 	bl	8009c64 <__any_on>
 8008eec:	4683      	mov	fp, r0
 8008eee:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ef8:	f008 081f 	and.w	r8, r8, #31
 8008efc:	fa03 f308 	lsl.w	r3, r3, r8
 8008f00:	4213      	tst	r3, r2
 8008f02:	4631      	mov	r1, r6
 8008f04:	4620      	mov	r0, r4
 8008f06:	bf18      	it	ne
 8008f08:	f04b 0b02 	orrne.w	fp, fp, #2
 8008f0c:	1bad      	subs	r5, r5, r6
 8008f0e:	f7ff fe07 	bl	8008b20 <rshift>
 8008f12:	687e      	ldr	r6, [r7, #4]
 8008f14:	f04f 0802 	mov.w	r8, #2
 8008f18:	f1bb 0f00 	cmp.w	fp, #0
 8008f1c:	d04a      	beq.n	8008fb4 <__gethex+0x3c4>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d016      	beq.n	8008f52 <__gethex+0x362>
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d018      	beq.n	8008f5a <__gethex+0x36a>
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d109      	bne.n	8008f40 <__gethex+0x350>
 8008f2c:	f01b 0f02 	tst.w	fp, #2
 8008f30:	d006      	beq.n	8008f40 <__gethex+0x350>
 8008f32:	f8da 3000 	ldr.w	r3, [sl]
 8008f36:	ea4b 0b03 	orr.w	fp, fp, r3
 8008f3a:	f01b 0f01 	tst.w	fp, #1
 8008f3e:	d10f      	bne.n	8008f60 <__gethex+0x370>
 8008f40:	f048 0810 	orr.w	r8, r8, #16
 8008f44:	e036      	b.n	8008fb4 <__gethex+0x3c4>
 8008f46:	f04f 0b01 	mov.w	fp, #1
 8008f4a:	e7d0      	b.n	8008eee <__gethex+0x2fe>
 8008f4c:	f04f 0801 	mov.w	r8, #1
 8008f50:	e7e2      	b.n	8008f18 <__gethex+0x328>
 8008f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f54:	f1c3 0301 	rsb	r3, r3, #1
 8008f58:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ef      	beq.n	8008f40 <__gethex+0x350>
 8008f60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f64:	f104 0214 	add.w	r2, r4, #20
 8008f68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008f72:	2300      	movs	r3, #0
 8008f74:	4694      	mov	ip, r2
 8008f76:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008f7e:	d01e      	beq.n	8008fbe <__gethex+0x3ce>
 8008f80:	3101      	adds	r1, #1
 8008f82:	f8cc 1000 	str.w	r1, [ip]
 8008f86:	f1b8 0f02 	cmp.w	r8, #2
 8008f8a:	f104 0214 	add.w	r2, r4, #20
 8008f8e:	d13d      	bne.n	800900c <__gethex+0x41c>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	42ab      	cmp	r3, r5
 8008f96:	d10b      	bne.n	8008fb0 <__gethex+0x3c0>
 8008f98:	1169      	asrs	r1, r5, #5
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	f005 051f 	and.w	r5, r5, #31
 8008fa0:	fa03 f505 	lsl.w	r5, r3, r5
 8008fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa8:	421d      	tst	r5, r3
 8008faa:	bf18      	it	ne
 8008fac:	f04f 0801 	movne.w	r8, #1
 8008fb0:	f048 0820 	orr.w	r8, r8, #32
 8008fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb6:	601c      	str	r4, [r3, #0]
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	601e      	str	r6, [r3, #0]
 8008fbc:	e6a2      	b.n	8008d04 <__gethex+0x114>
 8008fbe:	4290      	cmp	r0, r2
 8008fc0:	f842 3c04 	str.w	r3, [r2, #-4]
 8008fc4:	d8d6      	bhi.n	8008f74 <__gethex+0x384>
 8008fc6:	68a2      	ldr	r2, [r4, #8]
 8008fc8:	4593      	cmp	fp, r2
 8008fca:	db17      	blt.n	8008ffc <__gethex+0x40c>
 8008fcc:	6861      	ldr	r1, [r4, #4]
 8008fce:	4648      	mov	r0, r9
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	f000 f9bb 	bl	800934c <_Balloc>
 8008fd6:	4682      	mov	sl, r0
 8008fd8:	b918      	cbnz	r0, 8008fe2 <__gethex+0x3f2>
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <__gethex+0x458>)
 8008fdc:	4602      	mov	r2, r0
 8008fde:	2184      	movs	r1, #132	; 0x84
 8008fe0:	e6b3      	b.n	8008d4a <__gethex+0x15a>
 8008fe2:	6922      	ldr	r2, [r4, #16]
 8008fe4:	3202      	adds	r2, #2
 8008fe6:	f104 010c 	add.w	r1, r4, #12
 8008fea:	0092      	lsls	r2, r2, #2
 8008fec:	300c      	adds	r0, #12
 8008fee:	f7ff fd32 	bl	8008a56 <memcpy>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4648      	mov	r0, r9
 8008ff6:	f000 f9e9 	bl	80093cc <_Bfree>
 8008ffa:	4654      	mov	r4, sl
 8008ffc:	6922      	ldr	r2, [r4, #16]
 8008ffe:	1c51      	adds	r1, r2, #1
 8009000:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009004:	6121      	str	r1, [r4, #16]
 8009006:	2101      	movs	r1, #1
 8009008:	6151      	str	r1, [r2, #20]
 800900a:	e7bc      	b.n	8008f86 <__gethex+0x396>
 800900c:	6921      	ldr	r1, [r4, #16]
 800900e:	4559      	cmp	r1, fp
 8009010:	dd0b      	ble.n	800902a <__gethex+0x43a>
 8009012:	2101      	movs	r1, #1
 8009014:	4620      	mov	r0, r4
 8009016:	f7ff fd83 	bl	8008b20 <rshift>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3601      	adds	r6, #1
 800901e:	42b3      	cmp	r3, r6
 8009020:	f6ff aedb 	blt.w	8008dda <__gethex+0x1ea>
 8009024:	f04f 0801 	mov.w	r8, #1
 8009028:	e7c2      	b.n	8008fb0 <__gethex+0x3c0>
 800902a:	f015 051f 	ands.w	r5, r5, #31
 800902e:	d0f9      	beq.n	8009024 <__gethex+0x434>
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	441a      	add	r2, r3
 8009034:	f1c5 0520 	rsb	r5, r5, #32
 8009038:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800903c:	f000 fa78 	bl	8009530 <__hi0bits>
 8009040:	42a8      	cmp	r0, r5
 8009042:	dbe6      	blt.n	8009012 <__gethex+0x422>
 8009044:	e7ee      	b.n	8009024 <__gethex+0x434>
 8009046:	bf00      	nop
 8009048:	0800bbb0 	.word	0x0800bbb0

0800904c <L_shift>:
 800904c:	f1c2 0208 	rsb	r2, r2, #8
 8009050:	0092      	lsls	r2, r2, #2
 8009052:	b570      	push	{r4, r5, r6, lr}
 8009054:	f1c2 0620 	rsb	r6, r2, #32
 8009058:	6843      	ldr	r3, [r0, #4]
 800905a:	6804      	ldr	r4, [r0, #0]
 800905c:	fa03 f506 	lsl.w	r5, r3, r6
 8009060:	432c      	orrs	r4, r5
 8009062:	40d3      	lsrs	r3, r2
 8009064:	6004      	str	r4, [r0, #0]
 8009066:	f840 3f04 	str.w	r3, [r0, #4]!
 800906a:	4288      	cmp	r0, r1
 800906c:	d3f4      	bcc.n	8009058 <L_shift+0xc>
 800906e:	bd70      	pop	{r4, r5, r6, pc}

08009070 <__match>:
 8009070:	b530      	push	{r4, r5, lr}
 8009072:	6803      	ldr	r3, [r0, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800907a:	b914      	cbnz	r4, 8009082 <__match+0x12>
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	2001      	movs	r0, #1
 8009080:	bd30      	pop	{r4, r5, pc}
 8009082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009086:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800908a:	2d19      	cmp	r5, #25
 800908c:	bf98      	it	ls
 800908e:	3220      	addls	r2, #32
 8009090:	42a2      	cmp	r2, r4
 8009092:	d0f0      	beq.n	8009076 <__match+0x6>
 8009094:	2000      	movs	r0, #0
 8009096:	e7f3      	b.n	8009080 <__match+0x10>

08009098 <__hexnan>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	680b      	ldr	r3, [r1, #0]
 800909e:	6801      	ldr	r1, [r0, #0]
 80090a0:	115e      	asrs	r6, r3, #5
 80090a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090a6:	f013 031f 	ands.w	r3, r3, #31
 80090aa:	b087      	sub	sp, #28
 80090ac:	bf18      	it	ne
 80090ae:	3604      	addne	r6, #4
 80090b0:	2500      	movs	r5, #0
 80090b2:	1f37      	subs	r7, r6, #4
 80090b4:	4682      	mov	sl, r0
 80090b6:	4690      	mov	r8, r2
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80090be:	46b9      	mov	r9, r7
 80090c0:	463c      	mov	r4, r7
 80090c2:	9502      	str	r5, [sp, #8]
 80090c4:	46ab      	mov	fp, r5
 80090c6:	784a      	ldrb	r2, [r1, #1]
 80090c8:	1c4b      	adds	r3, r1, #1
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	b342      	cbz	r2, 8009120 <__hexnan+0x88>
 80090ce:	4610      	mov	r0, r2
 80090d0:	9105      	str	r1, [sp, #20]
 80090d2:	9204      	str	r2, [sp, #16]
 80090d4:	f7ff fd76 	bl	8008bc4 <__hexdig_fun>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d14f      	bne.n	800917c <__hexnan+0xe4>
 80090dc:	9a04      	ldr	r2, [sp, #16]
 80090de:	9905      	ldr	r1, [sp, #20]
 80090e0:	2a20      	cmp	r2, #32
 80090e2:	d818      	bhi.n	8009116 <__hexnan+0x7e>
 80090e4:	9b02      	ldr	r3, [sp, #8]
 80090e6:	459b      	cmp	fp, r3
 80090e8:	dd13      	ble.n	8009112 <__hexnan+0x7a>
 80090ea:	454c      	cmp	r4, r9
 80090ec:	d206      	bcs.n	80090fc <__hexnan+0x64>
 80090ee:	2d07      	cmp	r5, #7
 80090f0:	dc04      	bgt.n	80090fc <__hexnan+0x64>
 80090f2:	462a      	mov	r2, r5
 80090f4:	4649      	mov	r1, r9
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7ff ffa8 	bl	800904c <L_shift>
 80090fc:	4544      	cmp	r4, r8
 80090fe:	d950      	bls.n	80091a2 <__hexnan+0x10a>
 8009100:	2300      	movs	r3, #0
 8009102:	f1a4 0904 	sub.w	r9, r4, #4
 8009106:	f844 3c04 	str.w	r3, [r4, #-4]
 800910a:	f8cd b008 	str.w	fp, [sp, #8]
 800910e:	464c      	mov	r4, r9
 8009110:	461d      	mov	r5, r3
 8009112:	9903      	ldr	r1, [sp, #12]
 8009114:	e7d7      	b.n	80090c6 <__hexnan+0x2e>
 8009116:	2a29      	cmp	r2, #41	; 0x29
 8009118:	d155      	bne.n	80091c6 <__hexnan+0x12e>
 800911a:	3102      	adds	r1, #2
 800911c:	f8ca 1000 	str.w	r1, [sl]
 8009120:	f1bb 0f00 	cmp.w	fp, #0
 8009124:	d04f      	beq.n	80091c6 <__hexnan+0x12e>
 8009126:	454c      	cmp	r4, r9
 8009128:	d206      	bcs.n	8009138 <__hexnan+0xa0>
 800912a:	2d07      	cmp	r5, #7
 800912c:	dc04      	bgt.n	8009138 <__hexnan+0xa0>
 800912e:	462a      	mov	r2, r5
 8009130:	4649      	mov	r1, r9
 8009132:	4620      	mov	r0, r4
 8009134:	f7ff ff8a 	bl	800904c <L_shift>
 8009138:	4544      	cmp	r4, r8
 800913a:	d934      	bls.n	80091a6 <__hexnan+0x10e>
 800913c:	f1a8 0204 	sub.w	r2, r8, #4
 8009140:	4623      	mov	r3, r4
 8009142:	f853 1b04 	ldr.w	r1, [r3], #4
 8009146:	f842 1f04 	str.w	r1, [r2, #4]!
 800914a:	429f      	cmp	r7, r3
 800914c:	d2f9      	bcs.n	8009142 <__hexnan+0xaa>
 800914e:	1b3b      	subs	r3, r7, r4
 8009150:	f023 0303 	bic.w	r3, r3, #3
 8009154:	3304      	adds	r3, #4
 8009156:	3e03      	subs	r6, #3
 8009158:	3401      	adds	r4, #1
 800915a:	42a6      	cmp	r6, r4
 800915c:	bf38      	it	cc
 800915e:	2304      	movcc	r3, #4
 8009160:	4443      	add	r3, r8
 8009162:	2200      	movs	r2, #0
 8009164:	f843 2b04 	str.w	r2, [r3], #4
 8009168:	429f      	cmp	r7, r3
 800916a:	d2fb      	bcs.n	8009164 <__hexnan+0xcc>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	b91b      	cbnz	r3, 8009178 <__hexnan+0xe0>
 8009170:	4547      	cmp	r7, r8
 8009172:	d126      	bne.n	80091c2 <__hexnan+0x12a>
 8009174:	2301      	movs	r3, #1
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	2005      	movs	r0, #5
 800917a:	e025      	b.n	80091c8 <__hexnan+0x130>
 800917c:	3501      	adds	r5, #1
 800917e:	2d08      	cmp	r5, #8
 8009180:	f10b 0b01 	add.w	fp, fp, #1
 8009184:	dd06      	ble.n	8009194 <__hexnan+0xfc>
 8009186:	4544      	cmp	r4, r8
 8009188:	d9c3      	bls.n	8009112 <__hexnan+0x7a>
 800918a:	2300      	movs	r3, #0
 800918c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009190:	2501      	movs	r5, #1
 8009192:	3c04      	subs	r4, #4
 8009194:	6822      	ldr	r2, [r4, #0]
 8009196:	f000 000f 	and.w	r0, r0, #15
 800919a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	e7b7      	b.n	8009112 <__hexnan+0x7a>
 80091a2:	2508      	movs	r5, #8
 80091a4:	e7b5      	b.n	8009112 <__hexnan+0x7a>
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0df      	beq.n	800916c <__hexnan+0xd4>
 80091ac:	f1c3 0320 	rsb	r3, r3, #32
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
 80091b4:	40da      	lsrs	r2, r3
 80091b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80091ba:	4013      	ands	r3, r2
 80091bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80091c0:	e7d4      	b.n	800916c <__hexnan+0xd4>
 80091c2:	3f04      	subs	r7, #4
 80091c4:	e7d2      	b.n	800916c <__hexnan+0xd4>
 80091c6:	2004      	movs	r0, #4
 80091c8:	b007      	add	sp, #28
 80091ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080091d0 <sbrk_aligned>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4e0e      	ldr	r6, [pc, #56]	; (800920c <sbrk_aligned+0x3c>)
 80091d4:	460c      	mov	r4, r1
 80091d6:	6831      	ldr	r1, [r6, #0]
 80091d8:	4605      	mov	r5, r0
 80091da:	b911      	cbnz	r1, 80091e2 <sbrk_aligned+0x12>
 80091dc:	f000 fe1e 	bl	8009e1c <_sbrk_r>
 80091e0:	6030      	str	r0, [r6, #0]
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 fe19 	bl	8009e1c <_sbrk_r>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d00a      	beq.n	8009204 <sbrk_aligned+0x34>
 80091ee:	1cc4      	adds	r4, r0, #3
 80091f0:	f024 0403 	bic.w	r4, r4, #3
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d007      	beq.n	8009208 <sbrk_aligned+0x38>
 80091f8:	1a21      	subs	r1, r4, r0
 80091fa:	4628      	mov	r0, r5
 80091fc:	f000 fe0e 	bl	8009e1c <_sbrk_r>
 8009200:	3001      	adds	r0, #1
 8009202:	d101      	bne.n	8009208 <sbrk_aligned+0x38>
 8009204:	f04f 34ff 	mov.w	r4, #4294967295
 8009208:	4620      	mov	r0, r4
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	200007d8 	.word	0x200007d8

08009210 <_malloc_r>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	1ccd      	adds	r5, r1, #3
 8009216:	f025 0503 	bic.w	r5, r5, #3
 800921a:	3508      	adds	r5, #8
 800921c:	2d0c      	cmp	r5, #12
 800921e:	bf38      	it	cc
 8009220:	250c      	movcc	r5, #12
 8009222:	2d00      	cmp	r5, #0
 8009224:	4607      	mov	r7, r0
 8009226:	db01      	blt.n	800922c <_malloc_r+0x1c>
 8009228:	42a9      	cmp	r1, r5
 800922a:	d905      	bls.n	8009238 <_malloc_r+0x28>
 800922c:	230c      	movs	r3, #12
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	2600      	movs	r6, #0
 8009232:	4630      	mov	r0, r6
 8009234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009238:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800930c <_malloc_r+0xfc>
 800923c:	f000 f87a 	bl	8009334 <__malloc_lock>
 8009240:	f8d8 3000 	ldr.w	r3, [r8]
 8009244:	461c      	mov	r4, r3
 8009246:	bb5c      	cbnz	r4, 80092a0 <_malloc_r+0x90>
 8009248:	4629      	mov	r1, r5
 800924a:	4638      	mov	r0, r7
 800924c:	f7ff ffc0 	bl	80091d0 <sbrk_aligned>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	4604      	mov	r4, r0
 8009254:	d155      	bne.n	8009302 <_malloc_r+0xf2>
 8009256:	f8d8 4000 	ldr.w	r4, [r8]
 800925a:	4626      	mov	r6, r4
 800925c:	2e00      	cmp	r6, #0
 800925e:	d145      	bne.n	80092ec <_malloc_r+0xdc>
 8009260:	2c00      	cmp	r4, #0
 8009262:	d048      	beq.n	80092f6 <_malloc_r+0xe6>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	4631      	mov	r1, r6
 8009268:	4638      	mov	r0, r7
 800926a:	eb04 0903 	add.w	r9, r4, r3
 800926e:	f000 fdd5 	bl	8009e1c <_sbrk_r>
 8009272:	4581      	cmp	r9, r0
 8009274:	d13f      	bne.n	80092f6 <_malloc_r+0xe6>
 8009276:	6821      	ldr	r1, [r4, #0]
 8009278:	1a6d      	subs	r5, r5, r1
 800927a:	4629      	mov	r1, r5
 800927c:	4638      	mov	r0, r7
 800927e:	f7ff ffa7 	bl	80091d0 <sbrk_aligned>
 8009282:	3001      	adds	r0, #1
 8009284:	d037      	beq.n	80092f6 <_malloc_r+0xe6>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	442b      	add	r3, r5
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	f8d8 3000 	ldr.w	r3, [r8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d038      	beq.n	8009306 <_malloc_r+0xf6>
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	42a2      	cmp	r2, r4
 8009298:	d12b      	bne.n	80092f2 <_malloc_r+0xe2>
 800929a:	2200      	movs	r2, #0
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	e00f      	b.n	80092c0 <_malloc_r+0xb0>
 80092a0:	6822      	ldr	r2, [r4, #0]
 80092a2:	1b52      	subs	r2, r2, r5
 80092a4:	d41f      	bmi.n	80092e6 <_malloc_r+0xd6>
 80092a6:	2a0b      	cmp	r2, #11
 80092a8:	d917      	bls.n	80092da <_malloc_r+0xca>
 80092aa:	1961      	adds	r1, r4, r5
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	6025      	str	r5, [r4, #0]
 80092b0:	bf18      	it	ne
 80092b2:	6059      	strne	r1, [r3, #4]
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	bf08      	it	eq
 80092b8:	f8c8 1000 	streq.w	r1, [r8]
 80092bc:	5162      	str	r2, [r4, r5]
 80092be:	604b      	str	r3, [r1, #4]
 80092c0:	4638      	mov	r0, r7
 80092c2:	f104 060b 	add.w	r6, r4, #11
 80092c6:	f000 f83b 	bl	8009340 <__malloc_unlock>
 80092ca:	f026 0607 	bic.w	r6, r6, #7
 80092ce:	1d23      	adds	r3, r4, #4
 80092d0:	1af2      	subs	r2, r6, r3
 80092d2:	d0ae      	beq.n	8009232 <_malloc_r+0x22>
 80092d4:	1b9b      	subs	r3, r3, r6
 80092d6:	50a3      	str	r3, [r4, r2]
 80092d8:	e7ab      	b.n	8009232 <_malloc_r+0x22>
 80092da:	42a3      	cmp	r3, r4
 80092dc:	6862      	ldr	r2, [r4, #4]
 80092de:	d1dd      	bne.n	800929c <_malloc_r+0x8c>
 80092e0:	f8c8 2000 	str.w	r2, [r8]
 80092e4:	e7ec      	b.n	80092c0 <_malloc_r+0xb0>
 80092e6:	4623      	mov	r3, r4
 80092e8:	6864      	ldr	r4, [r4, #4]
 80092ea:	e7ac      	b.n	8009246 <_malloc_r+0x36>
 80092ec:	4634      	mov	r4, r6
 80092ee:	6876      	ldr	r6, [r6, #4]
 80092f0:	e7b4      	b.n	800925c <_malloc_r+0x4c>
 80092f2:	4613      	mov	r3, r2
 80092f4:	e7cc      	b.n	8009290 <_malloc_r+0x80>
 80092f6:	230c      	movs	r3, #12
 80092f8:	603b      	str	r3, [r7, #0]
 80092fa:	4638      	mov	r0, r7
 80092fc:	f000 f820 	bl	8009340 <__malloc_unlock>
 8009300:	e797      	b.n	8009232 <_malloc_r+0x22>
 8009302:	6025      	str	r5, [r4, #0]
 8009304:	e7dc      	b.n	80092c0 <_malloc_r+0xb0>
 8009306:	605b      	str	r3, [r3, #4]
 8009308:	deff      	udf	#255	; 0xff
 800930a:	bf00      	nop
 800930c:	200007d4 	.word	0x200007d4

08009310 <__ascii_mbtowc>:
 8009310:	b082      	sub	sp, #8
 8009312:	b901      	cbnz	r1, 8009316 <__ascii_mbtowc+0x6>
 8009314:	a901      	add	r1, sp, #4
 8009316:	b142      	cbz	r2, 800932a <__ascii_mbtowc+0x1a>
 8009318:	b14b      	cbz	r3, 800932e <__ascii_mbtowc+0x1e>
 800931a:	7813      	ldrb	r3, [r2, #0]
 800931c:	600b      	str	r3, [r1, #0]
 800931e:	7812      	ldrb	r2, [r2, #0]
 8009320:	1e10      	subs	r0, r2, #0
 8009322:	bf18      	it	ne
 8009324:	2001      	movne	r0, #1
 8009326:	b002      	add	sp, #8
 8009328:	4770      	bx	lr
 800932a:	4610      	mov	r0, r2
 800932c:	e7fb      	b.n	8009326 <__ascii_mbtowc+0x16>
 800932e:	f06f 0001 	mvn.w	r0, #1
 8009332:	e7f8      	b.n	8009326 <__ascii_mbtowc+0x16>

08009334 <__malloc_lock>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__malloc_lock+0x8>)
 8009336:	f7ff bb8c 	b.w	8008a52 <__retarget_lock_acquire_recursive>
 800933a:	bf00      	nop
 800933c:	200007d0 	.word	0x200007d0

08009340 <__malloc_unlock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_unlock+0x8>)
 8009342:	f7ff bb87 	b.w	8008a54 <__retarget_lock_release_recursive>
 8009346:	bf00      	nop
 8009348:	200007d0 	.word	0x200007d0

0800934c <_Balloc>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	69c6      	ldr	r6, [r0, #28]
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	b976      	cbnz	r6, 8009374 <_Balloc+0x28>
 8009356:	2010      	movs	r0, #16
 8009358:	f000 fda4 	bl	8009ea4 <malloc>
 800935c:	4602      	mov	r2, r0
 800935e:	61e0      	str	r0, [r4, #28]
 8009360:	b920      	cbnz	r0, 800936c <_Balloc+0x20>
 8009362:	4b18      	ldr	r3, [pc, #96]	; (80093c4 <_Balloc+0x78>)
 8009364:	4818      	ldr	r0, [pc, #96]	; (80093c8 <_Balloc+0x7c>)
 8009366:	216b      	movs	r1, #107	; 0x6b
 8009368:	f000 fd68 	bl	8009e3c <__assert_func>
 800936c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009370:	6006      	str	r6, [r0, #0]
 8009372:	60c6      	str	r6, [r0, #12]
 8009374:	69e6      	ldr	r6, [r4, #28]
 8009376:	68f3      	ldr	r3, [r6, #12]
 8009378:	b183      	cbz	r3, 800939c <_Balloc+0x50>
 800937a:	69e3      	ldr	r3, [r4, #28]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009382:	b9b8      	cbnz	r0, 80093b4 <_Balloc+0x68>
 8009384:	2101      	movs	r1, #1
 8009386:	fa01 f605 	lsl.w	r6, r1, r5
 800938a:	1d72      	adds	r2, r6, #5
 800938c:	0092      	lsls	r2, r2, #2
 800938e:	4620      	mov	r0, r4
 8009390:	f000 fd72 	bl	8009e78 <_calloc_r>
 8009394:	b160      	cbz	r0, 80093b0 <_Balloc+0x64>
 8009396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800939a:	e00e      	b.n	80093ba <_Balloc+0x6e>
 800939c:	2221      	movs	r2, #33	; 0x21
 800939e:	2104      	movs	r1, #4
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fd69 	bl	8009e78 <_calloc_r>
 80093a6:	69e3      	ldr	r3, [r4, #28]
 80093a8:	60f0      	str	r0, [r6, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e4      	bne.n	800937a <_Balloc+0x2e>
 80093b0:	2000      	movs	r0, #0
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	6802      	ldr	r2, [r0, #0]
 80093b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ba:	2300      	movs	r3, #0
 80093bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093c0:	e7f7      	b.n	80093b2 <_Balloc+0x66>
 80093c2:	bf00      	nop
 80093c4:	0800bc21 	.word	0x0800bc21
 80093c8:	0800bc38 	.word	0x0800bc38

080093cc <_Bfree>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	69c6      	ldr	r6, [r0, #28]
 80093d0:	4605      	mov	r5, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	b976      	cbnz	r6, 80093f4 <_Bfree+0x28>
 80093d6:	2010      	movs	r0, #16
 80093d8:	f000 fd64 	bl	8009ea4 <malloc>
 80093dc:	4602      	mov	r2, r0
 80093de:	61e8      	str	r0, [r5, #28]
 80093e0:	b920      	cbnz	r0, 80093ec <_Bfree+0x20>
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <_Bfree+0x3c>)
 80093e4:	4809      	ldr	r0, [pc, #36]	; (800940c <_Bfree+0x40>)
 80093e6:	218f      	movs	r1, #143	; 0x8f
 80093e8:	f000 fd28 	bl	8009e3c <__assert_func>
 80093ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093f0:	6006      	str	r6, [r0, #0]
 80093f2:	60c6      	str	r6, [r0, #12]
 80093f4:	b13c      	cbz	r4, 8009406 <_Bfree+0x3a>
 80093f6:	69eb      	ldr	r3, [r5, #28]
 80093f8:	6862      	ldr	r2, [r4, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009400:	6021      	str	r1, [r4, #0]
 8009402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	0800bc21 	.word	0x0800bc21
 800940c:	0800bc38 	.word	0x0800bc38

08009410 <__multadd>:
 8009410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	690d      	ldr	r5, [r1, #16]
 8009416:	4607      	mov	r7, r0
 8009418:	460c      	mov	r4, r1
 800941a:	461e      	mov	r6, r3
 800941c:	f101 0c14 	add.w	ip, r1, #20
 8009420:	2000      	movs	r0, #0
 8009422:	f8dc 3000 	ldr.w	r3, [ip]
 8009426:	b299      	uxth	r1, r3
 8009428:	fb02 6101 	mla	r1, r2, r1, r6
 800942c:	0c1e      	lsrs	r6, r3, #16
 800942e:	0c0b      	lsrs	r3, r1, #16
 8009430:	fb02 3306 	mla	r3, r2, r6, r3
 8009434:	b289      	uxth	r1, r1
 8009436:	3001      	adds	r0, #1
 8009438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800943c:	4285      	cmp	r5, r0
 800943e:	f84c 1b04 	str.w	r1, [ip], #4
 8009442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009446:	dcec      	bgt.n	8009422 <__multadd+0x12>
 8009448:	b30e      	cbz	r6, 800948e <__multadd+0x7e>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	42ab      	cmp	r3, r5
 800944e:	dc19      	bgt.n	8009484 <__multadd+0x74>
 8009450:	6861      	ldr	r1, [r4, #4]
 8009452:	4638      	mov	r0, r7
 8009454:	3101      	adds	r1, #1
 8009456:	f7ff ff79 	bl	800934c <_Balloc>
 800945a:	4680      	mov	r8, r0
 800945c:	b928      	cbnz	r0, 800946a <__multadd+0x5a>
 800945e:	4602      	mov	r2, r0
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <__multadd+0x84>)
 8009462:	480d      	ldr	r0, [pc, #52]	; (8009498 <__multadd+0x88>)
 8009464:	21ba      	movs	r1, #186	; 0xba
 8009466:	f000 fce9 	bl	8009e3c <__assert_func>
 800946a:	6922      	ldr	r2, [r4, #16]
 800946c:	3202      	adds	r2, #2
 800946e:	f104 010c 	add.w	r1, r4, #12
 8009472:	0092      	lsls	r2, r2, #2
 8009474:	300c      	adds	r0, #12
 8009476:	f7ff faee 	bl	8008a56 <memcpy>
 800947a:	4621      	mov	r1, r4
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ffa5 	bl	80093cc <_Bfree>
 8009482:	4644      	mov	r4, r8
 8009484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009488:	3501      	adds	r5, #1
 800948a:	615e      	str	r6, [r3, #20]
 800948c:	6125      	str	r5, [r4, #16]
 800948e:	4620      	mov	r0, r4
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	0800bbb0 	.word	0x0800bbb0
 8009498:	0800bc38 	.word	0x0800bc38

0800949c <__s2b>:
 800949c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a0:	460c      	mov	r4, r1
 80094a2:	4615      	mov	r5, r2
 80094a4:	461f      	mov	r7, r3
 80094a6:	2209      	movs	r2, #9
 80094a8:	3308      	adds	r3, #8
 80094aa:	4606      	mov	r6, r0
 80094ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b0:	2100      	movs	r1, #0
 80094b2:	2201      	movs	r2, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	db09      	blt.n	80094cc <__s2b+0x30>
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7ff ff47 	bl	800934c <_Balloc>
 80094be:	b940      	cbnz	r0, 80094d2 <__s2b+0x36>
 80094c0:	4602      	mov	r2, r0
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <__s2b+0x8c>)
 80094c4:	4819      	ldr	r0, [pc, #100]	; (800952c <__s2b+0x90>)
 80094c6:	21d3      	movs	r1, #211	; 0xd3
 80094c8:	f000 fcb8 	bl	8009e3c <__assert_func>
 80094cc:	0052      	lsls	r2, r2, #1
 80094ce:	3101      	adds	r1, #1
 80094d0:	e7f0      	b.n	80094b4 <__s2b+0x18>
 80094d2:	9b08      	ldr	r3, [sp, #32]
 80094d4:	6143      	str	r3, [r0, #20]
 80094d6:	2d09      	cmp	r5, #9
 80094d8:	f04f 0301 	mov.w	r3, #1
 80094dc:	6103      	str	r3, [r0, #16]
 80094de:	dd16      	ble.n	800950e <__s2b+0x72>
 80094e0:	f104 0909 	add.w	r9, r4, #9
 80094e4:	46c8      	mov	r8, r9
 80094e6:	442c      	add	r4, r5
 80094e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094ec:	4601      	mov	r1, r0
 80094ee:	3b30      	subs	r3, #48	; 0x30
 80094f0:	220a      	movs	r2, #10
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff ff8c 	bl	8009410 <__multadd>
 80094f8:	45a0      	cmp	r8, r4
 80094fa:	d1f5      	bne.n	80094e8 <__s2b+0x4c>
 80094fc:	f1a5 0408 	sub.w	r4, r5, #8
 8009500:	444c      	add	r4, r9
 8009502:	1b2d      	subs	r5, r5, r4
 8009504:	1963      	adds	r3, r4, r5
 8009506:	42bb      	cmp	r3, r7
 8009508:	db04      	blt.n	8009514 <__s2b+0x78>
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950e:	340a      	adds	r4, #10
 8009510:	2509      	movs	r5, #9
 8009512:	e7f6      	b.n	8009502 <__s2b+0x66>
 8009514:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009518:	4601      	mov	r1, r0
 800951a:	3b30      	subs	r3, #48	; 0x30
 800951c:	220a      	movs	r2, #10
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ff76 	bl	8009410 <__multadd>
 8009524:	e7ee      	b.n	8009504 <__s2b+0x68>
 8009526:	bf00      	nop
 8009528:	0800bbb0 	.word	0x0800bbb0
 800952c:	0800bc38 	.word	0x0800bc38

08009530 <__hi0bits>:
 8009530:	0c03      	lsrs	r3, r0, #16
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	b9d3      	cbnz	r3, 800956c <__hi0bits+0x3c>
 8009536:	0400      	lsls	r0, r0, #16
 8009538:	2310      	movs	r3, #16
 800953a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800953e:	bf04      	itt	eq
 8009540:	0200      	lsleq	r0, r0, #8
 8009542:	3308      	addeq	r3, #8
 8009544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009548:	bf04      	itt	eq
 800954a:	0100      	lsleq	r0, r0, #4
 800954c:	3304      	addeq	r3, #4
 800954e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009552:	bf04      	itt	eq
 8009554:	0080      	lsleq	r0, r0, #2
 8009556:	3302      	addeq	r3, #2
 8009558:	2800      	cmp	r0, #0
 800955a:	db05      	blt.n	8009568 <__hi0bits+0x38>
 800955c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009560:	f103 0301 	add.w	r3, r3, #1
 8009564:	bf08      	it	eq
 8009566:	2320      	moveq	r3, #32
 8009568:	4618      	mov	r0, r3
 800956a:	4770      	bx	lr
 800956c:	2300      	movs	r3, #0
 800956e:	e7e4      	b.n	800953a <__hi0bits+0xa>

08009570 <__lo0bits>:
 8009570:	6803      	ldr	r3, [r0, #0]
 8009572:	f013 0207 	ands.w	r2, r3, #7
 8009576:	d00c      	beq.n	8009592 <__lo0bits+0x22>
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	d422      	bmi.n	80095c2 <__lo0bits+0x52>
 800957c:	079a      	lsls	r2, r3, #30
 800957e:	bf49      	itett	mi
 8009580:	085b      	lsrmi	r3, r3, #1
 8009582:	089b      	lsrpl	r3, r3, #2
 8009584:	6003      	strmi	r3, [r0, #0]
 8009586:	2201      	movmi	r2, #1
 8009588:	bf5c      	itt	pl
 800958a:	6003      	strpl	r3, [r0, #0]
 800958c:	2202      	movpl	r2, #2
 800958e:	4610      	mov	r0, r2
 8009590:	4770      	bx	lr
 8009592:	b299      	uxth	r1, r3
 8009594:	b909      	cbnz	r1, 800959a <__lo0bits+0x2a>
 8009596:	0c1b      	lsrs	r3, r3, #16
 8009598:	2210      	movs	r2, #16
 800959a:	b2d9      	uxtb	r1, r3
 800959c:	b909      	cbnz	r1, 80095a2 <__lo0bits+0x32>
 800959e:	3208      	adds	r2, #8
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	0719      	lsls	r1, r3, #28
 80095a4:	bf04      	itt	eq
 80095a6:	091b      	lsreq	r3, r3, #4
 80095a8:	3204      	addeq	r2, #4
 80095aa:	0799      	lsls	r1, r3, #30
 80095ac:	bf04      	itt	eq
 80095ae:	089b      	lsreq	r3, r3, #2
 80095b0:	3202      	addeq	r2, #2
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d403      	bmi.n	80095be <__lo0bits+0x4e>
 80095b6:	085b      	lsrs	r3, r3, #1
 80095b8:	f102 0201 	add.w	r2, r2, #1
 80095bc:	d003      	beq.n	80095c6 <__lo0bits+0x56>
 80095be:	6003      	str	r3, [r0, #0]
 80095c0:	e7e5      	b.n	800958e <__lo0bits+0x1e>
 80095c2:	2200      	movs	r2, #0
 80095c4:	e7e3      	b.n	800958e <__lo0bits+0x1e>
 80095c6:	2220      	movs	r2, #32
 80095c8:	e7e1      	b.n	800958e <__lo0bits+0x1e>
	...

080095cc <__i2b>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	460c      	mov	r4, r1
 80095d0:	2101      	movs	r1, #1
 80095d2:	f7ff febb 	bl	800934c <_Balloc>
 80095d6:	4602      	mov	r2, r0
 80095d8:	b928      	cbnz	r0, 80095e6 <__i2b+0x1a>
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <__i2b+0x24>)
 80095dc:	4805      	ldr	r0, [pc, #20]	; (80095f4 <__i2b+0x28>)
 80095de:	f240 1145 	movw	r1, #325	; 0x145
 80095e2:	f000 fc2b 	bl	8009e3c <__assert_func>
 80095e6:	2301      	movs	r3, #1
 80095e8:	6144      	str	r4, [r0, #20]
 80095ea:	6103      	str	r3, [r0, #16]
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	0800bbb0 	.word	0x0800bbb0
 80095f4:	0800bc38 	.word	0x0800bc38

080095f8 <__multiply>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	4691      	mov	r9, r2
 80095fe:	690a      	ldr	r2, [r1, #16]
 8009600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	bfb8      	it	lt
 8009608:	460b      	movlt	r3, r1
 800960a:	460c      	mov	r4, r1
 800960c:	bfbc      	itt	lt
 800960e:	464c      	movlt	r4, r9
 8009610:	4699      	movlt	r9, r3
 8009612:	6927      	ldr	r7, [r4, #16]
 8009614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009618:	68a3      	ldr	r3, [r4, #8]
 800961a:	6861      	ldr	r1, [r4, #4]
 800961c:	eb07 060a 	add.w	r6, r7, sl
 8009620:	42b3      	cmp	r3, r6
 8009622:	b085      	sub	sp, #20
 8009624:	bfb8      	it	lt
 8009626:	3101      	addlt	r1, #1
 8009628:	f7ff fe90 	bl	800934c <_Balloc>
 800962c:	b930      	cbnz	r0, 800963c <__multiply+0x44>
 800962e:	4602      	mov	r2, r0
 8009630:	4b44      	ldr	r3, [pc, #272]	; (8009744 <__multiply+0x14c>)
 8009632:	4845      	ldr	r0, [pc, #276]	; (8009748 <__multiply+0x150>)
 8009634:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009638:	f000 fc00 	bl	8009e3c <__assert_func>
 800963c:	f100 0514 	add.w	r5, r0, #20
 8009640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009644:	462b      	mov	r3, r5
 8009646:	2200      	movs	r2, #0
 8009648:	4543      	cmp	r3, r8
 800964a:	d321      	bcc.n	8009690 <__multiply+0x98>
 800964c:	f104 0314 	add.w	r3, r4, #20
 8009650:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009654:	f109 0314 	add.w	r3, r9, #20
 8009658:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800965c:	9202      	str	r2, [sp, #8]
 800965e:	1b3a      	subs	r2, r7, r4
 8009660:	3a15      	subs	r2, #21
 8009662:	f022 0203 	bic.w	r2, r2, #3
 8009666:	3204      	adds	r2, #4
 8009668:	f104 0115 	add.w	r1, r4, #21
 800966c:	428f      	cmp	r7, r1
 800966e:	bf38      	it	cc
 8009670:	2204      	movcc	r2, #4
 8009672:	9201      	str	r2, [sp, #4]
 8009674:	9a02      	ldr	r2, [sp, #8]
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	429a      	cmp	r2, r3
 800967a:	d80c      	bhi.n	8009696 <__multiply+0x9e>
 800967c:	2e00      	cmp	r6, #0
 800967e:	dd03      	ble.n	8009688 <__multiply+0x90>
 8009680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009684:	2b00      	cmp	r3, #0
 8009686:	d05b      	beq.n	8009740 <__multiply+0x148>
 8009688:	6106      	str	r6, [r0, #16]
 800968a:	b005      	add	sp, #20
 800968c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009690:	f843 2b04 	str.w	r2, [r3], #4
 8009694:	e7d8      	b.n	8009648 <__multiply+0x50>
 8009696:	f8b3 a000 	ldrh.w	sl, [r3]
 800969a:	f1ba 0f00 	cmp.w	sl, #0
 800969e:	d024      	beq.n	80096ea <__multiply+0xf2>
 80096a0:	f104 0e14 	add.w	lr, r4, #20
 80096a4:	46a9      	mov	r9, r5
 80096a6:	f04f 0c00 	mov.w	ip, #0
 80096aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096ae:	f8d9 1000 	ldr.w	r1, [r9]
 80096b2:	fa1f fb82 	uxth.w	fp, r2
 80096b6:	b289      	uxth	r1, r1
 80096b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80096bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096c0:	f8d9 2000 	ldr.w	r2, [r9]
 80096c4:	4461      	add	r1, ip
 80096c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80096ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096d2:	b289      	uxth	r1, r1
 80096d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096d8:	4577      	cmp	r7, lr
 80096da:	f849 1b04 	str.w	r1, [r9], #4
 80096de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096e2:	d8e2      	bhi.n	80096aa <__multiply+0xb2>
 80096e4:	9a01      	ldr	r2, [sp, #4]
 80096e6:	f845 c002 	str.w	ip, [r5, r2]
 80096ea:	9a03      	ldr	r2, [sp, #12]
 80096ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096f0:	3304      	adds	r3, #4
 80096f2:	f1b9 0f00 	cmp.w	r9, #0
 80096f6:	d021      	beq.n	800973c <__multiply+0x144>
 80096f8:	6829      	ldr	r1, [r5, #0]
 80096fa:	f104 0c14 	add.w	ip, r4, #20
 80096fe:	46ae      	mov	lr, r5
 8009700:	f04f 0a00 	mov.w	sl, #0
 8009704:	f8bc b000 	ldrh.w	fp, [ip]
 8009708:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800970c:	fb09 220b 	mla	r2, r9, fp, r2
 8009710:	4452      	add	r2, sl
 8009712:	b289      	uxth	r1, r1
 8009714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009718:	f84e 1b04 	str.w	r1, [lr], #4
 800971c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009720:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009724:	f8be 1000 	ldrh.w	r1, [lr]
 8009728:	fb09 110a 	mla	r1, r9, sl, r1
 800972c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009730:	4567      	cmp	r7, ip
 8009732:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009736:	d8e5      	bhi.n	8009704 <__multiply+0x10c>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	50a9      	str	r1, [r5, r2]
 800973c:	3504      	adds	r5, #4
 800973e:	e799      	b.n	8009674 <__multiply+0x7c>
 8009740:	3e01      	subs	r6, #1
 8009742:	e79b      	b.n	800967c <__multiply+0x84>
 8009744:	0800bbb0 	.word	0x0800bbb0
 8009748:	0800bc38 	.word	0x0800bc38

0800974c <__pow5mult>:
 800974c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009750:	4615      	mov	r5, r2
 8009752:	f012 0203 	ands.w	r2, r2, #3
 8009756:	4606      	mov	r6, r0
 8009758:	460f      	mov	r7, r1
 800975a:	d007      	beq.n	800976c <__pow5mult+0x20>
 800975c:	4c25      	ldr	r4, [pc, #148]	; (80097f4 <__pow5mult+0xa8>)
 800975e:	3a01      	subs	r2, #1
 8009760:	2300      	movs	r3, #0
 8009762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009766:	f7ff fe53 	bl	8009410 <__multadd>
 800976a:	4607      	mov	r7, r0
 800976c:	10ad      	asrs	r5, r5, #2
 800976e:	d03d      	beq.n	80097ec <__pow5mult+0xa0>
 8009770:	69f4      	ldr	r4, [r6, #28]
 8009772:	b97c      	cbnz	r4, 8009794 <__pow5mult+0x48>
 8009774:	2010      	movs	r0, #16
 8009776:	f000 fb95 	bl	8009ea4 <malloc>
 800977a:	4602      	mov	r2, r0
 800977c:	61f0      	str	r0, [r6, #28]
 800977e:	b928      	cbnz	r0, 800978c <__pow5mult+0x40>
 8009780:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <__pow5mult+0xac>)
 8009782:	481e      	ldr	r0, [pc, #120]	; (80097fc <__pow5mult+0xb0>)
 8009784:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009788:	f000 fb58 	bl	8009e3c <__assert_func>
 800978c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009790:	6004      	str	r4, [r0, #0]
 8009792:	60c4      	str	r4, [r0, #12]
 8009794:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800979c:	b94c      	cbnz	r4, 80097b2 <__pow5mult+0x66>
 800979e:	f240 2171 	movw	r1, #625	; 0x271
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff12 	bl	80095cc <__i2b>
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80097ae:	4604      	mov	r4, r0
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	f04f 0900 	mov.w	r9, #0
 80097b6:	07eb      	lsls	r3, r5, #31
 80097b8:	d50a      	bpl.n	80097d0 <__pow5mult+0x84>
 80097ba:	4639      	mov	r1, r7
 80097bc:	4622      	mov	r2, r4
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff ff1a 	bl	80095f8 <__multiply>
 80097c4:	4639      	mov	r1, r7
 80097c6:	4680      	mov	r8, r0
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff fdff 	bl	80093cc <_Bfree>
 80097ce:	4647      	mov	r7, r8
 80097d0:	106d      	asrs	r5, r5, #1
 80097d2:	d00b      	beq.n	80097ec <__pow5mult+0xa0>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	b938      	cbnz	r0, 80097e8 <__pow5mult+0x9c>
 80097d8:	4622      	mov	r2, r4
 80097da:	4621      	mov	r1, r4
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ff0b 	bl	80095f8 <__multiply>
 80097e2:	6020      	str	r0, [r4, #0]
 80097e4:	f8c0 9000 	str.w	r9, [r0]
 80097e8:	4604      	mov	r4, r0
 80097ea:	e7e4      	b.n	80097b6 <__pow5mult+0x6a>
 80097ec:	4638      	mov	r0, r7
 80097ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f2:	bf00      	nop
 80097f4:	0800bd88 	.word	0x0800bd88
 80097f8:	0800bc21 	.word	0x0800bc21
 80097fc:	0800bc38 	.word	0x0800bc38

08009800 <__lshift>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	460c      	mov	r4, r1
 8009806:	6849      	ldr	r1, [r1, #4]
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	4607      	mov	r7, r0
 8009812:	4691      	mov	r9, r2
 8009814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009818:	f108 0601 	add.w	r6, r8, #1
 800981c:	42b3      	cmp	r3, r6
 800981e:	db0b      	blt.n	8009838 <__lshift+0x38>
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff fd93 	bl	800934c <_Balloc>
 8009826:	4605      	mov	r5, r0
 8009828:	b948      	cbnz	r0, 800983e <__lshift+0x3e>
 800982a:	4602      	mov	r2, r0
 800982c:	4b28      	ldr	r3, [pc, #160]	; (80098d0 <__lshift+0xd0>)
 800982e:	4829      	ldr	r0, [pc, #164]	; (80098d4 <__lshift+0xd4>)
 8009830:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009834:	f000 fb02 	bl	8009e3c <__assert_func>
 8009838:	3101      	adds	r1, #1
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	e7ee      	b.n	800981c <__lshift+0x1c>
 800983e:	2300      	movs	r3, #0
 8009840:	f100 0114 	add.w	r1, r0, #20
 8009844:	f100 0210 	add.w	r2, r0, #16
 8009848:	4618      	mov	r0, r3
 800984a:	4553      	cmp	r3, sl
 800984c:	db33      	blt.n	80098b6 <__lshift+0xb6>
 800984e:	6920      	ldr	r0, [r4, #16]
 8009850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009854:	f104 0314 	add.w	r3, r4, #20
 8009858:	f019 091f 	ands.w	r9, r9, #31
 800985c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009864:	d02b      	beq.n	80098be <__lshift+0xbe>
 8009866:	f1c9 0e20 	rsb	lr, r9, #32
 800986a:	468a      	mov	sl, r1
 800986c:	2200      	movs	r2, #0
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	fa00 f009 	lsl.w	r0, r0, r9
 8009874:	4310      	orrs	r0, r2
 8009876:	f84a 0b04 	str.w	r0, [sl], #4
 800987a:	f853 2b04 	ldr.w	r2, [r3], #4
 800987e:	459c      	cmp	ip, r3
 8009880:	fa22 f20e 	lsr.w	r2, r2, lr
 8009884:	d8f3      	bhi.n	800986e <__lshift+0x6e>
 8009886:	ebac 0304 	sub.w	r3, ip, r4
 800988a:	3b15      	subs	r3, #21
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	3304      	adds	r3, #4
 8009892:	f104 0015 	add.w	r0, r4, #21
 8009896:	4584      	cmp	ip, r0
 8009898:	bf38      	it	cc
 800989a:	2304      	movcc	r3, #4
 800989c:	50ca      	str	r2, [r1, r3]
 800989e:	b10a      	cbz	r2, 80098a4 <__lshift+0xa4>
 80098a0:	f108 0602 	add.w	r6, r8, #2
 80098a4:	3e01      	subs	r6, #1
 80098a6:	4638      	mov	r0, r7
 80098a8:	612e      	str	r6, [r5, #16]
 80098aa:	4621      	mov	r1, r4
 80098ac:	f7ff fd8e 	bl	80093cc <_Bfree>
 80098b0:	4628      	mov	r0, r5
 80098b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ba:	3301      	adds	r3, #1
 80098bc:	e7c5      	b.n	800984a <__lshift+0x4a>
 80098be:	3904      	subs	r1, #4
 80098c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098c8:	459c      	cmp	ip, r3
 80098ca:	d8f9      	bhi.n	80098c0 <__lshift+0xc0>
 80098cc:	e7ea      	b.n	80098a4 <__lshift+0xa4>
 80098ce:	bf00      	nop
 80098d0:	0800bbb0 	.word	0x0800bbb0
 80098d4:	0800bc38 	.word	0x0800bc38

080098d8 <__mcmp>:
 80098d8:	b530      	push	{r4, r5, lr}
 80098da:	6902      	ldr	r2, [r0, #16]
 80098dc:	690c      	ldr	r4, [r1, #16]
 80098de:	1b12      	subs	r2, r2, r4
 80098e0:	d10e      	bne.n	8009900 <__mcmp+0x28>
 80098e2:	f100 0314 	add.w	r3, r0, #20
 80098e6:	3114      	adds	r1, #20
 80098e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d003      	beq.n	8009904 <__mcmp+0x2c>
 80098fc:	d305      	bcc.n	800990a <__mcmp+0x32>
 80098fe:	2201      	movs	r2, #1
 8009900:	4610      	mov	r0, r2
 8009902:	bd30      	pop	{r4, r5, pc}
 8009904:	4283      	cmp	r3, r0
 8009906:	d3f3      	bcc.n	80098f0 <__mcmp+0x18>
 8009908:	e7fa      	b.n	8009900 <__mcmp+0x28>
 800990a:	f04f 32ff 	mov.w	r2, #4294967295
 800990e:	e7f7      	b.n	8009900 <__mcmp+0x28>

08009910 <__mdiff>:
 8009910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	460c      	mov	r4, r1
 8009916:	4606      	mov	r6, r0
 8009918:	4611      	mov	r1, r2
 800991a:	4620      	mov	r0, r4
 800991c:	4690      	mov	r8, r2
 800991e:	f7ff ffdb 	bl	80098d8 <__mcmp>
 8009922:	1e05      	subs	r5, r0, #0
 8009924:	d110      	bne.n	8009948 <__mdiff+0x38>
 8009926:	4629      	mov	r1, r5
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff fd0f 	bl	800934c <_Balloc>
 800992e:	b930      	cbnz	r0, 800993e <__mdiff+0x2e>
 8009930:	4b3a      	ldr	r3, [pc, #232]	; (8009a1c <__mdiff+0x10c>)
 8009932:	4602      	mov	r2, r0
 8009934:	f240 2137 	movw	r1, #567	; 0x237
 8009938:	4839      	ldr	r0, [pc, #228]	; (8009a20 <__mdiff+0x110>)
 800993a:	f000 fa7f 	bl	8009e3c <__assert_func>
 800993e:	2301      	movs	r3, #1
 8009940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009948:	bfa4      	itt	ge
 800994a:	4643      	movge	r3, r8
 800994c:	46a0      	movge	r8, r4
 800994e:	4630      	mov	r0, r6
 8009950:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009954:	bfa6      	itte	ge
 8009956:	461c      	movge	r4, r3
 8009958:	2500      	movge	r5, #0
 800995a:	2501      	movlt	r5, #1
 800995c:	f7ff fcf6 	bl	800934c <_Balloc>
 8009960:	b920      	cbnz	r0, 800996c <__mdiff+0x5c>
 8009962:	4b2e      	ldr	r3, [pc, #184]	; (8009a1c <__mdiff+0x10c>)
 8009964:	4602      	mov	r2, r0
 8009966:	f240 2145 	movw	r1, #581	; 0x245
 800996a:	e7e5      	b.n	8009938 <__mdiff+0x28>
 800996c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009970:	6926      	ldr	r6, [r4, #16]
 8009972:	60c5      	str	r5, [r0, #12]
 8009974:	f104 0914 	add.w	r9, r4, #20
 8009978:	f108 0514 	add.w	r5, r8, #20
 800997c:	f100 0e14 	add.w	lr, r0, #20
 8009980:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009984:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009988:	f108 0210 	add.w	r2, r8, #16
 800998c:	46f2      	mov	sl, lr
 800998e:	2100      	movs	r1, #0
 8009990:	f859 3b04 	ldr.w	r3, [r9], #4
 8009994:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009998:	fa11 f88b 	uxtah	r8, r1, fp
 800999c:	b299      	uxth	r1, r3
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	eba8 0801 	sub.w	r8, r8, r1
 80099a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099ac:	fa1f f888 	uxth.w	r8, r8
 80099b0:	1419      	asrs	r1, r3, #16
 80099b2:	454e      	cmp	r6, r9
 80099b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099b8:	f84a 3b04 	str.w	r3, [sl], #4
 80099bc:	d8e8      	bhi.n	8009990 <__mdiff+0x80>
 80099be:	1b33      	subs	r3, r6, r4
 80099c0:	3b15      	subs	r3, #21
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	3304      	adds	r3, #4
 80099c8:	3415      	adds	r4, #21
 80099ca:	42a6      	cmp	r6, r4
 80099cc:	bf38      	it	cc
 80099ce:	2304      	movcc	r3, #4
 80099d0:	441d      	add	r5, r3
 80099d2:	4473      	add	r3, lr
 80099d4:	469e      	mov	lr, r3
 80099d6:	462e      	mov	r6, r5
 80099d8:	4566      	cmp	r6, ip
 80099da:	d30e      	bcc.n	80099fa <__mdiff+0xea>
 80099dc:	f10c 0203 	add.w	r2, ip, #3
 80099e0:	1b52      	subs	r2, r2, r5
 80099e2:	f022 0203 	bic.w	r2, r2, #3
 80099e6:	3d03      	subs	r5, #3
 80099e8:	45ac      	cmp	ip, r5
 80099ea:	bf38      	it	cc
 80099ec:	2200      	movcc	r2, #0
 80099ee:	4413      	add	r3, r2
 80099f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80099f4:	b17a      	cbz	r2, 8009a16 <__mdiff+0x106>
 80099f6:	6107      	str	r7, [r0, #16]
 80099f8:	e7a4      	b.n	8009944 <__mdiff+0x34>
 80099fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80099fe:	fa11 f288 	uxtah	r2, r1, r8
 8009a02:	1414      	asrs	r4, r2, #16
 8009a04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a08:	b292      	uxth	r2, r2
 8009a0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a0e:	f84e 2b04 	str.w	r2, [lr], #4
 8009a12:	1421      	asrs	r1, r4, #16
 8009a14:	e7e0      	b.n	80099d8 <__mdiff+0xc8>
 8009a16:	3f01      	subs	r7, #1
 8009a18:	e7ea      	b.n	80099f0 <__mdiff+0xe0>
 8009a1a:	bf00      	nop
 8009a1c:	0800bbb0 	.word	0x0800bbb0
 8009a20:	0800bc38 	.word	0x0800bc38

08009a24 <__ulp>:
 8009a24:	b082      	sub	sp, #8
 8009a26:	ed8d 0b00 	vstr	d0, [sp]
 8009a2a:	9a01      	ldr	r2, [sp, #4]
 8009a2c:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <__ulp+0x48>)
 8009a2e:	4013      	ands	r3, r2
 8009a30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dc08      	bgt.n	8009a4a <__ulp+0x26>
 8009a38:	425b      	negs	r3, r3
 8009a3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009a3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a42:	da04      	bge.n	8009a4e <__ulp+0x2a>
 8009a44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a48:	4113      	asrs	r3, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	e008      	b.n	8009a60 <__ulp+0x3c>
 8009a4e:	f1a2 0314 	sub.w	r3, r2, #20
 8009a52:	2b1e      	cmp	r3, #30
 8009a54:	bfda      	itte	le
 8009a56:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009a5a:	40da      	lsrle	r2, r3
 8009a5c:	2201      	movgt	r2, #1
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	ec41 0b10 	vmov	d0, r0, r1
 8009a68:	b002      	add	sp, #8
 8009a6a:	4770      	bx	lr
 8009a6c:	7ff00000 	.word	0x7ff00000

08009a70 <__b2d>:
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	6906      	ldr	r6, [r0, #16]
 8009a76:	f100 0814 	add.w	r8, r0, #20
 8009a7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a7e:	1f37      	subs	r7, r6, #4
 8009a80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7ff fd53 	bl	8009530 <__hi0bits>
 8009a8a:	f1c0 0320 	rsb	r3, r0, #32
 8009a8e:	280a      	cmp	r0, #10
 8009a90:	600b      	str	r3, [r1, #0]
 8009a92:	491b      	ldr	r1, [pc, #108]	; (8009b00 <__b2d+0x90>)
 8009a94:	dc15      	bgt.n	8009ac2 <__b2d+0x52>
 8009a96:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a9e:	45b8      	cmp	r8, r7
 8009aa0:	ea43 0501 	orr.w	r5, r3, r1
 8009aa4:	bf34      	ite	cc
 8009aa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009aaa:	2300      	movcs	r3, #0
 8009aac:	3015      	adds	r0, #21
 8009aae:	fa02 f000 	lsl.w	r0, r2, r0
 8009ab2:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ab6:	4303      	orrs	r3, r0
 8009ab8:	461c      	mov	r4, r3
 8009aba:	ec45 4b10 	vmov	d0, r4, r5
 8009abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac2:	45b8      	cmp	r8, r7
 8009ac4:	bf3a      	itte	cc
 8009ac6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009aca:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ace:	2300      	movcs	r3, #0
 8009ad0:	380b      	subs	r0, #11
 8009ad2:	d012      	beq.n	8009afa <__b2d+0x8a>
 8009ad4:	f1c0 0120 	rsb	r1, r0, #32
 8009ad8:	fa23 f401 	lsr.w	r4, r3, r1
 8009adc:	4082      	lsls	r2, r0
 8009ade:	4322      	orrs	r2, r4
 8009ae0:	4547      	cmp	r7, r8
 8009ae2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009ae6:	bf8c      	ite	hi
 8009ae8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009aec:	2200      	movls	r2, #0
 8009aee:	4083      	lsls	r3, r0
 8009af0:	40ca      	lsrs	r2, r1
 8009af2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009af6:	4313      	orrs	r3, r2
 8009af8:	e7de      	b.n	8009ab8 <__b2d+0x48>
 8009afa:	ea42 0501 	orr.w	r5, r2, r1
 8009afe:	e7db      	b.n	8009ab8 <__b2d+0x48>
 8009b00:	3ff00000 	.word	0x3ff00000

08009b04 <__d2b>:
 8009b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b08:	460f      	mov	r7, r1
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	ec59 8b10 	vmov	r8, r9, d0
 8009b10:	4616      	mov	r6, r2
 8009b12:	f7ff fc1b 	bl	800934c <_Balloc>
 8009b16:	4604      	mov	r4, r0
 8009b18:	b930      	cbnz	r0, 8009b28 <__d2b+0x24>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <__d2b+0xac>)
 8009b1e:	4825      	ldr	r0, [pc, #148]	; (8009bb4 <__d2b+0xb0>)
 8009b20:	f240 310f 	movw	r1, #783	; 0x30f
 8009b24:	f000 f98a 	bl	8009e3c <__assert_func>
 8009b28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b30:	bb2d      	cbnz	r5, 8009b7e <__d2b+0x7a>
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	f1b8 0300 	subs.w	r3, r8, #0
 8009b38:	d026      	beq.n	8009b88 <__d2b+0x84>
 8009b3a:	4668      	mov	r0, sp
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	f7ff fd17 	bl	8009570 <__lo0bits>
 8009b42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b46:	b1e8      	cbz	r0, 8009b84 <__d2b+0x80>
 8009b48:	f1c0 0320 	rsb	r3, r0, #32
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	430b      	orrs	r3, r1
 8009b52:	40c2      	lsrs	r2, r0
 8009b54:	6163      	str	r3, [r4, #20]
 8009b56:	9201      	str	r2, [sp, #4]
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	61a3      	str	r3, [r4, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bf14      	ite	ne
 8009b60:	2202      	movne	r2, #2
 8009b62:	2201      	moveq	r2, #1
 8009b64:	6122      	str	r2, [r4, #16]
 8009b66:	b1bd      	cbz	r5, 8009b98 <__d2b+0x94>
 8009b68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b6c:	4405      	add	r5, r0
 8009b6e:	603d      	str	r5, [r7, #0]
 8009b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4620      	mov	r0, r4
 8009b78:	b003      	add	sp, #12
 8009b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b82:	e7d6      	b.n	8009b32 <__d2b+0x2e>
 8009b84:	6161      	str	r1, [r4, #20]
 8009b86:	e7e7      	b.n	8009b58 <__d2b+0x54>
 8009b88:	a801      	add	r0, sp, #4
 8009b8a:	f7ff fcf1 	bl	8009570 <__lo0bits>
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	6163      	str	r3, [r4, #20]
 8009b92:	3020      	adds	r0, #32
 8009b94:	2201      	movs	r2, #1
 8009b96:	e7e5      	b.n	8009b64 <__d2b+0x60>
 8009b98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ba0:	6038      	str	r0, [r7, #0]
 8009ba2:	6918      	ldr	r0, [r3, #16]
 8009ba4:	f7ff fcc4 	bl	8009530 <__hi0bits>
 8009ba8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bac:	e7e2      	b.n	8009b74 <__d2b+0x70>
 8009bae:	bf00      	nop
 8009bb0:	0800bbb0 	.word	0x0800bbb0
 8009bb4:	0800bc38 	.word	0x0800bc38

08009bb8 <__ratio>:
 8009bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4688      	mov	r8, r1
 8009bbe:	4669      	mov	r1, sp
 8009bc0:	4681      	mov	r9, r0
 8009bc2:	f7ff ff55 	bl	8009a70 <__b2d>
 8009bc6:	a901      	add	r1, sp, #4
 8009bc8:	4640      	mov	r0, r8
 8009bca:	ec55 4b10 	vmov	r4, r5, d0
 8009bce:	f7ff ff4f 	bl	8009a70 <__b2d>
 8009bd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009bda:	eba3 0c02 	sub.w	ip, r3, r2
 8009bde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009be8:	ec51 0b10 	vmov	r0, r1, d0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfd6      	itet	le
 8009bf0:	460a      	movle	r2, r1
 8009bf2:	462a      	movgt	r2, r5
 8009bf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	462f      	mov	r7, r5
 8009bfc:	bfd4      	ite	le
 8009bfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c06:	4620      	mov	r0, r4
 8009c08:	ee10 2a10 	vmov	r2, s0
 8009c0c:	465b      	mov	r3, fp
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 fe34 	bl	800087c <__aeabi_ddiv>
 8009c14:	ec41 0b10 	vmov	d0, r0, r1
 8009c18:	b003      	add	sp, #12
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c1e <__copybits>:
 8009c1e:	3901      	subs	r1, #1
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	1149      	asrs	r1, r1, #5
 8009c24:	6914      	ldr	r4, [r2, #16]
 8009c26:	3101      	adds	r1, #1
 8009c28:	f102 0314 	add.w	r3, r2, #20
 8009c2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c34:	1f05      	subs	r5, r0, #4
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	d30c      	bcc.n	8009c54 <__copybits+0x36>
 8009c3a:	1aa3      	subs	r3, r4, r2
 8009c3c:	3b11      	subs	r3, #17
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	3211      	adds	r2, #17
 8009c44:	42a2      	cmp	r2, r4
 8009c46:	bf88      	it	hi
 8009c48:	2300      	movhi	r3, #0
 8009c4a:	4418      	add	r0, r3
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4288      	cmp	r0, r1
 8009c50:	d305      	bcc.n	8009c5e <__copybits+0x40>
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c58:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c5c:	e7eb      	b.n	8009c36 <__copybits+0x18>
 8009c5e:	f840 3b04 	str.w	r3, [r0], #4
 8009c62:	e7f4      	b.n	8009c4e <__copybits+0x30>

08009c64 <__any_on>:
 8009c64:	f100 0214 	add.w	r2, r0, #20
 8009c68:	6900      	ldr	r0, [r0, #16]
 8009c6a:	114b      	asrs	r3, r1, #5
 8009c6c:	4298      	cmp	r0, r3
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	db11      	blt.n	8009c96 <__any_on+0x32>
 8009c72:	dd0a      	ble.n	8009c8a <__any_on+0x26>
 8009c74:	f011 011f 	ands.w	r1, r1, #31
 8009c78:	d007      	beq.n	8009c8a <__any_on+0x26>
 8009c7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c7e:	fa24 f001 	lsr.w	r0, r4, r1
 8009c82:	fa00 f101 	lsl.w	r1, r0, r1
 8009c86:	428c      	cmp	r4, r1
 8009c88:	d10b      	bne.n	8009ca2 <__any_on+0x3e>
 8009c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d803      	bhi.n	8009c9a <__any_on+0x36>
 8009c92:	2000      	movs	r0, #0
 8009c94:	bd10      	pop	{r4, pc}
 8009c96:	4603      	mov	r3, r0
 8009c98:	e7f7      	b.n	8009c8a <__any_on+0x26>
 8009c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	d0f5      	beq.n	8009c8e <__any_on+0x2a>
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	e7f6      	b.n	8009c94 <__any_on+0x30>

08009ca6 <__ascii_wctomb>:
 8009ca6:	b149      	cbz	r1, 8009cbc <__ascii_wctomb+0x16>
 8009ca8:	2aff      	cmp	r2, #255	; 0xff
 8009caa:	bf85      	ittet	hi
 8009cac:	238a      	movhi	r3, #138	; 0x8a
 8009cae:	6003      	strhi	r3, [r0, #0]
 8009cb0:	700a      	strbls	r2, [r1, #0]
 8009cb2:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cb6:	bf98      	it	ls
 8009cb8:	2001      	movls	r0, #1
 8009cba:	4770      	bx	lr
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4770      	bx	lr

08009cc0 <__sflush_r>:
 8009cc0:	898a      	ldrh	r2, [r1, #12]
 8009cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	0710      	lsls	r0, r2, #28
 8009cca:	460c      	mov	r4, r1
 8009ccc:	d458      	bmi.n	8009d80 <__sflush_r+0xc0>
 8009cce:	684b      	ldr	r3, [r1, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	dc05      	bgt.n	8009ce0 <__sflush_r+0x20>
 8009cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	dc02      	bgt.n	8009ce0 <__sflush_r+0x20>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ce2:	2e00      	cmp	r6, #0
 8009ce4:	d0f9      	beq.n	8009cda <__sflush_r+0x1a>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cec:	682f      	ldr	r7, [r5, #0]
 8009cee:	6a21      	ldr	r1, [r4, #32]
 8009cf0:	602b      	str	r3, [r5, #0]
 8009cf2:	d032      	beq.n	8009d5a <__sflush_r+0x9a>
 8009cf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	075a      	lsls	r2, r3, #29
 8009cfa:	d505      	bpl.n	8009d08 <__sflush_r+0x48>
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	1ac0      	subs	r0, r0, r3
 8009d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d02:	b10b      	cbz	r3, 8009d08 <__sflush_r+0x48>
 8009d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d06:	1ac0      	subs	r0, r0, r3
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d0e:	6a21      	ldr	r1, [r4, #32]
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b0      	blx	r6
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	d106      	bne.n	8009d28 <__sflush_r+0x68>
 8009d1a:	6829      	ldr	r1, [r5, #0]
 8009d1c:	291d      	cmp	r1, #29
 8009d1e:	d82b      	bhi.n	8009d78 <__sflush_r+0xb8>
 8009d20:	4a29      	ldr	r2, [pc, #164]	; (8009dc8 <__sflush_r+0x108>)
 8009d22:	410a      	asrs	r2, r1
 8009d24:	07d6      	lsls	r6, r2, #31
 8009d26:	d427      	bmi.n	8009d78 <__sflush_r+0xb8>
 8009d28:	2200      	movs	r2, #0
 8009d2a:	6062      	str	r2, [r4, #4]
 8009d2c:	04d9      	lsls	r1, r3, #19
 8009d2e:	6922      	ldr	r2, [r4, #16]
 8009d30:	6022      	str	r2, [r4, #0]
 8009d32:	d504      	bpl.n	8009d3e <__sflush_r+0x7e>
 8009d34:	1c42      	adds	r2, r0, #1
 8009d36:	d101      	bne.n	8009d3c <__sflush_r+0x7c>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	b903      	cbnz	r3, 8009d3e <__sflush_r+0x7e>
 8009d3c:	6560      	str	r0, [r4, #84]	; 0x54
 8009d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d40:	602f      	str	r7, [r5, #0]
 8009d42:	2900      	cmp	r1, #0
 8009d44:	d0c9      	beq.n	8009cda <__sflush_r+0x1a>
 8009d46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d4a:	4299      	cmp	r1, r3
 8009d4c:	d002      	beq.n	8009d54 <__sflush_r+0x94>
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7fe fe9a 	bl	8008a88 <_free_r>
 8009d54:	2000      	movs	r0, #0
 8009d56:	6360      	str	r0, [r4, #52]	; 0x34
 8009d58:	e7c0      	b.n	8009cdc <__sflush_r+0x1c>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b0      	blx	r6
 8009d60:	1c41      	adds	r1, r0, #1
 8009d62:	d1c8      	bne.n	8009cf6 <__sflush_r+0x36>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0c5      	beq.n	8009cf6 <__sflush_r+0x36>
 8009d6a:	2b1d      	cmp	r3, #29
 8009d6c:	d001      	beq.n	8009d72 <__sflush_r+0xb2>
 8009d6e:	2b16      	cmp	r3, #22
 8009d70:	d101      	bne.n	8009d76 <__sflush_r+0xb6>
 8009d72:	602f      	str	r7, [r5, #0]
 8009d74:	e7b1      	b.n	8009cda <__sflush_r+0x1a>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	e7ad      	b.n	8009cdc <__sflush_r+0x1c>
 8009d80:	690f      	ldr	r7, [r1, #16]
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	d0a9      	beq.n	8009cda <__sflush_r+0x1a>
 8009d86:	0793      	lsls	r3, r2, #30
 8009d88:	680e      	ldr	r6, [r1, #0]
 8009d8a:	bf08      	it	eq
 8009d8c:	694b      	ldreq	r3, [r1, #20]
 8009d8e:	600f      	str	r7, [r1, #0]
 8009d90:	bf18      	it	ne
 8009d92:	2300      	movne	r3, #0
 8009d94:	eba6 0807 	sub.w	r8, r6, r7
 8009d98:	608b      	str	r3, [r1, #8]
 8009d9a:	f1b8 0f00 	cmp.w	r8, #0
 8009d9e:	dd9c      	ble.n	8009cda <__sflush_r+0x1a>
 8009da0:	6a21      	ldr	r1, [r4, #32]
 8009da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009da4:	4643      	mov	r3, r8
 8009da6:	463a      	mov	r2, r7
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b0      	blx	r6
 8009dac:	2800      	cmp	r0, #0
 8009dae:	dc06      	bgt.n	8009dbe <__sflush_r+0xfe>
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	e78e      	b.n	8009cdc <__sflush_r+0x1c>
 8009dbe:	4407      	add	r7, r0
 8009dc0:	eba8 0800 	sub.w	r8, r8, r0
 8009dc4:	e7e9      	b.n	8009d9a <__sflush_r+0xda>
 8009dc6:	bf00      	nop
 8009dc8:	dfbffffe 	.word	0xdfbffffe

08009dcc <_fflush_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	690b      	ldr	r3, [r1, #16]
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	b913      	cbnz	r3, 8009ddc <_fflush_r+0x10>
 8009dd6:	2500      	movs	r5, #0
 8009dd8:	4628      	mov	r0, r5
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	b118      	cbz	r0, 8009de6 <_fflush_r+0x1a>
 8009dde:	6a03      	ldr	r3, [r0, #32]
 8009de0:	b90b      	cbnz	r3, 8009de6 <_fflush_r+0x1a>
 8009de2:	f7fe fd31 	bl	8008848 <__sinit>
 8009de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0f3      	beq.n	8009dd6 <_fflush_r+0xa>
 8009dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009df0:	07d0      	lsls	r0, r2, #31
 8009df2:	d404      	bmi.n	8009dfe <_fflush_r+0x32>
 8009df4:	0599      	lsls	r1, r3, #22
 8009df6:	d402      	bmi.n	8009dfe <_fflush_r+0x32>
 8009df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dfa:	f7fe fe2a 	bl	8008a52 <__retarget_lock_acquire_recursive>
 8009dfe:	4628      	mov	r0, r5
 8009e00:	4621      	mov	r1, r4
 8009e02:	f7ff ff5d 	bl	8009cc0 <__sflush_r>
 8009e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e08:	07da      	lsls	r2, r3, #31
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	d4e4      	bmi.n	8009dd8 <_fflush_r+0xc>
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	059b      	lsls	r3, r3, #22
 8009e12:	d4e1      	bmi.n	8009dd8 <_fflush_r+0xc>
 8009e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e16:	f7fe fe1d 	bl	8008a54 <__retarget_lock_release_recursive>
 8009e1a:	e7dd      	b.n	8009dd8 <_fflush_r+0xc>

08009e1c <_sbrk_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d06      	ldr	r5, [pc, #24]	; (8009e38 <_sbrk_r+0x1c>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	f7fa f9a8 	bl	800417c <_sbrk>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_sbrk_r+0x1a>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_sbrk_r+0x1a>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	200007cc 	.word	0x200007cc

08009e3c <__assert_func>:
 8009e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e3e:	4614      	mov	r4, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <__assert_func+0x2c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4605      	mov	r5, r0
 8009e48:	68d8      	ldr	r0, [r3, #12]
 8009e4a:	b14c      	cbz	r4, 8009e60 <__assert_func+0x24>
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <__assert_func+0x30>)
 8009e4e:	9100      	str	r1, [sp, #0]
 8009e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e54:	4906      	ldr	r1, [pc, #24]	; (8009e70 <__assert_func+0x34>)
 8009e56:	462b      	mov	r3, r5
 8009e58:	f000 f82c 	bl	8009eb4 <fiprintf>
 8009e5c:	f000 f83c 	bl	8009ed8 <abort>
 8009e60:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <__assert_func+0x38>)
 8009e62:	461c      	mov	r4, r3
 8009e64:	e7f3      	b.n	8009e4e <__assert_func+0x12>
 8009e66:	bf00      	nop
 8009e68:	20000238 	.word	0x20000238
 8009e6c:	0800be95 	.word	0x0800be95
 8009e70:	0800bea2 	.word	0x0800bea2
 8009e74:	0800bed0 	.word	0x0800bed0

08009e78 <_calloc_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e7e:	b94c      	cbnz	r4, 8009e94 <_calloc_r+0x1c>
 8009e80:	4611      	mov	r1, r2
 8009e82:	9201      	str	r2, [sp, #4]
 8009e84:	f7ff f9c4 	bl	8009210 <_malloc_r>
 8009e88:	9a01      	ldr	r2, [sp, #4]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	b930      	cbnz	r0, 8009e9c <_calloc_r+0x24>
 8009e8e:	4628      	mov	r0, r5
 8009e90:	b003      	add	sp, #12
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	220c      	movs	r2, #12
 8009e96:	6002      	str	r2, [r0, #0]
 8009e98:	2500      	movs	r5, #0
 8009e9a:	e7f8      	b.n	8009e8e <_calloc_r+0x16>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f7fe fd4c 	bl	800893a <memset>
 8009ea2:	e7f4      	b.n	8009e8e <_calloc_r+0x16>

08009ea4 <malloc>:
 8009ea4:	4b02      	ldr	r3, [pc, #8]	; (8009eb0 <malloc+0xc>)
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	f7ff b9b1 	b.w	8009210 <_malloc_r>
 8009eae:	bf00      	nop
 8009eb0:	20000238 	.word	0x20000238

08009eb4 <fiprintf>:
 8009eb4:	b40e      	push	{r1, r2, r3}
 8009eb6:	b503      	push	{r0, r1, lr}
 8009eb8:	4601      	mov	r1, r0
 8009eba:	ab03      	add	r3, sp, #12
 8009ebc:	4805      	ldr	r0, [pc, #20]	; (8009ed4 <fiprintf+0x20>)
 8009ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec2:	6800      	ldr	r0, [r0, #0]
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	f000 f837 	bl	8009f38 <_vfiprintf_r>
 8009eca:	b002      	add	sp, #8
 8009ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed0:	b003      	add	sp, #12
 8009ed2:	4770      	bx	lr
 8009ed4:	20000238 	.word	0x20000238

08009ed8 <abort>:
 8009ed8:	b508      	push	{r3, lr}
 8009eda:	2006      	movs	r0, #6
 8009edc:	f000 fb94 	bl	800a608 <raise>
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	f7fa f8d3 	bl	800408c <_exit>

08009ee6 <__sfputc_r>:
 8009ee6:	6893      	ldr	r3, [r2, #8]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	b410      	push	{r4}
 8009eee:	6093      	str	r3, [r2, #8]
 8009ef0:	da08      	bge.n	8009f04 <__sfputc_r+0x1e>
 8009ef2:	6994      	ldr	r4, [r2, #24]
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	db01      	blt.n	8009efc <__sfputc_r+0x16>
 8009ef8:	290a      	cmp	r1, #10
 8009efa:	d103      	bne.n	8009f04 <__sfputc_r+0x1e>
 8009efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f00:	f000 bac4 	b.w	800a48c <__swbuf_r>
 8009f04:	6813      	ldr	r3, [r2, #0]
 8009f06:	1c58      	adds	r0, r3, #1
 8009f08:	6010      	str	r0, [r2, #0]
 8009f0a:	7019      	strb	r1, [r3, #0]
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <__sfputs_r>:
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	4614      	mov	r4, r2
 8009f1c:	18d5      	adds	r5, r2, r3
 8009f1e:	42ac      	cmp	r4, r5
 8009f20:	d101      	bne.n	8009f26 <__sfputs_r+0x12>
 8009f22:	2000      	movs	r0, #0
 8009f24:	e007      	b.n	8009f36 <__sfputs_r+0x22>
 8009f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2a:	463a      	mov	r2, r7
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7ff ffda 	bl	8009ee6 <__sfputc_r>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d1f3      	bne.n	8009f1e <__sfputs_r+0xa>
 8009f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f38 <_vfiprintf_r>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	b09d      	sub	sp, #116	; 0x74
 8009f40:	4614      	mov	r4, r2
 8009f42:	4698      	mov	r8, r3
 8009f44:	4606      	mov	r6, r0
 8009f46:	b118      	cbz	r0, 8009f50 <_vfiprintf_r+0x18>
 8009f48:	6a03      	ldr	r3, [r0, #32]
 8009f4a:	b90b      	cbnz	r3, 8009f50 <_vfiprintf_r+0x18>
 8009f4c:	f7fe fc7c 	bl	8008848 <__sinit>
 8009f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f52:	07d9      	lsls	r1, r3, #31
 8009f54:	d405      	bmi.n	8009f62 <_vfiprintf_r+0x2a>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	059a      	lsls	r2, r3, #22
 8009f5a:	d402      	bmi.n	8009f62 <_vfiprintf_r+0x2a>
 8009f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f5e:	f7fe fd78 	bl	8008a52 <__retarget_lock_acquire_recursive>
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	071b      	lsls	r3, r3, #28
 8009f66:	d501      	bpl.n	8009f6c <_vfiprintf_r+0x34>
 8009f68:	692b      	ldr	r3, [r5, #16]
 8009f6a:	b99b      	cbnz	r3, 8009f94 <_vfiprintf_r+0x5c>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f000 faca 	bl	800a508 <__swsetup_r>
 8009f74:	b170      	cbz	r0, 8009f94 <_vfiprintf_r+0x5c>
 8009f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f78:	07dc      	lsls	r4, r3, #31
 8009f7a:	d504      	bpl.n	8009f86 <_vfiprintf_r+0x4e>
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	b01d      	add	sp, #116	; 0x74
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	0598      	lsls	r0, r3, #22
 8009f8a:	d4f7      	bmi.n	8009f7c <_vfiprintf_r+0x44>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f7fe fd61 	bl	8008a54 <__retarget_lock_release_recursive>
 8009f92:	e7f3      	b.n	8009f7c <_vfiprintf_r+0x44>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa2:	2330      	movs	r3, #48	; 0x30
 8009fa4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a158 <_vfiprintf_r+0x220>
 8009fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fac:	f04f 0901 	mov.w	r9, #1
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	469a      	mov	sl, r3
 8009fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb8:	b10a      	cbz	r2, 8009fbe <_vfiprintf_r+0x86>
 8009fba:	2a25      	cmp	r2, #37	; 0x25
 8009fbc:	d1f9      	bne.n	8009fb2 <_vfiprintf_r+0x7a>
 8009fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc2:	d00b      	beq.n	8009fdc <_vfiprintf_r+0xa4>
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ffa2 	bl	8009f14 <__sfputs_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f000 80a9 	beq.w	800a128 <_vfiprintf_r+0x1f0>
 8009fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd8:	445a      	add	r2, fp
 8009fda:	9209      	str	r2, [sp, #36]	; 0x24
 8009fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80a1 	beq.w	800a128 <_vfiprintf_r+0x1f0>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff0:	f10a 0a01 	add.w	sl, sl, #1
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffe:	4654      	mov	r4, sl
 800a000:	2205      	movs	r2, #5
 800a002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a006:	4854      	ldr	r0, [pc, #336]	; (800a158 <_vfiprintf_r+0x220>)
 800a008:	f7f6 f902 	bl	8000210 <memchr>
 800a00c:	9a04      	ldr	r2, [sp, #16]
 800a00e:	b9d8      	cbnz	r0, 800a048 <_vfiprintf_r+0x110>
 800a010:	06d1      	lsls	r1, r2, #27
 800a012:	bf44      	itt	mi
 800a014:	2320      	movmi	r3, #32
 800a016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a01a:	0713      	lsls	r3, r2, #28
 800a01c:	bf44      	itt	mi
 800a01e:	232b      	movmi	r3, #43	; 0x2b
 800a020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a024:	f89a 3000 	ldrb.w	r3, [sl]
 800a028:	2b2a      	cmp	r3, #42	; 0x2a
 800a02a:	d015      	beq.n	800a058 <_vfiprintf_r+0x120>
 800a02c:	9a07      	ldr	r2, [sp, #28]
 800a02e:	4654      	mov	r4, sl
 800a030:	2000      	movs	r0, #0
 800a032:	f04f 0c0a 	mov.w	ip, #10
 800a036:	4621      	mov	r1, r4
 800a038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03c:	3b30      	subs	r3, #48	; 0x30
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d94d      	bls.n	800a0de <_vfiprintf_r+0x1a6>
 800a042:	b1b0      	cbz	r0, 800a072 <_vfiprintf_r+0x13a>
 800a044:	9207      	str	r2, [sp, #28]
 800a046:	e014      	b.n	800a072 <_vfiprintf_r+0x13a>
 800a048:	eba0 0308 	sub.w	r3, r0, r8
 800a04c:	fa09 f303 	lsl.w	r3, r9, r3
 800a050:	4313      	orrs	r3, r2
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	46a2      	mov	sl, r4
 800a056:	e7d2      	b.n	8009ffe <_vfiprintf_r+0xc6>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	1d19      	adds	r1, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	9103      	str	r1, [sp, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	bfbb      	ittet	lt
 800a064:	425b      	neglt	r3, r3
 800a066:	f042 0202 	orrlt.w	r2, r2, #2
 800a06a:	9307      	strge	r3, [sp, #28]
 800a06c:	9307      	strlt	r3, [sp, #28]
 800a06e:	bfb8      	it	lt
 800a070:	9204      	strlt	r2, [sp, #16]
 800a072:	7823      	ldrb	r3, [r4, #0]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d10c      	bne.n	800a092 <_vfiprintf_r+0x15a>
 800a078:	7863      	ldrb	r3, [r4, #1]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d134      	bne.n	800a0e8 <_vfiprintf_r+0x1b0>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	1d1a      	adds	r2, r3, #4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	9203      	str	r2, [sp, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfb8      	it	lt
 800a08a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a08e:	3402      	adds	r4, #2
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a168 <_vfiprintf_r+0x230>
 800a096:	7821      	ldrb	r1, [r4, #0]
 800a098:	2203      	movs	r2, #3
 800a09a:	4650      	mov	r0, sl
 800a09c:	f7f6 f8b8 	bl	8000210 <memchr>
 800a0a0:	b138      	cbz	r0, 800a0b2 <_vfiprintf_r+0x17a>
 800a0a2:	9b04      	ldr	r3, [sp, #16]
 800a0a4:	eba0 000a 	sub.w	r0, r0, sl
 800a0a8:	2240      	movs	r2, #64	; 0x40
 800a0aa:	4082      	lsls	r2, r0
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4829      	ldr	r0, [pc, #164]	; (800a15c <_vfiprintf_r+0x224>)
 800a0b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0bc:	2206      	movs	r2, #6
 800a0be:	f7f6 f8a7 	bl	8000210 <memchr>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d03f      	beq.n	800a146 <_vfiprintf_r+0x20e>
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <_vfiprintf_r+0x228>)
 800a0c8:	bb1b      	cbnz	r3, 800a112 <_vfiprintf_r+0x1da>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	3307      	adds	r3, #7
 800a0ce:	f023 0307 	bic.w	r3, r3, #7
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d8:	443b      	add	r3, r7
 800a0da:	9309      	str	r3, [sp, #36]	; 0x24
 800a0dc:	e768      	b.n	8009fb0 <_vfiprintf_r+0x78>
 800a0de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	e7a6      	b.n	800a036 <_vfiprintf_r+0xfe>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	9305      	str	r3, [sp, #20]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fa:	3a30      	subs	r2, #48	; 0x30
 800a0fc:	2a09      	cmp	r2, #9
 800a0fe:	d903      	bls.n	800a108 <_vfiprintf_r+0x1d0>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c6      	beq.n	800a092 <_vfiprintf_r+0x15a>
 800a104:	9105      	str	r1, [sp, #20]
 800a106:	e7c4      	b.n	800a092 <_vfiprintf_r+0x15a>
 800a108:	fb0c 2101 	mla	r1, ip, r1, r2
 800a10c:	4604      	mov	r4, r0
 800a10e:	2301      	movs	r3, #1
 800a110:	e7f0      	b.n	800a0f4 <_vfiprintf_r+0x1bc>
 800a112:	ab03      	add	r3, sp, #12
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	462a      	mov	r2, r5
 800a118:	4b12      	ldr	r3, [pc, #72]	; (800a164 <_vfiprintf_r+0x22c>)
 800a11a:	a904      	add	r1, sp, #16
 800a11c:	4630      	mov	r0, r6
 800a11e:	f3af 8000 	nop.w
 800a122:	4607      	mov	r7, r0
 800a124:	1c78      	adds	r0, r7, #1
 800a126:	d1d6      	bne.n	800a0d6 <_vfiprintf_r+0x19e>
 800a128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a12a:	07d9      	lsls	r1, r3, #31
 800a12c:	d405      	bmi.n	800a13a <_vfiprintf_r+0x202>
 800a12e:	89ab      	ldrh	r3, [r5, #12]
 800a130:	059a      	lsls	r2, r3, #22
 800a132:	d402      	bmi.n	800a13a <_vfiprintf_r+0x202>
 800a134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a136:	f7fe fc8d 	bl	8008a54 <__retarget_lock_release_recursive>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	065b      	lsls	r3, r3, #25
 800a13e:	f53f af1d 	bmi.w	8009f7c <_vfiprintf_r+0x44>
 800a142:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a144:	e71c      	b.n	8009f80 <_vfiprintf_r+0x48>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4b05      	ldr	r3, [pc, #20]	; (800a164 <_vfiprintf_r+0x22c>)
 800a14e:	a904      	add	r1, sp, #16
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f879 	bl	800a248 <_printf_i>
 800a156:	e7e4      	b.n	800a122 <_vfiprintf_r+0x1ea>
 800a158:	0800bed1 	.word	0x0800bed1
 800a15c:	0800bedb 	.word	0x0800bedb
 800a160:	00000000 	.word	0x00000000
 800a164:	08009f15 	.word	0x08009f15
 800a168:	0800bed7 	.word	0x0800bed7

0800a16c <_printf_common>:
 800a16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	4616      	mov	r6, r2
 800a172:	4699      	mov	r9, r3
 800a174:	688a      	ldr	r2, [r1, #8]
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	bfb8      	it	lt
 800a180:	4613      	movlt	r3, r2
 800a182:	6033      	str	r3, [r6, #0]
 800a184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a188:	4607      	mov	r7, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b10a      	cbz	r2, 800a192 <_printf_common+0x26>
 800a18e:	3301      	adds	r3, #1
 800a190:	6033      	str	r3, [r6, #0]
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	0699      	lsls	r1, r3, #26
 800a196:	bf42      	ittt	mi
 800a198:	6833      	ldrmi	r3, [r6, #0]
 800a19a:	3302      	addmi	r3, #2
 800a19c:	6033      	strmi	r3, [r6, #0]
 800a19e:	6825      	ldr	r5, [r4, #0]
 800a1a0:	f015 0506 	ands.w	r5, r5, #6
 800a1a4:	d106      	bne.n	800a1b4 <_printf_common+0x48>
 800a1a6:	f104 0a19 	add.w	sl, r4, #25
 800a1aa:	68e3      	ldr	r3, [r4, #12]
 800a1ac:	6832      	ldr	r2, [r6, #0]
 800a1ae:	1a9b      	subs	r3, r3, r2
 800a1b0:	42ab      	cmp	r3, r5
 800a1b2:	dc26      	bgt.n	800a202 <_printf_common+0x96>
 800a1b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1b8:	1e13      	subs	r3, r2, #0
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	bf18      	it	ne
 800a1be:	2301      	movne	r3, #1
 800a1c0:	0692      	lsls	r2, r2, #26
 800a1c2:	d42b      	bmi.n	800a21c <_printf_common+0xb0>
 800a1c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	47c0      	blx	r8
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d01e      	beq.n	800a210 <_printf_common+0xa4>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	f003 0306 	and.w	r3, r3, #6
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	bf02      	ittt	eq
 800a1de:	68e5      	ldreq	r5, [r4, #12]
 800a1e0:	6833      	ldreq	r3, [r6, #0]
 800a1e2:	1aed      	subeq	r5, r5, r3
 800a1e4:	68a3      	ldr	r3, [r4, #8]
 800a1e6:	bf0c      	ite	eq
 800a1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1ec:	2500      	movne	r5, #0
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	bfc4      	itt	gt
 800a1f2:	1a9b      	subgt	r3, r3, r2
 800a1f4:	18ed      	addgt	r5, r5, r3
 800a1f6:	2600      	movs	r6, #0
 800a1f8:	341a      	adds	r4, #26
 800a1fa:	42b5      	cmp	r5, r6
 800a1fc:	d11a      	bne.n	800a234 <_printf_common+0xc8>
 800a1fe:	2000      	movs	r0, #0
 800a200:	e008      	b.n	800a214 <_printf_common+0xa8>
 800a202:	2301      	movs	r3, #1
 800a204:	4652      	mov	r2, sl
 800a206:	4649      	mov	r1, r9
 800a208:	4638      	mov	r0, r7
 800a20a:	47c0      	blx	r8
 800a20c:	3001      	adds	r0, #1
 800a20e:	d103      	bne.n	800a218 <_printf_common+0xac>
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a218:	3501      	adds	r5, #1
 800a21a:	e7c6      	b.n	800a1aa <_printf_common+0x3e>
 800a21c:	18e1      	adds	r1, r4, r3
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	2030      	movs	r0, #48	; 0x30
 800a222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a226:	4422      	add	r2, r4
 800a228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a22c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a230:	3302      	adds	r3, #2
 800a232:	e7c7      	b.n	800a1c4 <_printf_common+0x58>
 800a234:	2301      	movs	r3, #1
 800a236:	4622      	mov	r2, r4
 800a238:	4649      	mov	r1, r9
 800a23a:	4638      	mov	r0, r7
 800a23c:	47c0      	blx	r8
 800a23e:	3001      	adds	r0, #1
 800a240:	d0e6      	beq.n	800a210 <_printf_common+0xa4>
 800a242:	3601      	adds	r6, #1
 800a244:	e7d9      	b.n	800a1fa <_printf_common+0x8e>
	...

0800a248 <_printf_i>:
 800a248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a24c:	7e0f      	ldrb	r7, [r1, #24]
 800a24e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a250:	2f78      	cmp	r7, #120	; 0x78
 800a252:	4691      	mov	r9, r2
 800a254:	4680      	mov	r8, r0
 800a256:	460c      	mov	r4, r1
 800a258:	469a      	mov	sl, r3
 800a25a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a25e:	d807      	bhi.n	800a270 <_printf_i+0x28>
 800a260:	2f62      	cmp	r7, #98	; 0x62
 800a262:	d80a      	bhi.n	800a27a <_printf_i+0x32>
 800a264:	2f00      	cmp	r7, #0
 800a266:	f000 80d4 	beq.w	800a412 <_printf_i+0x1ca>
 800a26a:	2f58      	cmp	r7, #88	; 0x58
 800a26c:	f000 80c0 	beq.w	800a3f0 <_printf_i+0x1a8>
 800a270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a278:	e03a      	b.n	800a2f0 <_printf_i+0xa8>
 800a27a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a27e:	2b15      	cmp	r3, #21
 800a280:	d8f6      	bhi.n	800a270 <_printf_i+0x28>
 800a282:	a101      	add	r1, pc, #4	; (adr r1, 800a288 <_printf_i+0x40>)
 800a284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a288:	0800a2e1 	.word	0x0800a2e1
 800a28c:	0800a2f5 	.word	0x0800a2f5
 800a290:	0800a271 	.word	0x0800a271
 800a294:	0800a271 	.word	0x0800a271
 800a298:	0800a271 	.word	0x0800a271
 800a29c:	0800a271 	.word	0x0800a271
 800a2a0:	0800a2f5 	.word	0x0800a2f5
 800a2a4:	0800a271 	.word	0x0800a271
 800a2a8:	0800a271 	.word	0x0800a271
 800a2ac:	0800a271 	.word	0x0800a271
 800a2b0:	0800a271 	.word	0x0800a271
 800a2b4:	0800a3f9 	.word	0x0800a3f9
 800a2b8:	0800a321 	.word	0x0800a321
 800a2bc:	0800a3b3 	.word	0x0800a3b3
 800a2c0:	0800a271 	.word	0x0800a271
 800a2c4:	0800a271 	.word	0x0800a271
 800a2c8:	0800a41b 	.word	0x0800a41b
 800a2cc:	0800a271 	.word	0x0800a271
 800a2d0:	0800a321 	.word	0x0800a321
 800a2d4:	0800a271 	.word	0x0800a271
 800a2d8:	0800a271 	.word	0x0800a271
 800a2dc:	0800a3bb 	.word	0x0800a3bb
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	1d1a      	adds	r2, r3, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	602a      	str	r2, [r5, #0]
 800a2e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e09f      	b.n	800a434 <_printf_i+0x1ec>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	682b      	ldr	r3, [r5, #0]
 800a2f8:	0607      	lsls	r7, r0, #24
 800a2fa:	f103 0104 	add.w	r1, r3, #4
 800a2fe:	6029      	str	r1, [r5, #0]
 800a300:	d501      	bpl.n	800a306 <_printf_i+0xbe>
 800a302:	681e      	ldr	r6, [r3, #0]
 800a304:	e003      	b.n	800a30e <_printf_i+0xc6>
 800a306:	0646      	lsls	r6, r0, #25
 800a308:	d5fb      	bpl.n	800a302 <_printf_i+0xba>
 800a30a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a30e:	2e00      	cmp	r6, #0
 800a310:	da03      	bge.n	800a31a <_printf_i+0xd2>
 800a312:	232d      	movs	r3, #45	; 0x2d
 800a314:	4276      	negs	r6, r6
 800a316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a31a:	485a      	ldr	r0, [pc, #360]	; (800a484 <_printf_i+0x23c>)
 800a31c:	230a      	movs	r3, #10
 800a31e:	e012      	b.n	800a346 <_printf_i+0xfe>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	6820      	ldr	r0, [r4, #0]
 800a324:	1d19      	adds	r1, r3, #4
 800a326:	6029      	str	r1, [r5, #0]
 800a328:	0605      	lsls	r5, r0, #24
 800a32a:	d501      	bpl.n	800a330 <_printf_i+0xe8>
 800a32c:	681e      	ldr	r6, [r3, #0]
 800a32e:	e002      	b.n	800a336 <_printf_i+0xee>
 800a330:	0641      	lsls	r1, r0, #25
 800a332:	d5fb      	bpl.n	800a32c <_printf_i+0xe4>
 800a334:	881e      	ldrh	r6, [r3, #0]
 800a336:	4853      	ldr	r0, [pc, #332]	; (800a484 <_printf_i+0x23c>)
 800a338:	2f6f      	cmp	r7, #111	; 0x6f
 800a33a:	bf0c      	ite	eq
 800a33c:	2308      	moveq	r3, #8
 800a33e:	230a      	movne	r3, #10
 800a340:	2100      	movs	r1, #0
 800a342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a346:	6865      	ldr	r5, [r4, #4]
 800a348:	60a5      	str	r5, [r4, #8]
 800a34a:	2d00      	cmp	r5, #0
 800a34c:	bfa2      	ittt	ge
 800a34e:	6821      	ldrge	r1, [r4, #0]
 800a350:	f021 0104 	bicge.w	r1, r1, #4
 800a354:	6021      	strge	r1, [r4, #0]
 800a356:	b90e      	cbnz	r6, 800a35c <_printf_i+0x114>
 800a358:	2d00      	cmp	r5, #0
 800a35a:	d04b      	beq.n	800a3f4 <_printf_i+0x1ac>
 800a35c:	4615      	mov	r5, r2
 800a35e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a362:	fb03 6711 	mls	r7, r3, r1, r6
 800a366:	5dc7      	ldrb	r7, [r0, r7]
 800a368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a36c:	4637      	mov	r7, r6
 800a36e:	42bb      	cmp	r3, r7
 800a370:	460e      	mov	r6, r1
 800a372:	d9f4      	bls.n	800a35e <_printf_i+0x116>
 800a374:	2b08      	cmp	r3, #8
 800a376:	d10b      	bne.n	800a390 <_printf_i+0x148>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	07de      	lsls	r6, r3, #31
 800a37c:	d508      	bpl.n	800a390 <_printf_i+0x148>
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	6861      	ldr	r1, [r4, #4]
 800a382:	4299      	cmp	r1, r3
 800a384:	bfde      	ittt	le
 800a386:	2330      	movle	r3, #48	; 0x30
 800a388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a38c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a390:	1b52      	subs	r2, r2, r5
 800a392:	6122      	str	r2, [r4, #16]
 800a394:	f8cd a000 	str.w	sl, [sp]
 800a398:	464b      	mov	r3, r9
 800a39a:	aa03      	add	r2, sp, #12
 800a39c:	4621      	mov	r1, r4
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7ff fee4 	bl	800a16c <_printf_common>
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d14a      	bne.n	800a43e <_printf_i+0x1f6>
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	b004      	add	sp, #16
 800a3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	f043 0320 	orr.w	r3, r3, #32
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	4833      	ldr	r0, [pc, #204]	; (800a488 <_printf_i+0x240>)
 800a3bc:	2778      	movs	r7, #120	; 0x78
 800a3be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	6829      	ldr	r1, [r5, #0]
 800a3c6:	061f      	lsls	r7, r3, #24
 800a3c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3cc:	d402      	bmi.n	800a3d4 <_printf_i+0x18c>
 800a3ce:	065f      	lsls	r7, r3, #25
 800a3d0:	bf48      	it	mi
 800a3d2:	b2b6      	uxthmi	r6, r6
 800a3d4:	07df      	lsls	r7, r3, #31
 800a3d6:	bf48      	it	mi
 800a3d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a3dc:	6029      	str	r1, [r5, #0]
 800a3de:	bf48      	it	mi
 800a3e0:	6023      	strmi	r3, [r4, #0]
 800a3e2:	b91e      	cbnz	r6, 800a3ec <_printf_i+0x1a4>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	f023 0320 	bic.w	r3, r3, #32
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	e7a7      	b.n	800a340 <_printf_i+0xf8>
 800a3f0:	4824      	ldr	r0, [pc, #144]	; (800a484 <_printf_i+0x23c>)
 800a3f2:	e7e4      	b.n	800a3be <_printf_i+0x176>
 800a3f4:	4615      	mov	r5, r2
 800a3f6:	e7bd      	b.n	800a374 <_printf_i+0x12c>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	6826      	ldr	r6, [r4, #0]
 800a3fc:	6961      	ldr	r1, [r4, #20]
 800a3fe:	1d18      	adds	r0, r3, #4
 800a400:	6028      	str	r0, [r5, #0]
 800a402:	0635      	lsls	r5, r6, #24
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	d501      	bpl.n	800a40c <_printf_i+0x1c4>
 800a408:	6019      	str	r1, [r3, #0]
 800a40a:	e002      	b.n	800a412 <_printf_i+0x1ca>
 800a40c:	0670      	lsls	r0, r6, #25
 800a40e:	d5fb      	bpl.n	800a408 <_printf_i+0x1c0>
 800a410:	8019      	strh	r1, [r3, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	6123      	str	r3, [r4, #16]
 800a416:	4615      	mov	r5, r2
 800a418:	e7bc      	b.n	800a394 <_printf_i+0x14c>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	1d1a      	adds	r2, r3, #4
 800a41e:	602a      	str	r2, [r5, #0]
 800a420:	681d      	ldr	r5, [r3, #0]
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	2100      	movs	r1, #0
 800a426:	4628      	mov	r0, r5
 800a428:	f7f5 fef2 	bl	8000210 <memchr>
 800a42c:	b108      	cbz	r0, 800a432 <_printf_i+0x1ea>
 800a42e:	1b40      	subs	r0, r0, r5
 800a430:	6060      	str	r0, [r4, #4]
 800a432:	6863      	ldr	r3, [r4, #4]
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	2300      	movs	r3, #0
 800a438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a43c:	e7aa      	b.n	800a394 <_printf_i+0x14c>
 800a43e:	6923      	ldr	r3, [r4, #16]
 800a440:	462a      	mov	r2, r5
 800a442:	4649      	mov	r1, r9
 800a444:	4640      	mov	r0, r8
 800a446:	47d0      	blx	sl
 800a448:	3001      	adds	r0, #1
 800a44a:	d0ad      	beq.n	800a3a8 <_printf_i+0x160>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	079b      	lsls	r3, r3, #30
 800a450:	d413      	bmi.n	800a47a <_printf_i+0x232>
 800a452:	68e0      	ldr	r0, [r4, #12]
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	4298      	cmp	r0, r3
 800a458:	bfb8      	it	lt
 800a45a:	4618      	movlt	r0, r3
 800a45c:	e7a6      	b.n	800a3ac <_printf_i+0x164>
 800a45e:	2301      	movs	r3, #1
 800a460:	4632      	mov	r2, r6
 800a462:	4649      	mov	r1, r9
 800a464:	4640      	mov	r0, r8
 800a466:	47d0      	blx	sl
 800a468:	3001      	adds	r0, #1
 800a46a:	d09d      	beq.n	800a3a8 <_printf_i+0x160>
 800a46c:	3501      	adds	r5, #1
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	9903      	ldr	r1, [sp, #12]
 800a472:	1a5b      	subs	r3, r3, r1
 800a474:	42ab      	cmp	r3, r5
 800a476:	dcf2      	bgt.n	800a45e <_printf_i+0x216>
 800a478:	e7eb      	b.n	800a452 <_printf_i+0x20a>
 800a47a:	2500      	movs	r5, #0
 800a47c:	f104 0619 	add.w	r6, r4, #25
 800a480:	e7f5      	b.n	800a46e <_printf_i+0x226>
 800a482:	bf00      	nop
 800a484:	0800bee2 	.word	0x0800bee2
 800a488:	0800bef3 	.word	0x0800bef3

0800a48c <__swbuf_r>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	460e      	mov	r6, r1
 800a490:	4614      	mov	r4, r2
 800a492:	4605      	mov	r5, r0
 800a494:	b118      	cbz	r0, 800a49e <__swbuf_r+0x12>
 800a496:	6a03      	ldr	r3, [r0, #32]
 800a498:	b90b      	cbnz	r3, 800a49e <__swbuf_r+0x12>
 800a49a:	f7fe f9d5 	bl	8008848 <__sinit>
 800a49e:	69a3      	ldr	r3, [r4, #24]
 800a4a0:	60a3      	str	r3, [r4, #8]
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	071a      	lsls	r2, r3, #28
 800a4a6:	d525      	bpl.n	800a4f4 <__swbuf_r+0x68>
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	b31b      	cbz	r3, 800a4f4 <__swbuf_r+0x68>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	6922      	ldr	r2, [r4, #16]
 800a4b0:	1a98      	subs	r0, r3, r2
 800a4b2:	6963      	ldr	r3, [r4, #20]
 800a4b4:	b2f6      	uxtb	r6, r6
 800a4b6:	4283      	cmp	r3, r0
 800a4b8:	4637      	mov	r7, r6
 800a4ba:	dc04      	bgt.n	800a4c6 <__swbuf_r+0x3a>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f7ff fc84 	bl	8009dcc <_fflush_r>
 800a4c4:	b9e0      	cbnz	r0, 800a500 <__swbuf_r+0x74>
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	60a3      	str	r3, [r4, #8]
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	6022      	str	r2, [r4, #0]
 800a4d2:	701e      	strb	r6, [r3, #0]
 800a4d4:	6962      	ldr	r2, [r4, #20]
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d004      	beq.n	800a4e6 <__swbuf_r+0x5a>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	07db      	lsls	r3, r3, #31
 800a4e0:	d506      	bpl.n	800a4f0 <__swbuf_r+0x64>
 800a4e2:	2e0a      	cmp	r6, #10
 800a4e4:	d104      	bne.n	800a4f0 <__swbuf_r+0x64>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f7ff fc6f 	bl	8009dcc <_fflush_r>
 800a4ee:	b938      	cbnz	r0, 800a500 <__swbuf_r+0x74>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f000 f806 	bl	800a508 <__swsetup_r>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d0d5      	beq.n	800a4ac <__swbuf_r+0x20>
 800a500:	f04f 37ff 	mov.w	r7, #4294967295
 800a504:	e7f4      	b.n	800a4f0 <__swbuf_r+0x64>
	...

0800a508 <__swsetup_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <__swsetup_r+0xac>)
 800a50c:	4605      	mov	r5, r0
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	460c      	mov	r4, r1
 800a512:	b118      	cbz	r0, 800a51c <__swsetup_r+0x14>
 800a514:	6a03      	ldr	r3, [r0, #32]
 800a516:	b90b      	cbnz	r3, 800a51c <__swsetup_r+0x14>
 800a518:	f7fe f996 	bl	8008848 <__sinit>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a522:	0718      	lsls	r0, r3, #28
 800a524:	d422      	bmi.n	800a56c <__swsetup_r+0x64>
 800a526:	06d9      	lsls	r1, r3, #27
 800a528:	d407      	bmi.n	800a53a <__swsetup_r+0x32>
 800a52a:	2309      	movs	r3, #9
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e034      	b.n	800a5a4 <__swsetup_r+0x9c>
 800a53a:	0758      	lsls	r0, r3, #29
 800a53c:	d512      	bpl.n	800a564 <__swsetup_r+0x5c>
 800a53e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a540:	b141      	cbz	r1, 800a554 <__swsetup_r+0x4c>
 800a542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a546:	4299      	cmp	r1, r3
 800a548:	d002      	beq.n	800a550 <__swsetup_r+0x48>
 800a54a:	4628      	mov	r0, r5
 800a54c:	f7fe fa9c 	bl	8008a88 <_free_r>
 800a550:	2300      	movs	r3, #0
 800a552:	6363      	str	r3, [r4, #52]	; 0x34
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	2300      	movs	r3, #0
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f043 0308 	orr.w	r3, r3, #8
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	b94b      	cbnz	r3, 800a584 <__swsetup_r+0x7c>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a57a:	d003      	beq.n	800a584 <__swsetup_r+0x7c>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f884 	bl	800a68c <__smakebuf_r>
 800a584:	89a0      	ldrh	r0, [r4, #12]
 800a586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a58a:	f010 0301 	ands.w	r3, r0, #1
 800a58e:	d00a      	beq.n	800a5a6 <__swsetup_r+0x9e>
 800a590:	2300      	movs	r3, #0
 800a592:	60a3      	str	r3, [r4, #8]
 800a594:	6963      	ldr	r3, [r4, #20]
 800a596:	425b      	negs	r3, r3
 800a598:	61a3      	str	r3, [r4, #24]
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	b943      	cbnz	r3, 800a5b0 <__swsetup_r+0xa8>
 800a59e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5a2:	d1c4      	bne.n	800a52e <__swsetup_r+0x26>
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
 800a5a6:	0781      	lsls	r1, r0, #30
 800a5a8:	bf58      	it	pl
 800a5aa:	6963      	ldrpl	r3, [r4, #20]
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	e7f4      	b.n	800a59a <__swsetup_r+0x92>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e7f7      	b.n	800a5a4 <__swsetup_r+0x9c>
 800a5b4:	20000238 	.word	0x20000238

0800a5b8 <_raise_r>:
 800a5b8:	291f      	cmp	r1, #31
 800a5ba:	b538      	push	{r3, r4, r5, lr}
 800a5bc:	4604      	mov	r4, r0
 800a5be:	460d      	mov	r5, r1
 800a5c0:	d904      	bls.n	800a5cc <_raise_r+0x14>
 800a5c2:	2316      	movs	r3, #22
 800a5c4:	6003      	str	r3, [r0, #0]
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5ce:	b112      	cbz	r2, 800a5d6 <_raise_r+0x1e>
 800a5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5d4:	b94b      	cbnz	r3, 800a5ea <_raise_r+0x32>
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 f830 	bl	800a63c <_getpid_r>
 800a5dc:	462a      	mov	r2, r5
 800a5de:	4601      	mov	r1, r0
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5e6:	f000 b817 	b.w	800a618 <_kill_r>
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d00a      	beq.n	800a604 <_raise_r+0x4c>
 800a5ee:	1c59      	adds	r1, r3, #1
 800a5f0:	d103      	bne.n	800a5fa <_raise_r+0x42>
 800a5f2:	2316      	movs	r3, #22
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	e7e7      	b.n	800a5ca <_raise_r+0x12>
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a600:	4628      	mov	r0, r5
 800a602:	4798      	blx	r3
 800a604:	2000      	movs	r0, #0
 800a606:	e7e0      	b.n	800a5ca <_raise_r+0x12>

0800a608 <raise>:
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <raise+0xc>)
 800a60a:	4601      	mov	r1, r0
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	f7ff bfd3 	b.w	800a5b8 <_raise_r>
 800a612:	bf00      	nop
 800a614:	20000238 	.word	0x20000238

0800a618 <_kill_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	; (800a638 <_kill_r+0x20>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	f7f9 fd21 	bl	800406c <_kill>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d102      	bne.n	800a634 <_kill_r+0x1c>
 800a62e:	682b      	ldr	r3, [r5, #0]
 800a630:	b103      	cbz	r3, 800a634 <_kill_r+0x1c>
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	200007cc 	.word	0x200007cc

0800a63c <_getpid_r>:
 800a63c:	f7f9 bd0e 	b.w	800405c <_getpid>

0800a640 <__swhatbuf_r>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	460c      	mov	r4, r1
 800a644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a648:	2900      	cmp	r1, #0
 800a64a:	b096      	sub	sp, #88	; 0x58
 800a64c:	4615      	mov	r5, r2
 800a64e:	461e      	mov	r6, r3
 800a650:	da0d      	bge.n	800a66e <__swhatbuf_r+0x2e>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a658:	f04f 0100 	mov.w	r1, #0
 800a65c:	bf0c      	ite	eq
 800a65e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a662:	2340      	movne	r3, #64	; 0x40
 800a664:	2000      	movs	r0, #0
 800a666:	6031      	str	r1, [r6, #0]
 800a668:	602b      	str	r3, [r5, #0]
 800a66a:	b016      	add	sp, #88	; 0x58
 800a66c:	bd70      	pop	{r4, r5, r6, pc}
 800a66e:	466a      	mov	r2, sp
 800a670:	f000 f848 	bl	800a704 <_fstat_r>
 800a674:	2800      	cmp	r0, #0
 800a676:	dbec      	blt.n	800a652 <__swhatbuf_r+0x12>
 800a678:	9901      	ldr	r1, [sp, #4]
 800a67a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a67e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a682:	4259      	negs	r1, r3
 800a684:	4159      	adcs	r1, r3
 800a686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a68a:	e7eb      	b.n	800a664 <__swhatbuf_r+0x24>

0800a68c <__smakebuf_r>:
 800a68c:	898b      	ldrh	r3, [r1, #12]
 800a68e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a690:	079d      	lsls	r5, r3, #30
 800a692:	4606      	mov	r6, r0
 800a694:	460c      	mov	r4, r1
 800a696:	d507      	bpl.n	800a6a8 <__smakebuf_r+0x1c>
 800a698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	b002      	add	sp, #8
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	ab01      	add	r3, sp, #4
 800a6aa:	466a      	mov	r2, sp
 800a6ac:	f7ff ffc8 	bl	800a640 <__swhatbuf_r>
 800a6b0:	9900      	ldr	r1, [sp, #0]
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7fe fdab 	bl	8009210 <_malloc_r>
 800a6ba:	b948      	cbnz	r0, 800a6d0 <__smakebuf_r+0x44>
 800a6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c0:	059a      	lsls	r2, r3, #22
 800a6c2:	d4ef      	bmi.n	800a6a4 <__smakebuf_r+0x18>
 800a6c4:	f023 0303 	bic.w	r3, r3, #3
 800a6c8:	f043 0302 	orr.w	r3, r3, #2
 800a6cc:	81a3      	strh	r3, [r4, #12]
 800a6ce:	e7e3      	b.n	800a698 <__smakebuf_r+0xc>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	6020      	str	r0, [r4, #0]
 800a6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	9b00      	ldr	r3, [sp, #0]
 800a6dc:	6163      	str	r3, [r4, #20]
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	6120      	str	r0, [r4, #16]
 800a6e2:	b15b      	cbz	r3, 800a6fc <__smakebuf_r+0x70>
 800a6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f000 f81d 	bl	800a728 <_isatty_r>
 800a6ee:	b128      	cbz	r0, 800a6fc <__smakebuf_r+0x70>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	431d      	orrs	r5, r3
 800a700:	81a5      	strh	r5, [r4, #12]
 800a702:	e7cf      	b.n	800a6a4 <__smakebuf_r+0x18>

0800a704 <_fstat_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d07      	ldr	r5, [pc, #28]	; (800a724 <_fstat_r+0x20>)
 800a708:	2300      	movs	r3, #0
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	4611      	mov	r1, r2
 800a710:	602b      	str	r3, [r5, #0]
 800a712:	f7f9 fd0a 	bl	800412a <_fstat>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d102      	bne.n	800a720 <_fstat_r+0x1c>
 800a71a:	682b      	ldr	r3, [r5, #0]
 800a71c:	b103      	cbz	r3, 800a720 <_fstat_r+0x1c>
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	bd38      	pop	{r3, r4, r5, pc}
 800a722:	bf00      	nop
 800a724:	200007cc 	.word	0x200007cc

0800a728 <_isatty_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_isatty_r+0x1c>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f9 fd09 	bl	800414a <_isatty>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_isatty_r+0x1a>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_isatty_r+0x1a>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	200007cc 	.word	0x200007cc

0800a748 <atan2>:
 800a748:	f000 b956 	b.w	800a9f8 <__ieee754_atan2>

0800a74c <pow>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	ed2d 8b02 	vpush	{d8}
 800a752:	eeb0 8a40 	vmov.f32	s16, s0
 800a756:	eef0 8a60 	vmov.f32	s17, s1
 800a75a:	ec55 4b11 	vmov	r4, r5, d1
 800a75e:	f000 fa13 	bl	800ab88 <__ieee754_pow>
 800a762:	4622      	mov	r2, r4
 800a764:	462b      	mov	r3, r5
 800a766:	4620      	mov	r0, r4
 800a768:	4629      	mov	r1, r5
 800a76a:	ec57 6b10 	vmov	r6, r7, d0
 800a76e:	f7f6 f9f5 	bl	8000b5c <__aeabi_dcmpun>
 800a772:	2800      	cmp	r0, #0
 800a774:	d13b      	bne.n	800a7ee <pow+0xa2>
 800a776:	ec51 0b18 	vmov	r0, r1, d8
 800a77a:	2200      	movs	r2, #0
 800a77c:	2300      	movs	r3, #0
 800a77e:	f7f6 f9bb 	bl	8000af8 <__aeabi_dcmpeq>
 800a782:	b1b8      	cbz	r0, 800a7b4 <pow+0x68>
 800a784:	2200      	movs	r2, #0
 800a786:	2300      	movs	r3, #0
 800a788:	4620      	mov	r0, r4
 800a78a:	4629      	mov	r1, r5
 800a78c:	f7f6 f9b4 	bl	8000af8 <__aeabi_dcmpeq>
 800a790:	2800      	cmp	r0, #0
 800a792:	d146      	bne.n	800a822 <pow+0xd6>
 800a794:	ec45 4b10 	vmov	d0, r4, r5
 800a798:	f000 f848 	bl	800a82c <finite>
 800a79c:	b338      	cbz	r0, 800a7ee <pow+0xa2>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7f6 f9b1 	bl	8000b0c <__aeabi_dcmplt>
 800a7aa:	b300      	cbz	r0, 800a7ee <pow+0xa2>
 800a7ac:	f7fe f926 	bl	80089fc <__errno>
 800a7b0:	2322      	movs	r3, #34	; 0x22
 800a7b2:	e01b      	b.n	800a7ec <pow+0xa0>
 800a7b4:	ec47 6b10 	vmov	d0, r6, r7
 800a7b8:	f000 f838 	bl	800a82c <finite>
 800a7bc:	b9e0      	cbnz	r0, 800a7f8 <pow+0xac>
 800a7be:	eeb0 0a48 	vmov.f32	s0, s16
 800a7c2:	eef0 0a68 	vmov.f32	s1, s17
 800a7c6:	f000 f831 	bl	800a82c <finite>
 800a7ca:	b1a8      	cbz	r0, 800a7f8 <pow+0xac>
 800a7cc:	ec45 4b10 	vmov	d0, r4, r5
 800a7d0:	f000 f82c 	bl	800a82c <finite>
 800a7d4:	b180      	cbz	r0, 800a7f8 <pow+0xac>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	4630      	mov	r0, r6
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f7f6 f9bd 	bl	8000b5c <__aeabi_dcmpun>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d0e2      	beq.n	800a7ac <pow+0x60>
 800a7e6:	f7fe f909 	bl	80089fc <__errno>
 800a7ea:	2321      	movs	r3, #33	; 0x21
 800a7ec:	6003      	str	r3, [r0, #0]
 800a7ee:	ecbd 8b02 	vpop	{d8}
 800a7f2:	ec47 6b10 	vmov	d0, r6, r7
 800a7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f6 f97a 	bl	8000af8 <__aeabi_dcmpeq>
 800a804:	2800      	cmp	r0, #0
 800a806:	d0f2      	beq.n	800a7ee <pow+0xa2>
 800a808:	eeb0 0a48 	vmov.f32	s0, s16
 800a80c:	eef0 0a68 	vmov.f32	s1, s17
 800a810:	f000 f80c 	bl	800a82c <finite>
 800a814:	2800      	cmp	r0, #0
 800a816:	d0ea      	beq.n	800a7ee <pow+0xa2>
 800a818:	ec45 4b10 	vmov	d0, r4, r5
 800a81c:	f000 f806 	bl	800a82c <finite>
 800a820:	e7c3      	b.n	800a7aa <pow+0x5e>
 800a822:	4f01      	ldr	r7, [pc, #4]	; (800a828 <pow+0xdc>)
 800a824:	2600      	movs	r6, #0
 800a826:	e7e2      	b.n	800a7ee <pow+0xa2>
 800a828:	3ff00000 	.word	0x3ff00000

0800a82c <finite>:
 800a82c:	b082      	sub	sp, #8
 800a82e:	ed8d 0b00 	vstr	d0, [sp]
 800a832:	9801      	ldr	r0, [sp, #4]
 800a834:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a838:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a83c:	0fc0      	lsrs	r0, r0, #31
 800a83e:	b002      	add	sp, #8
 800a840:	4770      	bx	lr
	...

0800a844 <__ieee754_sqrt>:
 800a844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	ec55 4b10 	vmov	r4, r5, d0
 800a84c:	4e67      	ldr	r6, [pc, #412]	; (800a9ec <__ieee754_sqrt+0x1a8>)
 800a84e:	43ae      	bics	r6, r5
 800a850:	ee10 0a10 	vmov	r0, s0
 800a854:	ee10 2a10 	vmov	r2, s0
 800a858:	4629      	mov	r1, r5
 800a85a:	462b      	mov	r3, r5
 800a85c:	d10d      	bne.n	800a87a <__ieee754_sqrt+0x36>
 800a85e:	f7f5 fee3 	bl	8000628 <__aeabi_dmul>
 800a862:	4602      	mov	r2, r0
 800a864:	460b      	mov	r3, r1
 800a866:	4620      	mov	r0, r4
 800a868:	4629      	mov	r1, r5
 800a86a:	f7f5 fd27 	bl	80002bc <__adddf3>
 800a86e:	4604      	mov	r4, r0
 800a870:	460d      	mov	r5, r1
 800a872:	ec45 4b10 	vmov	d0, r4, r5
 800a876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	dc0b      	bgt.n	800a896 <__ieee754_sqrt+0x52>
 800a87e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a882:	4326      	orrs	r6, r4
 800a884:	d0f5      	beq.n	800a872 <__ieee754_sqrt+0x2e>
 800a886:	b135      	cbz	r5, 800a896 <__ieee754_sqrt+0x52>
 800a888:	f7f5 fd16 	bl	80002b8 <__aeabi_dsub>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	f7f5 fff4 	bl	800087c <__aeabi_ddiv>
 800a894:	e7eb      	b.n	800a86e <__ieee754_sqrt+0x2a>
 800a896:	1509      	asrs	r1, r1, #20
 800a898:	f000 808d 	beq.w	800a9b6 <__ieee754_sqrt+0x172>
 800a89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a8a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8a8:	07c9      	lsls	r1, r1, #31
 800a8aa:	bf5c      	itt	pl
 800a8ac:	005b      	lslpl	r3, r3, #1
 800a8ae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a8b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a8b6:	bf58      	it	pl
 800a8b8:	0052      	lslpl	r2, r2, #1
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a8c0:	1076      	asrs	r6, r6, #1
 800a8c2:	0052      	lsls	r2, r2, #1
 800a8c4:	f04f 0e16 	mov.w	lr, #22
 800a8c8:	46ac      	mov	ip, r5
 800a8ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8ce:	eb0c 0001 	add.w	r0, ip, r1
 800a8d2:	4298      	cmp	r0, r3
 800a8d4:	bfde      	ittt	le
 800a8d6:	1a1b      	suble	r3, r3, r0
 800a8d8:	eb00 0c01 	addle.w	ip, r0, r1
 800a8dc:	186d      	addle	r5, r5, r1
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	f1be 0e01 	subs.w	lr, lr, #1
 800a8e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a8e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a8ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a8f0:	d1ed      	bne.n	800a8ce <__ieee754_sqrt+0x8a>
 800a8f2:	4674      	mov	r4, lr
 800a8f4:	2720      	movs	r7, #32
 800a8f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a8fa:	4563      	cmp	r3, ip
 800a8fc:	eb01 000e 	add.w	r0, r1, lr
 800a900:	dc02      	bgt.n	800a908 <__ieee754_sqrt+0xc4>
 800a902:	d113      	bne.n	800a92c <__ieee754_sqrt+0xe8>
 800a904:	4290      	cmp	r0, r2
 800a906:	d811      	bhi.n	800a92c <__ieee754_sqrt+0xe8>
 800a908:	2800      	cmp	r0, #0
 800a90a:	eb00 0e01 	add.w	lr, r0, r1
 800a90e:	da57      	bge.n	800a9c0 <__ieee754_sqrt+0x17c>
 800a910:	f1be 0f00 	cmp.w	lr, #0
 800a914:	db54      	blt.n	800a9c0 <__ieee754_sqrt+0x17c>
 800a916:	f10c 0801 	add.w	r8, ip, #1
 800a91a:	eba3 030c 	sub.w	r3, r3, ip
 800a91e:	4290      	cmp	r0, r2
 800a920:	bf88      	it	hi
 800a922:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a926:	1a12      	subs	r2, r2, r0
 800a928:	440c      	add	r4, r1
 800a92a:	46c4      	mov	ip, r8
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	3f01      	subs	r7, #1
 800a930:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a934:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a938:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a93c:	d1dd      	bne.n	800a8fa <__ieee754_sqrt+0xb6>
 800a93e:	4313      	orrs	r3, r2
 800a940:	d01b      	beq.n	800a97a <__ieee754_sqrt+0x136>
 800a942:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a9f0 <__ieee754_sqrt+0x1ac>
 800a946:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a9f4 <__ieee754_sqrt+0x1b0>
 800a94a:	e9da 0100 	ldrd	r0, r1, [sl]
 800a94e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a952:	f7f5 fcb1 	bl	80002b8 <__aeabi_dsub>
 800a956:	e9da 8900 	ldrd	r8, r9, [sl]
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f6 f8dd 	bl	8000b20 <__aeabi_dcmple>
 800a966:	b140      	cbz	r0, 800a97a <__ieee754_sqrt+0x136>
 800a968:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a96c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a970:	e9db 2300 	ldrd	r2, r3, [fp]
 800a974:	d126      	bne.n	800a9c4 <__ieee754_sqrt+0x180>
 800a976:	3501      	adds	r5, #1
 800a978:	463c      	mov	r4, r7
 800a97a:	106a      	asrs	r2, r5, #1
 800a97c:	0863      	lsrs	r3, r4, #1
 800a97e:	07e9      	lsls	r1, r5, #31
 800a980:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a984:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a988:	bf48      	it	mi
 800a98a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a98e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a992:	461c      	mov	r4, r3
 800a994:	e76d      	b.n	800a872 <__ieee754_sqrt+0x2e>
 800a996:	0ad3      	lsrs	r3, r2, #11
 800a998:	3815      	subs	r0, #21
 800a99a:	0552      	lsls	r2, r2, #21
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0fa      	beq.n	800a996 <__ieee754_sqrt+0x152>
 800a9a0:	02dc      	lsls	r4, r3, #11
 800a9a2:	d50a      	bpl.n	800a9ba <__ieee754_sqrt+0x176>
 800a9a4:	f1c1 0420 	rsb	r4, r1, #32
 800a9a8:	fa22 f404 	lsr.w	r4, r2, r4
 800a9ac:	1e4d      	subs	r5, r1, #1
 800a9ae:	408a      	lsls	r2, r1
 800a9b0:	4323      	orrs	r3, r4
 800a9b2:	1b41      	subs	r1, r0, r5
 800a9b4:	e772      	b.n	800a89c <__ieee754_sqrt+0x58>
 800a9b6:	4608      	mov	r0, r1
 800a9b8:	e7f0      	b.n	800a99c <__ieee754_sqrt+0x158>
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	3101      	adds	r1, #1
 800a9be:	e7ef      	b.n	800a9a0 <__ieee754_sqrt+0x15c>
 800a9c0:	46e0      	mov	r8, ip
 800a9c2:	e7aa      	b.n	800a91a <__ieee754_sqrt+0xd6>
 800a9c4:	f7f5 fc7a 	bl	80002bc <__adddf3>
 800a9c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	f7f6 f89a 	bl	8000b0c <__aeabi_dcmplt>
 800a9d8:	b120      	cbz	r0, 800a9e4 <__ieee754_sqrt+0x1a0>
 800a9da:	1ca0      	adds	r0, r4, #2
 800a9dc:	bf08      	it	eq
 800a9de:	3501      	addeq	r5, #1
 800a9e0:	3402      	adds	r4, #2
 800a9e2:	e7ca      	b.n	800a97a <__ieee754_sqrt+0x136>
 800a9e4:	3401      	adds	r4, #1
 800a9e6:	f024 0401 	bic.w	r4, r4, #1
 800a9ea:	e7c6      	b.n	800a97a <__ieee754_sqrt+0x136>
 800a9ec:	7ff00000 	.word	0x7ff00000
 800a9f0:	20000240 	.word	0x20000240
 800a9f4:	20000248 	.word	0x20000248

0800a9f8 <__ieee754_atan2>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	ec57 6b11 	vmov	r6, r7, d1
 800aa00:	4273      	negs	r3, r6
 800aa02:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ab80 <__ieee754_atan2+0x188>
 800aa06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800aa0a:	4333      	orrs	r3, r6
 800aa0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800aa10:	4543      	cmp	r3, r8
 800aa12:	ec51 0b10 	vmov	r0, r1, d0
 800aa16:	ee11 5a10 	vmov	r5, s2
 800aa1a:	d80a      	bhi.n	800aa32 <__ieee754_atan2+0x3a>
 800aa1c:	4244      	negs	r4, r0
 800aa1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa22:	4304      	orrs	r4, r0
 800aa24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aa28:	4544      	cmp	r4, r8
 800aa2a:	ee10 9a10 	vmov	r9, s0
 800aa2e:	468e      	mov	lr, r1
 800aa30:	d907      	bls.n	800aa42 <__ieee754_atan2+0x4a>
 800aa32:	4632      	mov	r2, r6
 800aa34:	463b      	mov	r3, r7
 800aa36:	f7f5 fc41 	bl	80002bc <__adddf3>
 800aa3a:	ec41 0b10 	vmov	d0, r0, r1
 800aa3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800aa46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aa4a:	4334      	orrs	r4, r6
 800aa4c:	d103      	bne.n	800aa56 <__ieee754_atan2+0x5e>
 800aa4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa52:	f000 bdc5 	b.w	800b5e0 <atan>
 800aa56:	17bc      	asrs	r4, r7, #30
 800aa58:	f004 0402 	and.w	r4, r4, #2
 800aa5c:	ea53 0909 	orrs.w	r9, r3, r9
 800aa60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800aa64:	d107      	bne.n	800aa76 <__ieee754_atan2+0x7e>
 800aa66:	2c02      	cmp	r4, #2
 800aa68:	d05f      	beq.n	800ab2a <__ieee754_atan2+0x132>
 800aa6a:	2c03      	cmp	r4, #3
 800aa6c:	d1e5      	bne.n	800aa3a <__ieee754_atan2+0x42>
 800aa6e:	a140      	add	r1, pc, #256	; (adr r1, 800ab70 <__ieee754_atan2+0x178>)
 800aa70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa74:	e7e1      	b.n	800aa3a <__ieee754_atan2+0x42>
 800aa76:	4315      	orrs	r5, r2
 800aa78:	d106      	bne.n	800aa88 <__ieee754_atan2+0x90>
 800aa7a:	f1be 0f00 	cmp.w	lr, #0
 800aa7e:	da5f      	bge.n	800ab40 <__ieee754_atan2+0x148>
 800aa80:	a13d      	add	r1, pc, #244	; (adr r1, 800ab78 <__ieee754_atan2+0x180>)
 800aa82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa86:	e7d8      	b.n	800aa3a <__ieee754_atan2+0x42>
 800aa88:	4542      	cmp	r2, r8
 800aa8a:	d10f      	bne.n	800aaac <__ieee754_atan2+0xb4>
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa92:	d107      	bne.n	800aaa4 <__ieee754_atan2+0xac>
 800aa94:	2c02      	cmp	r4, #2
 800aa96:	d84c      	bhi.n	800ab32 <__ieee754_atan2+0x13a>
 800aa98:	4b33      	ldr	r3, [pc, #204]	; (800ab68 <__ieee754_atan2+0x170>)
 800aa9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaa2:	e7ca      	b.n	800aa3a <__ieee754_atan2+0x42>
 800aaa4:	2c02      	cmp	r4, #2
 800aaa6:	d848      	bhi.n	800ab3a <__ieee754_atan2+0x142>
 800aaa8:	4b30      	ldr	r3, [pc, #192]	; (800ab6c <__ieee754_atan2+0x174>)
 800aaaa:	e7f6      	b.n	800aa9a <__ieee754_atan2+0xa2>
 800aaac:	4543      	cmp	r3, r8
 800aaae:	d0e4      	beq.n	800aa7a <__ieee754_atan2+0x82>
 800aab0:	1a9b      	subs	r3, r3, r2
 800aab2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800aab6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aaba:	da1e      	bge.n	800aafa <__ieee754_atan2+0x102>
 800aabc:	2f00      	cmp	r7, #0
 800aabe:	da01      	bge.n	800aac4 <__ieee754_atan2+0xcc>
 800aac0:	323c      	adds	r2, #60	; 0x3c
 800aac2:	db1e      	blt.n	800ab02 <__ieee754_atan2+0x10a>
 800aac4:	4632      	mov	r2, r6
 800aac6:	463b      	mov	r3, r7
 800aac8:	f7f5 fed8 	bl	800087c <__aeabi_ddiv>
 800aacc:	ec41 0b10 	vmov	d0, r0, r1
 800aad0:	f000 ff26 	bl	800b920 <fabs>
 800aad4:	f000 fd84 	bl	800b5e0 <atan>
 800aad8:	ec51 0b10 	vmov	r0, r1, d0
 800aadc:	2c01      	cmp	r4, #1
 800aade:	d013      	beq.n	800ab08 <__ieee754_atan2+0x110>
 800aae0:	2c02      	cmp	r4, #2
 800aae2:	d015      	beq.n	800ab10 <__ieee754_atan2+0x118>
 800aae4:	2c00      	cmp	r4, #0
 800aae6:	d0a8      	beq.n	800aa3a <__ieee754_atan2+0x42>
 800aae8:	a317      	add	r3, pc, #92	; (adr r3, 800ab48 <__ieee754_atan2+0x150>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f7f5 fbe3 	bl	80002b8 <__aeabi_dsub>
 800aaf2:	a317      	add	r3, pc, #92	; (adr r3, 800ab50 <__ieee754_atan2+0x158>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	e014      	b.n	800ab24 <__ieee754_atan2+0x12c>
 800aafa:	a117      	add	r1, pc, #92	; (adr r1, 800ab58 <__ieee754_atan2+0x160>)
 800aafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab00:	e7ec      	b.n	800aadc <__ieee754_atan2+0xe4>
 800ab02:	2000      	movs	r0, #0
 800ab04:	2100      	movs	r1, #0
 800ab06:	e7e9      	b.n	800aadc <__ieee754_atan2+0xe4>
 800ab08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	e794      	b.n	800aa3a <__ieee754_atan2+0x42>
 800ab10:	a30d      	add	r3, pc, #52	; (adr r3, 800ab48 <__ieee754_atan2+0x150>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fbcf 	bl	80002b8 <__aeabi_dsub>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	a10c      	add	r1, pc, #48	; (adr r1, 800ab50 <__ieee754_atan2+0x158>)
 800ab20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab24:	f7f5 fbc8 	bl	80002b8 <__aeabi_dsub>
 800ab28:	e787      	b.n	800aa3a <__ieee754_atan2+0x42>
 800ab2a:	a109      	add	r1, pc, #36	; (adr r1, 800ab50 <__ieee754_atan2+0x158>)
 800ab2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab30:	e783      	b.n	800aa3a <__ieee754_atan2+0x42>
 800ab32:	a10b      	add	r1, pc, #44	; (adr r1, 800ab60 <__ieee754_atan2+0x168>)
 800ab34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab38:	e77f      	b.n	800aa3a <__ieee754_atan2+0x42>
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	e77c      	b.n	800aa3a <__ieee754_atan2+0x42>
 800ab40:	a105      	add	r1, pc, #20	; (adr r1, 800ab58 <__ieee754_atan2+0x160>)
 800ab42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab46:	e778      	b.n	800aa3a <__ieee754_atan2+0x42>
 800ab48:	33145c07 	.word	0x33145c07
 800ab4c:	3ca1a626 	.word	0x3ca1a626
 800ab50:	54442d18 	.word	0x54442d18
 800ab54:	400921fb 	.word	0x400921fb
 800ab58:	54442d18 	.word	0x54442d18
 800ab5c:	3ff921fb 	.word	0x3ff921fb
 800ab60:	54442d18 	.word	0x54442d18
 800ab64:	3fe921fb 	.word	0x3fe921fb
 800ab68:	0800bf08 	.word	0x0800bf08
 800ab6c:	0800bf20 	.word	0x0800bf20
 800ab70:	54442d18 	.word	0x54442d18
 800ab74:	c00921fb 	.word	0xc00921fb
 800ab78:	54442d18 	.word	0x54442d18
 800ab7c:	bff921fb 	.word	0xbff921fb
 800ab80:	7ff00000 	.word	0x7ff00000
 800ab84:	00000000 	.word	0x00000000

0800ab88 <__ieee754_pow>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	ed2d 8b06 	vpush	{d8-d10}
 800ab90:	b089      	sub	sp, #36	; 0x24
 800ab92:	ed8d 1b00 	vstr	d1, [sp]
 800ab96:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ab9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ab9e:	ea58 0102 	orrs.w	r1, r8, r2
 800aba2:	ec57 6b10 	vmov	r6, r7, d0
 800aba6:	d115      	bne.n	800abd4 <__ieee754_pow+0x4c>
 800aba8:	19b3      	adds	r3, r6, r6
 800abaa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800abae:	4152      	adcs	r2, r2
 800abb0:	4299      	cmp	r1, r3
 800abb2:	4b89      	ldr	r3, [pc, #548]	; (800add8 <__ieee754_pow+0x250>)
 800abb4:	4193      	sbcs	r3, r2
 800abb6:	f080 84d1 	bcs.w	800b55c <__ieee754_pow+0x9d4>
 800abba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 fb7b 	bl	80002bc <__adddf3>
 800abc6:	ec41 0b10 	vmov	d0, r0, r1
 800abca:	b009      	add	sp, #36	; 0x24
 800abcc:	ecbd 8b06 	vpop	{d8-d10}
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd4:	4b81      	ldr	r3, [pc, #516]	; (800addc <__ieee754_pow+0x254>)
 800abd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800abda:	429c      	cmp	r4, r3
 800abdc:	ee10 aa10 	vmov	sl, s0
 800abe0:	463d      	mov	r5, r7
 800abe2:	dc06      	bgt.n	800abf2 <__ieee754_pow+0x6a>
 800abe4:	d101      	bne.n	800abea <__ieee754_pow+0x62>
 800abe6:	2e00      	cmp	r6, #0
 800abe8:	d1e7      	bne.n	800abba <__ieee754_pow+0x32>
 800abea:	4598      	cmp	r8, r3
 800abec:	dc01      	bgt.n	800abf2 <__ieee754_pow+0x6a>
 800abee:	d10f      	bne.n	800ac10 <__ieee754_pow+0x88>
 800abf0:	b172      	cbz	r2, 800ac10 <__ieee754_pow+0x88>
 800abf2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800abf6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800abfa:	ea55 050a 	orrs.w	r5, r5, sl
 800abfe:	d1dc      	bne.n	800abba <__ieee754_pow+0x32>
 800ac00:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac04:	18db      	adds	r3, r3, r3
 800ac06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ac0a:	4152      	adcs	r2, r2
 800ac0c:	429d      	cmp	r5, r3
 800ac0e:	e7d0      	b.n	800abb2 <__ieee754_pow+0x2a>
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	da3b      	bge.n	800ac8c <__ieee754_pow+0x104>
 800ac14:	4b72      	ldr	r3, [pc, #456]	; (800ade0 <__ieee754_pow+0x258>)
 800ac16:	4598      	cmp	r8, r3
 800ac18:	dc51      	bgt.n	800acbe <__ieee754_pow+0x136>
 800ac1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ac1e:	4598      	cmp	r8, r3
 800ac20:	f340 84ab 	ble.w	800b57a <__ieee754_pow+0x9f2>
 800ac24:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ac28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac2c:	2b14      	cmp	r3, #20
 800ac2e:	dd0f      	ble.n	800ac50 <__ieee754_pow+0xc8>
 800ac30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ac34:	fa22 f103 	lsr.w	r1, r2, r3
 800ac38:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	f040 849c 	bne.w	800b57a <__ieee754_pow+0x9f2>
 800ac42:	f001 0101 	and.w	r1, r1, #1
 800ac46:	f1c1 0302 	rsb	r3, r1, #2
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	b182      	cbz	r2, 800ac70 <__ieee754_pow+0xe8>
 800ac4e:	e05f      	b.n	800ad10 <__ieee754_pow+0x188>
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d15b      	bne.n	800ad0c <__ieee754_pow+0x184>
 800ac54:	f1c3 0314 	rsb	r3, r3, #20
 800ac58:	fa48 f103 	asr.w	r1, r8, r3
 800ac5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac60:	4543      	cmp	r3, r8
 800ac62:	f040 8487 	bne.w	800b574 <__ieee754_pow+0x9ec>
 800ac66:	f001 0101 	and.w	r1, r1, #1
 800ac6a:	f1c1 0302 	rsb	r3, r1, #2
 800ac6e:	9304      	str	r3, [sp, #16]
 800ac70:	4b5c      	ldr	r3, [pc, #368]	; (800ade4 <__ieee754_pow+0x25c>)
 800ac72:	4598      	cmp	r8, r3
 800ac74:	d132      	bne.n	800acdc <__ieee754_pow+0x154>
 800ac76:	f1b9 0f00 	cmp.w	r9, #0
 800ac7a:	f280 8477 	bge.w	800b56c <__ieee754_pow+0x9e4>
 800ac7e:	4959      	ldr	r1, [pc, #356]	; (800ade4 <__ieee754_pow+0x25c>)
 800ac80:	4632      	mov	r2, r6
 800ac82:	463b      	mov	r3, r7
 800ac84:	2000      	movs	r0, #0
 800ac86:	f7f5 fdf9 	bl	800087c <__aeabi_ddiv>
 800ac8a:	e79c      	b.n	800abc6 <__ieee754_pow+0x3e>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9304      	str	r3, [sp, #16]
 800ac90:	2a00      	cmp	r2, #0
 800ac92:	d13d      	bne.n	800ad10 <__ieee754_pow+0x188>
 800ac94:	4b51      	ldr	r3, [pc, #324]	; (800addc <__ieee754_pow+0x254>)
 800ac96:	4598      	cmp	r8, r3
 800ac98:	d1ea      	bne.n	800ac70 <__ieee754_pow+0xe8>
 800ac9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ac9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aca2:	ea53 030a 	orrs.w	r3, r3, sl
 800aca6:	f000 8459 	beq.w	800b55c <__ieee754_pow+0x9d4>
 800acaa:	4b4f      	ldr	r3, [pc, #316]	; (800ade8 <__ieee754_pow+0x260>)
 800acac:	429c      	cmp	r4, r3
 800acae:	dd08      	ble.n	800acc2 <__ieee754_pow+0x13a>
 800acb0:	f1b9 0f00 	cmp.w	r9, #0
 800acb4:	f2c0 8456 	blt.w	800b564 <__ieee754_pow+0x9dc>
 800acb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acbc:	e783      	b.n	800abc6 <__ieee754_pow+0x3e>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e7e5      	b.n	800ac8e <__ieee754_pow+0x106>
 800acc2:	f1b9 0f00 	cmp.w	r9, #0
 800acc6:	f04f 0000 	mov.w	r0, #0
 800acca:	f04f 0100 	mov.w	r1, #0
 800acce:	f6bf af7a 	bge.w	800abc6 <__ieee754_pow+0x3e>
 800acd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800acd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acda:	e774      	b.n	800abc6 <__ieee754_pow+0x3e>
 800acdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ace0:	d106      	bne.n	800acf0 <__ieee754_pow+0x168>
 800ace2:	4632      	mov	r2, r6
 800ace4:	463b      	mov	r3, r7
 800ace6:	4630      	mov	r0, r6
 800ace8:	4639      	mov	r1, r7
 800acea:	f7f5 fc9d 	bl	8000628 <__aeabi_dmul>
 800acee:	e76a      	b.n	800abc6 <__ieee754_pow+0x3e>
 800acf0:	4b3e      	ldr	r3, [pc, #248]	; (800adec <__ieee754_pow+0x264>)
 800acf2:	4599      	cmp	r9, r3
 800acf4:	d10c      	bne.n	800ad10 <__ieee754_pow+0x188>
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	db0a      	blt.n	800ad10 <__ieee754_pow+0x188>
 800acfa:	ec47 6b10 	vmov	d0, r6, r7
 800acfe:	b009      	add	sp, #36	; 0x24
 800ad00:	ecbd 8b06 	vpop	{d8-d10}
 800ad04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	f7ff bd9c 	b.w	800a844 <__ieee754_sqrt>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	ec47 6b10 	vmov	d0, r6, r7
 800ad14:	f000 fe04 	bl	800b920 <fabs>
 800ad18:	ec51 0b10 	vmov	r0, r1, d0
 800ad1c:	f1ba 0f00 	cmp.w	sl, #0
 800ad20:	d129      	bne.n	800ad76 <__ieee754_pow+0x1ee>
 800ad22:	b124      	cbz	r4, 800ad2e <__ieee754_pow+0x1a6>
 800ad24:	4b2f      	ldr	r3, [pc, #188]	; (800ade4 <__ieee754_pow+0x25c>)
 800ad26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d123      	bne.n	800ad76 <__ieee754_pow+0x1ee>
 800ad2e:	f1b9 0f00 	cmp.w	r9, #0
 800ad32:	da05      	bge.n	800ad40 <__ieee754_pow+0x1b8>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	2000      	movs	r0, #0
 800ad3a:	492a      	ldr	r1, [pc, #168]	; (800ade4 <__ieee754_pow+0x25c>)
 800ad3c:	f7f5 fd9e 	bl	800087c <__aeabi_ddiv>
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	f6bf af40 	bge.w	800abc6 <__ieee754_pow+0x3e>
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad50:	431c      	orrs	r4, r3
 800ad52:	d108      	bne.n	800ad66 <__ieee754_pow+0x1de>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	f7f5 faac 	bl	80002b8 <__aeabi_dsub>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	e78f      	b.n	800ac86 <__ieee754_pow+0xfe>
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	f47f af2c 	bne.w	800abc6 <__ieee754_pow+0x3e>
 800ad6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad72:	4619      	mov	r1, r3
 800ad74:	e727      	b.n	800abc6 <__ieee754_pow+0x3e>
 800ad76:	0feb      	lsrs	r3, r5, #31
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	9306      	str	r3, [sp, #24]
 800ad7c:	9a06      	ldr	r2, [sp, #24]
 800ad7e:	9b04      	ldr	r3, [sp, #16]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	d102      	bne.n	800ad8a <__ieee754_pow+0x202>
 800ad84:	4632      	mov	r2, r6
 800ad86:	463b      	mov	r3, r7
 800ad88:	e7e6      	b.n	800ad58 <__ieee754_pow+0x1d0>
 800ad8a:	4b19      	ldr	r3, [pc, #100]	; (800adf0 <__ieee754_pow+0x268>)
 800ad8c:	4598      	cmp	r8, r3
 800ad8e:	f340 80fb 	ble.w	800af88 <__ieee754_pow+0x400>
 800ad92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad96:	4598      	cmp	r8, r3
 800ad98:	4b13      	ldr	r3, [pc, #76]	; (800ade8 <__ieee754_pow+0x260>)
 800ad9a:	dd0c      	ble.n	800adb6 <__ieee754_pow+0x22e>
 800ad9c:	429c      	cmp	r4, r3
 800ad9e:	dc0f      	bgt.n	800adc0 <__ieee754_pow+0x238>
 800ada0:	f1b9 0f00 	cmp.w	r9, #0
 800ada4:	da0f      	bge.n	800adc6 <__ieee754_pow+0x23e>
 800ada6:	2000      	movs	r0, #0
 800ada8:	b009      	add	sp, #36	; 0x24
 800adaa:	ecbd 8b06 	vpop	{d8-d10}
 800adae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb2:	f000 be66 	b.w	800ba82 <__math_oflow>
 800adb6:	429c      	cmp	r4, r3
 800adb8:	dbf2      	blt.n	800ada0 <__ieee754_pow+0x218>
 800adba:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <__ieee754_pow+0x25c>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	dd19      	ble.n	800adf4 <__ieee754_pow+0x26c>
 800adc0:	f1b9 0f00 	cmp.w	r9, #0
 800adc4:	dcef      	bgt.n	800ada6 <__ieee754_pow+0x21e>
 800adc6:	2000      	movs	r0, #0
 800adc8:	b009      	add	sp, #36	; 0x24
 800adca:	ecbd 8b06 	vpop	{d8-d10}
 800adce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add2:	f000 be4d 	b.w	800ba70 <__math_uflow>
 800add6:	bf00      	nop
 800add8:	fff00000 	.word	0xfff00000
 800addc:	7ff00000 	.word	0x7ff00000
 800ade0:	433fffff 	.word	0x433fffff
 800ade4:	3ff00000 	.word	0x3ff00000
 800ade8:	3fefffff 	.word	0x3fefffff
 800adec:	3fe00000 	.word	0x3fe00000
 800adf0:	41e00000 	.word	0x41e00000
 800adf4:	4b60      	ldr	r3, [pc, #384]	; (800af78 <__ieee754_pow+0x3f0>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	f7f5 fa5e 	bl	80002b8 <__aeabi_dsub>
 800adfc:	a354      	add	r3, pc, #336	; (adr r3, 800af50 <__ieee754_pow+0x3c8>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	4604      	mov	r4, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	f7f5 fc0f 	bl	8000628 <__aeabi_dmul>
 800ae0a:	a353      	add	r3, pc, #332	; (adr r3, 800af58 <__ieee754_pow+0x3d0>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	4606      	mov	r6, r0
 800ae12:	460f      	mov	r7, r1
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fc06 	bl	8000628 <__aeabi_dmul>
 800ae1c:	4b57      	ldr	r3, [pc, #348]	; (800af7c <__ieee754_pow+0x3f4>)
 800ae1e:	4682      	mov	sl, r0
 800ae20:	468b      	mov	fp, r1
 800ae22:	2200      	movs	r2, #0
 800ae24:	4620      	mov	r0, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7f5 fbfe 	bl	8000628 <__aeabi_dmul>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	a14b      	add	r1, pc, #300	; (adr r1, 800af60 <__ieee754_pow+0x3d8>)
 800ae32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae36:	f7f5 fa3f 	bl	80002b8 <__aeabi_dsub>
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	f7f5 fbf3 	bl	8000628 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	2000      	movs	r0, #0
 800ae48:	494d      	ldr	r1, [pc, #308]	; (800af80 <__ieee754_pow+0x3f8>)
 800ae4a:	f7f5 fa35 	bl	80002b8 <__aeabi_dsub>
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	462b      	mov	r3, r5
 800ae56:	4620      	mov	r0, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 fbe5 	bl	8000628 <__aeabi_dmul>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4640      	mov	r0, r8
 800ae64:	4649      	mov	r1, r9
 800ae66:	f7f5 fbdf 	bl	8000628 <__aeabi_dmul>
 800ae6a:	a33f      	add	r3, pc, #252	; (adr r3, 800af68 <__ieee754_pow+0x3e0>)
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f7f5 fbda 	bl	8000628 <__aeabi_dmul>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	4650      	mov	r0, sl
 800ae7a:	4659      	mov	r1, fp
 800ae7c:	f7f5 fa1c 	bl	80002b8 <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4680      	mov	r8, r0
 800ae86:	4689      	mov	r9, r1
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 fa16 	bl	80002bc <__adddf3>
 800ae90:	2000      	movs	r0, #0
 800ae92:	4632      	mov	r2, r6
 800ae94:	463b      	mov	r3, r7
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	f7f5 fa0d 	bl	80002b8 <__aeabi_dsub>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fa07 	bl	80002b8 <__aeabi_dsub>
 800aeaa:	9b04      	ldr	r3, [sp, #16]
 800aeac:	9a06      	ldr	r2, [sp, #24]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	4682      	mov	sl, r0
 800aeb4:	468b      	mov	fp, r1
 800aeb6:	f040 81e7 	bne.w	800b288 <__ieee754_pow+0x700>
 800aeba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800af70 <__ieee754_pow+0x3e8>
 800aebe:	eeb0 8a47 	vmov.f32	s16, s14
 800aec2:	eef0 8a67 	vmov.f32	s17, s15
 800aec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aeca:	2600      	movs	r6, #0
 800aecc:	4632      	mov	r2, r6
 800aece:	463b      	mov	r3, r7
 800aed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed4:	f7f5 f9f0 	bl	80002b8 <__aeabi_dsub>
 800aed8:	4622      	mov	r2, r4
 800aeda:	462b      	mov	r3, r5
 800aedc:	f7f5 fba4 	bl	8000628 <__aeabi_dmul>
 800aee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aee4:	4680      	mov	r8, r0
 800aee6:	4689      	mov	r9, r1
 800aee8:	4650      	mov	r0, sl
 800aeea:	4659      	mov	r1, fp
 800aeec:	f7f5 fb9c 	bl	8000628 <__aeabi_dmul>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 f9e0 	bl	80002bc <__adddf3>
 800aefc:	4632      	mov	r2, r6
 800aefe:	463b      	mov	r3, r7
 800af00:	4680      	mov	r8, r0
 800af02:	4689      	mov	r9, r1
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	f7f5 fb8e 	bl	8000628 <__aeabi_dmul>
 800af0c:	460b      	mov	r3, r1
 800af0e:	4604      	mov	r4, r0
 800af10:	460d      	mov	r5, r1
 800af12:	4602      	mov	r2, r0
 800af14:	4649      	mov	r1, r9
 800af16:	4640      	mov	r0, r8
 800af18:	f7f5 f9d0 	bl	80002bc <__adddf3>
 800af1c:	4b19      	ldr	r3, [pc, #100]	; (800af84 <__ieee754_pow+0x3fc>)
 800af1e:	4299      	cmp	r1, r3
 800af20:	ec45 4b19 	vmov	d9, r4, r5
 800af24:	4606      	mov	r6, r0
 800af26:	460f      	mov	r7, r1
 800af28:	468b      	mov	fp, r1
 800af2a:	f340 82f0 	ble.w	800b50e <__ieee754_pow+0x986>
 800af2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800af32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800af36:	4303      	orrs	r3, r0
 800af38:	f000 81e4 	beq.w	800b304 <__ieee754_pow+0x77c>
 800af3c:	ec51 0b18 	vmov	r0, r1, d8
 800af40:	2200      	movs	r2, #0
 800af42:	2300      	movs	r3, #0
 800af44:	f7f5 fde2 	bl	8000b0c <__aeabi_dcmplt>
 800af48:	3800      	subs	r0, #0
 800af4a:	bf18      	it	ne
 800af4c:	2001      	movne	r0, #1
 800af4e:	e72b      	b.n	800ada8 <__ieee754_pow+0x220>
 800af50:	60000000 	.word	0x60000000
 800af54:	3ff71547 	.word	0x3ff71547
 800af58:	f85ddf44 	.word	0xf85ddf44
 800af5c:	3e54ae0b 	.word	0x3e54ae0b
 800af60:	55555555 	.word	0x55555555
 800af64:	3fd55555 	.word	0x3fd55555
 800af68:	652b82fe 	.word	0x652b82fe
 800af6c:	3ff71547 	.word	0x3ff71547
 800af70:	00000000 	.word	0x00000000
 800af74:	bff00000 	.word	0xbff00000
 800af78:	3ff00000 	.word	0x3ff00000
 800af7c:	3fd00000 	.word	0x3fd00000
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	408fffff 	.word	0x408fffff
 800af88:	4bd5      	ldr	r3, [pc, #852]	; (800b2e0 <__ieee754_pow+0x758>)
 800af8a:	402b      	ands	r3, r5
 800af8c:	2200      	movs	r2, #0
 800af8e:	b92b      	cbnz	r3, 800af9c <__ieee754_pow+0x414>
 800af90:	4bd4      	ldr	r3, [pc, #848]	; (800b2e4 <__ieee754_pow+0x75c>)
 800af92:	f7f5 fb49 	bl	8000628 <__aeabi_dmul>
 800af96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800af9a:	460c      	mov	r4, r1
 800af9c:	1523      	asrs	r3, r4, #20
 800af9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800afa2:	4413      	add	r3, r2
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	4bd0      	ldr	r3, [pc, #832]	; (800b2e8 <__ieee754_pow+0x760>)
 800afa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800afac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800afb0:	429c      	cmp	r4, r3
 800afb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800afb6:	dd08      	ble.n	800afca <__ieee754_pow+0x442>
 800afb8:	4bcc      	ldr	r3, [pc, #816]	; (800b2ec <__ieee754_pow+0x764>)
 800afba:	429c      	cmp	r4, r3
 800afbc:	f340 8162 	ble.w	800b284 <__ieee754_pow+0x6fc>
 800afc0:	9b05      	ldr	r3, [sp, #20]
 800afc2:	3301      	adds	r3, #1
 800afc4:	9305      	str	r3, [sp, #20]
 800afc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800afca:	2400      	movs	r4, #0
 800afcc:	00e3      	lsls	r3, r4, #3
 800afce:	9307      	str	r3, [sp, #28]
 800afd0:	4bc7      	ldr	r3, [pc, #796]	; (800b2f0 <__ieee754_pow+0x768>)
 800afd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afd6:	ed93 7b00 	vldr	d7, [r3]
 800afda:	4629      	mov	r1, r5
 800afdc:	ec53 2b17 	vmov	r2, r3, d7
 800afe0:	eeb0 9a47 	vmov.f32	s18, s14
 800afe4:	eef0 9a67 	vmov.f32	s19, s15
 800afe8:	4682      	mov	sl, r0
 800afea:	f7f5 f965 	bl	80002b8 <__aeabi_dsub>
 800afee:	4652      	mov	r2, sl
 800aff0:	4606      	mov	r6, r0
 800aff2:	460f      	mov	r7, r1
 800aff4:	462b      	mov	r3, r5
 800aff6:	ec51 0b19 	vmov	r0, r1, d9
 800affa:	f7f5 f95f 	bl	80002bc <__adddf3>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	2000      	movs	r0, #0
 800b004:	49bb      	ldr	r1, [pc, #748]	; (800b2f4 <__ieee754_pow+0x76c>)
 800b006:	f7f5 fc39 	bl	800087c <__aeabi_ddiv>
 800b00a:	ec41 0b1a 	vmov	d10, r0, r1
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 fb07 	bl	8000628 <__aeabi_dmul>
 800b01a:	2300      	movs	r3, #0
 800b01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b020:	9302      	str	r3, [sp, #8]
 800b022:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b026:	46ab      	mov	fp, r5
 800b028:	106d      	asrs	r5, r5, #1
 800b02a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b02e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b032:	ec41 0b18 	vmov	d8, r0, r1
 800b036:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b03a:	2200      	movs	r2, #0
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	4614      	mov	r4, r2
 800b042:	461d      	mov	r5, r3
 800b044:	f7f5 faf0 	bl	8000628 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4630      	mov	r0, r6
 800b04e:	4639      	mov	r1, r7
 800b050:	f7f5 f932 	bl	80002b8 <__aeabi_dsub>
 800b054:	ec53 2b19 	vmov	r2, r3, d9
 800b058:	4606      	mov	r6, r0
 800b05a:	460f      	mov	r7, r1
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 f92a 	bl	80002b8 <__aeabi_dsub>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4650      	mov	r0, sl
 800b06a:	4659      	mov	r1, fp
 800b06c:	f7f5 f924 	bl	80002b8 <__aeabi_dsub>
 800b070:	4642      	mov	r2, r8
 800b072:	464b      	mov	r3, r9
 800b074:	f7f5 fad8 	bl	8000628 <__aeabi_dmul>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4630      	mov	r0, r6
 800b07e:	4639      	mov	r1, r7
 800b080:	f7f5 f91a 	bl	80002b8 <__aeabi_dsub>
 800b084:	ec53 2b1a 	vmov	r2, r3, d10
 800b088:	f7f5 face 	bl	8000628 <__aeabi_dmul>
 800b08c:	ec53 2b18 	vmov	r2, r3, d8
 800b090:	ec41 0b19 	vmov	d9, r0, r1
 800b094:	ec51 0b18 	vmov	r0, r1, d8
 800b098:	f7f5 fac6 	bl	8000628 <__aeabi_dmul>
 800b09c:	a37c      	add	r3, pc, #496	; (adr r3, 800b290 <__ieee754_pow+0x708>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	460d      	mov	r5, r1
 800b0a6:	f7f5 fabf 	bl	8000628 <__aeabi_dmul>
 800b0aa:	a37b      	add	r3, pc, #492	; (adr r3, 800b298 <__ieee754_pow+0x710>)
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	f7f5 f904 	bl	80002bc <__adddf3>
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	462b      	mov	r3, r5
 800b0b8:	f7f5 fab6 	bl	8000628 <__aeabi_dmul>
 800b0bc:	a378      	add	r3, pc, #480	; (adr r3, 800b2a0 <__ieee754_pow+0x718>)
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	f7f5 f8fb 	bl	80002bc <__adddf3>
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	f7f5 faad 	bl	8000628 <__aeabi_dmul>
 800b0ce:	a376      	add	r3, pc, #472	; (adr r3, 800b2a8 <__ieee754_pow+0x720>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f7f5 f8f2 	bl	80002bc <__adddf3>
 800b0d8:	4622      	mov	r2, r4
 800b0da:	462b      	mov	r3, r5
 800b0dc:	f7f5 faa4 	bl	8000628 <__aeabi_dmul>
 800b0e0:	a373      	add	r3, pc, #460	; (adr r3, 800b2b0 <__ieee754_pow+0x728>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	f7f5 f8e9 	bl	80002bc <__adddf3>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	f7f5 fa9b 	bl	8000628 <__aeabi_dmul>
 800b0f2:	a371      	add	r3, pc, #452	; (adr r3, 800b2b8 <__ieee754_pow+0x730>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7f5 f8e0 	bl	80002bc <__adddf3>
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	4606      	mov	r6, r0
 800b100:	460f      	mov	r7, r1
 800b102:	462b      	mov	r3, r5
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f7f5 fa8e 	bl	8000628 <__aeabi_dmul>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 fa88 	bl	8000628 <__aeabi_dmul>
 800b118:	4642      	mov	r2, r8
 800b11a:	4604      	mov	r4, r0
 800b11c:	460d      	mov	r5, r1
 800b11e:	464b      	mov	r3, r9
 800b120:	ec51 0b18 	vmov	r0, r1, d8
 800b124:	f7f5 f8ca 	bl	80002bc <__adddf3>
 800b128:	ec53 2b19 	vmov	r2, r3, d9
 800b12c:	f7f5 fa7c 	bl	8000628 <__aeabi_dmul>
 800b130:	4622      	mov	r2, r4
 800b132:	462b      	mov	r3, r5
 800b134:	f7f5 f8c2 	bl	80002bc <__adddf3>
 800b138:	4642      	mov	r2, r8
 800b13a:	4682      	mov	sl, r0
 800b13c:	468b      	mov	fp, r1
 800b13e:	464b      	mov	r3, r9
 800b140:	4640      	mov	r0, r8
 800b142:	4649      	mov	r1, r9
 800b144:	f7f5 fa70 	bl	8000628 <__aeabi_dmul>
 800b148:	4b6b      	ldr	r3, [pc, #428]	; (800b2f8 <__ieee754_pow+0x770>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	4606      	mov	r6, r0
 800b14e:	460f      	mov	r7, r1
 800b150:	f7f5 f8b4 	bl	80002bc <__adddf3>
 800b154:	4652      	mov	r2, sl
 800b156:	465b      	mov	r3, fp
 800b158:	f7f5 f8b0 	bl	80002bc <__adddf3>
 800b15c:	2000      	movs	r0, #0
 800b15e:	4604      	mov	r4, r0
 800b160:	460d      	mov	r5, r1
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	f7f5 fa5d 	bl	8000628 <__aeabi_dmul>
 800b16e:	4b62      	ldr	r3, [pc, #392]	; (800b2f8 <__ieee754_pow+0x770>)
 800b170:	4680      	mov	r8, r0
 800b172:	4689      	mov	r9, r1
 800b174:	2200      	movs	r2, #0
 800b176:	4620      	mov	r0, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	f7f5 f89d 	bl	80002b8 <__aeabi_dsub>
 800b17e:	4632      	mov	r2, r6
 800b180:	463b      	mov	r3, r7
 800b182:	f7f5 f899 	bl	80002b8 <__aeabi_dsub>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4650      	mov	r0, sl
 800b18c:	4659      	mov	r1, fp
 800b18e:	f7f5 f893 	bl	80002b8 <__aeabi_dsub>
 800b192:	ec53 2b18 	vmov	r2, r3, d8
 800b196:	f7f5 fa47 	bl	8000628 <__aeabi_dmul>
 800b19a:	4622      	mov	r2, r4
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	ec51 0b19 	vmov	r0, r1, d9
 800b1a6:	f7f5 fa3f 	bl	8000628 <__aeabi_dmul>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7f5 f883 	bl	80002bc <__adddf3>
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f5 f87b 	bl	80002bc <__adddf3>
 800b1c6:	a33e      	add	r3, pc, #248	; (adr r3, 800b2c0 <__ieee754_pow+0x738>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	f7f5 fa29 	bl	8000628 <__aeabi_dmul>
 800b1d6:	4642      	mov	r2, r8
 800b1d8:	ec41 0b18 	vmov	d8, r0, r1
 800b1dc:	464b      	mov	r3, r9
 800b1de:	4620      	mov	r0, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7f5 f869 	bl	80002b8 <__aeabi_dsub>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	f7f5 f863 	bl	80002b8 <__aeabi_dsub>
 800b1f2:	a335      	add	r3, pc, #212	; (adr r3, 800b2c8 <__ieee754_pow+0x740>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	f7f5 fa16 	bl	8000628 <__aeabi_dmul>
 800b1fc:	a334      	add	r3, pc, #208	; (adr r3, 800b2d0 <__ieee754_pow+0x748>)
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	4606      	mov	r6, r0
 800b204:	460f      	mov	r7, r1
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 fa0d 	bl	8000628 <__aeabi_dmul>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f5 f851 	bl	80002bc <__adddf3>
 800b21a:	9a07      	ldr	r2, [sp, #28]
 800b21c:	4b37      	ldr	r3, [pc, #220]	; (800b2fc <__ieee754_pow+0x774>)
 800b21e:	4413      	add	r3, r2
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f84a 	bl	80002bc <__adddf3>
 800b228:	4682      	mov	sl, r0
 800b22a:	9805      	ldr	r0, [sp, #20]
 800b22c:	468b      	mov	fp, r1
 800b22e:	f7f5 f991 	bl	8000554 <__aeabi_i2d>
 800b232:	9a07      	ldr	r2, [sp, #28]
 800b234:	4b32      	ldr	r3, [pc, #200]	; (800b300 <__ieee754_pow+0x778>)
 800b236:	4413      	add	r3, r2
 800b238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b23c:	4606      	mov	r6, r0
 800b23e:	460f      	mov	r7, r1
 800b240:	4652      	mov	r2, sl
 800b242:	465b      	mov	r3, fp
 800b244:	ec51 0b18 	vmov	r0, r1, d8
 800b248:	f7f5 f838 	bl	80002bc <__adddf3>
 800b24c:	4642      	mov	r2, r8
 800b24e:	464b      	mov	r3, r9
 800b250:	f7f5 f834 	bl	80002bc <__adddf3>
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	f7f5 f830 	bl	80002bc <__adddf3>
 800b25c:	2000      	movs	r0, #0
 800b25e:	4632      	mov	r2, r6
 800b260:	463b      	mov	r3, r7
 800b262:	4604      	mov	r4, r0
 800b264:	460d      	mov	r5, r1
 800b266:	f7f5 f827 	bl	80002b8 <__aeabi_dsub>
 800b26a:	4642      	mov	r2, r8
 800b26c:	464b      	mov	r3, r9
 800b26e:	f7f5 f823 	bl	80002b8 <__aeabi_dsub>
 800b272:	ec53 2b18 	vmov	r2, r3, d8
 800b276:	f7f5 f81f 	bl	80002b8 <__aeabi_dsub>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4650      	mov	r0, sl
 800b280:	4659      	mov	r1, fp
 800b282:	e610      	b.n	800aea6 <__ieee754_pow+0x31e>
 800b284:	2401      	movs	r4, #1
 800b286:	e6a1      	b.n	800afcc <__ieee754_pow+0x444>
 800b288:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b2d8 <__ieee754_pow+0x750>
 800b28c:	e617      	b.n	800aebe <__ieee754_pow+0x336>
 800b28e:	bf00      	nop
 800b290:	4a454eef 	.word	0x4a454eef
 800b294:	3fca7e28 	.word	0x3fca7e28
 800b298:	93c9db65 	.word	0x93c9db65
 800b29c:	3fcd864a 	.word	0x3fcd864a
 800b2a0:	a91d4101 	.word	0xa91d4101
 800b2a4:	3fd17460 	.word	0x3fd17460
 800b2a8:	518f264d 	.word	0x518f264d
 800b2ac:	3fd55555 	.word	0x3fd55555
 800b2b0:	db6fabff 	.word	0xdb6fabff
 800b2b4:	3fdb6db6 	.word	0x3fdb6db6
 800b2b8:	33333303 	.word	0x33333303
 800b2bc:	3fe33333 	.word	0x3fe33333
 800b2c0:	e0000000 	.word	0xe0000000
 800b2c4:	3feec709 	.word	0x3feec709
 800b2c8:	dc3a03fd 	.word	0xdc3a03fd
 800b2cc:	3feec709 	.word	0x3feec709
 800b2d0:	145b01f5 	.word	0x145b01f5
 800b2d4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2d8:	00000000 	.word	0x00000000
 800b2dc:	3ff00000 	.word	0x3ff00000
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	43400000 	.word	0x43400000
 800b2e8:	0003988e 	.word	0x0003988e
 800b2ec:	000bb679 	.word	0x000bb679
 800b2f0:	0800bf38 	.word	0x0800bf38
 800b2f4:	3ff00000 	.word	0x3ff00000
 800b2f8:	40080000 	.word	0x40080000
 800b2fc:	0800bf58 	.word	0x0800bf58
 800b300:	0800bf48 	.word	0x0800bf48
 800b304:	a3b3      	add	r3, pc, #716	; (adr r3, 800b5d4 <__ieee754_pow+0xa4c>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	4640      	mov	r0, r8
 800b30c:	4649      	mov	r1, r9
 800b30e:	f7f4 ffd5 	bl	80002bc <__adddf3>
 800b312:	4622      	mov	r2, r4
 800b314:	ec41 0b1a 	vmov	d10, r0, r1
 800b318:	462b      	mov	r3, r5
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f4 ffcb 	bl	80002b8 <__aeabi_dsub>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	ec51 0b1a 	vmov	r0, r1, d10
 800b32a:	f7f5 fc0d 	bl	8000b48 <__aeabi_dcmpgt>
 800b32e:	2800      	cmp	r0, #0
 800b330:	f47f ae04 	bne.w	800af3c <__ieee754_pow+0x3b4>
 800b334:	4aa2      	ldr	r2, [pc, #648]	; (800b5c0 <__ieee754_pow+0xa38>)
 800b336:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b33a:	4293      	cmp	r3, r2
 800b33c:	f340 8107 	ble.w	800b54e <__ieee754_pow+0x9c6>
 800b340:	151b      	asrs	r3, r3, #20
 800b342:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b346:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b34a:	fa4a fa03 	asr.w	sl, sl, r3
 800b34e:	44da      	add	sl, fp
 800b350:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b354:	489b      	ldr	r0, [pc, #620]	; (800b5c4 <__ieee754_pow+0xa3c>)
 800b356:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b35a:	4108      	asrs	r0, r1
 800b35c:	ea00 030a 	and.w	r3, r0, sl
 800b360:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b364:	f1c1 0114 	rsb	r1, r1, #20
 800b368:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b36c:	fa4a fa01 	asr.w	sl, sl, r1
 800b370:	f1bb 0f00 	cmp.w	fp, #0
 800b374:	f04f 0200 	mov.w	r2, #0
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	bfb8      	it	lt
 800b37e:	f1ca 0a00 	rsblt	sl, sl, #0
 800b382:	f7f4 ff99 	bl	80002b8 <__aeabi_dsub>
 800b386:	ec41 0b19 	vmov	d9, r0, r1
 800b38a:	4642      	mov	r2, r8
 800b38c:	464b      	mov	r3, r9
 800b38e:	ec51 0b19 	vmov	r0, r1, d9
 800b392:	f7f4 ff93 	bl	80002bc <__adddf3>
 800b396:	a37a      	add	r3, pc, #488	; (adr r3, 800b580 <__ieee754_pow+0x9f8>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	2000      	movs	r0, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	f7f5 f941 	bl	8000628 <__aeabi_dmul>
 800b3a6:	ec53 2b19 	vmov	r2, r3, d9
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460f      	mov	r7, r1
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f4 ff81 	bl	80002b8 <__aeabi_dsub>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	f7f4 ff7b 	bl	80002b8 <__aeabi_dsub>
 800b3c2:	a371      	add	r3, pc, #452	; (adr r3, 800b588 <__ieee754_pow+0xa00>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f5 f92e 	bl	8000628 <__aeabi_dmul>
 800b3cc:	a370      	add	r3, pc, #448	; (adr r3, 800b590 <__ieee754_pow+0xa08>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	4689      	mov	r9, r1
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f5 f925 	bl	8000628 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	f7f4 ff69 	bl	80002bc <__adddf3>
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f4 ff61 	bl	80002bc <__adddf3>
 800b3fa:	4632      	mov	r2, r6
 800b3fc:	463b      	mov	r3, r7
 800b3fe:	4680      	mov	r8, r0
 800b400:	4689      	mov	r9, r1
 800b402:	f7f4 ff59 	bl	80002b8 <__aeabi_dsub>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f4 ff53 	bl	80002b8 <__aeabi_dsub>
 800b412:	4642      	mov	r2, r8
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	464b      	mov	r3, r9
 800b41a:	4640      	mov	r0, r8
 800b41c:	4649      	mov	r1, r9
 800b41e:	f7f5 f903 	bl	8000628 <__aeabi_dmul>
 800b422:	a35d      	add	r3, pc, #372	; (adr r3, 800b598 <__ieee754_pow+0xa10>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	4604      	mov	r4, r0
 800b42a:	460d      	mov	r5, r1
 800b42c:	f7f5 f8fc 	bl	8000628 <__aeabi_dmul>
 800b430:	a35b      	add	r3, pc, #364	; (adr r3, 800b5a0 <__ieee754_pow+0xa18>)
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f7f4 ff3f 	bl	80002b8 <__aeabi_dsub>
 800b43a:	4622      	mov	r2, r4
 800b43c:	462b      	mov	r3, r5
 800b43e:	f7f5 f8f3 	bl	8000628 <__aeabi_dmul>
 800b442:	a359      	add	r3, pc, #356	; (adr r3, 800b5a8 <__ieee754_pow+0xa20>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f4 ff38 	bl	80002bc <__adddf3>
 800b44c:	4622      	mov	r2, r4
 800b44e:	462b      	mov	r3, r5
 800b450:	f7f5 f8ea 	bl	8000628 <__aeabi_dmul>
 800b454:	a356      	add	r3, pc, #344	; (adr r3, 800b5b0 <__ieee754_pow+0xa28>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	f7f4 ff2d 	bl	80002b8 <__aeabi_dsub>
 800b45e:	4622      	mov	r2, r4
 800b460:	462b      	mov	r3, r5
 800b462:	f7f5 f8e1 	bl	8000628 <__aeabi_dmul>
 800b466:	a354      	add	r3, pc, #336	; (adr r3, 800b5b8 <__ieee754_pow+0xa30>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f4 ff26 	bl	80002bc <__adddf3>
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	f7f5 f8d8 	bl	8000628 <__aeabi_dmul>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4640      	mov	r0, r8
 800b47e:	4649      	mov	r1, r9
 800b480:	f7f4 ff1a 	bl	80002b8 <__aeabi_dsub>
 800b484:	4604      	mov	r4, r0
 800b486:	460d      	mov	r5, r1
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f5 f8ca 	bl	8000628 <__aeabi_dmul>
 800b494:	2200      	movs	r2, #0
 800b496:	ec41 0b19 	vmov	d9, r0, r1
 800b49a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	f7f4 ff09 	bl	80002b8 <__aeabi_dsub>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	ec51 0b19 	vmov	r0, r1, d9
 800b4ae:	f7f5 f9e5 	bl	800087c <__aeabi_ddiv>
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	4649      	mov	r1, r9
 800b4be:	f7f5 f8b3 	bl	8000628 <__aeabi_dmul>
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	f7f4 fef9 	bl	80002bc <__adddf3>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f7f4 fef1 	bl	80002b8 <__aeabi_dsub>
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	464b      	mov	r3, r9
 800b4da:	f7f4 feed 	bl	80002b8 <__aeabi_dsub>
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	4939      	ldr	r1, [pc, #228]	; (800b5c8 <__ieee754_pow+0xa40>)
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f7f4 fee7 	bl	80002b8 <__aeabi_dsub>
 800b4ea:	ec41 0b10 	vmov	d0, r0, r1
 800b4ee:	ee10 3a90 	vmov	r3, s1
 800b4f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4fa:	da2b      	bge.n	800b554 <__ieee754_pow+0x9cc>
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	f000 fa1b 	bl	800b938 <scalbn>
 800b502:	ec51 0b10 	vmov	r0, r1, d0
 800b506:	ec53 2b18 	vmov	r2, r3, d8
 800b50a:	f7ff bbee 	b.w	800acea <__ieee754_pow+0x162>
 800b50e:	4b2f      	ldr	r3, [pc, #188]	; (800b5cc <__ieee754_pow+0xa44>)
 800b510:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b514:	429e      	cmp	r6, r3
 800b516:	f77f af0d 	ble.w	800b334 <__ieee754_pow+0x7ac>
 800b51a:	4b2d      	ldr	r3, [pc, #180]	; (800b5d0 <__ieee754_pow+0xa48>)
 800b51c:	440b      	add	r3, r1
 800b51e:	4303      	orrs	r3, r0
 800b520:	d009      	beq.n	800b536 <__ieee754_pow+0x9ae>
 800b522:	ec51 0b18 	vmov	r0, r1, d8
 800b526:	2200      	movs	r2, #0
 800b528:	2300      	movs	r3, #0
 800b52a:	f7f5 faef 	bl	8000b0c <__aeabi_dcmplt>
 800b52e:	3800      	subs	r0, #0
 800b530:	bf18      	it	ne
 800b532:	2001      	movne	r0, #1
 800b534:	e448      	b.n	800adc8 <__ieee754_pow+0x240>
 800b536:	4622      	mov	r2, r4
 800b538:	462b      	mov	r3, r5
 800b53a:	f7f4 febd 	bl	80002b8 <__aeabi_dsub>
 800b53e:	4642      	mov	r2, r8
 800b540:	464b      	mov	r3, r9
 800b542:	f7f5 faf7 	bl	8000b34 <__aeabi_dcmpge>
 800b546:	2800      	cmp	r0, #0
 800b548:	f43f aef4 	beq.w	800b334 <__ieee754_pow+0x7ac>
 800b54c:	e7e9      	b.n	800b522 <__ieee754_pow+0x99a>
 800b54e:	f04f 0a00 	mov.w	sl, #0
 800b552:	e71a      	b.n	800b38a <__ieee754_pow+0x802>
 800b554:	ec51 0b10 	vmov	r0, r1, d0
 800b558:	4619      	mov	r1, r3
 800b55a:	e7d4      	b.n	800b506 <__ieee754_pow+0x97e>
 800b55c:	491a      	ldr	r1, [pc, #104]	; (800b5c8 <__ieee754_pow+0xa40>)
 800b55e:	2000      	movs	r0, #0
 800b560:	f7ff bb31 	b.w	800abc6 <__ieee754_pow+0x3e>
 800b564:	2000      	movs	r0, #0
 800b566:	2100      	movs	r1, #0
 800b568:	f7ff bb2d 	b.w	800abc6 <__ieee754_pow+0x3e>
 800b56c:	4630      	mov	r0, r6
 800b56e:	4639      	mov	r1, r7
 800b570:	f7ff bb29 	b.w	800abc6 <__ieee754_pow+0x3e>
 800b574:	9204      	str	r2, [sp, #16]
 800b576:	f7ff bb7b 	b.w	800ac70 <__ieee754_pow+0xe8>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f7ff bb65 	b.w	800ac4a <__ieee754_pow+0xc2>
 800b580:	00000000 	.word	0x00000000
 800b584:	3fe62e43 	.word	0x3fe62e43
 800b588:	fefa39ef 	.word	0xfefa39ef
 800b58c:	3fe62e42 	.word	0x3fe62e42
 800b590:	0ca86c39 	.word	0x0ca86c39
 800b594:	be205c61 	.word	0xbe205c61
 800b598:	72bea4d0 	.word	0x72bea4d0
 800b59c:	3e663769 	.word	0x3e663769
 800b5a0:	c5d26bf1 	.word	0xc5d26bf1
 800b5a4:	3ebbbd41 	.word	0x3ebbbd41
 800b5a8:	af25de2c 	.word	0xaf25de2c
 800b5ac:	3f11566a 	.word	0x3f11566a
 800b5b0:	16bebd93 	.word	0x16bebd93
 800b5b4:	3f66c16c 	.word	0x3f66c16c
 800b5b8:	5555553e 	.word	0x5555553e
 800b5bc:	3fc55555 	.word	0x3fc55555
 800b5c0:	3fe00000 	.word	0x3fe00000
 800b5c4:	fff00000 	.word	0xfff00000
 800b5c8:	3ff00000 	.word	0x3ff00000
 800b5cc:	4090cbff 	.word	0x4090cbff
 800b5d0:	3f6f3400 	.word	0x3f6f3400
 800b5d4:	652b82fe 	.word	0x652b82fe
 800b5d8:	3c971547 	.word	0x3c971547
 800b5dc:	00000000 	.word	0x00000000

0800b5e0 <atan>:
 800b5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	ec55 4b10 	vmov	r4, r5, d0
 800b5e8:	4bc3      	ldr	r3, [pc, #780]	; (800b8f8 <atan+0x318>)
 800b5ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5ee:	429e      	cmp	r6, r3
 800b5f0:	46ab      	mov	fp, r5
 800b5f2:	dd18      	ble.n	800b626 <atan+0x46>
 800b5f4:	4bc1      	ldr	r3, [pc, #772]	; (800b8fc <atan+0x31c>)
 800b5f6:	429e      	cmp	r6, r3
 800b5f8:	dc01      	bgt.n	800b5fe <atan+0x1e>
 800b5fa:	d109      	bne.n	800b610 <atan+0x30>
 800b5fc:	b144      	cbz	r4, 800b610 <atan+0x30>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	f7f4 fe59 	bl	80002bc <__adddf3>
 800b60a:	4604      	mov	r4, r0
 800b60c:	460d      	mov	r5, r1
 800b60e:	e006      	b.n	800b61e <atan+0x3e>
 800b610:	f1bb 0f00 	cmp.w	fp, #0
 800b614:	f300 8131 	bgt.w	800b87a <atan+0x29a>
 800b618:	a59b      	add	r5, pc, #620	; (adr r5, 800b888 <atan+0x2a8>)
 800b61a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b61e:	ec45 4b10 	vmov	d0, r4, r5
 800b622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b626:	4bb6      	ldr	r3, [pc, #728]	; (800b900 <atan+0x320>)
 800b628:	429e      	cmp	r6, r3
 800b62a:	dc14      	bgt.n	800b656 <atan+0x76>
 800b62c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b630:	429e      	cmp	r6, r3
 800b632:	dc0d      	bgt.n	800b650 <atan+0x70>
 800b634:	a396      	add	r3, pc, #600	; (adr r3, 800b890 <atan+0x2b0>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	ee10 0a10 	vmov	r0, s0
 800b63e:	4629      	mov	r1, r5
 800b640:	f7f4 fe3c 	bl	80002bc <__adddf3>
 800b644:	4baf      	ldr	r3, [pc, #700]	; (800b904 <atan+0x324>)
 800b646:	2200      	movs	r2, #0
 800b648:	f7f5 fa7e 	bl	8000b48 <__aeabi_dcmpgt>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d1e6      	bne.n	800b61e <atan+0x3e>
 800b650:	f04f 3aff 	mov.w	sl, #4294967295
 800b654:	e02b      	b.n	800b6ae <atan+0xce>
 800b656:	f000 f963 	bl	800b920 <fabs>
 800b65a:	4bab      	ldr	r3, [pc, #684]	; (800b908 <atan+0x328>)
 800b65c:	429e      	cmp	r6, r3
 800b65e:	ec55 4b10 	vmov	r4, r5, d0
 800b662:	f300 80bf 	bgt.w	800b7e4 <atan+0x204>
 800b666:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b66a:	429e      	cmp	r6, r3
 800b66c:	f300 80a0 	bgt.w	800b7b0 <atan+0x1d0>
 800b670:	ee10 2a10 	vmov	r2, s0
 800b674:	ee10 0a10 	vmov	r0, s0
 800b678:	462b      	mov	r3, r5
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f4 fe1e 	bl	80002bc <__adddf3>
 800b680:	4ba0      	ldr	r3, [pc, #640]	; (800b904 <atan+0x324>)
 800b682:	2200      	movs	r2, #0
 800b684:	f7f4 fe18 	bl	80002b8 <__aeabi_dsub>
 800b688:	2200      	movs	r2, #0
 800b68a:	4606      	mov	r6, r0
 800b68c:	460f      	mov	r7, r1
 800b68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fe11 	bl	80002bc <__adddf3>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f5 f8eb 	bl	800087c <__aeabi_ddiv>
 800b6a6:	f04f 0a00 	mov.w	sl, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	f7f4 ffb7 	bl	8000628 <__aeabi_dmul>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4680      	mov	r8, r0
 800b6c0:	4689      	mov	r9, r1
 800b6c2:	f7f4 ffb1 	bl	8000628 <__aeabi_dmul>
 800b6c6:	a374      	add	r3, pc, #464	; (adr r3, 800b898 <atan+0x2b8>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	460f      	mov	r7, r1
 800b6d0:	f7f4 ffaa 	bl	8000628 <__aeabi_dmul>
 800b6d4:	a372      	add	r3, pc, #456	; (adr r3, 800b8a0 <atan+0x2c0>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fdef 	bl	80002bc <__adddf3>
 800b6de:	4632      	mov	r2, r6
 800b6e0:	463b      	mov	r3, r7
 800b6e2:	f7f4 ffa1 	bl	8000628 <__aeabi_dmul>
 800b6e6:	a370      	add	r3, pc, #448	; (adr r3, 800b8a8 <atan+0x2c8>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fde6 	bl	80002bc <__adddf3>
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	f7f4 ff98 	bl	8000628 <__aeabi_dmul>
 800b6f8:	a36d      	add	r3, pc, #436	; (adr r3, 800b8b0 <atan+0x2d0>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f4 fddd 	bl	80002bc <__adddf3>
 800b702:	4632      	mov	r2, r6
 800b704:	463b      	mov	r3, r7
 800b706:	f7f4 ff8f 	bl	8000628 <__aeabi_dmul>
 800b70a:	a36b      	add	r3, pc, #428	; (adr r3, 800b8b8 <atan+0x2d8>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fdd4 	bl	80002bc <__adddf3>
 800b714:	4632      	mov	r2, r6
 800b716:	463b      	mov	r3, r7
 800b718:	f7f4 ff86 	bl	8000628 <__aeabi_dmul>
 800b71c:	a368      	add	r3, pc, #416	; (adr r3, 800b8c0 <atan+0x2e0>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f7f4 fdcb 	bl	80002bc <__adddf3>
 800b726:	4642      	mov	r2, r8
 800b728:	464b      	mov	r3, r9
 800b72a:	f7f4 ff7d 	bl	8000628 <__aeabi_dmul>
 800b72e:	a366      	add	r3, pc, #408	; (adr r3, 800b8c8 <atan+0x2e8>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	4680      	mov	r8, r0
 800b736:	4689      	mov	r9, r1
 800b738:	4630      	mov	r0, r6
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f4 ff74 	bl	8000628 <__aeabi_dmul>
 800b740:	a363      	add	r3, pc, #396	; (adr r3, 800b8d0 <atan+0x2f0>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f4 fdb7 	bl	80002b8 <__aeabi_dsub>
 800b74a:	4632      	mov	r2, r6
 800b74c:	463b      	mov	r3, r7
 800b74e:	f7f4 ff6b 	bl	8000628 <__aeabi_dmul>
 800b752:	a361      	add	r3, pc, #388	; (adr r3, 800b8d8 <atan+0x2f8>)
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f7f4 fdae 	bl	80002b8 <__aeabi_dsub>
 800b75c:	4632      	mov	r2, r6
 800b75e:	463b      	mov	r3, r7
 800b760:	f7f4 ff62 	bl	8000628 <__aeabi_dmul>
 800b764:	a35e      	add	r3, pc, #376	; (adr r3, 800b8e0 <atan+0x300>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fda5 	bl	80002b8 <__aeabi_dsub>
 800b76e:	4632      	mov	r2, r6
 800b770:	463b      	mov	r3, r7
 800b772:	f7f4 ff59 	bl	8000628 <__aeabi_dmul>
 800b776:	a35c      	add	r3, pc, #368	; (adr r3, 800b8e8 <atan+0x308>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 fd9c 	bl	80002b8 <__aeabi_dsub>
 800b780:	4632      	mov	r2, r6
 800b782:	463b      	mov	r3, r7
 800b784:	f7f4 ff50 	bl	8000628 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4640      	mov	r0, r8
 800b78e:	4649      	mov	r1, r9
 800b790:	f7f4 fd94 	bl	80002bc <__adddf3>
 800b794:	4622      	mov	r2, r4
 800b796:	462b      	mov	r3, r5
 800b798:	f7f4 ff46 	bl	8000628 <__aeabi_dmul>
 800b79c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	d14b      	bne.n	800b83e <atan+0x25e>
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f4 fd85 	bl	80002b8 <__aeabi_dsub>
 800b7ae:	e72c      	b.n	800b60a <atan+0x2a>
 800b7b0:	ee10 0a10 	vmov	r0, s0
 800b7b4:	4b53      	ldr	r3, [pc, #332]	; (800b904 <atan+0x324>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	f7f4 fd7d 	bl	80002b8 <__aeabi_dsub>
 800b7be:	4b51      	ldr	r3, [pc, #324]	; (800b904 <atan+0x324>)
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	460f      	mov	r7, r1
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f4 fd77 	bl	80002bc <__adddf3>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f5 f851 	bl	800087c <__aeabi_ddiv>
 800b7da:	f04f 0a01 	mov.w	sl, #1
 800b7de:	4604      	mov	r4, r0
 800b7e0:	460d      	mov	r5, r1
 800b7e2:	e764      	b.n	800b6ae <atan+0xce>
 800b7e4:	4b49      	ldr	r3, [pc, #292]	; (800b90c <atan+0x32c>)
 800b7e6:	429e      	cmp	r6, r3
 800b7e8:	da1d      	bge.n	800b826 <atan+0x246>
 800b7ea:	ee10 0a10 	vmov	r0, s0
 800b7ee:	4b48      	ldr	r3, [pc, #288]	; (800b910 <atan+0x330>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	f7f4 fd60 	bl	80002b8 <__aeabi_dsub>
 800b7f8:	4b45      	ldr	r3, [pc, #276]	; (800b910 <atan+0x330>)
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	460f      	mov	r7, r1
 800b7fe:	2200      	movs	r2, #0
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 ff10 	bl	8000628 <__aeabi_dmul>
 800b808:	4b3e      	ldr	r3, [pc, #248]	; (800b904 <atan+0x324>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 fd56 	bl	80002bc <__adddf3>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f5 f830 	bl	800087c <__aeabi_ddiv>
 800b81c:	f04f 0a02 	mov.w	sl, #2
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	e743      	b.n	800b6ae <atan+0xce>
 800b826:	462b      	mov	r3, r5
 800b828:	ee10 2a10 	vmov	r2, s0
 800b82c:	4939      	ldr	r1, [pc, #228]	; (800b914 <atan+0x334>)
 800b82e:	2000      	movs	r0, #0
 800b830:	f7f5 f824 	bl	800087c <__aeabi_ddiv>
 800b834:	f04f 0a03 	mov.w	sl, #3
 800b838:	4604      	mov	r4, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	e737      	b.n	800b6ae <atan+0xce>
 800b83e:	4b36      	ldr	r3, [pc, #216]	; (800b918 <atan+0x338>)
 800b840:	4e36      	ldr	r6, [pc, #216]	; (800b91c <atan+0x33c>)
 800b842:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f7f4 fd35 	bl	80002b8 <__aeabi_dsub>
 800b84e:	4622      	mov	r2, r4
 800b850:	462b      	mov	r3, r5
 800b852:	f7f4 fd31 	bl	80002b8 <__aeabi_dsub>
 800b856:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b862:	f7f4 fd29 	bl	80002b8 <__aeabi_dsub>
 800b866:	f1bb 0f00 	cmp.w	fp, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	460d      	mov	r5, r1
 800b86e:	f6bf aed6 	bge.w	800b61e <atan+0x3e>
 800b872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b876:	461d      	mov	r5, r3
 800b878:	e6d1      	b.n	800b61e <atan+0x3e>
 800b87a:	a51d      	add	r5, pc, #116	; (adr r5, 800b8f0 <atan+0x310>)
 800b87c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b880:	e6cd      	b.n	800b61e <atan+0x3e>
 800b882:	bf00      	nop
 800b884:	f3af 8000 	nop.w
 800b888:	54442d18 	.word	0x54442d18
 800b88c:	bff921fb 	.word	0xbff921fb
 800b890:	8800759c 	.word	0x8800759c
 800b894:	7e37e43c 	.word	0x7e37e43c
 800b898:	e322da11 	.word	0xe322da11
 800b89c:	3f90ad3a 	.word	0x3f90ad3a
 800b8a0:	24760deb 	.word	0x24760deb
 800b8a4:	3fa97b4b 	.word	0x3fa97b4b
 800b8a8:	a0d03d51 	.word	0xa0d03d51
 800b8ac:	3fb10d66 	.word	0x3fb10d66
 800b8b0:	c54c206e 	.word	0xc54c206e
 800b8b4:	3fb745cd 	.word	0x3fb745cd
 800b8b8:	920083ff 	.word	0x920083ff
 800b8bc:	3fc24924 	.word	0x3fc24924
 800b8c0:	5555550d 	.word	0x5555550d
 800b8c4:	3fd55555 	.word	0x3fd55555
 800b8c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8cc:	bfa2b444 	.word	0xbfa2b444
 800b8d0:	52defd9a 	.word	0x52defd9a
 800b8d4:	3fadde2d 	.word	0x3fadde2d
 800b8d8:	af749a6d 	.word	0xaf749a6d
 800b8dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8e0:	fe231671 	.word	0xfe231671
 800b8e4:	3fbc71c6 	.word	0x3fbc71c6
 800b8e8:	9998ebc4 	.word	0x9998ebc4
 800b8ec:	3fc99999 	.word	0x3fc99999
 800b8f0:	54442d18 	.word	0x54442d18
 800b8f4:	3ff921fb 	.word	0x3ff921fb
 800b8f8:	440fffff 	.word	0x440fffff
 800b8fc:	7ff00000 	.word	0x7ff00000
 800b900:	3fdbffff 	.word	0x3fdbffff
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	3ff2ffff 	.word	0x3ff2ffff
 800b90c:	40038000 	.word	0x40038000
 800b910:	3ff80000 	.word	0x3ff80000
 800b914:	bff00000 	.word	0xbff00000
 800b918:	0800bf88 	.word	0x0800bf88
 800b91c:	0800bf68 	.word	0x0800bf68

0800b920 <fabs>:
 800b920:	ec51 0b10 	vmov	r0, r1, d0
 800b924:	ee10 2a10 	vmov	r2, s0
 800b928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b92c:	ec43 2b10 	vmov	d0, r2, r3
 800b930:	4770      	bx	lr
 800b932:	0000      	movs	r0, r0
 800b934:	0000      	movs	r0, r0
	...

0800b938 <scalbn>:
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	ec55 4b10 	vmov	r4, r5, d0
 800b93e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b942:	4606      	mov	r6, r0
 800b944:	462b      	mov	r3, r5
 800b946:	b999      	cbnz	r1, 800b970 <scalbn+0x38>
 800b948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b94c:	4323      	orrs	r3, r4
 800b94e:	d03f      	beq.n	800b9d0 <scalbn+0x98>
 800b950:	4b35      	ldr	r3, [pc, #212]	; (800ba28 <scalbn+0xf0>)
 800b952:	4629      	mov	r1, r5
 800b954:	ee10 0a10 	vmov	r0, s0
 800b958:	2200      	movs	r2, #0
 800b95a:	f7f4 fe65 	bl	8000628 <__aeabi_dmul>
 800b95e:	4b33      	ldr	r3, [pc, #204]	; (800ba2c <scalbn+0xf4>)
 800b960:	429e      	cmp	r6, r3
 800b962:	4604      	mov	r4, r0
 800b964:	460d      	mov	r5, r1
 800b966:	da10      	bge.n	800b98a <scalbn+0x52>
 800b968:	a327      	add	r3, pc, #156	; (adr r3, 800ba08 <scalbn+0xd0>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	e01f      	b.n	800b9b0 <scalbn+0x78>
 800b970:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b974:	4291      	cmp	r1, r2
 800b976:	d10c      	bne.n	800b992 <scalbn+0x5a>
 800b978:	ee10 2a10 	vmov	r2, s0
 800b97c:	4620      	mov	r0, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	f7f4 fc9c 	bl	80002bc <__adddf3>
 800b984:	4604      	mov	r4, r0
 800b986:	460d      	mov	r5, r1
 800b988:	e022      	b.n	800b9d0 <scalbn+0x98>
 800b98a:	460b      	mov	r3, r1
 800b98c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b990:	3936      	subs	r1, #54	; 0x36
 800b992:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b996:	4296      	cmp	r6, r2
 800b998:	dd0d      	ble.n	800b9b6 <scalbn+0x7e>
 800b99a:	2d00      	cmp	r5, #0
 800b99c:	a11c      	add	r1, pc, #112	; (adr r1, 800ba10 <scalbn+0xd8>)
 800b99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a2:	da02      	bge.n	800b9aa <scalbn+0x72>
 800b9a4:	a11c      	add	r1, pc, #112	; (adr r1, 800ba18 <scalbn+0xe0>)
 800b9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9aa:	a319      	add	r3, pc, #100	; (adr r3, 800ba10 <scalbn+0xd8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fe3a 	bl	8000628 <__aeabi_dmul>
 800b9b4:	e7e6      	b.n	800b984 <scalbn+0x4c>
 800b9b6:	1872      	adds	r2, r6, r1
 800b9b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b9bc:	428a      	cmp	r2, r1
 800b9be:	dcec      	bgt.n	800b99a <scalbn+0x62>
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	dd08      	ble.n	800b9d6 <scalbn+0x9e>
 800b9c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b9d0:	ec45 4b10 	vmov	d0, r4, r5
 800b9d4:	bd70      	pop	{r4, r5, r6, pc}
 800b9d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b9da:	da08      	bge.n	800b9ee <scalbn+0xb6>
 800b9dc:	2d00      	cmp	r5, #0
 800b9de:	a10a      	add	r1, pc, #40	; (adr r1, 800ba08 <scalbn+0xd0>)
 800b9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9e4:	dac0      	bge.n	800b968 <scalbn+0x30>
 800b9e6:	a10e      	add	r1, pc, #56	; (adr r1, 800ba20 <scalbn+0xe8>)
 800b9e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ec:	e7bc      	b.n	800b968 <scalbn+0x30>
 800b9ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9f2:	3236      	adds	r2, #54	; 0x36
 800b9f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ba30 <scalbn+0xf8>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	e7d5      	b.n	800b9b0 <scalbn+0x78>
 800ba04:	f3af 8000 	nop.w
 800ba08:	c2f8f359 	.word	0xc2f8f359
 800ba0c:	01a56e1f 	.word	0x01a56e1f
 800ba10:	8800759c 	.word	0x8800759c
 800ba14:	7e37e43c 	.word	0x7e37e43c
 800ba18:	8800759c 	.word	0x8800759c
 800ba1c:	fe37e43c 	.word	0xfe37e43c
 800ba20:	c2f8f359 	.word	0xc2f8f359
 800ba24:	81a56e1f 	.word	0x81a56e1f
 800ba28:	43500000 	.word	0x43500000
 800ba2c:	ffff3cb0 	.word	0xffff3cb0
 800ba30:	3c900000 	.word	0x3c900000

0800ba34 <with_errno>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	4604      	mov	r4, r0
 800ba38:	460d      	mov	r5, r1
 800ba3a:	4616      	mov	r6, r2
 800ba3c:	f7fc ffde 	bl	80089fc <__errno>
 800ba40:	4629      	mov	r1, r5
 800ba42:	6006      	str	r6, [r0, #0]
 800ba44:	4620      	mov	r0, r4
 800ba46:	bd70      	pop	{r4, r5, r6, pc}

0800ba48 <xflow>:
 800ba48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba4a:	4614      	mov	r4, r2
 800ba4c:	461d      	mov	r5, r3
 800ba4e:	b108      	cbz	r0, 800ba54 <xflow+0xc>
 800ba50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba54:	e9cd 2300 	strd	r2, r3, [sp]
 800ba58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fde2 	bl	8000628 <__aeabi_dmul>
 800ba64:	2222      	movs	r2, #34	; 0x22
 800ba66:	b003      	add	sp, #12
 800ba68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba6c:	f7ff bfe2 	b.w	800ba34 <with_errno>

0800ba70 <__math_uflow>:
 800ba70:	b508      	push	{r3, lr}
 800ba72:	2200      	movs	r2, #0
 800ba74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba78:	f7ff ffe6 	bl	800ba48 <xflow>
 800ba7c:	ec41 0b10 	vmov	d0, r0, r1
 800ba80:	bd08      	pop	{r3, pc}

0800ba82 <__math_oflow>:
 800ba82:	b508      	push	{r3, lr}
 800ba84:	2200      	movs	r2, #0
 800ba86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba8a:	f7ff ffdd 	bl	800ba48 <xflow>
 800ba8e:	ec41 0b10 	vmov	d0, r0, r1
 800ba92:	bd08      	pop	{r3, pc}

0800ba94 <_init>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr

0800baa0 <_fini>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	bf00      	nop
 800baa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa6:	bc08      	pop	{r3}
 800baa8:	469e      	mov	lr, r3
 800baaa:	4770      	bx	lr
