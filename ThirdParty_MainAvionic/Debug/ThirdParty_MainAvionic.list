
ThirdParty_MainAvionic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800eaa8  0800eaa8  0001eaa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f078  0800f078  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800f078  0800f078  0001f078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f080  0800f080  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f084  0800f084  0001f084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800f088  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004650  20000258  0800f2e0  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200048a8  0800f2e0  000248a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c181  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb6  00000000  00000000  0003c44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b0  00000000  00000000  00041be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260a6  00000000  00000000  00042e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da26  00000000  00000000  00068f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfc8c  00000000  00000000  0008695c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007964  00000000  00000000  001665e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000258 	.word	0x20000258
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea8c 	.word	0x0800ea8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000025c 	.word	0x2000025c
 800020c:	0800ea8c 	.word	0x0800ea8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <TrimRead+0x1b8>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4868      	ldr	r0, [pc, #416]	; (800127c <TrimRead+0x1bc>)
 80010dc:	f004 f8e6 	bl	80052ac <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <TrimRead+0x1c0>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2207      	movs	r2, #7
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <TrimRead+0x1bc>)
 80010f6:	f004 f8d9 	bl	80052ac <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <TrimRead+0x1b8>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TrimRead+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <TrimRead+0x1c4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TrimRead+0x1b8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <TrimRead+0x1b8>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <TrimRead+0x1c8>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <TrimRead+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <TrimRead+0x1b8>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <TrimRead+0x1cc>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <TrimRead+0x1b8>)
 8001140:	79db      	ldrb	r3, [r3, #7]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <TrimRead+0x1b8>)
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <TrimRead+0x1d0>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <TrimRead+0x1b8>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TrimRead+0x1b8>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <TrimRead+0x1d4>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <TrimRead+0x1b8>)
 800116e:	7adb      	ldrb	r3, [r3, #11]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <TrimRead+0x1b8>)
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <TrimRead+0x1d8>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <TrimRead+0x1b8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <TrimRead+0x1b8>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <TrimRead+0x1dc>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <TrimRead+0x1b8>)
 800119a:	7bdb      	ldrb	r3, [r3, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <TrimRead+0x1b8>)
 80011a2:	7b9b      	ldrb	r3, [r3, #14]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <TrimRead+0x1e0>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <TrimRead+0x1b8>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <TrimRead+0x1b8>)
 80011b8:	7c1b      	ldrb	r3, [r3, #16]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <TrimRead+0x1e4>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <TrimRead+0x1b8>)
 80011c6:	7cdb      	ldrb	r3, [r3, #19]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <TrimRead+0x1b8>)
 80011ce:	7c9b      	ldrb	r3, [r3, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <TrimRead+0x1e8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <TrimRead+0x1b8>)
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <TrimRead+0x1b8>)
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TrimRead+0x1ec>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <TrimRead+0x1b8>)
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <TrimRead+0x1b8>)
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TrimRead+0x1f0>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <TrimRead+0x1b8>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <TrimRead+0x1f4>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <TrimRead+0x1b8>)
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <TrimRead+0x1b8>)
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <TrimRead+0x1f8>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <TrimRead+0x1b8>)
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <TrimRead+0x1fc>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <TrimRead+0x1b8>)
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <TrimRead+0x1b8>)
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	b21b      	sxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <TrimRead+0x200>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <TrimRead+0x1b8>)
 800124e:	7f9b      	ldrb	r3, [r3, #30]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TrimRead+0x1b8>)
 8001256:	7f5b      	ldrb	r3, [r3, #29]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <TrimRead+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TrimRead+0x1b8>)
 8001268:	7fdb      	ldrb	r3, [r3, #31]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <TrimRead+0x208>)
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000278 	.word	0x20000278
 800127c:	200005c0 	.word	0x200005c0
 8001280:	20000291 	.word	0x20000291
 8001284:	20000298 	.word	0x20000298
 8001288:	200002a0 	.word	0x200002a0
 800128c:	200002a2 	.word	0x200002a2
 8001290:	2000029a 	.word	0x2000029a
 8001294:	200002a4 	.word	0x200002a4
 8001298:	200002a6 	.word	0x200002a6
 800129c:	200002a8 	.word	0x200002a8
 80012a0:	200002aa 	.word	0x200002aa
 80012a4:	200002ac 	.word	0x200002ac
 80012a8:	200002ae 	.word	0x200002ae
 80012ac:	200002b0 	.word	0x200002b0
 80012b0:	200002b2 	.word	0x200002b2
 80012b4:	2000029c 	.word	0x2000029c
 80012b8:	200002b4 	.word	0x200002b4
 80012bc:	2000029e 	.word	0x2000029e
 80012c0:	200002b6 	.word	0x200002b6
 80012c4:	200002b8 	.word	0x200002b8
 80012c8:	200002ba 	.word	0x200002ba

080012cc <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ea:	f7ff fee9 	bl	80010c0 <TrimRead>

	uint8_t datatowrite = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012f6:	23b6      	movs	r3, #182	; 0xb6
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4858      	ldr	r0, [pc, #352]	; (8001474 <BME280_Config+0x1a8>)
 8001312:	f003 fed1 	bl	80050b8 <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x56>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a3      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f003 fa3e 	bl	80047a4 <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f2      	movs	r2, #242	; 0xf2
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <BME280_Config+0x1a8>)
 8001344:	f003 feb8 	bl	80050b8 <HAL_I2C_Mem_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BME280_Config+0x88>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e08a      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f003 fa25 	bl	80047a4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	22f2      	movs	r2, #242	; 0xf2
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	4840      	ldr	r0, [pc, #256]	; (8001474 <BME280_Config+0x1a8>)
 8001372:	f003 ff9b 	bl	80052ac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	429a      	cmp	r2, r3
 800137c:	d002      	beq.n	8001384 <BME280_Config+0xb8>
	{
		return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e072      	b.n	800146a <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f5      	movs	r2, #245	; 0xf5
 80013b0:	21ec      	movs	r1, #236	; 0xec
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <BME280_Config+0x1a8>)
 80013b4:	f003 fe80 	bl	80050b8 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0xf8>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e052      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f003 f9ed 	bl	80047a4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f5      	movs	r2, #245	; 0xf5
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <BME280_Config+0x1a8>)
 80013e2:	f003 ff63 	bl	80052ac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x128>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e03a      	b.n	800146a <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ec      	movs	r1, #236	; 0xec
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <BME280_Config+0x1a8>)
 8001428:	f003 fe46 	bl	80050b8 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x16c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e018      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f003 f9b3 	bl	80047a4 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f4      	movs	r2, #244	; 0xf4
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <BME280_Config+0x1a8>)
 8001456:	f003 ff29 	bl	80052ac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0x19c>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e000      	b.n	800146a <BME280_Config+0x19e>
	}
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	200005c0 	.word	0x200005c0

08001478 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <BMEReadRaw+0x8c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	22d0      	movs	r2, #208	; 0xd0
 8001490:	21ec      	movs	r1, #236	; 0xec
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <BMEReadRaw+0x90>)
 8001494:	f003 ff0a 	bl	80052ac <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BMEReadRaw+0x8c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d12a      	bne.n	80014f6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2308      	movs	r3, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	463b      	mov	r3, r7
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	22f7      	movs	r2, #247	; 0xf7
 80014b2:	21ec      	movs	r1, #236	; 0xec
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <BMEReadRaw+0x90>)
 80014b6:	f003 fef9 	bl	80052ac <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	0912      	lsrs	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BMEReadRaw+0x94>)
 80014ce:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	031a      	lsls	r2, r3, #12
 80014d4:	793b      	ldrb	r3, [r7, #4]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4313      	orrs	r3, r2
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	0912      	lsrs	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BMEReadRaw+0x98>)
 80014e4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <BMEReadRaw+0x9c>)
 80014f0:	6013      	str	r3, [r2, #0]

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <BMEReadRaw+0x82>
	}
	else return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000274 	.word	0x20000274
 8001508:	200005c0 	.word	0x200005c0
 800150c:	200002c0 	.word	0x200002c0
 8001510:	200002bc 	.word	0x200002bc
 8001514:	200002c4 	.word	0x200002c4

08001518 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <BME280_compensate_T_int32+0x78>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <BME280_compensate_T_int32+0x74>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <BME280_compensate_T_int32+0x7c>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
	return T;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000298 	.word	0x20000298
 8001590:	200002a0 	.word	0x200002a0
 8001594:	200002a2 	.word	0x200002a2
 8001598:	200002d0 	.word	0x200002d0

0800159c <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b0ca      	sub	sp, #296	; 0x128
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <BME280_compensate_P_int64+0x2cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	461c      	mov	r4, r3
 80015b0:	4615      	mov	r5, r2
 80015b2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015b6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015ba:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015dc:	fba3 8903 	umull	r8, r9, r3, r3
 80015e0:	eb02 0309 	add.w	r3, r2, r9
 80015e4:	4699      	mov	r9, r3
 80015e6:	4ba1      	ldr	r3, [pc, #644]	; (800186c <BME280_compensate_P_int64+0x2d0>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015fc:	4603      	mov	r3, r0
 80015fe:	fb03 f209 	mul.w	r2, r3, r9
 8001602:	460b      	mov	r3, r1
 8001604:	fb08 f303 	mul.w	r3, r8, r3
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	fba8 1202 	umull	r1, r2, r8, r2
 8001610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800161a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001624:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001628:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <BME280_compensate_P_int64+0x2d4>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800163e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800164a:	462a      	mov	r2, r5
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001654:	4621      	mov	r1, r4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001660:	4621      	mov	r1, r4
 8001662:	fba3 1301 	umull	r1, r3, r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	460b      	mov	r3, r1
 800166c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001686:	462b      	mov	r3, r5
 8001688:	0459      	lsls	r1, r3, #17
 800168a:	4623      	mov	r3, r4
 800168c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001690:	4623      	mov	r3, r4
 8001692:	0458      	lsls	r0, r3, #17
 8001694:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001698:	1814      	adds	r4, r2, r0
 800169a:	643c      	str	r4, [r7, #64]	; 0x40
 800169c:	414b      	adcs	r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <BME280_compensate_P_int64+0x2d8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	2000      	movs	r0, #0
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	1814      	adds	r4, r2, r0
 80016d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80016d2:	414b      	adcs	r3, r1
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e6:	fb03 f102 	mul.w	r1, r3, r2
 80016ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	18ca      	adds	r2, r1, r3
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001704:	460b      	mov	r3, r1
 8001706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <BME280_compensate_P_int64+0x2dc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	462b      	mov	r3, r5
 800172c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001730:	4642      	mov	r2, r8
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	464b      	mov	r3, r9
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	4641      	mov	r1, r8
 8001744:	fba2 1201 	umull	r1, r2, r2, r1
 8001748:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800174c:	460a      	mov	r2, r1
 800174e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001752:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001768:	4623      	mov	r3, r4
 800176a:	0a18      	lsrs	r0, r3, #8
 800176c:	462b      	mov	r3, r5
 800176e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001772:	462b      	mov	r3, r5
 8001774:	1219      	asrs	r1, r3, #8
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <BME280_compensate_P_int64+0x2e0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001784:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001790:	464a      	mov	r2, r9
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179a:	4644      	mov	r4, r8
 800179c:	fb04 f303 	mul.w	r3, r4, r3
 80017a0:	441a      	add	r2, r3
 80017a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a6:	4644      	mov	r4, r8
 80017a8:	fba3 4304 	umull	r4, r3, r3, r4
 80017ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b0:	4623      	mov	r3, r4
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017cc:	464c      	mov	r4, r9
 80017ce:	0323      	lsls	r3, r4, #12
 80017d0:	4644      	mov	r4, r8
 80017d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017d6:	4644      	mov	r4, r8
 80017d8:	0322      	lsls	r2, r4, #12
 80017da:	1884      	adds	r4, r0, r2
 80017dc:	633c      	str	r4, [r7, #48]	; 0x30
 80017de:	eb41 0303 	adc.w	r3, r1, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BME280_compensate_P_int64+0x2e4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800180c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001810:	462b      	mov	r3, r5
 8001812:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001816:	4642      	mov	r2, r8
 8001818:	fb02 f203 	mul.w	r2, r2, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	4641      	mov	r1, r8
 800182a:	fba2 1201 	umull	r1, r2, r2, r1
 800182e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001832:	460a      	mov	r2, r1
 8001834:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001838:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800184e:	4629      	mov	r1, r5
 8001850:	104a      	asrs	r2, r1, #1
 8001852:	4629      	mov	r1, r5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800185a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185e:	4313      	orrs	r3, r2
 8001860:	d110      	bne.n	8001884 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001862:	2300      	movs	r3, #0
 8001864:	e154      	b.n	8001b10 <BME280_compensate_P_int64+0x574>
 8001866:	bf00      	nop
 8001868:	200002d0 	.word	0x200002d0
 800186c:	200002ac 	.word	0x200002ac
 8001870:	200002aa 	.word	0x200002aa
 8001874:	200002a8 	.word	0x200002a8
 8001878:	200002a6 	.word	0x200002a6
 800187c:	200002a4 	.word	0x200002a4
 8001880:	2000029a 	.word	0x2000029a
	}
	p = 1048576-adc_P;
 8001884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001888:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001892:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a89      	subs	r1, r1, r2
 80018ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80018bc:	4629      	mov	r1, r5
 80018be:	eb61 0303 	sbc.w	r3, r1, r3
 80018c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018c8:	4622      	mov	r2, r4
 80018ca:	462b      	mov	r3, r5
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6239      	str	r1, [r7, #32]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d8:	4621      	mov	r1, r4
 80018da:	1851      	adds	r1, r2, r1
 80018dc:	61b9      	str	r1, [r7, #24]
 80018de:	4629      	mov	r1, r5
 80018e0:	414b      	adcs	r3, r1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1889      	adds	r1, r1, r2
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4649      	mov	r1, r9
 8001906:	eb43 0101 	adc.w	r1, r3, r1
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	008b      	lsls	r3, r1, #2
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001922:	4641      	mov	r1, r8
 8001924:	008a      	lsls	r2, r1, #2
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	460b      	mov	r3, r1
 8001934:	462a      	mov	r2, r5
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	4603      	mov	r3, r0
 800195c:	4622      	mov	r2, r4
 800195e:	189b      	adds	r3, r3, r2
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
 8001962:	462b      	mov	r3, r5
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001970:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001974:	f7ff f9a0 	bl	8000cb8 <__aeabi_ldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <BME280_compensate_P_int64+0x580>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	17da      	asrs	r2, r3, #31
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
 800198c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0b50      	lsrs	r0, r2, #13
 80019dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e0:	1359      	asrs	r1, r3, #13
 80019e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e6:	462b      	mov	r3, r5
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	4622      	mov	r2, r4
 80019f6:	fba2 1200 	umull	r1, r2, r2, r0
 80019fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	0e4a      	lsrs	r2, r1, #25
 8001a1e:	4629      	mov	r1, r5
 8001a20:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a24:	4629      	mov	r1, r5
 8001a26:	164b      	asrs	r3, r1, #25
 8001a28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <BME280_compensate_P_int64+0x584>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	667a      	str	r2, [r7, #100]	; 0x64
 8001a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a7e:	4621      	mov	r1, r4
 8001a80:	0cca      	lsrs	r2, r1, #19
 8001a82:	4629      	mov	r1, r5
 8001a84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a88:	4629      	mov	r1, r5
 8001a8a:	14cb      	asrs	r3, r1, #19
 8001a8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a90:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a98:	1884      	adds	r4, r0, r2
 8001a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a9c:	eb41 0303 	adc.w	r3, r1, r3
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1889      	adds	r1, r1, r2
 8001aae:	6539      	str	r1, [r7, #80]	; 0x50
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0101 	adc.w	r1, r3, r1
 8001ab6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	0a18      	lsrs	r0, r3, #8
 8001ac8:	462b      	mov	r3, r5
 8001aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ace:	462b      	mov	r3, r5
 8001ad0:	1219      	asrs	r1, r3, #8
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <BME280_compensate_P_int64+0x588>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	17da      	asrs	r2, r3, #31
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aec:	464c      	mov	r4, r9
 8001aee:	0123      	lsls	r3, r4, #4
 8001af0:	4644      	mov	r4, r8
 8001af2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001af6:	4644      	mov	r4, r8
 8001af8:	0122      	lsls	r2, r4, #4
 8001afa:	1884      	adds	r4, r0, r2
 8001afc:	603c      	str	r4, [r7, #0]
 8001afe:	eb41 0303 	adc.w	r3, r1, r3
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	200002b2 	.word	0x200002b2
 8001b20:	200002b0 	.word	0x200002b0
 8001b24:	200002ae 	.word	0x200002ae

08001b28 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <bme280_compensate_H_int32+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	039a      	lsls	r2, r3, #14
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <bme280_compensate_H_int32+0xc0>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <bme280_compensate_H_int32+0xc4>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b5c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <bme280_compensate_H_int32+0xc8>)
 8001b60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b64:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b6c:	1292      	asrs	r2, r2, #10
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <bme280_compensate_H_int32+0xcc>)
 8001b70:	8809      	ldrh	r1, [r1, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	fb00 f101 	mul.w	r1, r0, r1
 8001b7a:	12c9      	asrs	r1, r1, #11
 8001b7c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b84:	1292      	asrs	r2, r2, #10
 8001b86:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <bme280_compensate_H_int32+0xd0>)
 8001b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	13db      	asrs	r3, r3, #15
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	13d2      	asrs	r2, r2, #15
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <bme280_compensate_H_int32+0xd4>)
 8001bb0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bb6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bcc:	bfa8      	it	ge
 8001bce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	131b      	asrs	r3, r3, #12
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200002d0 	.word	0x200002d0
 8001be8:	200002b6 	.word	0x200002b6
 8001bec:	200002b8 	.word	0x200002b8
 8001bf0:	200002ba 	.word	0x200002ba
 8001bf4:	2000029e 	.word	0x2000029e
 8001bf8:	200002b4 	.word	0x200002b4
 8001bfc:	2000029c 	.word	0x2000029c

08001c00 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c04:	f7ff fc38 	bl	8001478 <BMEReadRaw>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BME280_Pressure+0x78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c16:	d104      	bne.n	8001c22 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e01b      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BME280_Pressure+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcb8 	bl	800159c <BME280_compensate_P_int64>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc80 	bl	8000534 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <BME280_Pressure+0x80>)
 8001c3a:	f7fe fe1f 	bl	800087c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e003      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc8a 	bl	8000578 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002c0 	.word	0x200002c0
 8001c7c:	2000076c 	.word	0x2000076c
 8001c80:	40700000 	.word	0x40700000

08001c84 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c88:	f7ff fbf6 	bl	8001478 <BMEReadRaw>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BME280_Humidity+0x78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d104      	bne.n	8001ca6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <BME280_Humidity+0x7c>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <BME280_Humidity+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <bme280_compensate_H_int32>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc3e 	bl	8000534 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <BME280_Humidity+0x80>)
 8001cbe:	f7fe fddd 	bl	800087c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e003      	b.n	8001cde <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BME280_Humidity+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc48 	bl	8000578 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002c4 	.word	0x200002c4
 8001d00:	20000770 	.word	0x20000770
 8001d04:	40900000 	.word	0x40900000

08001d08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001d0c:	f7ff fbb4 	bl	8001478 <BMEReadRaw>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BME280_Temperature+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1e:	d104      	bne.n	8001d2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01b      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BME280_Temperature+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fbf2 	bl	8001518 <BME280_compensate_T_int32>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <BME280_Temperature+0x80>)
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e003      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002bc 	.word	0x200002bc
 8001d84:	20000768 	.word	0x20000768
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001d94:	f7ff ff34 	bl	8001c00 <BME280_Pressure>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <BME280_Altitude+0xa8>)
 8001da8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e3c <BME280_Altitude+0xac>
 8001db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <BME280_Altitude+0xb0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e28 <BME280_Altitude+0x98>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f00b fcaf 	bl	800d744 <pow>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	4915      	ldr	r1, [pc, #84]	; (8001e44 <BME280_Altitude+0xb4>)
 8001df0:	f7fe fa62 	bl	80002b8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8001e30 <BME280_Altitude+0xa0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff03 	bl	8000c18 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e16:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
}
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ccd745e4 	.word	0xccd745e4
 8001e2c:	3fc85b95 	.word	0x3fc85b95
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40e5a540 	.word	0x40e5a540
 8001e38:	200002cc 	.word	0x200002cc
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	200002c8 	.word	0x200002c8

08001e4c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001e56:	f7ff ff9b 	bl	8001d90 <BME280_Altitude>
 8001e5a:	ee10 3a10 	vmov	r3, s0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbc1 	bl	8000628 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <BME280_Kalman_Alt+0x140>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fa02 	bl	80002bc <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fba5 	bl	8000628 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9d7 	bl	80002bc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4920      	ldr	r1, [pc, #128]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fb80 	bl	8000628 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <BME280_Kalman_Alt+0x14c>)
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb70 	bl	8000628 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <BME280_Kalman_Alt+0x150>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002d8 	.word	0x200002d8
 8001f88:	0800ebc0 	.word	0x0800ebc0
 8001f8c:	0800ebc8 	.word	0x0800ebc8
 8001f90:	200002e0 	.word	0x200002e0
 8001f94:	200002e8 	.word	0x200002e8
 8001f98:	3ff00000 	.word	0x3ff00000
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001faa:	f7ff fe29 	bl	8001c00 <BME280_Pressure>
 8001fae:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb27 	bl	8000628 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <BME280_Kalman_Press+0x12c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fc39 	bl	800087c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f7fe f944 	bl	80002b8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <BME280_Kalman_Press+0x130>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe f934 	bl	80002bc <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fadd 	bl	8000628 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <BME280_Kalman_Press+0x138>)
 8002078:	f7fe f91e 	bl	80002b8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe facd 	bl	8000628 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <BME280_Kalman_Press+0x13c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f90e 	bl	80002bc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <BME280_Kalman_Press+0x124>)
 80020a6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BME280_Kalman_Press+0x134>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002f0 	.word	0x200002f0
 80020c8:	0800ebd0 	.word	0x0800ebd0
 80020cc:	0800ebd8 	.word	0x0800ebd8
 80020d0:	200002f8 	.word	0x200002f8
 80020d4:	20000010 	.word	0x20000010
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	20000018 	.word	0x20000018

080020e0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80020ea:	f7ff fdcb 	bl	8001c84 <BME280_Humidity>
 80020ee:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <BME280_Kalman_Hum+0x128>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <BME280_Kalman_Hum+0x124>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa87 	bl	8000628 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <BME280_Kalman_Hum+0x12c>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe fb99 	bl	800087c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <BME280_Kalman_Hum+0x130>)
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa62 	bl	8000628 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	f7fe f8a4 	bl	80002b8 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BME280_Kalman_Hum+0x130>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa53 	bl	8000628 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	491e      	ldr	r1, [pc, #120]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BME280_Kalman_Hum+0x130>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <BME280_Kalman_Hum+0x138>)
 80021b8:	f7fe f87e 	bl	80002b8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <BME280_Kalman_Hum+0x13c>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BME280_Kalman_Hum+0x134>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	20000300 	.word	0x20000300
 8002208:	0800ebe0 	.word	0x0800ebe0
 800220c:	0800ebe8 	.word	0x0800ebe8
 8002210:	20000308 	.word	0x20000308
 8002214:	20000020 	.word	0x20000020
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	20000028 	.word	0x20000028

08002220 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800222a:	f7ff fd6d 	bl	8001d08 <BME280_Temperature>
 800222e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9de 	bl	8000628 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <BME280_Kalman_Temp+0x12c>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f81f 	bl	80002bc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe faf9 	bl	800087c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <BME280_Kalman_Temp+0x130>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe f804 	bl	80002b8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9b3 	bl	8000628 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022da:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BME280_Kalman_Temp+0x128>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f99d 	bl	8000628 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BME280_Kalman_Temp+0x138>)
 80022f8:	f7fd ffde 	bl	80002b8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <BME280_Kalman_Temp+0x13c>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	ec43 2b17 	vmov	d7, r2, r3
}
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	20000310 	.word	0x20000310
 8002348:	0800ebf0 	.word	0x0800ebf0
 800234c:	0800ebf8 	.word	0x0800ebf8
 8002350:	20000318 	.word	0x20000318
 8002354:	20000030 	.word	0x20000030
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	20000038 	.word	0x20000038

08002360 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <vApplicationGetIdleTaskMemory+0x2c>)
 8002370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <vApplicationGetIdleTaskMemory+0x30>)
 8002376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000320 	.word	0x20000320
 8002390:	200003c0 	.word	0x200003c0

08002394 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3371      	adds	r3, #113	; 0x71
 80023ac:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80023ae:	e002      	b.n	80023b6 <prv_parse_number+0x22>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <prv_parse_number+0x30>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d0f5      	beq.n	80023b0 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b2d      	cmp	r3, #45	; 0x2d
 80023ca:	d104      	bne.n	80023d6 <prv_parse_number+0x42>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <prv_parse_number+0x44>
 80023d6:	2300      	movs	r3, #0
 80023d8:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80023da:	e00d      	b.n	80023f8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	461a      	mov	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3b30      	subs	r3, #48	; 0x30
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <prv_parse_number+0x7a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b2f      	cmp	r3, #47	; 0x2f
 8002404:	d903      	bls.n	800240e <prv_parse_number+0x7a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b39      	cmp	r3, #57	; 0x39
 800240c:	d9e6      	bls.n	80023dc <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <prv_parse_number+0x86>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	425b      	negs	r3, r3
 8002418:	e000      	b.n	800241c <prv_parse_number+0x88>
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3371      	adds	r3, #113	; 0x71
 800243c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800243e:	e002      	b.n	8002446 <prv_parse_float_number+0x1e>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <prv_parse_float_number+0x2c>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b20      	cmp	r3, #32
 8002452:	d0f5      	beq.n	8002440 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002454:	2100      	movs	r1, #0
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f009 f906 	bl	800b668 <strtod>
 800245c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002464:	ec43 2b17 	vmov	d7, r2, r3
}
 8002468:	eeb0 0a47 	vmov.f32	s0, s14
 800246c:	eef0 0a67 	vmov.f32	s1, s15
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002480:	2100      	movs	r1, #0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffd0 	bl	8002428 <prv_parse_float_number>
 8002488:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800248c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002490:	f7fe fb7a 	bl	8000b88 <__aeabi_d2iz>
 8002494:	4603      	mov	r3, r0
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <prv_parse_lat_long+0x94>)
 8002498:	fb82 1203 	smull	r1, r2, r2, r3
 800249c:	1152      	asrs	r2, r2, #5
 800249e:	17db      	asrs	r3, r3, #31
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f856 	bl	8000554 <__aeabi_i2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <prv_parse_lat_long+0x98>)
 80024b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ba:	f7fe f8b5 	bl	8000628 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c6:	f7fd fef7 	bl	80002b8 <__aeabi_dsub>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <prv_parse_lat_long+0x9c>)
 80024d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024dc:	f7fe f9ce 	bl	800087c <__aeabi_ddiv>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024e8:	f7fd fee8 	bl	80002bc <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80024f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80024fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002500:	eef0 0a67 	vmov.f32	s1, s15
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	51eb851f 	.word	0x51eb851f
 8002510:	40590000 	.word	0x40590000
 8002514:	404e0000 	.word	0x404e0000

08002518 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002528:	2900      	cmp	r1, #0
 800252a:	d169      	bne.n	8002600 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3371      	adds	r3, #113	; 0x71
 8002530:	2206      	movs	r2, #6
 8002532:	49ba      	ldr	r1, [pc, #744]	; (800281c <prv_parse_term+0x304>)
 8002534:	4618      	mov	r0, r3
 8002536:	f009 f9b0 	bl	800b89a <strncmp>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <prv_parse_term+0x3c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3371      	adds	r3, #113	; 0x71
 8002544:	2206      	movs	r2, #6
 8002546:	49b6      	ldr	r1, [pc, #728]	; (8002820 <prv_parse_term+0x308>)
 8002548:	4618      	mov	r0, r3
 800254a:	f009 f9a6 	bl	800b89a <strncmp>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800255c:	e04e      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3371      	adds	r3, #113	; 0x71
 8002562:	2206      	movs	r2, #6
 8002564:	49af      	ldr	r1, [pc, #700]	; (8002824 <prv_parse_term+0x30c>)
 8002566:	4618      	mov	r0, r3
 8002568:	f009 f997 	bl	800b89a <strncmp>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <prv_parse_term+0x6e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3371      	adds	r3, #113	; 0x71
 8002576:	2206      	movs	r2, #6
 8002578:	49ab      	ldr	r1, [pc, #684]	; (8002828 <prv_parse_term+0x310>)
 800257a:	4618      	mov	r0, r3
 800257c:	f009 f98d 	bl	800b89a <strncmp>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800258e:	e035      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3371      	adds	r3, #113	; 0x71
 8002594:	2206      	movs	r2, #6
 8002596:	49a5      	ldr	r1, [pc, #660]	; (800282c <prv_parse_term+0x314>)
 8002598:	4618      	mov	r0, r3
 800259a:	f009 f97e 	bl	800b89a <strncmp>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <prv_parse_term+0xa0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3371      	adds	r3, #113	; 0x71
 80025a8:	2206      	movs	r2, #6
 80025aa:	49a1      	ldr	r1, [pc, #644]	; (8002830 <prv_parse_term+0x318>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f009 f974 	bl	800b89a <strncmp>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2203      	movs	r2, #3
 80025bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025c0:	e01c      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3371      	adds	r3, #113	; 0x71
 80025c6:	2206      	movs	r2, #6
 80025c8:	499a      	ldr	r1, [pc, #616]	; (8002834 <prv_parse_term+0x31c>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f009 f965 	bl	800b89a <strncmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <prv_parse_term+0xd2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3371      	adds	r3, #113	; 0x71
 80025da:	2206      	movs	r2, #6
 80025dc:	4996      	ldr	r1, [pc, #600]	; (8002838 <prv_parse_term+0x320>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f009 f95b 	bl	800b89a <strncmp>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2204      	movs	r2, #4
 80025ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025f2:	e003      	b.n	80025fc <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e231      	b.n	8002a64 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002606:	2900      	cmp	r1, #0
 8002608:	f000 822b 	beq.w	8002a62 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002612:	2901      	cmp	r1, #1
 8002614:	f040 80c9 	bne.w	80027aa <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800261e:	3b01      	subs	r3, #1
 8002620:	2b0a      	cmp	r3, #10
 8002622:	f200 8213 	bhi.w	8002a4c <prv_parse_term+0x534>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <prv_parse_term+0x114>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002659 	.word	0x08002659
 8002630:	080026d3 	.word	0x080026d3
 8002634:	080026e9 	.word	0x080026e9
 8002638:	08002713 	.word	0x08002713
 800263c:	08002729 	.word	0x08002729
 8002640:	08002753 	.word	0x08002753
 8002644:	08002767 	.word	0x08002767
 8002648:	08002a4d 	.word	0x08002a4d
 800264c:	0800277b 	.word	0x0800277b
 8002650:	08002a4d 	.word	0x08002a4d
 8002654:	08002793 	.word	0x08002793
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800265e:	3b30      	subs	r3, #48	; 0x30
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002672:	4413      	add	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3b30      	subs	r3, #48	; 0x30
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002686:	3b30      	subs	r3, #48	; 0x30
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800269a:	4413      	add	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b30      	subs	r3, #48	; 0x30
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80026ae:	3b30      	subs	r3, #48	; 0x30
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80026c2:	4413      	add	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b30      	subs	r3, #48	; 0x30
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80026d0:	e1c7      	b.n	8002a62 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fed0 	bl	8002478 <prv_parse_lat_long>
 80026d8:	eeb0 7a40 	vmov.f32	s14, s0
 80026dc:	eef0 7a60 	vmov.f32	s15, s1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80026e6:	e1bc      	b.n	8002a62 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026ee:	2b53      	cmp	r3, #83	; 0x53
 80026f0:	d005      	beq.n	80026fe <prv_parse_term+0x1e6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026f8:	2b73      	cmp	r3, #115	; 0x73
 80026fa:	f040 81a9 	bne.w	8002a50 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002704:	4690      	mov	r8, r2
 8002706:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8002710:	e19e      	b.n	8002a50 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff feb0 	bl	8002478 <prv_parse_lat_long>
 8002718:	eeb0 7a40 	vmov.f32	s14, s0
 800271c:	eef0 7a60 	vmov.f32	s15, s1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002726:	e19c      	b.n	8002a62 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800272e:	2b57      	cmp	r3, #87	; 0x57
 8002730:	d005      	beq.n	800273e <prv_parse_term+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002738:	2b77      	cmp	r3, #119	; 0x77
 800273a:	f040 818b 	bne.w	8002a54 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002744:	4614      	mov	r4, r2
 8002746:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002750:	e180      	b.n	8002a54 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002752:	2100      	movs	r1, #0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fe1d 	bl	8002394 <prv_parse_number>
 800275a:	4603      	mov	r3, r0
 800275c:	b2da      	uxtb	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002764:	e17d      	b.n	8002a62 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fe13 	bl	8002394 <prv_parse_number>
 800276e:	4603      	mov	r3, r0
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002778:	e173      	b.n	8002a62 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fe53 	bl	8002428 <prv_parse_float_number>
 8002782:	eeb0 7a40 	vmov.f32	s14, s0
 8002786:	eef0 7a60 	vmov.f32	s15, s1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002790:	e167      	b.n	8002a62 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002792:	2100      	movs	r1, #0
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fe47 	bl	8002428 <prv_parse_float_number>
 800279a:	eeb0 7a40 	vmov.f32	s14, s0
 800279e:	eef0 7a60 	vmov.f32	s15, s1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80027a8:	e15b      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80027b0:	2902      	cmp	r1, #2
 80027b2:	f040 8083 	bne.w	80028bc <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80027bc:	3b02      	subs	r3, #2
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d860      	bhi.n	8002884 <prv_parse_term+0x36c>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <prv_parse_term+0x2b0>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002885 	.word	0x08002885
 80027d0:	08002885 	.word	0x08002885
 80027d4:	08002885 	.word	0x08002885
 80027d8:	08002885 	.word	0x08002885
 80027dc:	08002885 	.word	0x08002885
 80027e0:	08002885 	.word	0x08002885
 80027e4:	08002885 	.word	0x08002885
 80027e8:	08002885 	.word	0x08002885
 80027ec:	08002885 	.word	0x08002885
 80027f0:	08002885 	.word	0x08002885
 80027f4:	08002885 	.word	0x08002885
 80027f8:	08002885 	.word	0x08002885
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	08002855 	.word	0x08002855
 8002804:	0800286d 	.word	0x0800286d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fdc2 	bl	8002394 <prv_parse_number>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800281a:	e122      	b.n	8002a62 <prv_parse_term+0x54a>
 800281c:	0800eaa8 	.word	0x0800eaa8
 8002820:	0800eab0 	.word	0x0800eab0
 8002824:	0800eab8 	.word	0x0800eab8
 8002828:	0800eac0 	.word	0x0800eac0
 800282c:	0800eac8 	.word	0x0800eac8
 8002830:	0800ead0 	.word	0x0800ead0
 8002834:	0800ead8 	.word	0x0800ead8
 8002838:	0800eae0 	.word	0x0800eae0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800283c:	2100      	movs	r1, #0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fdf2 	bl	8002428 <prv_parse_float_number>
 8002844:	eeb0 7a40 	vmov.f32	s14, s0
 8002848:	eef0 7a60 	vmov.f32	s15, s1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002852:	e106      	b.n	8002a62 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002854:	2100      	movs	r1, #0
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fde6 	bl	8002428 <prv_parse_float_number>
 800285c:	eeb0 7a40 	vmov.f32	s14, s0
 8002860:	eef0 7a60 	vmov.f32	s15, s1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800286a:	e0fa      	b.n	8002a62 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800286c:	2100      	movs	r1, #0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fdda 	bl	8002428 <prv_parse_float_number>
 8002874:	eeb0 7a40 	vmov.f32	s14, s0
 8002878:	eef0 7a60 	vmov.f32	s15, s1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002882:	e0ee      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800288a:	2b02      	cmp	r3, #2
 800288c:	f240 80e4 	bls.w	8002a58 <prv_parse_term+0x540>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002896:	2b0e      	cmp	r3, #14
 8002898:	f200 80de 	bhi.w	8002a58 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800289c:	2100      	movs	r1, #0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fd78 	bl	8002394 <prv_parse_number>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028ac:	3b03      	subs	r3, #3
 80028ae:	b2d1      	uxtb	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80028ba:	e0cd      	b.n	8002a58 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028c2:	2903      	cmp	r1, #3
 80028c4:	d11b      	bne.n	80028fe <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d002      	beq.n	80028d6 <prv_parse_term+0x3be>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d00a      	beq.n	80028ea <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80028d4:	e0c5      	b.n	8002a62 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80028d6:	2100      	movs	r1, #0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fd5b 	bl	8002394 <prv_parse_number>
 80028de:	4603      	mov	r3, r0
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80028e8:	e0bb      	b.n	8002a62 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80028ea:	2100      	movs	r1, #0
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fd51 	bl	8002394 <prv_parse_number>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80028fc:	e0b1      	b.n	8002a62 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002904:	2904      	cmp	r1, #4
 8002906:	f040 80ac 	bne.w	8002a62 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002910:	3902      	subs	r1, #2
 8002912:	2909      	cmp	r1, #9
 8002914:	f200 80a2 	bhi.w	8002a5c <prv_parse_term+0x544>
 8002918:	a001      	add	r0, pc, #4	; (adr r0, 8002920 <prv_parse_term+0x408>)
 800291a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002949 	.word	0x08002949
 8002924:	08002a5d 	.word	0x08002a5d
 8002928:	08002a5d 	.word	0x08002a5d
 800292c:	08002a5d 	.word	0x08002a5d
 8002930:	08002a5d 	.word	0x08002a5d
 8002934:	08002963 	.word	0x08002963
 8002938:	0800297b 	.word	0x0800297b
 800293c:	08002993 	.word	0x08002993
 8002940:	08002a0d 	.word	0x08002a0d
 8002944:	08002a25 	.word	0x08002a25
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800294e:	2b41      	cmp	r3, #65	; 0x41
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002960:	e07f      	b.n	8002a62 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002962:	2100      	movs	r1, #0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fd5f 	bl	8002428 <prv_parse_float_number>
 800296a:	eeb0 7a40 	vmov.f32	s14, s0
 800296e:	eef0 7a60 	vmov.f32	s15, s1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002978:	e073      	b.n	8002a62 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fd53 	bl	8002428 <prv_parse_float_number>
 8002982:	eeb0 7a40 	vmov.f32	s14, s0
 8002986:	eef0 7a60 	vmov.f32	s15, s1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002990:	e067      	b.n	8002a62 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002998:	3b30      	subs	r3, #48	; 0x30
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80029ac:	4413      	add	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3b30      	subs	r3, #48	; 0x30
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80029c0:	3b30      	subs	r3, #48	; 0x30
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029d4:	4413      	add	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3b30      	subs	r3, #48	; 0x30
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80029e8:	3b30      	subs	r3, #48	; 0x30
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80029fc:	4413      	add	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3b30      	subs	r3, #48	; 0x30
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002a0a:	e02a      	b.n	8002a62 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fd0a 	bl	8002428 <prv_parse_float_number>
 8002a14:	eeb0 7a40 	vmov.f32	s14, s0
 8002a18:	eef0 7a60 	vmov.f32	s15, s1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002a22:	e01e      	b.n	8002a62 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a2a:	2957      	cmp	r1, #87	; 0x57
 8002a2c:	d004      	beq.n	8002a38 <prv_parse_term+0x520>
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a34:	2977      	cmp	r1, #119	; 0x77
 8002a36:	d113      	bne.n	8002a60 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002a4a:	e009      	b.n	8002a60 <prv_parse_term+0x548>
                break;
 8002a4c:	bf00      	nop
 8002a4e:	e008      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a50:	bf00      	nop
 8002a52:	e006      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a54:	bf00      	nop
 8002a56:	e004      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a60:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a6e:	bf00      	nop

08002a70 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a7e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a80:	d90d      	bls.n	8002a9e <prv_check_crc+0x2e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a88:	2b39      	cmp	r3, #57	; 0x39
 8002a8a:	d808      	bhi.n	8002a9e <prv_check_crc+0x2e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a92:	3b30      	subs	r3, #48	; 0x30
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	b25a      	sxtb	r2, r3
 8002a9c:	e026      	b.n	8002aec <prv_check_crc+0x7c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aa4:	2b60      	cmp	r3, #96	; 0x60
 8002aa6:	d90d      	bls.n	8002ac4 <prv_check_crc+0x54>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aae:	2b7a      	cmp	r3, #122	; 0x7a
 8002ab0:	d808      	bhi.n	8002ac4 <prv_check_crc+0x54>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ab8:	3b57      	subs	r3, #87	; 0x57
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	b25a      	sxtb	r2, r3
 8002ac2:	e013      	b.n	8002aec <prv_check_crc+0x7c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d90d      	bls.n	8002aea <prv_check_crc+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ad4:	2b5a      	cmp	r3, #90	; 0x5a
 8002ad6:	d808      	bhi.n	8002aea <prv_check_crc+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ade:	3b37      	subs	r3, #55	; 0x37
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	b25a      	sxtb	r2, r3
 8002ae8:	e000      	b.n	8002aec <prv_check_crc+0x7c>
 8002aea:	2200      	movs	r2, #0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002af2:	2b2f      	cmp	r3, #47	; 0x2f
 8002af4:	d90c      	bls.n	8002b10 <prv_check_crc+0xa0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002afc:	2b39      	cmp	r3, #57	; 0x39
 8002afe:	d807      	bhi.n	8002b10 <prv_check_crc+0xa0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	e028      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b16:	2b60      	cmp	r3, #96	; 0x60
 8002b18:	d90e      	bls.n	8002b38 <prv_check_crc+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b20:	2b7a      	cmp	r3, #122	; 0x7a
 8002b22:	d809      	bhi.n	8002b38 <prv_check_crc+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b2a:	3b57      	subs	r3, #87	; 0x57
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	e014      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d90e      	bls.n	8002b60 <prv_check_crc+0xf0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b48:	2b5a      	cmp	r3, #90	; 0x5a
 8002b4a:	d809      	bhi.n	8002b60 <prv_check_crc+0xf0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b52:	3b37      	subs	r3, #55	; 0x37
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	e000      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b60:	2300      	movs	r3, #0
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d136      	bne.n	8002c06 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c04:	e061      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d121      	bne.n	8002c54 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	33a1      	adds	r3, #161	; 0xa1
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f008 ff00 	bl	800ba52 <memcpy>
 8002c52:	e03a      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d106      	bne.n	8002c6c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002c6a:	e02e      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d129      	bne.n	8002cca <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002cdc:	22b0      	movs	r2, #176	; 0xb0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f008 fdd2 	bl	800b88a <memset>
    return 1;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002d00:	e0ad      	b.n	8002e5e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b24      	cmp	r3, #36	; 0x24
 8002d08:	d128      	bne.n	8002d5c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3370      	adds	r3, #112	; 0x70
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f008 fdb9 	bl	800b88a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d1e:	2b0b      	cmp	r3, #11
 8002d20:	f200 8097 	bhi.w	8002e52 <lwgps_process+0x162>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d5a:	e07a      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b2c      	cmp	r3, #44	; 0x2c
 8002d62:	d11d      	bne.n	8002da0 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fbd7 	bl	8002518 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4053      	eors	r3, r2
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002d9e:	e058      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b2a      	cmp	r3, #42	; 0x2a
 8002da6:	d117      	bne.n	8002dd8 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fbb5 	bl	8002518 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002dd6:	e03c      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0d      	cmp	r3, #13
 8002dde:	d109      	bne.n	8002df4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fe45 	bl	8002a70 <prv_check_crc>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d032      	beq.n	8002e52 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff feca 	bl	8002b86 <prv_copy_from_tmp_memory>
 8002df2:	e02e      	b.n	8002e52 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4053      	eors	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e18:	2b0b      	cmp	r3, #11
 8002e1a:	d81a      	bhi.n	8002e52 <lwgps_process+0x162>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e22:	4619      	mov	r1, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af4e 	bne.w	8002d02 <lwgps_process+0x12>
        }
    }
    return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_RxCpltCallback>:
typedef union {
	float sayi;
	unsigned char array[4];
} float32toInt8;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_UART_RxCpltCallback+0x68>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d127      	bne.n	8002ed0 <HAL_UART_RxCpltCallback+0x60>
		if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d010      	beq.n	8002eaa <HAL_UART_RxCpltCallback+0x3a>
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	b2d1      	uxtb	r1, r2
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e9c:	7011      	strb	r1, [r2, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002ea2:	7819      	ldrb	r1, [r3, #0]
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002ea6:	5499      	strb	r1, [r3, r2]
 8002ea8:	e00d      	b.n	8002ec6 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index + 1);
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_UART_RxCpltCallback+0x78>)
 8002eb6:	f7ff ff1b 	bl	8002cf0 <lwgps_process>
			rx_index = 0;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <HAL_UART_RxCpltCallback+0x68>)
 8002ecc:	f004 fa65 	bl	800739a <HAL_UART_Receive_IT>
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200006a0 	.word	0x200006a0
 8002edc:	20000921 	.word	0x20000921
 8002ee0:	20000920 	.word	0x20000920
 8002ee4:	200008a0 	.word	0x200008a0
 8002ee8:	200007f0 	.word	0x200007f0

08002eec <initSensorBuffer>:

//roketin aşağı gittiği anlayan verilerin doldurulduğu buffer'i sıfırlayan kod.
void initSensorBuffer() {
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	e009      	b.n	8002f0c <initSensorBuffer+0x20>
		sensorValues[i] = 0.0f;
 8002ef8:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <initSensorBuffer+0x34>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b18      	cmp	r3, #24
 8002f10:	ddf2      	ble.n	8002ef8 <initSensorBuffer+0xc>
	}
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	200006fc 	.word	0x200006fc

08002f24 <processSensorValues>:

//roketin aşağı indiğini anlayan kod (buffer'a veri atıp karşılaştırma yapıyor)
void processSensorValues() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i += 4) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e023      	b.n	8002f78 <processSensorValues+0x54>
		if (i + 24 < BUFFER_SIZE) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	dc18      	bgt.n	8002f68 <processSensorValues+0x44>
			if (sensorValues[i] >= sensorValues[i + 24]) {
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <processSensorValues+0x64>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3318      	adds	r3, #24
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <processSensorValues+0x64>)
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	db03      	blt.n	8002f62 <processSensorValues+0x3e>
				flagDown = 1;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <processSensorValues+0x68>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e002      	b.n	8002f68 <processSensorValues+0x44>
			} else {
				flagDown = 0;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <processSensorValues+0x68>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
			}
		}

		// Buffer'ı sıfırla
		if (i == BUFFER_SIZE - 4) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b15      	cmp	r3, #21
 8002f6c:	d101      	bne.n	8002f72 <processSensorValues+0x4e>
			initSensorBuffer();
 8002f6e:	f7ff ffbd 	bl	8002eec <initSensorBuffer>
	for (int i = 0; i < BUFFER_SIZE; i += 4) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	ddd8      	ble.n	8002f30 <processSensorValues+0xc>
		}
	}
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200006fc 	.word	0x200006fc
 8002f8c:	200007e4 	.word	0x200007e4

08002f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b0a8      	sub	sp, #160	; 0xa0
 8002f94:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f96:	f001 fbc3 	bl	8004720 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f9a:	f000 f8af 	bl	80030fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f9e:	f000 f9df 	bl	8003360 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002fa2:	f000 f90b 	bl	80031bc <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8002fa6:	f000 f9b1 	bl	800330c <MX_USART6_UART_Init>
	MX_USART2_UART_Init();
 8002faa:	f000 f985 	bl	80032b8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8002fae:	f000 f933 	bl	8003218 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 8002fb2:	4843      	ldr	r0, [pc, #268]	; (80030c0 <main+0x130>)
 8002fb4:	f003 fc90 	bl	80068d8 <HAL_TIM_Base_Init>
	MPU6050_Init();
 8002fb8:	f000 fbc0 	bl	800373c <MPU6050_Init>
	lwgps_init(&gps);
 8002fbc:	4841      	ldr	r0, [pc, #260]	; (80030c4 <main+0x134>)
 8002fbe:	f7ff fe89 	bl	8002cd4 <lwgps_init>
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4940      	ldr	r1, [pc, #256]	; (80030c8 <main+0x138>)
 8002fc6:	4841      	ldr	r0, [pc, #260]	; (80030cc <main+0x13c>)
 8002fc8:	f004 f9e7 	bl	800739a <HAL_UART_Receive_IT>
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002fcc:	2304      	movs	r3, #4
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2105      	movs	r1, #5
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7fe f976 	bl	80012cc <BME280_Config>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of BinSemSep */
	osSemaphoreDef(BinSemSep);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	BinSemSepHandle = osSemaphoreCreate(osSemaphore(BinSemSep), 1);
 8002fec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f005 f9fb 	bl	80083ee <osSemaphoreCreate>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4a35      	ldr	r2, [pc, #212]	; (80030d0 <main+0x140>)
 8002ffc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002ffe:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <main+0x144>)
 8003000:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003004:	461d      	mov	r5, r3
 8003006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800300a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800300e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003012:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f005 f988 	bl	800832e <osThreadCreate>
 800301e:	4603      	mov	r3, r0
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <main+0x148>)
 8003022:	6013      	str	r3, [r2, #0]

	/* definition and creation of SeperationTask */
	osThreadDef(SeperationTask, StartSeperationTask, osPriorityAboveNormal, 0,
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <main+0x14c>)
 8003026:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800302a:	461d      	mov	r5, r3
 800302c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			128);
	SeperationTaskHandle = osThreadCreate(osThread(SeperationTask), NULL);
 8003038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f005 f975 	bl	800832e <osThreadCreate>
 8003044:	4603      	mov	r3, r0
 8003046:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <main+0x150>)
 8003048:	6013      	str	r3, [r2, #0]

	/* definition and creation of SepSensorTask */
	osThreadDef(SepSensorTask, StartSepSensorTask, osPriorityNormal, 0, 128);
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <main+0x154>)
 800304c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003050:	461d      	mov	r5, r3
 8003052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800305a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SepSensorTaskHandle = osThreadCreate(osThread(SepSensorTask), NULL);
 800305e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f005 f962 	bl	800832e <osThreadCreate>
 800306a:	4603      	mov	r3, r0
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <main+0x158>)
 800306e:	6013      	str	r3, [r2, #0]

	/* definition and creation of GPSTask */
	osThreadDef(GPSTask, StartGPSTask, osPriorityBelowNormal, 0, 128);
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <main+0x15c>)
 8003072:	f107 0420 	add.w	r4, r7, #32
 8003076:	461d      	mov	r5, r3
 8003078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800307a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800307c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 8003084:	f107 0320 	add.w	r3, r7, #32
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f005 f94f 	bl	800832e <osThreadCreate>
 8003090:	4603      	mov	r3, r0
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <main+0x160>)
 8003094:	6013      	str	r3, [r2, #0]

	/* definition and creation of CommTask */
	osThreadDef(CommTask, StartCommTask, osPriorityLow, 0, 128);
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <main+0x164>)
 8003098:	1d3c      	adds	r4, r7, #4
 800309a:	461d      	mov	r5, r3
 800309c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800309e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommTaskHandle = osThreadCreate(osThread(CommTask), NULL);
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f005 f93e 	bl	800832e <osThreadCreate>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <main+0x168>)
 80030b6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80030b8:	f005 f932 	bl	8008320 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80030bc:	e7fe      	b.n	80030bc <main+0x12c>
 80030be:	bf00      	nop
 80030c0:	20000614 	.word	0x20000614
 80030c4:	200007f0 	.word	0x200007f0
 80030c8:	20000921 	.word	0x20000921
 80030cc:	200006a0 	.word	0x200006a0
 80030d0:	200006f8 	.word	0x200006f8
 80030d4:	0800eaf4 	.word	0x0800eaf4
 80030d8:	200006e4 	.word	0x200006e4
 80030dc:	0800eb20 	.word	0x0800eb20
 80030e0:	200006e8 	.word	0x200006e8
 80030e4:	0800eb4c 	.word	0x0800eb4c
 80030e8:	200006ec 	.word	0x200006ec
 80030ec:	0800eb70 	.word	0x0800eb70
 80030f0:	200006f0 	.word	0x200006f0
 80030f4:	0800eb98 	.word	0x0800eb98
 80030f8:	200006f4 	.word	0x200006f4

080030fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b094      	sub	sp, #80	; 0x50
 8003100:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	2234      	movs	r2, #52	; 0x34
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f008 fbbd 	bl	800b88a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <SystemClock_Config+0xb8>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <SystemClock_Config+0xb8>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6413      	str	r3, [r2, #64]	; 0x40
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <SystemClock_Config+0xb8>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800313c:	2300      	movs	r3, #0
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <SystemClock_Config+0xbc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <SystemClock_Config+0xbc>)
 800314a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <SystemClock_Config+0xbc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800315c:	2302      	movs	r3, #2
 800315e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003160:	2301      	movs	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003164:	2310      	movs	r3, #16
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4618      	mov	r0, r3
 8003172:	f003 f913 	bl	800639c <HAL_RCC_OscConfig>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <SystemClock_Config+0x84>
		Error_Handler();
 800317c:	f000 fad9 	bl	8003732 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003180:	230f      	movs	r3, #15
 8003182:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fe08 	bl	8005db0 <HAL_RCC_ClockConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <SystemClock_Config+0xae>
		Error_Handler();
 80031a6:	f000 fac4 	bl	8003732 <Error_Handler>
	}
}
 80031aa:	bf00      	nop
 80031ac:	3750      	adds	r7, #80	; 0x50
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000

080031bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <MX_I2C1_Init+0x50>)
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <MX_I2C1_Init+0x54>)
 80031c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <MX_I2C1_Init+0x50>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_I2C1_Init+0x58>)
 80031ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <MX_I2C1_Init+0x50>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MX_I2C1_Init+0x50>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_I2C1_Init+0x50>)
 80031da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_I2C1_Init+0x50>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_I2C1_Init+0x50>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <MX_I2C1_Init+0x50>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_I2C1_Init+0x50>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_I2C1_Init+0x50>)
 80031fa:	f001 fe19 	bl	8004e30 <HAL_I2C_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003204:	f000 fa95 	bl	8003732 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200005c0 	.word	0x200005c0
 8003210:	40005400 	.word	0x40005400
 8003214:	000186a0 	.word	0x000186a0

08003218 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800322c:	463b      	mov	r3, r7
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <MX_TIM1_Init+0x9c>)
 8003238:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 90 - 1;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <MX_TIM1_Init+0x98>)
 800323c:	2259      	movs	r2, #89	; 0x59
 800323e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003248:	2263      	movs	r2, #99	; 0x63
 800324a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <MX_TIM1_Init+0x98>)
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <MX_TIM1_Init+0x98>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800325e:	4814      	ldr	r0, [pc, #80]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003260:	f003 fb3a 	bl	80068d8 <HAL_TIM_Base_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM1_Init+0x56>
		Error_Handler();
 800326a:	f000 fa62 	bl	8003732 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003272:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	4619      	mov	r1, r3
 800327a:	480d      	ldr	r0, [pc, #52]	; (80032b0 <MX_TIM1_Init+0x98>)
 800327c:	f003 fcf4 	bl	8006c68 <HAL_TIM_ConfigClockSource>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM1_Init+0x72>
		Error_Handler();
 8003286:	f000 fa54 	bl	8003732 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003292:	463b      	mov	r3, r7
 8003294:	4619      	mov	r1, r3
 8003296:	4806      	ldr	r0, [pc, #24]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003298:	f003 ff10 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80032a2:	f000 fa46 	bl	8003732 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000614 	.word	0x20000614
 80032b4:	40010000 	.word	0x40010000

080032b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <MX_USART2_UART_Init+0x50>)
 80032c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032f0:	f003 ff74 	bl	80071dc <HAL_UART_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80032fa:	f000 fa1a 	bl	8003732 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000065c 	.word	0x2000065c
 8003308:	40004400 	.word	0x40004400

0800330c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <MX_USART6_UART_Init+0x50>)
 8003314:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003318:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800331c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003332:	220c      	movs	r2, #12
 8003334:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003344:	f003 ff4a 	bl	80071dc <HAL_UART_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800334e:	f000 f9f0 	bl	8003732 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200006a0 	.word	0x200006a0
 800335c:	40011400 	.word	0x40011400

08003360 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <MX_GPIO_Init+0x9c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <MX_GPIO_Init+0x9c>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <MX_GPIO_Init+0x9c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <MX_GPIO_Init+0x9c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a18      	ldr	r2, [pc, #96]	; (80033fc <MX_GPIO_Init+0x9c>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SECOND_SEPERATION_Pin | FIRST_SEPERATION_Pin,
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033d0:	480b      	ldr	r0, [pc, #44]	; (8003400 <MX_GPIO_Init+0xa0>)
 80033d2:	f001 fd13 	bl	8004dfc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : SECOND_SEPERATION_Pin FIRST_SEPERATION_Pin */
	GPIO_InitStruct.Pin = SECOND_SEPERATION_Pin | FIRST_SEPERATION_Pin;
 80033d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033dc:	2301      	movs	r3, #1
 80033de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_GPIO_Init+0xa0>)
 80033f0:	f001 fb70 	bl	8004ad4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000

08003404 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800340c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003410:	f004 ffd9 	bl	80083c6 <osDelay>
 8003414:	e7fa      	b.n	800340c <StartDefaultTask+0x8>
	...

08003418 <StartSeperationTask>:
 * @brief Function implementing the SeperationTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSeperationTask */
void StartSeperationTask(void const *argument) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSeperationTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <StartSeperationTask+0x34>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	4618      	mov	r0, r3
 800342a:	f005 f813 	bl	8008454 <osSemaphoreWait>
		deneme++;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <StartSeperationTask+0x38>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <StartSeperationTask+0x38>)
 8003436:	6013      	str	r3, [r2, #0]
		osSemaphoreRelease(BinSemSepHandle);
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <StartSeperationTask+0x34>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f005 f857 	bl	80084f0 <osSemaphoreRelease>
		osDelay(500);
 8003442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003446:	f004 ffbe 	bl	80083c6 <osDelay>
		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 800344a:	e7e9      	b.n	8003420 <StartSeperationTask+0x8>
 800344c:	200006f8 	.word	0x200006f8
 8003450:	200007e8 	.word	0x200007e8

08003454 <StartSepSensorTask>:
 * @brief Function implementing the SepSensorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSepSensorTask */
void StartSepSensorTask(void const *argument) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSepSensorTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 800345c:	4b77      	ldr	r3, [pc, #476]	; (800363c <StartSepSensorTask+0x1e8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fff5 	bl	8008454 <osSemaphoreWait>

		acX = MPU6050_Kalman_Accel_X();
 800346a:	f000 fb9b 	bl	8003ba4 <MPU6050_Kalman_Accel_X>
 800346e:	ec53 2b10 	vmov	r2, r3, d0
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fbcf 	bl	8000c18 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	4a70      	ldr	r2, [pc, #448]	; (8003640 <StartSepSensorTask+0x1ec>)
 800347e:	6013      	str	r3, [r2, #0]
		acY = MPU6050_Kalman_Accel_Y();
 8003480:	f000 fc32 	bl	8003ce8 <MPU6050_Kalman_Accel_Y>
 8003484:	ec53 2b10 	vmov	r2, r3, d0
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f7fd fbc4 	bl	8000c18 <__aeabi_d2f>
 8003490:	4603      	mov	r3, r0
 8003492:	4a6c      	ldr	r2, [pc, #432]	; (8003644 <StartSepSensorTask+0x1f0>)
 8003494:	6013      	str	r3, [r2, #0]
		acZ = MPU6050_Kalman_Accel_Z();
 8003496:	f000 fcc9 	bl	8003e2c <MPU6050_Kalman_Accel_Z>
 800349a:	ec53 2b10 	vmov	r2, r3, d0
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7fd fbb9 	bl	8000c18 <__aeabi_d2f>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4a67      	ldr	r2, [pc, #412]	; (8003648 <StartSepSensorTask+0x1f4>)
 80034aa:	6013      	str	r3, [r2, #0]
		gyX = MPU6050_Kalman_Gyro_X();
 80034ac:	f000 fd60 	bl	8003f70 <MPU6050_Kalman_Gyro_X>
 80034b0:	ec53 2b10 	vmov	r2, r3, d0
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd fbae 	bl	8000c18 <__aeabi_d2f>
 80034bc:	4603      	mov	r3, r0
 80034be:	4a63      	ldr	r2, [pc, #396]	; (800364c <StartSepSensorTask+0x1f8>)
 80034c0:	6013      	str	r3, [r2, #0]
		gyY = MPU6050_Kalman_Gyro_X();
 80034c2:	f000 fd55 	bl	8003f70 <MPU6050_Kalman_Gyro_X>
 80034c6:	ec53 2b10 	vmov	r2, r3, d0
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd fba3 	bl	8000c18 <__aeabi_d2f>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <StartSepSensorTask+0x1fc>)
 80034d6:	6013      	str	r3, [r2, #0]
		gyZ = MPU6050_Kalman_Gyro_X();
 80034d8:	f000 fd4a 	bl	8003f70 <MPU6050_Kalman_Gyro_X>
 80034dc:	ec53 2b10 	vmov	r2, r3, d0
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd fb98 	bl	8000c18 <__aeabi_d2f>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <StartSepSensorTask+0x200>)
 80034ec:	6013      	str	r3, [r2, #0]
		RollAng = MPU6050_Kalman_Roll_Angle();
 80034ee:	f000 fab5 	bl	8003a5c <MPU6050_Kalman_Roll_Angle>
 80034f2:	eef0 7a40 	vmov.f32	s15, s0
 80034f6:	4b58      	ldr	r3, [pc, #352]	; (8003658 <StartSepSensorTask+0x204>)
 80034f8:	edc3 7a00 	vstr	s15, [r3]
		Temperature = BME280_Temperature();
 80034fc:	f7fe fc04 	bl	8001d08 <BME280_Temperature>
 8003500:	ec53 2b10 	vmov	r2, r3, d0
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fb86 	bl	8000c18 <__aeabi_d2f>
 800350c:	4603      	mov	r3, r0
 800350e:	4a53      	ldr	r2, [pc, #332]	; (800365c <StartSepSensorTask+0x208>)
 8003510:	6013      	str	r3, [r2, #0]
		Pressure = BME280_Pressure();
 8003512:	f7fe fb75 	bl	8001c00 <BME280_Pressure>
 8003516:	ec53 2b10 	vmov	r2, r3, d0
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f7fd fb7b 	bl	8000c18 <__aeabi_d2f>
 8003522:	4603      	mov	r3, r0
 8003524:	4a4e      	ldr	r2, [pc, #312]	; (8003660 <StartSepSensorTask+0x20c>)
 8003526:	6013      	str	r3, [r2, #0]
		Humidity = BME280_Humidity();
 8003528:	f7fe fbac 	bl	8001c84 <BME280_Humidity>
 800352c:	ec53 2b10 	vmov	r2, r3, d0
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb70 	bl	8000c18 <__aeabi_d2f>
 8003538:	4603      	mov	r3, r0
 800353a:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <StartSepSensorTask+0x210>)
 800353c:	6013      	str	r3, [r2, #0]
		T = BME280_Kalman_Temp(Temperature);
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <StartSepSensorTask+0x208>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd f818 	bl	8000578 <__aeabi_f2d>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	ec43 2b10 	vmov	d0, r2, r3
 8003550:	f7fe fe66 	bl	8002220 <BME280_Kalman_Temp>
 8003554:	ec53 2b10 	vmov	r2, r3, d0
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7fd fb5c 	bl	8000c18 <__aeabi_d2f>
 8003560:	4603      	mov	r3, r0
 8003562:	4a41      	ldr	r2, [pc, #260]	; (8003668 <StartSepSensorTask+0x214>)
 8003564:	6013      	str	r3, [r2, #0]
		P = BME280_Kalman_Press(Pressure);
 8003566:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <StartSepSensorTask+0x20c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd f804 	bl	8000578 <__aeabi_f2d>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	ec43 2b10 	vmov	d0, r2, r3
 8003578:	f7fe fd12 	bl	8001fa0 <BME280_Kalman_Press>
 800357c:	ec53 2b10 	vmov	r2, r3, d0
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f7fd fb48 	bl	8000c18 <__aeabi_d2f>
 8003588:	4603      	mov	r3, r0
 800358a:	4a38      	ldr	r2, [pc, #224]	; (800366c <StartSepSensorTask+0x218>)
 800358c:	6013      	str	r3, [r2, #0]
		H = BME280_Kalman_Hum(Humidity);
 800358e:	4b35      	ldr	r3, [pc, #212]	; (8003664 <StartSepSensorTask+0x210>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc fff0 	bl	8000578 <__aeabi_f2d>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	ec43 2b10 	vmov	d0, r2, r3
 80035a0:	f7fe fd9e 	bl	80020e0 <BME280_Kalman_Hum>
 80035a4:	ec53 2b10 	vmov	r2, r3, d0
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	f7fd fb34 	bl	8000c18 <__aeabi_d2f>
 80035b0:	4603      	mov	r3, r0
 80035b2:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <StartSepSensorTask+0x21c>)
 80035b4:	6013      	str	r3, [r2, #0]
		Altitude1 = BME280_Altitude();
 80035b6:	f7fe fbeb 	bl	8001d90 <BME280_Altitude>
 80035ba:	eef0 7a40 	vmov.f32	s15, s0
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <StartSepSensorTask+0x220>)
 80035c0:	edc3 7a00 	vstr	s15, [r3]
		Alt = BME280_Kalman_Alt(Altitude1);
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <StartSepSensorTask+0x220>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc ffd5 	bl	8000578 <__aeabi_f2d>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	ec43 2b10 	vmov	d0, r2, r3
 80035d6:	f7fe fc39 	bl	8001e4c <BME280_Kalman_Alt>
 80035da:	eef0 7a40 	vmov.f32	s15, s0
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <StartSepSensorTask+0x224>)
 80035e0:	edc3 7a00 	vstr	s15, [r3]

		for (int i = 0; i < BUFFER_SIZE; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e019      	b.n	800361e <StartSepSensorTask+0x1ca>
			AltCompare = BME280_Kalman_Alt(Altitude1);
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <StartSepSensorTask+0x220>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ffc2 	bl	8000578 <__aeabi_f2d>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	ec43 2b10 	vmov	d0, r2, r3
 80035fc:	f7fe fc26 	bl	8001e4c <BME280_Kalman_Alt>
 8003600:	eef0 7a40 	vmov.f32	s15, s0
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <StartSepSensorTask+0x228>)
 8003606:	edc3 7a00 	vstr	s15, [r3]
			sensorValues[i] = AltCompare;
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <StartSepSensorTask+0x228>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	491c      	ldr	r1, [pc, #112]	; (8003680 <StartSepSensorTask+0x22c>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b18      	cmp	r3, #24
 8003622:	dde2      	ble.n	80035ea <StartSepSensorTask+0x196>
		}

		// Sensör değerlerini işle
		processSensorValues();
 8003624:	f7ff fc7e 	bl	8002f24 <processSensorValues>

		osSemaphoreRelease(BinSemSepHandle);
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <StartSepSensorTask+0x1e8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 ff5f 	bl	80084f0 <osSemaphoreRelease>
		osDelay(500);
 8003632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003636:	f004 fec6 	bl	80083c6 <osDelay>
		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 800363a:	e70f      	b.n	800345c <StartSepSensorTask+0x8>
 800363c:	200006f8 	.word	0x200006f8
 8003640:	20000774 	.word	0x20000774
 8003644:	20000778 	.word	0x20000778
 8003648:	2000077c 	.word	0x2000077c
 800364c:	20000780 	.word	0x20000780
 8003650:	20000784 	.word	0x20000784
 8003654:	20000788 	.word	0x20000788
 8003658:	20000760 	.word	0x20000760
 800365c:	20000768 	.word	0x20000768
 8003660:	2000076c 	.word	0x2000076c
 8003664:	20000770 	.word	0x20000770
 8003668:	20000790 	.word	0x20000790
 800366c:	20000794 	.word	0x20000794
 8003670:	20000798 	.word	0x20000798
 8003674:	20000764 	.word	0x20000764
 8003678:	2000078c 	.word	0x2000078c
 800367c:	2000079c 	.word	0x2000079c
 8003680:	200006fc 	.word	0x200006fc

08003684 <StartGPSTask>:
 * @brief Function implementing the GPSTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const *argument) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGPSTask */
	/* Infinite loop */
	for (;;) {
		gpsAlt = gps.altitude;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <StartGPSTask+0x50>)
 800368e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f7fd fabf 	bl	8000c18 <__aeabi_d2f>
 800369a:	4603      	mov	r3, r0
 800369c:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <StartGPSTask+0x54>)
 800369e:	6013      	str	r3, [r2, #0]
		gpsLat = gps.latitude;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <StartGPSTask+0x50>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fd fab5 	bl	8000c18 <__aeabi_d2f>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <StartGPSTask+0x58>)
 80036b2:	6013      	str	r3, [r2, #0]
		gpsLong = gps.longitude;
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <StartGPSTask+0x50>)
 80036b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd faab 	bl	8000c18 <__aeabi_d2f>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <StartGPSTask+0x5c>)
 80036c6:	6013      	str	r3, [r2, #0]
		osDelay(500);
 80036c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036cc:	f004 fe7b 	bl	80083c6 <osDelay>
		gpsAlt = gps.altitude;
 80036d0:	e7dc      	b.n	800368c <StartGPSTask+0x8>
 80036d2:	bf00      	nop
 80036d4:	200007f0 	.word	0x200007f0
 80036d8:	200007a0 	.word	0x200007a0
 80036dc:	200007a4 	.word	0x200007a4
 80036e0:	200007a8 	.word	0x200007a8

080036e4 <StartCommTask>:
 * @brief Function implementing the CommTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommTask */
void StartCommTask(void const *argument) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	for (;;) {

		//  paket(sayac);
		//sayac = sayac+1;

		HAL_UART_Transmit(&huart2, buff, 54, 500);
 80036ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036f0:	2236      	movs	r2, #54	; 0x36
 80036f2:	4906      	ldr	r1, [pc, #24]	; (800370c <StartCommTask+0x28>)
 80036f4:	4806      	ldr	r0, [pc, #24]	; (8003710 <StartCommTask+0x2c>)
 80036f6:	f003 fdbe 	bl	8007276 <HAL_UART_Transmit>
		HAL_Delay(500);
 80036fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036fe:	f001 f851 	bl	80047a4 <HAL_Delay>

		osDelay(500);
 8003702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003706:	f004 fe5e 	bl	80083c6 <osDelay>
		HAL_UART_Transmit(&huart2, buff, 54, 500);
 800370a:	e7ef      	b.n	80036ec <StartCommTask+0x8>
 800370c:	200007ac 	.word	0x200007ac
 8003710:	2000065c 	.word	0x2000065c

08003714 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d101      	bne.n	800372a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003726:	f001 f81d 	bl	8004764 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003736:	b672      	cpsid	i
}
 8003738:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800373a:	e7fe      	b.n	800373a <Error_Handler+0x8>

0800373c <MPU6050_Init>:
static double Q7 = 10; //initial estimated covariance
static double P7 = 0; //initial error covariance (it must be 0)
static double K7 = 0; //initial kalman gain

void MPU6050_Init (void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8003742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003746:	9302      	str	r3, [sp, #8]
 8003748:	2301      	movs	r3, #1
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2301      	movs	r3, #1
 8003752:	2275      	movs	r2, #117	; 0x75
 8003754:	21d0      	movs	r1, #208	; 0xd0
 8003756:	4823      	ldr	r0, [pc, #140]	; (80037e4 <MPU6050_Init+0xa8>)
 8003758:	f001 fda8 	bl	80052ac <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	2b68      	cmp	r3, #104	; 0x68
 8003760:	d13b      	bne.n	80037da <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800376a:	9302      	str	r3, [sp, #8]
 800376c:	2301      	movs	r3, #1
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	1dbb      	adds	r3, r7, #6
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2301      	movs	r3, #1
 8003776:	226b      	movs	r2, #107	; 0x6b
 8003778:	21d0      	movs	r1, #208	; 0xd0
 800377a:	481a      	ldr	r0, [pc, #104]	; (80037e4 <MPU6050_Init+0xa8>)
 800377c:	f001 fc9c 	bl	80050b8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8003780:	2307      	movs	r3, #7
 8003782:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	2301      	movs	r3, #1
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	2219      	movs	r2, #25
 8003796:	21d0      	movs	r1, #208	; 0xd0
 8003798:	4812      	ldr	r0, [pc, #72]	; (80037e4 <MPU6050_Init+0xa8>)
 800379a:	f001 fc8d 	bl	80050b8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Â± 2g
		Data = 0x00;
 800379e:	2300      	movs	r3, #0
 80037a0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80037a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	2301      	movs	r3, #1
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	1dbb      	adds	r3, r7, #6
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	221c      	movs	r2, #28
 80037b4:	21d0      	movs	r1, #208	; 0xd0
 80037b6:	480b      	ldr	r0, [pc, #44]	; (80037e4 <MPU6050_Init+0xa8>)
 80037b8:	f001 fc7e 	bl	80050b8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> Â± 250 Â°/s
		Data = 0x00;
 80037bc:	2300      	movs	r3, #0
 80037be:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80037c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c4:	9302      	str	r3, [sp, #8]
 80037c6:	2301      	movs	r3, #1
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2301      	movs	r3, #1
 80037d0:	221b      	movs	r2, #27
 80037d2:	21d0      	movs	r1, #208	; 0xd0
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <MPU6050_Init+0xa8>)
 80037d6:	f001 fc6f 	bl	80050b8 <HAL_I2C_Mem_Write>
	}

}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200005c0 	.word	0x200005c0

080037e8 <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 80037ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f2:	9302      	str	r3, [sp, #8]
 80037f4:	2306      	movs	r3, #6
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	463b      	mov	r3, r7
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2301      	movs	r3, #1
 80037fe:	223b      	movs	r2, #59	; 0x3b
 8003800:	21d0      	movs	r1, #208	; 0xd0
 8003802:	4811      	ldr	r0, [pc, #68]	; (8003848 <MPU6050_Accel_Config+0x60>)
 8003804:	f001 fd52 	bl	80052ac <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 8003808:	783b      	ldrb	r3, [r7, #0]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	b21a      	sxth	r2, r3
 800380e:	787b      	ldrb	r3, [r7, #1]
 8003810:	b21b      	sxth	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b21a      	sxth	r2, r3
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <MPU6050_Accel_Config+0x64>)
 8003818:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 800381a:	78bb      	ldrb	r3, [r7, #2]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	b21a      	sxth	r2, r3
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	b21b      	sxth	r3, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	b21a      	sxth	r2, r3
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <MPU6050_Accel_Config+0x68>)
 800382a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 800382c:	793b      	ldrb	r3, [r7, #4]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	b21a      	sxth	r2, r3
 8003832:	797b      	ldrb	r3, [r7, #5]
 8003834:	b21b      	sxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b21a      	sxth	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <MPU6050_Accel_Config+0x6c>)
 800383c:	801a      	strh	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200005c0 	.word	0x200005c0
 800384c:	20000934 	.word	0x20000934
 8003850:	20000936 	.word	0x20000936
 8003854:	20000938 	.word	0x20000938

08003858 <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 800385c:	f7ff ffc4 	bl	80037e8 <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <MPU6050_Read_Accel_X+0x40>)
 8003862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fe74 	bl	8000554 <__aeabi_i2d>
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <MPU6050_Read_Accel_X+0x44>)
 8003872:	f7fd f803 	bl	800087c <__aeabi_ddiv>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f9cb 	bl	8000c18 <__aeabi_d2f>
 8003882:	4603      	mov	r3, r0
 8003884:	4a06      	ldr	r2, [pc, #24]	; (80038a0 <MPU6050_Read_Accel_X+0x48>)
 8003886:	6013      	str	r3, [r2, #0]
	return Ax;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <MPU6050_Read_Accel_X+0x48>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	ee07 3a90 	vmov	s15, r3
}
 8003890:	eeb0 0a67 	vmov.f32	s0, s15
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000934 	.word	0x20000934
 800389c:	40d00000 	.word	0x40d00000
 80038a0:	20000924 	.word	0x20000924

080038a4 <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80038a8:	f7ff ff9e 	bl	80037e8 <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <MPU6050_Read_Accel_Y+0x40>)
 80038ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe4e 	bl	8000554 <__aeabi_i2d>
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <MPU6050_Read_Accel_Y+0x44>)
 80038be:	f7fc ffdd 	bl	800087c <__aeabi_ddiv>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7fd f9a5 	bl	8000c18 <__aeabi_d2f>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a06      	ldr	r2, [pc, #24]	; (80038ec <MPU6050_Read_Accel_Y+0x48>)
 80038d2:	6013      	str	r3, [r2, #0]
	return Ay;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <MPU6050_Read_Accel_Y+0x48>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	ee07 3a90 	vmov	s15, r3
}
 80038dc:	eeb0 0a67 	vmov.f32	s0, s15
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000936 	.word	0x20000936
 80038e8:	40d00000 	.word	0x40d00000
 80038ec:	20000928 	.word	0x20000928

080038f0 <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80038f4:	f7ff ff78 	bl	80037e8 <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <MPU6050_Read_Accel_Z+0x40>)
 80038fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fe28 	bl	8000554 <__aeabi_i2d>
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <MPU6050_Read_Accel_Z+0x44>)
 800390a:	f7fc ffb7 	bl	800087c <__aeabi_ddiv>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd f97f 	bl	8000c18 <__aeabi_d2f>
 800391a:	4603      	mov	r3, r0
 800391c:	4a06      	ldr	r2, [pc, #24]	; (8003938 <MPU6050_Read_Accel_Z+0x48>)
 800391e:	6013      	str	r3, [r2, #0]
	return Az;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <MPU6050_Read_Accel_Z+0x48>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	ee07 3a90 	vmov	s15, r3
}
 8003928:	eeb0 0a67 	vmov.f32	s0, s15
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000938 	.word	0x20000938
 8003934:	40d00000 	.word	0x40d00000
 8003938:	2000092c 	.word	0x2000092c

0800393c <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 8003942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003946:	9302      	str	r3, [sp, #8]
 8003948:	2306      	movs	r3, #6
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	463b      	mov	r3, r7
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2301      	movs	r3, #1
 8003952:	2243      	movs	r2, #67	; 0x43
 8003954:	21d0      	movs	r1, #208	; 0xd0
 8003956:	4811      	ldr	r0, [pc, #68]	; (800399c <MPU6050_Gyro_Config+0x60>)
 8003958:	f001 fca8 	bl	80052ac <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 800395c:	783b      	ldrb	r3, [r7, #0]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	b21a      	sxth	r2, r3
 8003962:	787b      	ldrb	r3, [r7, #1]
 8003964:	b21b      	sxth	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	b21a      	sxth	r2, r3
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <MPU6050_Gyro_Config+0x64>)
 800396c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 800396e:	78bb      	ldrb	r3, [r7, #2]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	b21a      	sxth	r2, r3
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	b21b      	sxth	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b21a      	sxth	r2, r3
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <MPU6050_Gyro_Config+0x68>)
 800397e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8003980:	793b      	ldrb	r3, [r7, #4]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	b21a      	sxth	r2, r3
 8003986:	797b      	ldrb	r3, [r7, #5]
 8003988:	b21b      	sxth	r3, r3
 800398a:	4313      	orrs	r3, r2
 800398c:	b21a      	sxth	r2, r3
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <MPU6050_Gyro_Config+0x6c>)
 8003990:	801a      	strh	r2, [r3, #0]

}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200005c0 	.word	0x200005c0
 80039a0:	2000093a 	.word	0x2000093a
 80039a4:	2000093c 	.word	0x2000093c
 80039a8:	2000093e 	.word	0x2000093e
 80039ac:	00000000 	.word	0x00000000

080039b0 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 80039b4:	f7ff ffc2 	bl	800393c <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <MPU6050_Read_Gyro_X+0x48>)
 80039ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fdc8 	bl	8000554 <__aeabi_i2d>
 80039c4:	a30a      	add	r3, pc, #40	; (adr r3, 80039f0 <MPU6050_Read_Gyro_X+0x40>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f7fc ff57 	bl	800087c <__aeabi_ddiv>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fd f91f 	bl	8000c18 <__aeabi_d2f>
 80039da:	4603      	mov	r3, r0
 80039dc:	4a07      	ldr	r2, [pc, #28]	; (80039fc <MPU6050_Read_Gyro_X+0x4c>)
 80039de:	6013      	str	r3, [r2, #0]
	return Gx;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <MPU6050_Read_Gyro_X+0x4c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	ee07 3a90 	vmov	s15, r3
}
 80039e8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	00000000 	.word	0x00000000
 80039f4:	40606000 	.word	0x40606000
 80039f8:	2000093a 	.word	0x2000093a
 80039fc:	20000930 	.word	0x20000930

08003a00 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 8003a06:	f000 f96f 	bl	8003ce8 <MPU6050_Kalman_Accel_Y>
 8003a0a:	ed87 0b04 	vstr	d0, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 8003a0e:	f000 fa0d 	bl	8003e2c <MPU6050_Kalman_Accel_Z>
 8003a12:	ed87 0b02 	vstr	d0, [r7, #8]
	float Roll = 0;
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 8003a1c:	ed97 1b02 	vldr	d1, [r7, #8]
 8003a20:	ed97 0b04 	vldr	d0, [r7, #16]
 8003a24:	f009 fe8c 	bl	800d740 <atan2>
 8003a28:	ec51 0b10 	vmov	r0, r1, d0
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <MPU6050_Roll_Angle+0x58>)
 8003a32:	f7fc fdf9 	bl	8000628 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f7fd f8eb 	bl	8000c18 <__aeabi_d2f>
 8003a42:	4603      	mov	r3, r0
 8003a44:	607b      	str	r3, [r7, #4]
	return Roll;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	ee07 3a90 	vmov	s15, r3
}
 8003a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40668000 	.word	0x40668000

08003a5c <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 8003a5c:	b5b0      	push	{r4, r5, r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 8003a62:	f7ff ffcd 	bl	8003a00 <MPU6050_Roll_Angle>
 8003a66:	ed87 0a01 	vstr	s0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8003a6a:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003a76:	f7fc fdd7 	bl	8000628 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4614      	mov	r4, r2
 8003a80:	461d      	mov	r5, r3
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	4942      	ldr	r1, [pc, #264]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003a88:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fc fdcb 	bl	8000628 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	4b3c      	ldr	r3, [pc, #240]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003aa0:	f7fc fdc2 	bl	8000628 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <MPU6050_Kalman_Roll_Angle+0x138>)
 8003ab2:	f7fc fc03 	bl	80002bc <__adddf3>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4620      	mov	r0, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7fc fedd 	bl	800087c <__aeabi_ddiv>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4934      	ldr	r1, [pc, #208]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003ac8:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fc fd53 	bl	8000578 <__aeabi_f2d>
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	460d      	mov	r5, r1
 8003ad6:	f04f 0000 	mov.w	r0, #0
 8003ada:	492d      	ldr	r1, [pc, #180]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003adc:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fc fda1 	bl	8000628 <__aeabi_dmul>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fbe3 	bl	80002b8 <__aeabi_dsub>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f7fc fd92 	bl	8000628 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f7fc fbd3 	bl	80002bc <__adddf3>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4920      	ldr	r1, [pc, #128]	; (8003b9c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003b1c:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003b2c:	f7fc fd7c 	bl	8000628 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	4915      	ldr	r1, [pc, #84]	; (8003b90 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003b3a:	f7fc fbbd 	bl	80002b8 <__aeabi_dsub>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f7fc fd6c 	bl	8000628 <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <MPU6050_Kalman_Roll_Angle+0x144>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fbad 	bl	80002bc <__adddf3>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4909      	ldr	r1, [pc, #36]	; (8003b8c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003b68:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7fd f84f 	bl	8000c18 <__aeabi_d2f>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	ee07 3a90 	vmov	s15, r3
}
 8003b80:	eeb0 0a67 	vmov.f32	s0, s15
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000940 	.word	0x20000940
 8003b90:	3ff00000 	.word	0x3ff00000
 8003b94:	40440000 	.word	0x40440000
 8003b98:	20000948 	.word	0x20000948
 8003b9c:	20000990 	.word	0x20000990
 8003ba0:	20000040 	.word	0x20000040

08003ba4 <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 8003ba4:	b5b0      	push	{r4, r5, r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 8003baa:	f7ff fe55 	bl	8003858 <MPU6050_Read_Accel_X>
 8003bae:	ee10 3a10 	vmov	r3, s0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fce0 	bl	8000578 <__aeabi_f2d>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x12c>)
 8003bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x130>)
 8003bcc:	f7fc fd2c 	bl	8000628 <__aeabi_dmul>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	f04f 0000 	mov.w	r0, #0
 8003bdc:	493d      	ldr	r1, [pc, #244]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x130>)
 8003bde:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x12c>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fd20 	bl	8000628 <__aeabi_dmul>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x130>)
 8003bf6:	f7fc fd17 	bl	8000628 <__aeabi_dmul>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <MPU6050_Kalman_Accel_X+0x134>)
 8003c08:	f7fc fb58 	bl	80002bc <__adddf3>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4620      	mov	r0, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	f7fc fe32 	bl	800087c <__aeabi_ddiv>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	492f      	ldr	r1, [pc, #188]	; (8003cdc <MPU6050_Kalman_Accel_X+0x138>)
 8003c1e:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	492b      	ldr	r1, [pc, #172]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x130>)
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <MPU6050_Kalman_Accel_X+0x13c>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f7fc fcfb 	bl	8000628 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c3a:	f7fc fb3d 	bl	80002b8 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <MPU6050_Kalman_Accel_X+0x138>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fcec 	bl	8000628 <__aeabi_dmul>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <MPU6050_Kalman_Accel_X+0x13c>)
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc fb2d 	bl	80002bc <__adddf3>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	491e      	ldr	r1, [pc, #120]	; (8003ce0 <MPU6050_Kalman_Accel_X+0x13c>)
 8003c68:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <MPU6050_Kalman_Accel_X+0x138>)
 8003c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x130>)
 8003c78:	f7fc fcd6 	bl	8000628 <__aeabi_dmul>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	f04f 0000 	mov.w	r0, #0
 8003c84:	4913      	ldr	r1, [pc, #76]	; (8003cd4 <MPU6050_Kalman_Accel_X+0x130>)
 8003c86:	f7fc fb17 	bl	80002b8 <__aeabi_dsub>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x12c>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fcc6 	bl	8000628 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <MPU6050_Kalman_Accel_X+0x140>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f7fc fb07 	bl	80002bc <__adddf3>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4907      	ldr	r1, [pc, #28]	; (8003cd0 <MPU6050_Kalman_Accel_X+0x12c>)
 8003cb4:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <MPU6050_Kalman_Accel_X+0x13c>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	ec43 2b17 	vmov	d7, r2, r3
}
 8003cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8003cc6:	eef0 0a67 	vmov.f32	s1, s15
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd0:	20000950 	.word	0x20000950
 8003cd4:	3ff00000 	.word	0x3ff00000
 8003cd8:	40440000 	.word	0x40440000
 8003cdc:	20000958 	.word	0x20000958
 8003ce0:	20000998 	.word	0x20000998
 8003ce4:	20000048 	.word	0x20000048

08003ce8 <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 8003ce8:	b5b0      	push	{r4, r5, r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 8003cee:	f7ff fdd9 	bl	80038a4 <MPU6050_Read_Accel_Y>
 8003cf2:	ee10 3a10 	vmov	r3, s0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fc3e 	bl	8000578 <__aeabi_f2d>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8003d04:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d10:	f7fc fc8a 	bl	8000628 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	f04f 0000 	mov.w	r0, #0
 8003d20:	493d      	ldr	r1, [pc, #244]	; (8003e18 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d22:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f7fc fc7e 	bl	8000628 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d3a:	f7fc fc75 	bl	8000628 <__aeabi_dmul>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <MPU6050_Kalman_Accel_Y+0x134>)
 8003d4c:	f7fc fab6 	bl	80002bc <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4620      	mov	r0, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7fc fd90 	bl	800087c <__aeabi_ddiv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	492f      	ldr	r1, [pc, #188]	; (8003e20 <MPU6050_Kalman_Accel_Y+0x138>)
 8003d62:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	492b      	ldr	r1, [pc, #172]	; (8003e18 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fc59 	bl	8000628 <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d7e:	f7fc fa9b 	bl	80002b8 <__aeabi_dsub>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <MPU6050_Kalman_Accel_Y+0x138>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fc4a 	bl	8000628 <__aeabi_dmul>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fa8b 	bl	80002bc <__adddf3>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	491e      	ldr	r1, [pc, #120]	; (8003e24 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003dac:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <MPU6050_Kalman_Accel_Y+0x138>)
 8003db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <MPU6050_Kalman_Accel_Y+0x130>)
 8003dbc:	f7fc fc34 	bl	8000628 <__aeabi_dmul>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	4913      	ldr	r1, [pc, #76]	; (8003e18 <MPU6050_Kalman_Accel_Y+0x130>)
 8003dca:	f7fc fa75 	bl	80002b8 <__aeabi_dsub>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f7fc fc24 	bl	8000628 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <MPU6050_Kalman_Accel_Y+0x140>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fa65 	bl	80002bc <__adddf3>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4907      	ldr	r1, [pc, #28]	; (8003e14 <MPU6050_Kalman_Accel_Y+0x12c>)
 8003df8:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <MPU6050_Kalman_Accel_Y+0x13c>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e06:	eeb0 0a47 	vmov.f32	s0, s14
 8003e0a:	eef0 0a67 	vmov.f32	s1, s15
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bdb0      	pop	{r4, r5, r7, pc}
 8003e14:	20000960 	.word	0x20000960
 8003e18:	3ff00000 	.word	0x3ff00000
 8003e1c:	40440000 	.word	0x40440000
 8003e20:	20000968 	.word	0x20000968
 8003e24:	200009a0 	.word	0x200009a0
 8003e28:	20000050 	.word	0x20000050

08003e2c <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 8003e2c:	b5b0      	push	{r4, r5, r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8003e32:	f7ff fd5d 	bl	80038f0 <MPU6050_Read_Accel_Z>
 8003e36:	ee10 3a10 	vmov	r3, s0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fb9c 	bl	8000578 <__aeabi_f2d>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8003e48:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <MPU6050_Kalman_Accel_Z+0x130>)
 8003e54:	f7fc fbe8 	bl	8000628 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	461d      	mov	r5, r3
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	493d      	ldr	r1, [pc, #244]	; (8003f5c <MPU6050_Kalman_Accel_Z+0x130>)
 8003e66:	4b3c      	ldr	r3, [pc, #240]	; (8003f58 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc fbdc 	bl	8000628 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <MPU6050_Kalman_Accel_Z+0x130>)
 8003e7e:	f7fc fbd3 	bl	8000628 <__aeabi_dmul>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <MPU6050_Kalman_Accel_Z+0x134>)
 8003e90:	f7fc fa14 	bl	80002bc <__adddf3>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4620      	mov	r0, r4
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f7fc fcee 	bl	800087c <__aeabi_ddiv>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	492f      	ldr	r1, [pc, #188]	; (8003f64 <MPU6050_Kalman_Accel_Z+0x138>)
 8003ea6:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	492b      	ldr	r1, [pc, #172]	; (8003f5c <MPU6050_Kalman_Accel_Z+0x130>)
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	; (8003f68 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc fbb7 	bl	8000628 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ec2:	f7fc f9f9 	bl	80002b8 <__aeabi_dsub>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <MPU6050_Kalman_Accel_Z+0x138>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc fba8 	bl	8000628 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc f9e9 	bl	80002bc <__adddf3>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	491e      	ldr	r1, [pc, #120]	; (8003f68 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <MPU6050_Kalman_Accel_Z+0x138>)
 8003ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <MPU6050_Kalman_Accel_Z+0x130>)
 8003f00:	f7fc fb92 	bl	8000628 <__aeabi_dmul>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	f04f 0000 	mov.w	r0, #0
 8003f0c:	4913      	ldr	r1, [pc, #76]	; (8003f5c <MPU6050_Kalman_Accel_Z+0x130>)
 8003f0e:	f7fc f9d3 	bl	80002b8 <__aeabi_dsub>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc fb82 	bl	8000628 <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <MPU6050_Kalman_Accel_Z+0x140>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc f9c3 	bl	80002bc <__adddf3>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4907      	ldr	r1, [pc, #28]	; (8003f58 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003f3c:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f4e:	eef0 0a67 	vmov.f32	s1, s15
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bdb0      	pop	{r4, r5, r7, pc}
 8003f58:	20000970 	.word	0x20000970
 8003f5c:	3ff00000 	.word	0x3ff00000
 8003f60:	40440000 	.word	0x40440000
 8003f64:	20000978 	.word	0x20000978
 8003f68:	200009a8 	.word	0x200009a8
 8003f6c:	20000058 	.word	0x20000058

08003f70 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8003f70:	b5b0      	push	{r4, r5, r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8003f76:	f7ff fd1b 	bl	80039b0 <MPU6050_Read_Gyro_X>
 8003f7a:	ee10 3a10 	vmov	r3, s0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fafa 	bl	8000578 <__aeabi_f2d>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <MPU6050_Kalman_Gyro_X+0x12c>)
 8003f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003f98:	f7fc fb46 	bl	8000628 <__aeabi_dmul>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	461d      	mov	r5, r3
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	493d      	ldr	r1, [pc, #244]	; (80040a0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003faa:	4b3c      	ldr	r3, [pc, #240]	; (800409c <MPU6050_Kalman_Gyro_X+0x12c>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc fb3a 	bl	8000628 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003fc2:	f7fc fb31 	bl	8000628 <__aeabi_dmul>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <MPU6050_Kalman_Gyro_X+0x134>)
 8003fd4:	f7fc f972 	bl	80002bc <__adddf3>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc fc4c 	bl	800087c <__aeabi_ddiv>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	492f      	ldr	r1, [pc, #188]	; (80040a8 <MPU6050_Kalman_Gyro_X+0x138>)
 8003fea:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	492b      	ldr	r1, [pc, #172]	; (80040a0 <MPU6050_Kalman_Gyro_X+0x130>)
 8003ff4:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <MPU6050_Kalman_Gyro_X+0x13c>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f7fc fb15 	bl	8000628 <__aeabi_dmul>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004006:	f7fc f957 	bl	80002b8 <__aeabi_dsub>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <MPU6050_Kalman_Gyro_X+0x138>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc fb06 	bl	8000628 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <MPU6050_Kalman_Gyro_X+0x13c>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f7fc f947 	bl	80002bc <__adddf3>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	491e      	ldr	r1, [pc, #120]	; (80040ac <MPU6050_Kalman_Gyro_X+0x13c>)
 8004034:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <MPU6050_Kalman_Gyro_X+0x138>)
 800403a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <MPU6050_Kalman_Gyro_X+0x130>)
 8004044:	f7fc faf0 	bl	8000628 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	f04f 0000 	mov.w	r0, #0
 8004050:	4913      	ldr	r1, [pc, #76]	; (80040a0 <MPU6050_Kalman_Gyro_X+0x130>)
 8004052:	f7fc f931 	bl	80002b8 <__aeabi_dsub>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <MPU6050_Kalman_Gyro_X+0x12c>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc fae0 	bl	8000628 <__aeabi_dmul>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <MPU6050_Kalman_Gyro_X+0x140>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f7fc f921 	bl	80002bc <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4907      	ldr	r1, [pc, #28]	; (800409c <MPU6050_Kalman_Gyro_X+0x12c>)
 8004080:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <MPU6050_Kalman_Gyro_X+0x13c>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	ec43 2b17 	vmov	d7, r2, r3
}
 800408e:	eeb0 0a47 	vmov.f32	s0, s14
 8004092:	eef0 0a67 	vmov.f32	s1, s15
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bdb0      	pop	{r4, r5, r7, pc}
 800409c:	20000980 	.word	0x20000980
 80040a0:	3ff00000 	.word	0x3ff00000
 80040a4:	40440000 	.word	0x40440000
 80040a8:	20000988 	.word	0x20000988
 80040ac:	200009b0 	.word	0x200009b0
 80040b0:	20000060 	.word	0x20000060

080040b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_MspInit+0x54>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	4a11      	ldr	r2, [pc, #68]	; (8004108 <HAL_MspInit+0x54>)
 80040c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_MspInit+0x54>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_MspInit+0x54>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_MspInit+0x54>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_MspInit+0x54>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	210f      	movs	r1, #15
 80040f6:	f06f 0001 	mvn.w	r0, #1
 80040fa:	f000 fc2f 	bl	800495c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800

0800410c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_I2C_MspInit+0x84>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d12b      	bne.n	8004186 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_I2C_MspInit+0x88>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_I2C_MspInit+0x88>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_I2C_MspInit+0x88>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800414a:	23c0      	movs	r3, #192	; 0xc0
 800414c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800414e:	2312      	movs	r3, #18
 8004150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800415a:	2304      	movs	r3, #4
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	4619      	mov	r1, r3
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <HAL_I2C_MspInit+0x8c>)
 8004166:	f000 fcb5 	bl	8004ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_I2C_MspInit+0x88>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <HAL_I2C_MspInit+0x88>)
 8004174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_I2C_MspInit+0x88>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004186:	bf00      	nop
 8004188:	3728      	adds	r7, #40	; 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40005400 	.word	0x40005400
 8004194:	40023800 	.word	0x40023800
 8004198:	40020400 	.word	0x40020400

0800419c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <HAL_TIM_Base_MspInit+0x48>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d115      	bne.n	80041da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_TIM_Base_MspInit+0x4c>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <HAL_TIM_Base_MspInit+0x4c>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6453      	str	r3, [r2, #68]	; 0x44
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_TIM_Base_MspInit+0x4c>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80041ca:	2200      	movs	r2, #0
 80041cc:	2105      	movs	r1, #5
 80041ce:	2019      	movs	r0, #25
 80041d0:	f000 fbc4 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80041d4:	2019      	movs	r0, #25
 80041d6:	f000 fbdd 	bl	8004994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40023800 	.word	0x40023800

080041ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	f107 031c 	add.w	r3, r7, #28
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a36      	ldr	r2, [pc, #216]	; (80042e4 <HAL_UART_MspInit+0xf8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d12c      	bne.n	8004268 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004246:	230c      	movs	r3, #12
 8004248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424a:	2302      	movs	r3, #2
 800424c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004252:	2303      	movs	r3, #3
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004256:	2307      	movs	r3, #7
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425a:	f107 031c 	add.w	r3, r7, #28
 800425e:	4619      	mov	r1, r3
 8004260:	4822      	ldr	r0, [pc, #136]	; (80042ec <HAL_UART_MspInit+0x100>)
 8004262:	f000 fc37 	bl	8004ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004266:	e038      	b.n	80042da <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <HAL_UART_MspInit+0x104>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d133      	bne.n	80042da <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 800427c:	f043 0320 	orr.w	r3, r3, #32
 8004280:	6453      	str	r3, [r2, #68]	; 0x44
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_UART_MspInit+0xfc>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042aa:	23c0      	movs	r3, #192	; 0xc0
 80042ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80042ba:	2308      	movs	r3, #8
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	480b      	ldr	r0, [pc, #44]	; (80042f4 <HAL_UART_MspInit+0x108>)
 80042c6:	f000 fc05 	bl	8004ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2105      	movs	r1, #5
 80042ce:	2047      	movs	r0, #71	; 0x47
 80042d0:	f000 fb44 	bl	800495c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80042d4:	2047      	movs	r0, #71	; 0x47
 80042d6:	f000 fb5d 	bl	8004994 <HAL_NVIC_EnableIRQ>
}
 80042da:	bf00      	nop
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40004400 	.word	0x40004400
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40011400 	.word	0x40011400
 80042f4:	40020800 	.word	0x40020800

080042f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	; 0x38
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_InitTick+0xe8>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <HAL_InitTick+0xe8>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6413      	str	r3, [r2, #64]	; 0x40
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_InitTick+0xe8>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004324:	f107 0210 	add.w	r2, r7, #16
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fe58 	bl	8005fe4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800433e:	f001 fe29 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8004342:	6378      	str	r0, [r7, #52]	; 0x34
 8004344:	e004      	b.n	8004350 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004346:	f001 fe25 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 800434a:	4603      	mov	r3, r0
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <HAL_InitTick+0xec>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	0c9b      	lsrs	r3, r3, #18
 800435a:	3b01      	subs	r3, #1
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_InitTick+0xf0>)
 8004360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004364:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_InitTick+0xf0>)
 8004368:	f240 32e7 	movw	r2, #999	; 0x3e7
 800436c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800436e:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <HAL_InitTick+0xf0>)
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004374:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <HAL_InitTick+0xf0>)
 8004376:	2200      	movs	r2, #0
 8004378:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_InitTick+0xf0>)
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_InitTick+0xf0>)
 8004382:	2200      	movs	r2, #0
 8004384:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004386:	4818      	ldr	r0, [pc, #96]	; (80043e8 <HAL_InitTick+0xf0>)
 8004388:	f002 faa6 	bl	80068d8 <HAL_TIM_Base_Init>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004392:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11b      	bne.n	80043d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800439a:	4813      	ldr	r0, [pc, #76]	; (80043e8 <HAL_InitTick+0xf0>)
 800439c:	f002 faec 	bl	8006978 <HAL_TIM_Base_Start_IT>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80043a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d111      	bne.n	80043d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043ae:	201c      	movs	r0, #28
 80043b0:	f000 faf0 	bl	8004994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	d808      	bhi.n	80043cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80043ba:	2200      	movs	r2, #0
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	201c      	movs	r0, #28
 80043c0:	f000 facc 	bl	800495c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_InitTick+0xf4>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e002      	b.n	80043d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80043d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3738      	adds	r7, #56	; 0x38
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	431bde83 	.word	0x431bde83
 80043e8:	200009b8 	.word	0x200009b8
 80043ec:	20000070 	.word	0x20000070

080043f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <NMI_Handler+0x4>

080043f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043fa:	e7fe      	b.n	80043fa <HardFault_Handler+0x4>

080043fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004400:	e7fe      	b.n	8004400 <MemManage_Handler+0x4>

08004402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004406:	e7fe      	b.n	8004406 <BusFault_Handler+0x4>

08004408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800440c:	e7fe      	b.n	800440c <UsageFault_Handler+0x4>

0800440e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004422:	f002 fb19 	bl	8006a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000614 	.word	0x20000614

08004430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004434:	4802      	ldr	r0, [pc, #8]	; (8004440 <TIM2_IRQHandler+0x10>)
 8004436:	f002 fb0f 	bl	8006a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200009b8 	.word	0x200009b8

08004444 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((RollAng <=15 || RollAng >=-15) && Alt>=2400)
 8004448:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <USART6_IRQHandler+0xb8>)
 800444a:	edd3 7a00 	vldr	s15, [r3]
 800444e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445a:	d909      	bls.n	8004470 <USART6_IRQHandler+0x2c>
 800445c:	4b27      	ldr	r3, [pc, #156]	; (80044fc <USART6_IRQHandler+0xb8>)
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8004466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	db12      	blt.n	8004496 <USART6_IRQHandler+0x52>
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <USART6_IRQHandler+0xbc>)
 8004472:	edd3 7a00 	vldr	s15, [r3]
 8004476:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004504 <USART6_IRQHandler+0xc0>
 800447a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	db08      	blt.n	8004496 <USART6_IRQHandler+0x52>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8004484:	2201      	movs	r2, #1
 8004486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800448a:	481f      	ldr	r0, [pc, #124]	; (8004508 <USART6_IRQHandler+0xc4>)
 800448c:	f000 fcb6 	bl	8004dfc <HAL_GPIO_WritePin>
		flag = 2;
 8004490:	4b1e      	ldr	r3, [pc, #120]	; (800450c <USART6_IRQHandler+0xc8>)
 8004492:	2202      	movs	r2, #2
 8004494:	601a      	str	r2, [r3, #0]
	}
	if((Alt <=600 && flag == 1) && flagDown == 1)
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <USART6_IRQHandler+0xbc>)
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004510 <USART6_IRQHandler+0xcc>
 80044a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	d80b      	bhi.n	80044c2 <USART6_IRQHandler+0x7e>
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <USART6_IRQHandler+0xc8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <USART6_IRQHandler+0x7e>
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <USART6_IRQHandler+0xd0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d103      	bne.n	80044c2 <USART6_IRQHandler+0x7e>
	{
		flag = 3;
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <USART6_IRQHandler+0xc8>)
 80044bc:	2203      	movs	r2, #3
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e016      	b.n	80044f0 <USART6_IRQHandler+0xac>
	}
	else if(Alt <= 600 && flag == 2)
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <USART6_IRQHandler+0xbc>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004510 <USART6_IRQHandler+0xcc>
 80044cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d4:	d80c      	bhi.n	80044f0 <USART6_IRQHandler+0xac>
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <USART6_IRQHandler+0xc8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d108      	bne.n	80044f0 <USART6_IRQHandler+0xac>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80044de:	2201      	movs	r2, #1
 80044e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044e4:	4808      	ldr	r0, [pc, #32]	; (8004508 <USART6_IRQHandler+0xc4>)
 80044e6:	f000 fc89 	bl	8004dfc <HAL_GPIO_WritePin>
		flag = 4;
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <USART6_IRQHandler+0xc8>)
 80044ec:	2204      	movs	r2, #4
 80044ee:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80044f0:	4809      	ldr	r0, [pc, #36]	; (8004518 <USART6_IRQHandler+0xd4>)
 80044f2:	f002 ff83 	bl	80073fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000760 	.word	0x20000760
 8004500:	2000078c 	.word	0x2000078c
 8004504:	45160000 	.word	0x45160000
 8004508:	40020000 	.word	0x40020000
 800450c:	20000068 	.word	0x20000068
 8004510:	44160000 	.word	0x44160000
 8004514:	200007e4 	.word	0x200007e4
 8004518:	200006a0 	.word	0x200006a0

0800451c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return 1;
 8004520:	2301      	movs	r3, #1
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_kill>:

int _kill(int pid, int sig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004536:	f007 fa5f 	bl	800b9f8 <__errno>
 800453a:	4603      	mov	r3, r0
 800453c:	2216      	movs	r2, #22
 800453e:	601a      	str	r2, [r3, #0]
  return -1;
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_exit>:

void _exit (int status)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004554:	f04f 31ff 	mov.w	r1, #4294967295
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ffe7 	bl	800452c <_kill>
  while (1) {}    /* Make sure we hang here */
 800455e:	e7fe      	b.n	800455e <_exit+0x12>

08004560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e00a      	b.n	8004588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004572:	f3af 8000 	nop.w
 8004576:	4601      	mov	r1, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	60ba      	str	r2, [r7, #8]
 800457e:	b2ca      	uxtb	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3301      	adds	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	dbf0      	blt.n	8004572 <_read+0x12>
  }

  return len;
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e009      	b.n	80045c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	60ba      	str	r2, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3301      	adds	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	dbf1      	blt.n	80045ac <_write+0x12>
  }
  return len;
 80045c8:	687b      	ldr	r3, [r7, #4]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <_close>:

int _close(int file)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045fa:	605a      	str	r2, [r3, #4]
  return 0;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <_isatty>:

int _isatty(int file)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004612:	2301      	movs	r3, #1
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004644:	4a14      	ldr	r2, [pc, #80]	; (8004698 <_sbrk+0x5c>)
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <_sbrk+0x60>)
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <_sbrk+0x64>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <_sbrk+0x64>)
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <_sbrk+0x68>)
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <_sbrk+0x64>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	429a      	cmp	r2, r3
 800466a:	d207      	bcs.n	800467c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800466c:	f007 f9c4 	bl	800b9f8 <__errno>
 8004670:	4603      	mov	r3, r0
 8004672:	220c      	movs	r2, #12
 8004674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	e009      	b.n	8004690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <_sbrk+0x64>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <_sbrk+0x64>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <_sbrk+0x64>)
 800468c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20020000 	.word	0x20020000
 800469c:	00000400 	.word	0x00000400
 80046a0:	20000a00 	.word	0x20000a00
 80046a4:	200048a8 	.word	0x200048a8

080046a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <SystemInit+0x20>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <SystemInit+0x20>)
 80046b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046d0:	480d      	ldr	r0, [pc, #52]	; (8004708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046d2:	490e      	ldr	r1, [pc, #56]	; (800470c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046d4:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046d8:	e002      	b.n	80046e0 <LoopCopyDataInit>

080046da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046de:	3304      	adds	r3, #4

080046e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e4:	d3f9      	bcc.n	80046da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046e6:	4a0b      	ldr	r2, [pc, #44]	; (8004714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046e8:	4c0b      	ldr	r4, [pc, #44]	; (8004718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046ec:	e001      	b.n	80046f2 <LoopFillZerobss>

080046ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046f0:	3204      	adds	r2, #4

080046f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f4:	d3fb      	bcc.n	80046ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046f6:	f7ff ffd7 	bl	80046a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046fa:	f007 f983 	bl	800ba04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046fe:	f7fe fc47 	bl	8002f90 <main>
  bx  lr    
 8004702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800470c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8004710:	0800f088 	.word	0x0800f088
  ldr r2, =_sbss
 8004714:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004718:	200048a8 	.word	0x200048a8

0800471c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800471c:	e7fe      	b.n	800471c <ADC_IRQHandler>
	...

08004720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_Init+0x40>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_Init+0x40>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_Init+0x40>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <HAL_Init+0x40>)
 8004736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800473a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <HAL_Init+0x40>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a07      	ldr	r2, [pc, #28]	; (8004760 <HAL_Init+0x40>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004748:	2003      	movs	r0, #3
 800474a:	f000 f8fc 	bl	8004946 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800474e:	200f      	movs	r0, #15
 8004750:	f7ff fdd2 	bl	80042f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004754:	f7ff fcae 	bl	80040b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023c00 	.word	0x40023c00

08004764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_IncTick+0x20>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_IncTick+0x24>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4413      	add	r3, r2
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_IncTick+0x24>)
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000074 	.word	0x20000074
 8004788:	20000a04 	.word	0x20000a04

0800478c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return uwTick;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_GetTick+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000a04 	.word	0x20000a04

080047a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff ffee 	bl	800478c <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d005      	beq.n	80047ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_Delay+0x44>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047ca:	bf00      	nop
 80047cc:	f7ff ffde 	bl	800478c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d8f7      	bhi.n	80047cc <HAL_Delay+0x28>
  {
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000074 	.word	0x20000074

080047ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <__NVIC_SetPriorityGrouping+0x44>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004808:	4013      	ands	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800481e:	4a04      	ldr	r2, [pc, #16]	; (8004830 <__NVIC_SetPriorityGrouping+0x44>)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	60d3      	str	r3, [r2, #12]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <__NVIC_GetPriorityGrouping+0x18>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	f003 0307 	and.w	r3, r3, #7
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db0b      	blt.n	800487a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4907      	ldr	r1, [pc, #28]	; (8004888 <__NVIC_EnableIRQ+0x38>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2001      	movs	r0, #1
 8004872:	fa00 f202 	lsl.w	r2, r0, r2
 8004876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000e100 	.word	0xe000e100

0800488c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db0a      	blt.n	80048b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	490c      	ldr	r1, [pc, #48]	; (80048d8 <__NVIC_SetPriority+0x4c>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	440b      	add	r3, r1
 80048b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b4:	e00a      	b.n	80048cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4908      	ldr	r1, [pc, #32]	; (80048dc <__NVIC_SetPriority+0x50>)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3b04      	subs	r3, #4
 80048c4:	0112      	lsls	r2, r2, #4
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	440b      	add	r3, r1
 80048ca:	761a      	strb	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000e100 	.word	0xe000e100
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f1c3 0307 	rsb	r3, r3, #7
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	bf28      	it	cs
 80048fe:	2304      	movcs	r3, #4
 8004900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3304      	adds	r3, #4
 8004906:	2b06      	cmp	r3, #6
 8004908:	d902      	bls.n	8004910 <NVIC_EncodePriority+0x30>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3b03      	subs	r3, #3
 800490e:	e000      	b.n	8004912 <NVIC_EncodePriority+0x32>
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	f04f 32ff 	mov.w	r2, #4294967295
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	401a      	ands	r2, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004928:	f04f 31ff 	mov.w	r1, #4294967295
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43d9      	mvns	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	4313      	orrs	r3, r2
         );
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ff4c 	bl	80047ec <__NVIC_SetPriorityGrouping>
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800496e:	f7ff ff61 	bl	8004834 <__NVIC_GetPriorityGrouping>
 8004972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6978      	ldr	r0, [r7, #20]
 800497a:	f7ff ffb1 	bl	80048e0 <NVIC_EncodePriority>
 800497e:	4602      	mov	r2, r0
 8004980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ff80 	bl	800488c <__NVIC_SetPriority>
}
 800498c:	bf00      	nop
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ff54 	bl	8004850 <__NVIC_EnableIRQ>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049be:	f7ff fee5 	bl	800478c <HAL_GetTick>
 80049c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d008      	beq.n	80049e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e052      	b.n	8004a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0216 	bic.w	r2, r2, #22
 80049f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_DMA_Abort+0x62>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0208 	bic.w	r2, r2, #8
 8004a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a32:	e013      	b.n	8004a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a34:	f7ff feaa 	bl	800478c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d90c      	bls.n	8004a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e015      	b.n	8004a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e4      	bne.n	8004a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	223f      	movs	r2, #63	; 0x3f
 8004a70:	409a      	lsls	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d004      	beq.n	8004aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2280      	movs	r2, #128	; 0x80
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e00c      	b.n	8004ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2205      	movs	r2, #5
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e165      	b.n	8004dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004af0:	2201      	movs	r2, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	f040 8154 	bne.w	8004db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d005      	beq.n	8004b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d130      	bne.n	8004b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	2203      	movs	r2, #3
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 0201 	and.w	r2, r3, #1
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d017      	beq.n	8004bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d123      	bne.n	8004c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	08da      	lsrs	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3208      	adds	r2, #8
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	220f      	movs	r2, #15
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	08da      	lsrs	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3208      	adds	r2, #8
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	2203      	movs	r2, #3
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0203 	and.w	r2, r3, #3
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80ae 	beq.w	8004db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	4b5d      	ldr	r3, [pc, #372]	; (8004dd4 <HAL_GPIO_Init+0x300>)
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	4a5c      	ldr	r2, [pc, #368]	; (8004dd4 <HAL_GPIO_Init+0x300>)
 8004c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c68:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6a:	4b5a      	ldr	r3, [pc, #360]	; (8004dd4 <HAL_GPIO_Init+0x300>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c76:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <HAL_GPIO_Init+0x304>)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	220f      	movs	r2, #15
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a4f      	ldr	r2, [pc, #316]	; (8004ddc <HAL_GPIO_Init+0x308>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d025      	beq.n	8004cee <HAL_GPIO_Init+0x21a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a4e      	ldr	r2, [pc, #312]	; (8004de0 <HAL_GPIO_Init+0x30c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01f      	beq.n	8004cea <HAL_GPIO_Init+0x216>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a4d      	ldr	r2, [pc, #308]	; (8004de4 <HAL_GPIO_Init+0x310>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d019      	beq.n	8004ce6 <HAL_GPIO_Init+0x212>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <HAL_GPIO_Init+0x314>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_GPIO_Init+0x20e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a4b      	ldr	r2, [pc, #300]	; (8004dec <HAL_GPIO_Init+0x318>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00d      	beq.n	8004cde <HAL_GPIO_Init+0x20a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a4a      	ldr	r2, [pc, #296]	; (8004df0 <HAL_GPIO_Init+0x31c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <HAL_GPIO_Init+0x206>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a49      	ldr	r2, [pc, #292]	; (8004df4 <HAL_GPIO_Init+0x320>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_GPIO_Init+0x202>
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	e00c      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	e00a      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004cda:	2305      	movs	r3, #5
 8004cdc:	e008      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004cde:	2304      	movs	r3, #4
 8004ce0:	e006      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e004      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e002      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_GPIO_Init+0x21c>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	f002 0203 	and.w	r2, r2, #3
 8004cf6:	0092      	lsls	r2, r2, #2
 8004cf8:	4093      	lsls	r3, r2
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d00:	4935      	ldr	r1, [pc, #212]	; (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	3302      	adds	r3, #2
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d0e:	4b3a      	ldr	r3, [pc, #232]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d32:	4a31      	ldr	r2, [pc, #196]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d38:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d62:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d86:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004db0:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_GPIO_Init+0x324>)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	f67f ae96 	bls.w	8004af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	3724      	adds	r7, #36	; 0x24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40013800 	.word	0x40013800
 8004ddc:	40020000 	.word	0x40020000
 8004de0:	40020400 	.word	0x40020400
 8004de4:	40020800 	.word	0x40020800
 8004de8:	40020c00 	.word	0x40020c00
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40021400 	.word	0x40021400
 8004df4:	40021800 	.word	0x40021800
 8004df8:	40013c00 	.word	0x40013c00

08004dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	807b      	strh	r3, [r7, #2]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e0c:	787b      	ldrb	r3, [r7, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e18:	e003      	b.n	8004e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e1a:	887b      	ldrh	r3, [r7, #2]
 8004e1c:	041a      	lsls	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	619a      	str	r2, [r3, #24]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e12b      	b.n	800509a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff f958 	bl	800410c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e94:	f001 f87e 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8004e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4a81      	ldr	r2, [pc, #516]	; (80050a4 <HAL_I2C_Init+0x274>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d807      	bhi.n	8004eb4 <HAL_I2C_Init+0x84>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a80      	ldr	r2, [pc, #512]	; (80050a8 <HAL_I2C_Init+0x278>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bf94      	ite	ls
 8004eac:	2301      	movls	r3, #1
 8004eae:	2300      	movhi	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e006      	b.n	8004ec2 <HAL_I2C_Init+0x92>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a7d      	ldr	r2, [pc, #500]	; (80050ac <HAL_I2C_Init+0x27c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	bf94      	ite	ls
 8004ebc:	2301      	movls	r3, #1
 8004ebe:	2300      	movhi	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e0e7      	b.n	800509a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a78      	ldr	r2, [pc, #480]	; (80050b0 <HAL_I2C_Init+0x280>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	0c9b      	lsrs	r3, r3, #18
 8004ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4a6a      	ldr	r2, [pc, #424]	; (80050a4 <HAL_I2C_Init+0x274>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d802      	bhi.n	8004f04 <HAL_I2C_Init+0xd4>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3301      	adds	r3, #1
 8004f02:	e009      	b.n	8004f18 <HAL_I2C_Init+0xe8>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	4a69      	ldr	r2, [pc, #420]	; (80050b4 <HAL_I2C_Init+0x284>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	3301      	adds	r3, #1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	495c      	ldr	r1, [pc, #368]	; (80050a4 <HAL_I2C_Init+0x274>)
 8004f34:	428b      	cmp	r3, r1
 8004f36:	d819      	bhi.n	8004f6c <HAL_I2C_Init+0x13c>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1e59      	subs	r1, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f4c:	400b      	ands	r3, r1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_I2C_Init+0x138>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1e59      	subs	r1, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	e051      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	e04f      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d111      	bne.n	8004f98 <HAL_I2C_Init+0x168>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1e58      	subs	r0, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	440b      	add	r3, r1
 8004f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f86:	3301      	adds	r3, #1
 8004f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e012      	b.n	8004fbe <HAL_I2C_Init+0x18e>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	0099      	lsls	r1, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Init+0x196>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e022      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10e      	bne.n	8004fec <HAL_I2C_Init+0x1bc>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1e58      	subs	r0, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	440b      	add	r3, r1
 8004fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fea:	e00f      	b.n	800500c <HAL_I2C_Init+0x1dc>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e58      	subs	r0, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	0099      	lsls	r1, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005002:	3301      	adds	r3, #1
 8005004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	6809      	ldr	r1, [r1, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800503a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6911      	ldr	r1, [r2, #16]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	430b      	orrs	r3, r1
 800504e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	000186a0 	.word	0x000186a0
 80050a8:	001e847f 	.word	0x001e847f
 80050ac:	003d08ff 	.word	0x003d08ff
 80050b0:	431bde83 	.word	0x431bde83
 80050b4:	10624dd3 	.word	0x10624dd3

080050b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	460b      	mov	r3, r1
 80050cc:	813b      	strh	r3, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050d2:	f7ff fb5b 	bl	800478c <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	f040 80d9 	bne.w	8005298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2319      	movs	r3, #25
 80050ec:	2201      	movs	r2, #1
 80050ee:	496d      	ldr	r1, [pc, #436]	; (80052a4 <HAL_I2C_Mem_Write+0x1ec>)
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fc7f 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0cc      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2C_Mem_Write+0x56>
 800510a:	2302      	movs	r3, #2
 800510c:	e0c5      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d007      	beq.n	8005134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2221      	movs	r2, #33	; 0x21
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a4d      	ldr	r2, [pc, #308]	; (80052a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005176:	88f8      	ldrh	r0, [r7, #6]
 8005178:	893a      	ldrh	r2, [r7, #8]
 800517a:	8979      	ldrh	r1, [r7, #10]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fab6 	bl	80056f8 <I2C_RequestMemoryWrite>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d052      	beq.n	8005238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e081      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fd00 	bl	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d107      	bne.n	80051be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06b      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	781a      	ldrb	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d11b      	bne.n	8005238 <HAL_I2C_Mem_Write+0x180>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d017      	beq.n	8005238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1aa      	bne.n	8005196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fcec 	bl	8005c22 <I2C_WaitOnBTFFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2b04      	cmp	r3, #4
 8005256:	d107      	bne.n	8005268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e016      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	e000      	b.n	800529a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005298:	2302      	movs	r3, #2
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	00100002 	.word	0x00100002
 80052a8:	ffff0000 	.word	0xffff0000

080052ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052c6:	f7ff fa61 	bl	800478c <HAL_GetTick>
 80052ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	f040 8208 	bne.w	80056ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	497b      	ldr	r1, [pc, #492]	; (80054d0 <HAL_I2C_Mem_Read+0x224>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fb85 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	e1fb      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_I2C_Mem_Read+0x56>
 80052fe:	2302      	movs	r3, #2
 8005300:	e1f4      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d007      	beq.n	8005328 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2222      	movs	r2, #34	; 0x22
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a5b      	ldr	r2, [pc, #364]	; (80054d4 <HAL_I2C_Mem_Read+0x228>)
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800536a:	88f8      	ldrh	r0, [r7, #6]
 800536c:	893a      	ldrh	r2, [r7, #8]
 800536e:	8979      	ldrh	r1, [r7, #10]
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4603      	mov	r3, r0
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa52 	bl	8005824 <I2C_RequestMemoryRead>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e1b0      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d113      	bne.n	80053ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005392:	2300      	movs	r3, #0
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e184      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d11b      	bne.n	80053fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	e164      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d11b      	bne.n	800543a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	e144      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005450:	e138      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	2b03      	cmp	r3, #3
 8005458:	f200 80f1 	bhi.w	800563e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	2b01      	cmp	r3, #1
 8005462:	d123      	bne.n	80054ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fc1b 	bl	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e139      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054aa:	e10b      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d14e      	bne.n	8005552 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2200      	movs	r2, #0
 80054bc:	4906      	ldr	r1, [pc, #24]	; (80054d8 <HAL_I2C_Mem_Read+0x22c>)
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fa98 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e10e      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
 80054ce:	bf00      	nop
 80054d0:	00100002 	.word	0x00100002
 80054d4:	ffff0000 	.word	0xffff0000
 80054d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005550:	e0b8      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2200      	movs	r2, #0
 800555a:	4966      	ldr	r1, [pc, #408]	; (80056f4 <HAL_I2C_Mem_Read+0x448>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fa49 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0bf      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2200      	movs	r2, #0
 80055b6:	494f      	ldr	r1, [pc, #316]	; (80056f4 <HAL_I2C_Mem_Read+0x448>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fa1b 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e091      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800563c:	e042      	b.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fb2e 	bl	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e04c      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d118      	bne.n	80056c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f47f aec2 	bne.w	8005452 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	00010004 	.word	0x00010004

080056f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	4608      	mov	r0, r1
 8005702:	4611      	mov	r1, r2
 8005704:	461a      	mov	r2, r3
 8005706:	4603      	mov	r3, r0
 8005708:	817b      	strh	r3, [r7, #10]
 800570a:	460b      	mov	r3, r1
 800570c:	813b      	strh	r3, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	2200      	movs	r2, #0
 800572a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f960 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005748:	d103      	bne.n	8005752 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e05f      	b.n	8005816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	492d      	ldr	r1, [pc, #180]	; (8005820 <I2C_RequestMemoryWrite+0x128>)
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f998 	bl	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e04c      	b.n	8005816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	6a39      	ldr	r1, [r7, #32]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fa02 	bl	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d107      	bne.n	80057ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e02b      	b.n	8005816 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c4:	893b      	ldrh	r3, [r7, #8]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	611a      	str	r2, [r3, #16]
 80057ce:	e021      	b.n	8005814 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057d0:	893b      	ldrh	r3, [r7, #8]
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	6a39      	ldr	r1, [r7, #32]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f9dc 	bl	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d107      	bne.n	8005806 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e005      	b.n	8005816 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800580a:	893b      	ldrh	r3, [r7, #8]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	00010002 	.word	0x00010002

08005824 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	4608      	mov	r0, r1
 800582e:	4611      	mov	r1, r2
 8005830:	461a      	mov	r2, r3
 8005832:	4603      	mov	r3, r0
 8005834:	817b      	strh	r3, [r7, #10]
 8005836:	460b      	mov	r3, r1
 8005838:	813b      	strh	r3, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800584c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	2200      	movs	r2, #0
 8005866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f8c2 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005884:	d103      	bne.n	800588e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0aa      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005892:	897b      	ldrh	r3, [r7, #10]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	4952      	ldr	r1, [pc, #328]	; (80059f0 <I2C_RequestMemoryRead+0x1cc>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f8fa 	bl	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e097      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d0:	6a39      	ldr	r1, [r7, #32]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f964 	bl	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d107      	bne.n	80058f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e076      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005900:	893b      	ldrh	r3, [r7, #8]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	611a      	str	r2, [r3, #16]
 800590a:	e021      	b.n	8005950 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800590c:	893b      	ldrh	r3, [r7, #8]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	b29b      	uxth	r3, r3
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	6a39      	ldr	r1, [r7, #32]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f93e 	bl	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b04      	cmp	r3, #4
 8005930:	d107      	bne.n	8005942 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e050      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005946:	893b      	ldrh	r3, [r7, #8]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005952:	6a39      	ldr	r1, [r7, #32]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f923 	bl	8005ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	2b04      	cmp	r3, #4
 8005966:	d107      	bne.n	8005978 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005976:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e035      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800598a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2200      	movs	r2, #0
 8005994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f82b 	bl	80059f4 <I2C_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00d      	beq.n	80059c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b2:	d103      	bne.n	80059bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e013      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	4906      	ldr	r1, [pc, #24]	; (80059f0 <I2C_RequestMemoryRead+0x1cc>)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f863 	bl	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	00010002 	.word	0x00010002

080059f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a04:	e025      	b.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d021      	beq.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f7fe febd 	bl	800478c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d116      	bne.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e023      	b.n	8005a9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	0c1b      	lsrs	r3, r3, #16
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d10d      	bne.n	8005a78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	43da      	mvns	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4013      	ands	r3, r2
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf0c      	ite	eq
 8005a6e:	2301      	moveq	r3, #1
 8005a70:	2300      	movne	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	e00c      	b.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d0b6      	beq.n	8005a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ab0:	e051      	b.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	d123      	bne.n	8005b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f043 0204 	orr.w	r2, r3, #4
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e046      	b.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d021      	beq.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fe fe3b 	bl	800478c <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d116      	bne.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e020      	b.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10c      	bne.n	8005b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	e00b      	b.n	8005b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	43da      	mvns	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	4013      	ands	r3, r2
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d18d      	bne.n	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bac:	e02d      	b.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f8ce 	bl	8005d50 <I2C_IsAcknowledgeFailed>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e02d      	b.n	8005c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d021      	beq.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fe fde1 	bl	800478c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e007      	b.n	8005c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d1ca      	bne.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c2e:	e02d      	b.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f88d 	bl	8005d50 <I2C_IsAcknowledgeFailed>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e02d      	b.n	8005c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d021      	beq.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c48:	f7fe fda0 	bl	800478c <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d116      	bne.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e007      	b.n	8005c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d1ca      	bne.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cb0:	e042      	b.n	8005d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d119      	bne.n	8005cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0210 	mvn.w	r2, #16
 8005cc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e029      	b.n	8005d48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf4:	f7fe fd4a 	bl	800478c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d302      	bcc.n	8005d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d116      	bne.n	8005d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e007      	b.n	8005d48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d1b5      	bne.n	8005cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d66:	d11b      	bne.n	8005da0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f043 0204 	orr.w	r2, r3, #4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0cc      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b68      	ldr	r3, [pc, #416]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d90c      	bls.n	8005dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b65      	ldr	r3, [pc, #404]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	4b63      	ldr	r3, [pc, #396]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0b8      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e04:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	4a58      	ldr	r2, [pc, #352]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e1c:	4b53      	ldr	r3, [pc, #332]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4a52      	ldr	r2, [pc, #328]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e28:	4b50      	ldr	r3, [pc, #320]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	494d      	ldr	r1, [pc, #308]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d044      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d119      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e07f      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d003      	beq.n	8005e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e06f      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7e:	4b3b      	ldr	r3, [pc, #236]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e067      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e8e:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f023 0203 	bic.w	r2, r3, #3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4934      	ldr	r1, [pc, #208]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ea0:	f7fe fc74 	bl	800478c <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea8:	f7fe fc70 	bl	800478c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e04f      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebe:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 020c 	and.w	r2, r3, #12
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d1eb      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d20c      	bcs.n	8005ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e032      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f04:	4b19      	ldr	r3, [pc, #100]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4916      	ldr	r1, [pc, #88]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	490e      	ldr	r1, [pc, #56]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f36:	f000 f887 	bl	8006048 <HAL_RCC_GetSysClockFreq>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	490a      	ldr	r1, [pc, #40]	; (8005f70 <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	5ccb      	ldrb	r3, [r1, r3]
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe f9ce 	bl	80042f8 <HAL_InitTick>

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40023c00 	.word	0x40023c00
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	0800ec00 	.word	0x0800ec00
 8005f74:	2000006c 	.word	0x2000006c
 8005f78:	20000070 	.word	0x20000070

08005f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f80:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f82:	681b      	ldr	r3, [r3, #0]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	2000006c 	.word	0x2000006c

08005f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f98:	f7ff fff0 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0a9b      	lsrs	r3, r3, #10
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4903      	ldr	r1, [pc, #12]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	0800ec10 	.word	0x0800ec10

08005fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fc0:	f7ff ffdc 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	0b5b      	lsrs	r3, r3, #13
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	4903      	ldr	r1, [pc, #12]	; (8005fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	0800ec10 	.word	0x0800ec10

08005fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0203 	and.w	r2, r3, #3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800600c:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	08db      	lsrs	r3, r3, #3
 800601e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <HAL_RCC_GetClockConfig+0x60>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 020f 	and.w	r2, r3, #15
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	40023c00 	.word	0x40023c00

08006048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800604c:	b0a6      	sub	sp, #152	; 0x98
 800604e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800606e:	4bc8      	ldr	r3, [pc, #800]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b0c      	cmp	r3, #12
 8006078:	f200 817e 	bhi.w	8006378 <HAL_RCC_GetSysClockFreq+0x330>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <HAL_RCC_GetSysClockFreq+0x3c>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060b9 	.word	0x080060b9
 8006088:	08006379 	.word	0x08006379
 800608c:	08006379 	.word	0x08006379
 8006090:	08006379 	.word	0x08006379
 8006094:	080060c1 	.word	0x080060c1
 8006098:	08006379 	.word	0x08006379
 800609c:	08006379 	.word	0x08006379
 80060a0:	08006379 	.word	0x08006379
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	08006379 	.word	0x08006379
 80060ac:	08006379 	.word	0x08006379
 80060b0:	08006379 	.word	0x08006379
 80060b4:	08006233 	.word	0x08006233
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b8:	4bb6      	ldr	r3, [pc, #728]	; (8006394 <HAL_RCC_GetSysClockFreq+0x34c>)
 80060ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80060be:	e15f      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c0:	4bb5      	ldr	r3, [pc, #724]	; (8006398 <HAL_RCC_GetSysClockFreq+0x350>)
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80060c6:	e15b      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c8:	4bb1      	ldr	r3, [pc, #708]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d4:	4bae      	ldr	r3, [pc, #696]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d031      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e0:	4bab      	ldr	r3, [pc, #684]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	099b      	lsrs	r3, r3, #6
 80060e6:	2200      	movs	r2, #0
 80060e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	663b      	str	r3, [r7, #96]	; 0x60
 80060f4:	2300      	movs	r3, #0
 80060f6:	667b      	str	r3, [r7, #100]	; 0x64
 80060f8:	4ba7      	ldr	r3, [pc, #668]	; (8006398 <HAL_RCC_GetSysClockFreq+0x350>)
 80060fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80060fe:	462a      	mov	r2, r5
 8006100:	fb03 f202 	mul.w	r2, r3, r2
 8006104:	2300      	movs	r3, #0
 8006106:	4621      	mov	r1, r4
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	4aa2      	ldr	r2, [pc, #648]	; (8006398 <HAL_RCC_GetSysClockFreq+0x350>)
 8006110:	4621      	mov	r1, r4
 8006112:	fba1 1202 	umull	r1, r2, r1, r2
 8006116:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006118:	460a      	mov	r2, r1
 800611a:	67ba      	str	r2, [r7, #120]	; 0x78
 800611c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800611e:	4413      	add	r3, r2
 8006120:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006126:	2200      	movs	r2, #0
 8006128:	65bb      	str	r3, [r7, #88]	; 0x58
 800612a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800612c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006130:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006134:	f7fa fe10 	bl	8000d58 <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4613      	mov	r3, r2
 800613e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006142:	e064      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006144:	4b92      	ldr	r3, [pc, #584]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	099b      	lsrs	r3, r3, #6
 800614a:	2200      	movs	r2, #0
 800614c:	653b      	str	r3, [r7, #80]	; 0x50
 800614e:	657a      	str	r2, [r7, #84]	; 0x54
 8006150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
 8006158:	2300      	movs	r3, #0
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006160:	4622      	mov	r2, r4
 8006162:	462b      	mov	r3, r5
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	0159      	lsls	r1, r3, #5
 800616e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006172:	0150      	lsls	r0, r2, #5
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4621      	mov	r1, r4
 800617a:	1a51      	subs	r1, r2, r1
 800617c:	6139      	str	r1, [r7, #16]
 800617e:	4629      	mov	r1, r5
 8006180:	eb63 0301 	sbc.w	r3, r3, r1
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006192:	4659      	mov	r1, fp
 8006194:	018b      	lsls	r3, r1, #6
 8006196:	4651      	mov	r1, sl
 8006198:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800619c:	4651      	mov	r1, sl
 800619e:	018a      	lsls	r2, r1, #6
 80061a0:	4651      	mov	r1, sl
 80061a2:	ebb2 0801 	subs.w	r8, r2, r1
 80061a6:	4659      	mov	r1, fp
 80061a8:	eb63 0901 	sbc.w	r9, r3, r1
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c0:	4690      	mov	r8, r2
 80061c2:	4699      	mov	r9, r3
 80061c4:	4623      	mov	r3, r4
 80061c6:	eb18 0303 	adds.w	r3, r8, r3
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	462b      	mov	r3, r5
 80061ce:	eb49 0303 	adc.w	r3, r9, r3
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061e0:	4629      	mov	r1, r5
 80061e2:	028b      	lsls	r3, r1, #10
 80061e4:	4621      	mov	r1, r4
 80061e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061ea:	4621      	mov	r1, r4
 80061ec:	028a      	lsls	r2, r1, #10
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061f6:	2200      	movs	r2, #0
 80061f8:	643b      	str	r3, [r7, #64]	; 0x40
 80061fa:	647a      	str	r2, [r7, #68]	; 0x44
 80061fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006200:	f7fa fdaa 	bl	8000d58 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4613      	mov	r3, r2
 800620a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800620e:	4b60      	ldr	r3, [pc, #384]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	0c1b      	lsrs	r3, r3, #16
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	3301      	adds	r3, #1
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006220:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006230:	e0a6      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006232:	4b57      	ldr	r3, [pc, #348]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800623e:	4b54      	ldr	r3, [pc, #336]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02a      	beq.n	80062a0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624a:	4b51      	ldr	r3, [pc, #324]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	099b      	lsrs	r3, r3, #6
 8006250:	2200      	movs	r2, #0
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
 8006254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800625c:	2100      	movs	r1, #0
 800625e:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <HAL_RCC_GetSysClockFreq+0x350>)
 8006260:	fb03 f201 	mul.w	r2, r3, r1
 8006264:	2300      	movs	r3, #0
 8006266:	fb00 f303 	mul.w	r3, r0, r3
 800626a:	4413      	add	r3, r2
 800626c:	4a4a      	ldr	r2, [pc, #296]	; (8006398 <HAL_RCC_GetSysClockFreq+0x350>)
 800626e:	fba0 1202 	umull	r1, r2, r0, r2
 8006272:	677a      	str	r2, [r7, #116]	; 0x74
 8006274:	460a      	mov	r2, r1
 8006276:	673a      	str	r2, [r7, #112]	; 0x70
 8006278:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800627a:	4413      	add	r3, r2
 800627c:	677b      	str	r3, [r7, #116]	; 0x74
 800627e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006282:	2200      	movs	r2, #0
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
 8006286:	637a      	str	r2, [r7, #52]	; 0x34
 8006288:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800628c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006290:	f7fa fd62 	bl	8000d58 <__aeabi_uldivmod>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4613      	mov	r3, r2
 800629a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800629e:	e05b      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a0:	4b3b      	ldr	r3, [pc, #236]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	099b      	lsrs	r3, r3, #6
 80062a6:	2200      	movs	r2, #0
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	f04f 0000 	mov.w	r0, #0
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	0159      	lsls	r1, r3, #5
 80062ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062ce:	0150      	lsls	r0, r2, #5
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4641      	mov	r1, r8
 80062d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80062da:	4649      	mov	r1, r9
 80062dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f4:	ebb2 040a 	subs.w	r4, r2, sl
 80062f8:	eb63 050b 	sbc.w	r5, r3, fp
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	00eb      	lsls	r3, r5, #3
 8006306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630a:	00e2      	lsls	r2, r4, #3
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	4643      	mov	r3, r8
 8006312:	18e3      	adds	r3, r4, r3
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	464b      	mov	r3, r9
 8006318:	eb45 0303 	adc.w	r3, r5, r3
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632a:	4629      	mov	r1, r5
 800632c:	028b      	lsls	r3, r1, #10
 800632e:	4621      	mov	r1, r4
 8006330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006334:	4621      	mov	r1, r4
 8006336:	028a      	lsls	r2, r1, #10
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006340:	2200      	movs	r2, #0
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	61fa      	str	r2, [r7, #28]
 8006346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634a:	f7fa fd05 	bl	8000d58 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4613      	mov	r3, r2
 8006354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006358:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <HAL_RCC_GetSysClockFreq+0x348>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	0f1b      	lsrs	r3, r3, #28
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800636a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006376:	e003      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_RCC_GetSysClockFreq+0x34c>)
 800637a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800637e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006384:	4618      	mov	r0, r3
 8006386:	3798      	adds	r7, #152	; 0x98
 8006388:	46bd      	mov	sp, r7
 800638a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800
 8006394:	00f42400 	.word	0x00f42400
 8006398:	017d7840 	.word	0x017d7840

0800639c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e28d      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8083 	beq.w	80064c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063bc:	4b94      	ldr	r3, [pc, #592]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 030c 	and.w	r3, r3, #12
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d019      	beq.n	80063fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063c8:	4b91      	ldr	r3, [pc, #580]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d106      	bne.n	80063e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063d4:	4b8e      	ldr	r3, [pc, #568]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e0:	d00c      	beq.n	80063fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063e2:	4b8b      	ldr	r3, [pc, #556]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d112      	bne.n	8006414 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ee:	4b88      	ldr	r3, [pc, #544]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063fa:	d10b      	bne.n	8006414 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	4b84      	ldr	r3, [pc, #528]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d05b      	beq.n	80064c0 <HAL_RCC_OscConfig+0x124>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d157      	bne.n	80064c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e25a      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d106      	bne.n	800642c <HAL_RCC_OscConfig+0x90>
 800641e:	4b7c      	ldr	r3, [pc, #496]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a7b      	ldr	r2, [pc, #492]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e01d      	b.n	8006468 <HAL_RCC_OscConfig+0xcc>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006434:	d10c      	bne.n	8006450 <HAL_RCC_OscConfig+0xb4>
 8006436:	4b76      	ldr	r3, [pc, #472]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a75      	ldr	r2, [pc, #468]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 800643c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b73      	ldr	r3, [pc, #460]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a72      	ldr	r2, [pc, #456]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e00b      	b.n	8006468 <HAL_RCC_OscConfig+0xcc>
 8006450:	4b6f      	ldr	r3, [pc, #444]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a6e      	ldr	r2, [pc, #440]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	4b6c      	ldr	r3, [pc, #432]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a6b      	ldr	r2, [pc, #428]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d013      	beq.n	8006498 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fe f98c 	bl	800478c <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006478:	f7fe f988 	bl	800478c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b64      	cmp	r3, #100	; 0x64
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e21f      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	4b61      	ldr	r3, [pc, #388]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0xdc>
 8006496:	e014      	b.n	80064c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fe f978 	bl	800478c <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064a0:	f7fe f974 	bl	800478c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b64      	cmp	r3, #100	; 0x64
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e20b      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b2:	4b57      	ldr	r3, [pc, #348]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x104>
 80064be:	e000      	b.n	80064c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d06f      	beq.n	80065ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064ce:	4b50      	ldr	r3, [pc, #320]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d017      	beq.n	800650a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064da:	4b4d      	ldr	r3, [pc, #308]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d105      	bne.n	80064f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064e6:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064f2:	4b47      	ldr	r3, [pc, #284]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064fa:	2b0c      	cmp	r3, #12
 80064fc:	d11c      	bne.n	8006538 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fe:	4b44      	ldr	r3, [pc, #272]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d116      	bne.n	8006538 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650a:	4b41      	ldr	r3, [pc, #260]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <HAL_RCC_OscConfig+0x186>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d001      	beq.n	8006522 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e1d3      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006522:	4b3b      	ldr	r3, [pc, #236]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	4937      	ldr	r1, [pc, #220]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006536:	e03a      	b.n	80065ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d020      	beq.n	8006582 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006540:	4b34      	ldr	r3, [pc, #208]	; (8006614 <HAL_RCC_OscConfig+0x278>)
 8006542:	2201      	movs	r2, #1
 8006544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006546:	f7fe f921 	bl	800478c <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800654e:	f7fe f91d 	bl	800478c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e1b4      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006560:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656c:	4b28      	ldr	r3, [pc, #160]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4925      	ldr	r1, [pc, #148]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 800657c:	4313      	orrs	r3, r2
 800657e:	600b      	str	r3, [r1, #0]
 8006580:	e015      	b.n	80065ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <HAL_RCC_OscConfig+0x278>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fe f900 	bl	800478c <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006590:	f7fe f8fc 	bl	800478c <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e193      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d036      	beq.n	8006628 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <HAL_RCC_OscConfig+0x27c>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c8:	f7fe f8e0 	bl	800478c <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d0:	f7fe f8dc 	bl	800478c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e173      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <HAL_RCC_OscConfig+0x274>)
 80065e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0x234>
 80065ee:	e01b      	b.n	8006628 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <HAL_RCC_OscConfig+0x27c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fe f8c9 	bl	800478c <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065fc:	e00e      	b.n	800661c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fe f8c5 	bl	800478c <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d907      	bls.n	800661c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e15c      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
 8006610:	40023800 	.word	0x40023800
 8006614:	42470000 	.word	0x42470000
 8006618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800661c:	4b8a      	ldr	r3, [pc, #552]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 800661e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1ea      	bne.n	80065fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8097 	beq.w	8006764 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800663a:	4b83      	ldr	r3, [pc, #524]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10f      	bne.n	8006666 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	4b7f      	ldr	r3, [pc, #508]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	4a7e      	ldr	r2, [pc, #504]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	6413      	str	r3, [r2, #64]	; 0x40
 8006656:	4b7c      	ldr	r3, [pc, #496]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006666:	4b79      	ldr	r3, [pc, #484]	; (800684c <HAL_RCC_OscConfig+0x4b0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d118      	bne.n	80066a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006672:	4b76      	ldr	r3, [pc, #472]	; (800684c <HAL_RCC_OscConfig+0x4b0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a75      	ldr	r2, [pc, #468]	; (800684c <HAL_RCC_OscConfig+0x4b0>)
 8006678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667e:	f7fe f885 	bl	800478c <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006686:	f7fe f881 	bl	800478c <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e118      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	4b6c      	ldr	r3, [pc, #432]	; (800684c <HAL_RCC_OscConfig+0x4b0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <HAL_RCC_OscConfig+0x31e>
 80066ac:	4b66      	ldr	r3, [pc, #408]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4a65      	ldr	r2, [pc, #404]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	; 0x70
 80066b8:	e01c      	b.n	80066f4 <HAL_RCC_OscConfig+0x358>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d10c      	bne.n	80066dc <HAL_RCC_OscConfig+0x340>
 80066c2:	4b61      	ldr	r3, [pc, #388]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	4a60      	ldr	r2, [pc, #384]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066c8:	f043 0304 	orr.w	r3, r3, #4
 80066cc:	6713      	str	r3, [r2, #112]	; 0x70
 80066ce:	4b5e      	ldr	r3, [pc, #376]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	4a5d      	ldr	r2, [pc, #372]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	6713      	str	r3, [r2, #112]	; 0x70
 80066da:	e00b      	b.n	80066f4 <HAL_RCC_OscConfig+0x358>
 80066dc:	4b5a      	ldr	r3, [pc, #360]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e0:	4a59      	ldr	r2, [pc, #356]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	6713      	str	r3, [r2, #112]	; 0x70
 80066e8:	4b57      	ldr	r3, [pc, #348]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ec:	4a56      	ldr	r2, [pc, #344]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80066ee:	f023 0304 	bic.w	r3, r3, #4
 80066f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d015      	beq.n	8006728 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fe f846 	bl	800478c <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006702:	e00a      	b.n	800671a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006704:	f7fe f842 	bl	800478c <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e0d7      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800671a:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0ee      	beq.n	8006704 <HAL_RCC_OscConfig+0x368>
 8006726:	e014      	b.n	8006752 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006728:	f7fe f830 	bl	800478c <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672e:	e00a      	b.n	8006746 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006730:	f7fe f82c 	bl	800478c <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f241 3288 	movw	r2, #5000	; 0x1388
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e0c1      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006746:	4b40      	ldr	r3, [pc, #256]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ee      	bne.n	8006730 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d105      	bne.n	8006764 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006758:	4b3b      	ldr	r3, [pc, #236]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 800675e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80ad 	beq.w	80068c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800676e:	4b36      	ldr	r3, [pc, #216]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 030c 	and.w	r3, r3, #12
 8006776:	2b08      	cmp	r3, #8
 8006778:	d060      	beq.n	800683c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d145      	bne.n	800680e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006782:	4b33      	ldr	r3, [pc, #204]	; (8006850 <HAL_RCC_OscConfig+0x4b4>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fe f800 	bl	800478c <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006790:	f7fd fffc 	bl	800478c <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e093      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a2:	4b29      	ldr	r3, [pc, #164]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69da      	ldr	r2, [r3, #28]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	019b      	lsls	r3, r3, #6
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	3b01      	subs	r3, #1
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	061b      	lsls	r3, r3, #24
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	491b      	ldr	r1, [pc, #108]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e0:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <HAL_RCC_OscConfig+0x4b4>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e6:	f7fd ffd1 	bl	800478c <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ee:	f7fd ffcd 	bl	800478c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e064      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006800:	4b11      	ldr	r3, [pc, #68]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <HAL_RCC_OscConfig+0x452>
 800680c:	e05c      	b.n	80068c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <HAL_RCC_OscConfig+0x4b4>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fd ffba 	bl	800478c <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fd ffb6 	bl	800478c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e04d      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800682e:	4b06      	ldr	r3, [pc, #24]	; (8006848 <HAL_RCC_OscConfig+0x4ac>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x480>
 800683a:	e045      	b.n	80068c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d107      	bne.n	8006854 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e040      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
 8006848:	40023800 	.word	0x40023800
 800684c:	40007000 	.word	0x40007000
 8006850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <HAL_RCC_OscConfig+0x538>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d030      	beq.n	80068c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d129      	bne.n	80068c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687a:	429a      	cmp	r2, r3
 800687c:	d122      	bne.n	80068c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800688a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800688c:	4293      	cmp	r3, r2
 800688e:	d119      	bne.n	80068c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	3b01      	subs	r3, #1
 800689e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d10f      	bne.n	80068c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d107      	bne.n	80068c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800

080068d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e041      	b.n	800696e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fd fc4c 	bl	800419c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f000 fa96 	bl	8006e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d001      	beq.n	8006990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e04e      	b.n	8006a2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a23      	ldr	r2, [pc, #140]	; (8006a3c <HAL_TIM_Base_Start_IT+0xc4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d022      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ba:	d01d      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_TIM_Base_Start_IT+0xc8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d018      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <HAL_TIM_Base_Start_IT+0xcc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_TIM_Base_Start_IT+0xd0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00e      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <HAL_TIM_Base_Start_IT+0xd4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_TIM_Base_Start_IT+0xd8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x80>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <HAL_TIM_Base_Start_IT+0xdc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d111      	bne.n	8006a1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d010      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1a:	e007      	b.n	8006a2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40010400 	.word	0x40010400
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40001800 	.word	0x40001800

08006a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d122      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d11b      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0202 	mvn.w	r2, #2
 8006a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9b5 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9a7 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9b8 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d122      	bne.n	8006b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d11b      	bne.n	8006b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0204 	mvn.w	r2, #4
 8006ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f98b 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006af4:	e005      	b.n	8006b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f97d 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f98e 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d122      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d11b      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0208 	mvn.w	r2, #8
 8006b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2204      	movs	r2, #4
 8006b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f961 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006b48:	e005      	b.n	8006b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f953 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f964 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d122      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d11b      	bne.n	8006bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0210 	mvn.w	r2, #16
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2208      	movs	r2, #8
 8006b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f937 	bl	8006e0a <HAL_TIM_IC_CaptureCallback>
 8006b9c:	e005      	b.n	8006baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f929 	bl	8006df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f93a 	bl	8006e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d10e      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d107      	bne.n	8006bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0201 	mvn.w	r2, #1
 8006bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc fd9c 	bl	8003714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d10e      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d107      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fae0 	bl	80071c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d10e      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d107      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f8ff 	bl	8006e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d10e      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d107      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0220 	mvn.w	r2, #32
 8006c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 faaa 	bl	80071b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_TIM_ConfigClockSource+0x1c>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e0b4      	b.n	8006dee <HAL_TIM_ConfigClockSource+0x186>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbc:	d03e      	beq.n	8006d3c <HAL_TIM_ConfigClockSource+0xd4>
 8006cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc2:	f200 8087 	bhi.w	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	f000 8086 	beq.w	8006dda <HAL_TIM_ConfigClockSource+0x172>
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd2:	d87f      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd4:	2b70      	cmp	r3, #112	; 0x70
 8006cd6:	d01a      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0xa6>
 8006cd8:	2b70      	cmp	r3, #112	; 0x70
 8006cda:	d87b      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cdc:	2b60      	cmp	r3, #96	; 0x60
 8006cde:	d050      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x11a>
 8006ce0:	2b60      	cmp	r3, #96	; 0x60
 8006ce2:	d877      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce4:	2b50      	cmp	r3, #80	; 0x50
 8006ce6:	d03c      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0xfa>
 8006ce8:	2b50      	cmp	r3, #80	; 0x50
 8006cea:	d873      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d058      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x13a>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d86f      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b30      	cmp	r3, #48	; 0x30
 8006cf6:	d064      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006cf8:	2b30      	cmp	r3, #48	; 0x30
 8006cfa:	d86b      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d060      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d867      	bhi.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d05c      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d05a      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d0c:	e062      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6899      	ldr	r1, [r3, #8]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f000 f9ad 	bl	800707c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	609a      	str	r2, [r3, #8]
      break;
 8006d3a:	e04f      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f000 f996 	bl	800707c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5e:	609a      	str	r2, [r3, #8]
      break;
 8006d60:	e03c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6859      	ldr	r1, [r3, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f000 f90a 	bl	8006f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2150      	movs	r1, #80	; 0x50
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f963 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006d80:	e02c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f000 f929 	bl	8006fe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2160      	movs	r1, #96	; 0x60
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f953 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006da0:	e01c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 f8ea 	bl	8006f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2140      	movs	r1, #64	; 0x40
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f943 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e00c      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f000 f93a 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006dd2:	e003      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd8:	e000      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a40      	ldr	r2, [pc, #256]	; (8006f5c <TIM_Base_SetConfig+0x114>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e66:	d00f      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a3d      	ldr	r2, [pc, #244]	; (8006f60 <TIM_Base_SetConfig+0x118>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a3c      	ldr	r2, [pc, #240]	; (8006f64 <TIM_Base_SetConfig+0x11c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a3b      	ldr	r2, [pc, #236]	; (8006f68 <TIM_Base_SetConfig+0x120>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a3a      	ldr	r2, [pc, #232]	; (8006f6c <TIM_Base_SetConfig+0x124>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d108      	bne.n	8006e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <TIM_Base_SetConfig+0x114>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d02b      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d027      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <TIM_Base_SetConfig+0x118>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d023      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2b      	ldr	r2, [pc, #172]	; (8006f64 <TIM_Base_SetConfig+0x11c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01f      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <TIM_Base_SetConfig+0x120>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01b      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <TIM_Base_SetConfig+0x124>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d017      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <TIM_Base_SetConfig+0x128>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <TIM_Base_SetConfig+0x12c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00f      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a26      	ldr	r2, [pc, #152]	; (8006f78 <TIM_Base_SetConfig+0x130>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a25      	ldr	r2, [pc, #148]	; (8006f7c <TIM_Base_SetConfig+0x134>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a24      	ldr	r2, [pc, #144]	; (8006f80 <TIM_Base_SetConfig+0x138>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a23      	ldr	r2, [pc, #140]	; (8006f84 <TIM_Base_SetConfig+0x13c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d108      	bne.n	8006f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <TIM_Base_SetConfig+0x114>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_Base_SetConfig+0xf8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a0c      	ldr	r2, [pc, #48]	; (8006f6c <TIM_Base_SetConfig+0x124>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d103      	bne.n	8006f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	615a      	str	r2, [r3, #20]
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40010400 	.word	0x40010400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800
 8006f7c:	40001800 	.word	0x40001800
 8006f80:	40001c00 	.word	0x40001c00
 8006f84:	40002000 	.word	0x40002000

08006f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f023 0201 	bic.w	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f023 030a 	bic.w	r3, r3, #10
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f023 0210 	bic.w	r2, r3, #16
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	f043 0307 	orr.w	r3, r3, #7
 8007068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	609a      	str	r2, [r3, #8]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	021a      	lsls	r2, r3, #8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	431a      	orrs	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	609a      	str	r2, [r3, #8]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e05a      	b.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a21      	ldr	r2, [pc, #132]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d022      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007120:	d01d      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1d      	ldr	r2, [pc, #116]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d018      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1b      	ldr	r2, [pc, #108]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1a      	ldr	r2, [pc, #104]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10c      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4313      	orrs	r3, r2
 800716e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40010000 	.word	0x40010000
 800719c:	40000400 	.word	0x40000400
 80071a0:	40000800 	.word	0x40000800
 80071a4:	40000c00 	.word	0x40000c00
 80071a8:	40010400 	.word	0x40010400
 80071ac:	40014000 	.word	0x40014000
 80071b0:	40001800 	.word	0x40001800

080071b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e03f      	b.n	800726e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fc fff2 	bl	80041ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2224      	movs	r2, #36	; 0x24
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800721e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fddf 	bl	8007de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b08a      	sub	sp, #40	; 0x28
 800727a:	af02      	add	r7, sp, #8
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b20      	cmp	r3, #32
 8007294:	d17c      	bne.n	8007390 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_UART_Transmit+0x2c>
 800729c:	88fb      	ldrh	r3, [r7, #6]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e075      	b.n	8007392 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_UART_Transmit+0x3e>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e06e      	b.n	8007392 <HAL_UART_Transmit+0x11c>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2221      	movs	r2, #33	; 0x21
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ca:	f7fd fa5f 	bl	800478c <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	88fa      	ldrh	r2, [r7, #6]
 80072d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	88fa      	ldrh	r2, [r7, #6]
 80072da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e4:	d108      	bne.n	80072f8 <HAL_UART_Transmit+0x82>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e003      	b.n	8007300 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007308:	e02a      	b.n	8007360 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2200      	movs	r2, #0
 8007312:	2180      	movs	r1, #128	; 0x80
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fb1f 	bl	8007958 <UART_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e036      	b.n	8007392 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007338:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	3302      	adds	r3, #2
 800733e:	61bb      	str	r3, [r7, #24]
 8007340:	e007      	b.n	8007352 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	781a      	ldrb	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	3301      	adds	r3, #1
 8007350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1cf      	bne.n	800730a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2200      	movs	r2, #0
 8007372:	2140      	movs	r1, #64	; 0x40
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 faef 	bl	8007958 <UART_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e006      	b.n	8007392 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	e000      	b.n	8007392 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007390:	2302      	movs	r3, #2
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	4613      	mov	r3, r2
 80073a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d11d      	bne.n	80073f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_UART_Receive_IT+0x26>
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e016      	b.n	80073f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_UART_Receive_IT+0x38>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e00f      	b.n	80073f2 <HAL_UART_Receive_IT+0x58>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fb24 	bl	8007a34 <UART_Start_Receive_IT>
 80073ec:	4603      	mov	r3, r0
 80073ee:	e000      	b.n	80073f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073f0:	2302      	movs	r3, #2
  }
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b0ba      	sub	sp, #232	; 0xe8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007422:	2300      	movs	r3, #0
 8007424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007428:	2300      	movs	r3, #0
 800742a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800742e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800743a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10f      	bne.n	8007462 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_UART_IRQHandler+0x66>
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fc07 	bl	8007c6e <UART_Receive_IT>
      return;
 8007460:	e256      	b.n	8007910 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 80de 	beq.w	8007628 <HAL_UART_IRQHandler+0x22c>
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 80d1 	beq.w	8007628 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <HAL_UART_IRQHandler+0xae>
 8007492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f043 0201 	orr.w	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <HAL_UART_IRQHandler+0xd2>
 80074b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f043 0202 	orr.w	r2, r3, #2
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <HAL_UART_IRQHandler+0xf6>
 80074da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f043 0204 	orr.w	r2, r3, #4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d011      	beq.n	8007522 <HAL_UART_IRQHandler+0x126>
 80074fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800750a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f043 0208 	orr.w	r2, r3, #8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 81ed 	beq.w	8007906 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d008      	beq.n	800754a <HAL_UART_IRQHandler+0x14e>
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fb92 	bl	8007c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <HAL_UART_IRQHandler+0x17a>
 800756e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d04f      	beq.n	8007616 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa9a 	bl	8007ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d141      	bne.n	800760e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3314      	adds	r3, #20
 8007590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d9      	bne.n	800758a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	4a7d      	ldr	r2, [pc, #500]	; (80077d8 <HAL_UART_IRQHandler+0x3dc>)
 80075e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fd fa50 	bl	8004a90 <HAL_DMA_Abort_IT>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d016      	beq.n	8007624 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	e00e      	b.n	8007624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f990 	bl	800792c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	e00a      	b.n	8007624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f98c 	bl	800792c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	e006      	b.n	8007624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f988 	bl	800792c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007622:	e170      	b.n	8007906 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007624:	bf00      	nop
    return;
 8007626:	e16e      	b.n	8007906 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	2b01      	cmp	r3, #1
 800762e:	f040 814a 	bne.w	80078c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 8143 	beq.w	80078c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 813c 	beq.w	80078c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	f040 80b4 	bne.w	80077dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8140 	beq.w	800790a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800768e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007692:	429a      	cmp	r2, r3
 8007694:	f080 8139 	bcs.w	800790a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800769e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076aa:	f000 8088 	beq.w	80077be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1d9      	bne.n	80076ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800770a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3314      	adds	r3, #20
 800771a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800771e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007722:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007726:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e1      	bne.n	80076fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3314      	adds	r3, #20
 8007756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800775a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800775c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007760:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800778c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800778e:	f023 0310 	bic.w	r3, r3, #16
 8007792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80077a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e3      	bne.n	800777c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fd f8f9 	bl	80049b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f8b6 	bl	8007940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077d4:	e099      	b.n	800790a <HAL_UART_IRQHandler+0x50e>
 80077d6:	bf00      	nop
 80077d8:	08007b77 	.word	0x08007b77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 808b 	beq.w	800790e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8086 	beq.w	800790e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007826:	647a      	str	r2, [r7, #68]	; 0x44
 8007828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800782c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e3      	bne.n	8007802 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3314      	adds	r3, #20
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	623b      	str	r3, [r7, #32]
   return(result);
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800785e:	633a      	str	r2, [r7, #48]	; 0x30
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e3      	bne.n	800783a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	330c      	adds	r3, #12
 80078a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078a4:	61fa      	str	r2, [r7, #28]
 80078a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69b9      	ldr	r1, [r7, #24]
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	617b      	str	r3, [r7, #20]
   return(result);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e3      	bne.n	8007880 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f83e 	bl	8007940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078c4:	e023      	b.n	800790e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <HAL_UART_IRQHandler+0x4ea>
 80078d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f95d 	bl	8007b9e <UART_Transmit_IT>
    return;
 80078e4:	e014      	b.n	8007910 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <HAL_UART_IRQHandler+0x514>
 80078f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f99d 	bl	8007c3e <UART_EndTransmit_IT>
    return;
 8007904:	e004      	b.n	8007910 <HAL_UART_IRQHandler+0x514>
    return;
 8007906:	bf00      	nop
 8007908:	e002      	b.n	8007910 <HAL_UART_IRQHandler+0x514>
      return;
 800790a:	bf00      	nop
 800790c:	e000      	b.n	8007910 <HAL_UART_IRQHandler+0x514>
      return;
 800790e:	bf00      	nop
  }
}
 8007910:	37e8      	adds	r7, #232	; 0xe8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop

08007918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b090      	sub	sp, #64	; 0x40
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007968:	e050      	b.n	8007a0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800796a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d04c      	beq.n	8007a0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007974:	2b00      	cmp	r3, #0
 8007976:	d007      	beq.n	8007988 <UART_WaitOnFlagUntilTimeout+0x30>
 8007978:	f7fc ff08 	bl	800478c <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007984:	429a      	cmp	r2, r3
 8007986:	d241      	bcs.n	8007a0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079a8:	637a      	str	r2, [r7, #52]	; 0x34
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e5      	bne.n	8007988 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3314      	adds	r3, #20
 80079c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	613b      	str	r3, [r7, #16]
   return(result);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3314      	adds	r3, #20
 80079da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079dc:	623a      	str	r2, [r7, #32]
 80079de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69f9      	ldr	r1, [r7, #28]
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e00f      	b.n	8007a2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4013      	ands	r3, r2
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	bf0c      	ite	eq
 8007a1c:	2301      	moveq	r3, #1
 8007a1e:	2300      	movne	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d09f      	beq.n	800796a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3740      	adds	r7, #64	; 0x40
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	88fa      	ldrh	r2, [r7, #6]
 8007a52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2222      	movs	r2, #34	; 0x22
 8007a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695a      	ldr	r2, [r3, #20]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0220 	orr.w	r2, r2, #32
 8007aa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3314      	adds	r3, #20
 8007af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d119      	bne.n	8007b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	61ba      	str	r2, [r7, #24]
 8007b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b6a:	bf00      	nop
 8007b6c:	3754      	adds	r7, #84	; 0x54
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff fecb 	bl	800792c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b21      	cmp	r3, #33	; 0x21
 8007bb0:	d13e      	bne.n	8007c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bba:	d114      	bne.n	8007be6 <UART_Transmit_IT+0x48>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d110      	bne.n	8007be6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	1c9a      	adds	r2, r3, #2
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	621a      	str	r2, [r3, #32]
 8007be4:	e008      	b.n	8007bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	1c59      	adds	r1, r3, #1
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6211      	str	r1, [r2, #32]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4619      	mov	r1, r3
 8007c06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10f      	bne.n	8007c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e000      	b.n	8007c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c30:	2302      	movs	r3, #2
  }
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fe5a 	bl	8007918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b08c      	sub	sp, #48	; 0x30
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b22      	cmp	r3, #34	; 0x22
 8007c80:	f040 80ab 	bne.w	8007dda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8c:	d117      	bne.n	8007cbe <UART_Receive_IT+0x50>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d113      	bne.n	8007cbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	1c9a      	adds	r2, r3, #2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	629a      	str	r2, [r3, #40]	; 0x28
 8007cbc:	e026      	b.n	8007d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd0:	d007      	beq.n	8007ce2 <UART_Receive_IT+0x74>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <UART_Receive_IT+0x82>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e008      	b.n	8007d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d15a      	bne.n	8007dd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0220 	bic.w	r2, r2, #32
 8007d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695a      	ldr	r2, [r3, #20]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0201 	bic.w	r2, r2, #1
 8007d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d135      	bne.n	8007dcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	613b      	str	r3, [r7, #16]
   return(result);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f023 0310 	bic.w	r3, r3, #16
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d86:	623a      	str	r2, [r7, #32]
 8007d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	69f9      	ldr	r1, [r7, #28]
 8007d8c:	6a3a      	ldr	r2, [r7, #32]
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e5      	bne.n	8007d66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d10a      	bne.n	8007dbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007da8:	2300      	movs	r3, #0
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff fdbb 	bl	8007940 <HAL_UARTEx_RxEventCallback>
 8007dca:	e002      	b.n	8007dd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7fb f84f 	bl	8002e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e002      	b.n	8007ddc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e000      	b.n	8007ddc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007dda:	2302      	movs	r3, #2
  }
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3730      	adds	r7, #48	; 0x30
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de8:	b0c0      	sub	sp, #256	; 0x100
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e00:	68d9      	ldr	r1, [r3, #12]
 8007e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	ea40 0301 	orr.w	r3, r0, r1
 8007e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e3c:	f021 010c 	bic.w	r1, r1, #12
 8007e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e4a:	430b      	orrs	r3, r1
 8007e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5e:	6999      	ldr	r1, [r3, #24]
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	ea40 0301 	orr.w	r3, r0, r1
 8007e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b8f      	ldr	r3, [pc, #572]	; (80080b0 <UART_SetConfig+0x2cc>)
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d005      	beq.n	8007e84 <UART_SetConfig+0xa0>
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b8d      	ldr	r3, [pc, #564]	; (80080b4 <UART_SetConfig+0x2d0>)
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d104      	bne.n	8007e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e84:	f7fe f89a 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 8007e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e8c:	e003      	b.n	8007e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e8e:	f7fe f881 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8007e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea0:	f040 810c 	bne.w	80080bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	462b      	mov	r3, r5
 8007eba:	1891      	adds	r1, r2, r2
 8007ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ebe:	415b      	adcs	r3, r3
 8007ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	eb12 0801 	adds.w	r8, r2, r1
 8007ecc:	4629      	mov	r1, r5
 8007ece:	eb43 0901 	adc.w	r9, r3, r1
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ee6:	4690      	mov	r8, r2
 8007ee8:	4699      	mov	r9, r3
 8007eea:	4623      	mov	r3, r4
 8007eec:	eb18 0303 	adds.w	r3, r8, r3
 8007ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	eb49 0303 	adc.w	r3, r9, r3
 8007efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f12:	460b      	mov	r3, r1
 8007f14:	18db      	adds	r3, r3, r3
 8007f16:	653b      	str	r3, [r7, #80]	; 0x50
 8007f18:	4613      	mov	r3, r2
 8007f1a:	eb42 0303 	adc.w	r3, r2, r3
 8007f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8007f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f28:	f7f8 ff16 	bl	8000d58 <__aeabi_uldivmod>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4b61      	ldr	r3, [pc, #388]	; (80080b8 <UART_SetConfig+0x2d4>)
 8007f32:	fba3 2302 	umull	r2, r3, r3, r2
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	011c      	lsls	r4, r3, #4
 8007f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	464b      	mov	r3, r9
 8007f50:	1891      	adds	r1, r2, r2
 8007f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f54:	415b      	adcs	r3, r3
 8007f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f5c:	4641      	mov	r1, r8
 8007f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8007f62:	4649      	mov	r1, r9
 8007f64:	eb43 0b01 	adc.w	fp, r3, r1
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 0300 	mov.w	r3, #0
 8007f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f7c:	4692      	mov	sl, r2
 8007f7e:	469b      	mov	fp, r3
 8007f80:	4643      	mov	r3, r8
 8007f82:	eb1a 0303 	adds.w	r3, sl, r3
 8007f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8007f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	18db      	adds	r3, r3, r3
 8007fac:	643b      	str	r3, [r7, #64]	; 0x40
 8007fae:	4613      	mov	r3, r2
 8007fb0:	eb42 0303 	adc.w	r3, r2, r3
 8007fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007fbe:	f7f8 fecb 	bl	8000d58 <__aeabi_uldivmod>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4b3b      	ldr	r3, [pc, #236]	; (80080b8 <UART_SetConfig+0x2d4>)
 8007fca:	fba3 2301 	umull	r2, r3, r3, r1
 8007fce:	095b      	lsrs	r3, r3, #5
 8007fd0:	2264      	movs	r2, #100	; 0x64
 8007fd2:	fb02 f303 	mul.w	r3, r2, r3
 8007fd6:	1acb      	subs	r3, r1, r3
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007fde:	4b36      	ldr	r3, [pc, #216]	; (80080b8 <UART_SetConfig+0x2d4>)
 8007fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fec:	441c      	add	r4, r3
 8007fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008000:	4642      	mov	r2, r8
 8008002:	464b      	mov	r3, r9
 8008004:	1891      	adds	r1, r2, r2
 8008006:	63b9      	str	r1, [r7, #56]	; 0x38
 8008008:	415b      	adcs	r3, r3
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008010:	4641      	mov	r1, r8
 8008012:	1851      	adds	r1, r2, r1
 8008014:	6339      	str	r1, [r7, #48]	; 0x30
 8008016:	4649      	mov	r1, r9
 8008018:	414b      	adcs	r3, r1
 800801a:	637b      	str	r3, [r7, #52]	; 0x34
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	f04f 0300 	mov.w	r3, #0
 8008024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008028:	4659      	mov	r1, fp
 800802a:	00cb      	lsls	r3, r1, #3
 800802c:	4651      	mov	r1, sl
 800802e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008032:	4651      	mov	r1, sl
 8008034:	00ca      	lsls	r2, r1, #3
 8008036:	4610      	mov	r0, r2
 8008038:	4619      	mov	r1, r3
 800803a:	4603      	mov	r3, r0
 800803c:	4642      	mov	r2, r8
 800803e:	189b      	adds	r3, r3, r2
 8008040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008044:	464b      	mov	r3, r9
 8008046:	460a      	mov	r2, r1
 8008048:	eb42 0303 	adc.w	r3, r2, r3
 800804c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800805c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008064:	460b      	mov	r3, r1
 8008066:	18db      	adds	r3, r3, r3
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
 800806a:	4613      	mov	r3, r2
 800806c:	eb42 0303 	adc.w	r3, r2, r3
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800807a:	f7f8 fe6d 	bl	8000d58 <__aeabi_uldivmod>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <UART_SetConfig+0x2d4>)
 8008084:	fba3 1302 	umull	r1, r3, r3, r2
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	2164      	movs	r1, #100	; 0x64
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	3332      	adds	r3, #50	; 0x32
 8008096:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <UART_SetConfig+0x2d4>)
 8008098:	fba2 2303 	umull	r2, r3, r2, r3
 800809c:	095b      	lsrs	r3, r3, #5
 800809e:	f003 0207 	and.w	r2, r3, #7
 80080a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4422      	add	r2, r4
 80080aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080ac:	e106      	b.n	80082bc <UART_SetConfig+0x4d8>
 80080ae:	bf00      	nop
 80080b0:	40011000 	.word	0x40011000
 80080b4:	40011400 	.word	0x40011400
 80080b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080ce:	4642      	mov	r2, r8
 80080d0:	464b      	mov	r3, r9
 80080d2:	1891      	adds	r1, r2, r2
 80080d4:	6239      	str	r1, [r7, #32]
 80080d6:	415b      	adcs	r3, r3
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080de:	4641      	mov	r1, r8
 80080e0:	1854      	adds	r4, r2, r1
 80080e2:	4649      	mov	r1, r9
 80080e4:	eb43 0501 	adc.w	r5, r3, r1
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	00eb      	lsls	r3, r5, #3
 80080f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080f6:	00e2      	lsls	r2, r4, #3
 80080f8:	4614      	mov	r4, r2
 80080fa:	461d      	mov	r5, r3
 80080fc:	4643      	mov	r3, r8
 80080fe:	18e3      	adds	r3, r4, r3
 8008100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008104:	464b      	mov	r3, r9
 8008106:	eb45 0303 	adc.w	r3, r5, r3
 800810a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800810e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800811a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800812a:	4629      	mov	r1, r5
 800812c:	008b      	lsls	r3, r1, #2
 800812e:	4621      	mov	r1, r4
 8008130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008134:	4621      	mov	r1, r4
 8008136:	008a      	lsls	r2, r1, #2
 8008138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800813c:	f7f8 fe0c 	bl	8000d58 <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4b60      	ldr	r3, [pc, #384]	; (80082c8 <UART_SetConfig+0x4e4>)
 8008146:	fba3 2302 	umull	r2, r3, r3, r2
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	011c      	lsls	r4, r3, #4
 800814e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008152:	2200      	movs	r2, #0
 8008154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800815c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008160:	4642      	mov	r2, r8
 8008162:	464b      	mov	r3, r9
 8008164:	1891      	adds	r1, r2, r2
 8008166:	61b9      	str	r1, [r7, #24]
 8008168:	415b      	adcs	r3, r3
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008170:	4641      	mov	r1, r8
 8008172:	1851      	adds	r1, r2, r1
 8008174:	6139      	str	r1, [r7, #16]
 8008176:	4649      	mov	r1, r9
 8008178:	414b      	adcs	r3, r1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	f04f 0300 	mov.w	r3, #0
 8008184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008188:	4659      	mov	r1, fp
 800818a:	00cb      	lsls	r3, r1, #3
 800818c:	4651      	mov	r1, sl
 800818e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008192:	4651      	mov	r1, sl
 8008194:	00ca      	lsls	r2, r1, #3
 8008196:	4610      	mov	r0, r2
 8008198:	4619      	mov	r1, r3
 800819a:	4603      	mov	r3, r0
 800819c:	4642      	mov	r2, r8
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081a4:	464b      	mov	r3, r9
 80081a6:	460a      	mov	r2, r1
 80081a8:	eb42 0303 	adc.w	r3, r2, r3
 80081ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80081ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081c8:	4649      	mov	r1, r9
 80081ca:	008b      	lsls	r3, r1, #2
 80081cc:	4641      	mov	r1, r8
 80081ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d2:	4641      	mov	r1, r8
 80081d4:	008a      	lsls	r2, r1, #2
 80081d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081da:	f7f8 fdbd 	bl	8000d58 <__aeabi_uldivmod>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	4b38      	ldr	r3, [pc, #224]	; (80082c8 <UART_SetConfig+0x4e4>)
 80081e6:	fba3 2301 	umull	r2, r3, r3, r1
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	2264      	movs	r2, #100	; 0x64
 80081ee:	fb02 f303 	mul.w	r3, r2, r3
 80081f2:	1acb      	subs	r3, r1, r3
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	3332      	adds	r3, #50	; 0x32
 80081f8:	4a33      	ldr	r2, [pc, #204]	; (80082c8 <UART_SetConfig+0x4e4>)
 80081fa:	fba2 2303 	umull	r2, r3, r2, r3
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008204:	441c      	add	r4, r3
 8008206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800820a:	2200      	movs	r2, #0
 800820c:	673b      	str	r3, [r7, #112]	; 0x70
 800820e:	677a      	str	r2, [r7, #116]	; 0x74
 8008210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	1891      	adds	r1, r2, r2
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	415b      	adcs	r3, r3
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008224:	4641      	mov	r1, r8
 8008226:	1851      	adds	r1, r2, r1
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	4649      	mov	r1, r9
 800822c:	414b      	adcs	r3, r1
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800823c:	4659      	mov	r1, fp
 800823e:	00cb      	lsls	r3, r1, #3
 8008240:	4651      	mov	r1, sl
 8008242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008246:	4651      	mov	r1, sl
 8008248:	00ca      	lsls	r2, r1, #3
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	4603      	mov	r3, r0
 8008250:	4642      	mov	r2, r8
 8008252:	189b      	adds	r3, r3, r2
 8008254:	66bb      	str	r3, [r7, #104]	; 0x68
 8008256:	464b      	mov	r3, r9
 8008258:	460a      	mov	r2, r1
 800825a:	eb42 0303 	adc.w	r3, r2, r3
 800825e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	663b      	str	r3, [r7, #96]	; 0x60
 800826a:	667a      	str	r2, [r7, #100]	; 0x64
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008278:	4649      	mov	r1, r9
 800827a:	008b      	lsls	r3, r1, #2
 800827c:	4641      	mov	r1, r8
 800827e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008282:	4641      	mov	r1, r8
 8008284:	008a      	lsls	r2, r1, #2
 8008286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800828a:	f7f8 fd65 	bl	8000d58 <__aeabi_uldivmod>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <UART_SetConfig+0x4e4>)
 8008294:	fba3 1302 	umull	r1, r3, r3, r2
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	2164      	movs	r1, #100	; 0x64
 800829c:	fb01 f303 	mul.w	r3, r1, r3
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	3332      	adds	r3, #50	; 0x32
 80082a6:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <UART_SetConfig+0x4e4>)
 80082a8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	f003 020f 	and.w	r2, r3, #15
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4422      	add	r2, r4
 80082ba:	609a      	str	r2, [r3, #8]
}
 80082bc:	bf00      	nop
 80082be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082c2:	46bd      	mov	sp, r7
 80082c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082c8:	51eb851f 	.word	0x51eb851f

080082cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80082da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082de:	2b84      	cmp	r3, #132	; 0x84
 80082e0:	d005      	beq.n	80082ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80082e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	3303      	adds	r3, #3
 80082ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80082ee:	68fb      	ldr	r3, [r7, #12]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008302:	f3ef 8305 	mrs	r3, IPSR
 8008306:	607b      	str	r3, [r7, #4]
  return(result);
 8008308:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf14      	ite	ne
 800830e:	2301      	movne	r3, #1
 8008310:	2300      	moveq	r3, #0
 8008312:	b2db      	uxtb	r3, r3
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008324:	f001 f926 	bl	8009574 <vTaskStartScheduler>
  
  return osOK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	bd80      	pop	{r7, pc}

0800832e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800832e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008330:	b089      	sub	sp, #36	; 0x24
 8008332:	af04      	add	r7, sp, #16
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d020      	beq.n	8008382 <osThreadCreate+0x54>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01c      	beq.n	8008382 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685c      	ldr	r4, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691e      	ldr	r6, [r3, #16]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff ffb6 	bl	80082cc <makeFreeRtosPriority>
 8008360:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800836a:	9202      	str	r2, [sp, #8]
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	9100      	str	r1, [sp, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	4632      	mov	r2, r6
 8008374:	4629      	mov	r1, r5
 8008376:	4620      	mov	r0, r4
 8008378:	f000 ff1e 	bl	80091b8 <xTaskCreateStatic>
 800837c:	4603      	mov	r3, r0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e01c      	b.n	80083bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685c      	ldr	r4, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800838e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff ff98 	bl	80082cc <makeFreeRtosPriority>
 800839c:	4602      	mov	r2, r0
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	9200      	str	r2, [sp, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	4632      	mov	r2, r6
 80083aa:	4629      	mov	r1, r5
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 ff60 	bl	8009272 <xTaskCreate>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d001      	beq.n	80083bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	e000      	b.n	80083be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <osDelay+0x16>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e000      	b.n	80083de <osDelay+0x18>
 80083dc:	2301      	movs	r3, #1
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 f894 	bl	800950c <vTaskDelay>
  
  return osOK;
 80083e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b086      	sub	sp, #24
 80083f2:	af02      	add	r7, sp, #8
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00f      	beq.n	8008420 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d10a      	bne.n	800841c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2203      	movs	r2, #3
 800840c:	9200      	str	r2, [sp, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	2100      	movs	r1, #0
 8008412:	2001      	movs	r0, #1
 8008414:	f000 f9be 	bl	8008794 <xQueueGenericCreateStatic>
 8008418:	4603      	mov	r3, r0
 800841a:	e016      	b.n	800844a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800841c:	2300      	movs	r3, #0
 800841e:	e014      	b.n	800844a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d110      	bne.n	8008448 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008426:	2203      	movs	r2, #3
 8008428:	2100      	movs	r1, #0
 800842a:	2001      	movs	r0, #1
 800842c:	f000 fa2a 	bl	8008884 <xQueueGenericCreate>
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <osSemaphoreCreate+0x56>
 8008438:	2300      	movs	r3, #0
 800843a:	2200      	movs	r2, #0
 800843c:	2100      	movs	r1, #0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fa7a 	bl	8008938 <xQueueGenericSend>
      return sema;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	e000      	b.n	800844a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008448:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800845e:	2300      	movs	r3, #0
 8008460:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	e03a      	b.n	80084e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008476:	d103      	bne.n	8008480 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e009      	b.n	8008494 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <osSemaphoreWait+0x40>
      ticks = 1;
 8008490:	2301      	movs	r3, #1
 8008492:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008494:	f7ff ff32 	bl	80082fc <inHandlerMode>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d017      	beq.n	80084ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800849e:	f107 0308 	add.w	r3, r7, #8
 80084a2:	461a      	mov	r2, r3
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fcde 	bl	8008e68 <xQueueReceiveFromISR>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d001      	beq.n	80084b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80084b2:	23ff      	movs	r3, #255	; 0xff
 80084b4:	e015      	b.n	80084e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d011      	beq.n	80084e0 <osSemaphoreWait+0x8c>
 80084bc:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <osSemaphoreWait+0x98>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	e008      	b.n	80084e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fbbd 	bl	8008c50 <xQueueSemaphoreTake>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d001      	beq.n	80084e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80084dc:	23ff      	movs	r3, #255	; 0xff
 80084de:	e000      	b.n	80084e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	e000ed04 	.word	0xe000ed04

080084f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008500:	f7ff fefc 	bl	80082fc <inHandlerMode>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d016      	beq.n	8008538 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb0f 	bl	8008b34 <xQueueGiveFromISR>
 8008516:	4603      	mov	r3, r0
 8008518:	2b01      	cmp	r3, #1
 800851a:	d001      	beq.n	8008520 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800851c:	23ff      	movs	r3, #255	; 0xff
 800851e:	e017      	b.n	8008550 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d013      	beq.n	800854e <osSemaphoreRelease+0x5e>
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <osSemaphoreRelease+0x68>)
 8008528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	e00a      	b.n	800854e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008538:	2300      	movs	r3, #0
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9fa 	bl	8008938 <xQueueGenericSend>
 8008544:	4603      	mov	r3, r0
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800854a:	23ff      	movs	r3, #255	; 0xff
 800854c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f103 0208 	add.w	r2, r3, #8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f04f 32ff 	mov.w	r2, #4294967295
 8008574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f103 0208 	add.w	r2, r3, #8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0208 	add.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d103      	bne.n	800861e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e00c      	b.n	8008638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3308      	adds	r3, #8
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e002      	b.n	800862c <vListInsert+0x2e>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d2f6      	bcs.n	8008626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6892      	ldr	r2, [r2, #8]
 8008686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6852      	ldr	r2, [r2, #4]
 8008690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d103      	bne.n	80086a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1e5a      	subs	r2, r3, #1
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086ee:	f001 fea1 	bl	800a434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086fe:	fb01 f303 	mul.w	r3, r1, r3
 8008702:	441a      	add	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871e:	3b01      	subs	r3, #1
 8008720:	68f9      	ldr	r1, [r7, #12]
 8008722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008724:	fb01 f303 	mul.w	r3, r1, r3
 8008728:	441a      	add	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	22ff      	movs	r2, #255	; 0xff
 8008732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	22ff      	movs	r2, #255	; 0xff
 800873a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d114      	bne.n	800876e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01a      	beq.n	8008782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3310      	adds	r3, #16
 8008750:	4618      	mov	r0, r3
 8008752:	f001 f961 	bl	8009a18 <xTaskRemoveFromEventList>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d012      	beq.n	8008782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <xQueueGenericReset+0xcc>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	e009      	b.n	8008782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3310      	adds	r3, #16
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fef2 	bl	800855c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff feed 	bl	800855c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008782:	f001 fe87 	bl	800a494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008786:	2301      	movs	r3, #1
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <xQueueGenericCreateStatic+0x52>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <xQueueGenericCreateStatic+0x56>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <xQueueGenericCreateStatic+0x58>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	623b      	str	r3, [r7, #32]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueGenericCreateStatic+0x7e>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueGenericCreateStatic+0x82>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueGenericCreateStatic+0x84>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008832:	2348      	movs	r3, #72	; 0x48
 8008834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b48      	cmp	r3, #72	; 0x48
 800883a:	d00a      	beq.n	8008852 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61bb      	str	r3, [r7, #24]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008852:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00d      	beq.n	800887a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f83f 	bl	80088f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800887c:	4618      	mov	r0, r3
 800887e:	3730      	adds	r7, #48	; 0x30
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af02      	add	r7, sp, #8
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4613      	mov	r3, r2
 8008890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	613b      	str	r3, [r7, #16]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	fb02 f303 	mul.w	r3, r2, r3
 80088b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	3348      	adds	r3, #72	; 0x48
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fedb 	bl	800a678 <pvPortMalloc>
 80088c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d011      	beq.n	80088ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3348      	adds	r3, #72	; 0x48
 80088d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088dc:	79fa      	ldrb	r2, [r7, #7]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4613      	mov	r3, r2
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f805 	bl	80088f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ee:	69bb      	ldr	r3, [r7, #24]
	}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d103      	bne.n	8008914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e002      	b.n	800891a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008926:	2101      	movs	r1, #1
 8008928:	69b8      	ldr	r0, [r7, #24]
 800892a:	f7ff fecb 	bl	80086c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08e      	sub	sp, #56	; 0x38
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008946:	2300      	movs	r3, #0
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericSend+0x32>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <xQueueGenericSend+0x40>
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <xQueueGenericSend+0x44>
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <xQueueGenericSend+0x46>
 800897c:	2300      	movs	r3, #0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xQueueGenericSend+0x60>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d103      	bne.n	80089a6 <xQueueGenericSend+0x6e>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <xQueueGenericSend+0x72>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <xQueueGenericSend+0x74>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	623b      	str	r3, [r7, #32]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089c6:	f001 f9e7 	bl	8009d98 <xTaskGetSchedulerState>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <xQueueGenericSend+0x9e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <xQueueGenericSend+0xa2>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueGenericSend+0xa4>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	61fb      	str	r3, [r7, #28]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089f6:	f001 fd1d 	bl	800a434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d302      	bcc.n	8008a0c <xQueueGenericSend+0xd4>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d129      	bne.n	8008a60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a12:	f000 fac1 	bl	8008f98 <prvCopyDataToQueue>
 8008a16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d010      	beq.n	8008a42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	3324      	adds	r3, #36	; 0x24
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fff7 	bl	8009a18 <xTaskRemoveFromEventList>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d013      	beq.n	8008a58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a30:	4b3f      	ldr	r3, [pc, #252]	; (8008b30 <xQueueGenericSend+0x1f8>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	e00a      	b.n	8008a58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a48:	4b39      	ldr	r3, [pc, #228]	; (8008b30 <xQueueGenericSend+0x1f8>)
 8008a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a58:	f001 fd1c 	bl	800a494 <vPortExitCritical>
				return pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e063      	b.n	8008b28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d103      	bne.n	8008a6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a66:	f001 fd15 	bl	800a494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e05c      	b.n	8008b28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a74:	f107 0314 	add.w	r3, r7, #20
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 f82f 	bl	8009adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a82:	f001 fd07 	bl	800a494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a86:	f000 fddf 	bl	8009648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a8a:	f001 fcd3 	bl	800a434 <vPortEnterCritical>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a94:	b25b      	sxtb	r3, r3
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d103      	bne.n	8008aa4 <xQueueGenericSend+0x16c>
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aaa:	b25b      	sxtb	r3, r3
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d103      	bne.n	8008aba <xQueueGenericSend+0x182>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aba:	f001 fceb 	bl	800a494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008abe:	1d3a      	adds	r2, r7, #4
 8008ac0:	f107 0314 	add.w	r3, r7, #20
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 f81e 	bl	8009b08 <xTaskCheckForTimeOut>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d124      	bne.n	8008b1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ad4:	f000 fb58 	bl	8009188 <prvIsQueueFull>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d018      	beq.n	8008b10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	3310      	adds	r3, #16
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 ff72 	bl	80099d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aee:	f000 fae3 	bl	80090b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008af2:	f000 fdb7 	bl	8009664 <xTaskResumeAll>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f47f af7c 	bne.w	80089f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008afe:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <xQueueGenericSend+0x1f8>)
 8008b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	e772      	b.n	80089f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b12:	f000 fad1 	bl	80090b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b16:	f000 fda5 	bl	8009664 <xTaskResumeAll>
 8008b1a:	e76c      	b.n	80089f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b1e:	f000 facb 	bl	80090b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b22:	f000 fd9f 	bl	8009664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3738      	adds	r7, #56	; 0x38
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08e      	sub	sp, #56	; 0x38
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	623b      	str	r3, [r7, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <xQueueGiveFromISR+0x48>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	61fb      	str	r3, [r7, #28]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <xQueueGiveFromISR+0x58>
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <xQueueGiveFromISR+0x5c>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <xQueueGiveFromISR+0x5e>
 8008b90:	2300      	movs	r3, #0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <xQueueGiveFromISR+0x78>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61bb      	str	r3, [r7, #24]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bac:	f001 fd24 	bl	800a5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	617a      	str	r2, [r7, #20]
 8008bc6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d22b      	bcs.n	8008c34 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf6:	d112      	bne.n	8008c1e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d016      	beq.n	8008c2e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	3324      	adds	r3, #36	; 0x24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 ff07 	bl	8009a18 <xTaskRemoveFromEventList>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00b      	beq.n	8008c2e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	e007      	b.n	8008c2e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c22:	3301      	adds	r3, #1
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	b25a      	sxtb	r2, r3
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34
 8008c32:	e001      	b.n	8008c38 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3738      	adds	r7, #56	; 0x38
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	; 0x38
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	623b      	str	r3, [r7, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	61fb      	str	r3, [r7, #28]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ca0:	f001 f87a 	bl	8009d98 <xTaskGetSchedulerState>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <xQueueSemaphoreTake+0x60>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <xQueueSemaphoreTake+0x64>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <xQueueSemaphoreTake+0x66>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10a      	bne.n	8008cd0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	61bb      	str	r3, [r7, #24]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cd0:	f001 fbb0 	bl	800a434 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d024      	beq.n	8008d2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	1e5a      	subs	r2, r3, #1
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008cf0:	f001 f9fa 	bl	800a0e8 <pvTaskIncrementMutexHeldCount>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00f      	beq.n	8008d22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	3310      	adds	r3, #16
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fe86 	bl	8009a18 <xTaskRemoveFromEventList>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d007      	beq.n	8008d22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d12:	4b54      	ldr	r3, [pc, #336]	; (8008e64 <xQueueSemaphoreTake+0x214>)
 8008d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d22:	f001 fbb7 	bl	800a494 <vPortExitCritical>
				return pdPASS;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e097      	b.n	8008e5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d111      	bne.n	8008d54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	617b      	str	r3, [r7, #20]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d4c:	f001 fba2 	bl	800a494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e082      	b.n	8008e5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d5a:	f107 030c 	add.w	r3, r7, #12
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 febc 	bl	8009adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d68:	f001 fb94 	bl	800a494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d6c:	f000 fc6c 	bl	8009648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d70:	f001 fb60 	bl	800a434 <vPortEnterCritical>
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d7a:	b25b      	sxtb	r3, r3
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d103      	bne.n	8008d8a <xQueueSemaphoreTake+0x13a>
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d90:	b25b      	sxtb	r3, r3
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d103      	bne.n	8008da0 <xQueueSemaphoreTake+0x150>
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da0:	f001 fb78 	bl	800a494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008da4:	463a      	mov	r2, r7
 8008da6:	f107 030c 	add.w	r3, r7, #12
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 feab 	bl	8009b08 <xTaskCheckForTimeOut>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d132      	bne.n	8008e1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dba:	f000 f9cf 	bl	800915c <prvIsQueueEmpty>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d026      	beq.n	8008e12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008dcc:	f001 fb32 	bl	800a434 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fffd 	bl	8009dd4 <xTaskPriorityInherit>
 8008dda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ddc:	f001 fb5a 	bl	800a494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	3324      	adds	r3, #36	; 0x24
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fdf1 	bl	80099d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008df0:	f000 f962 	bl	80090b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008df4:	f000 fc36 	bl	8009664 <xTaskResumeAll>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f47f af68 	bne.w	8008cd0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008e00:	4b18      	ldr	r3, [pc, #96]	; (8008e64 <xQueueSemaphoreTake+0x214>)
 8008e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	e75e      	b.n	8008cd0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e14:	f000 f950 	bl	80090b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e18:	f000 fc24 	bl	8009664 <xTaskResumeAll>
 8008e1c:	e758      	b.n	8008cd0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e20:	f000 f94a 	bl	80090b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e24:	f000 fc1e 	bl	8009664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e2a:	f000 f997 	bl	800915c <prvIsQueueEmpty>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f43f af4d 	beq.w	8008cd0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008e3c:	f001 fafa 	bl	800a434 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e42:	f000 f891 	bl	8008f68 <prvGetDisinheritPriorityAfterTimeout>
 8008e46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 f8bc 	bl	8009fcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e54:	f001 fb1e 	bl	800a494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3738      	adds	r7, #56	; 0x38
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08e      	sub	sp, #56	; 0x38
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	623b      	str	r3, [r7, #32]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <xQueueReceiveFromISR+0x3a>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <xQueueReceiveFromISR+0x3e>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <xQueueReceiveFromISR+0x40>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	61fb      	str	r3, [r7, #28]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ec2:	f001 fb99 	bl	800a5f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	61ba      	str	r2, [r7, #24]
 8008edc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ede:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d02f      	beq.n	8008f4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ef8:	68b9      	ldr	r1, [r7, #8]
 8008efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008efc:	f000 f8b6 	bl	800906c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	1e5a      	subs	r2, r3, #1
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d112      	bne.n	8008f38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d016      	beq.n	8008f48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	3310      	adds	r3, #16
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fd7a 	bl	8009a18 <xTaskRemoveFromEventList>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00e      	beq.n	8008f48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e007      	b.n	8008f48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	b25a      	sxtb	r2, r3
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4c:	e001      	b.n	8008f52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f383 8811 	msr	BASEPRI, r3
}
 8008f5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3738      	adds	r7, #56	; 0x38
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d006      	beq.n	8008f86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f1c3 0307 	rsb	r3, r3, #7
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e001      	b.n	8008f8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
	}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10d      	bne.n	8008fd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d14d      	bne.n	800905a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 ff7c 	bl	8009ec0 <xTaskPriorityDisinherit>
 8008fc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	609a      	str	r2, [r3, #8]
 8008fd0:	e043      	b.n	800905a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d119      	bne.n	800900c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6858      	ldr	r0, [r3, #4]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	f002 fd35 	bl	800ba52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	441a      	add	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d32b      	bcc.n	800905a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]
 800900a:	e026      	b.n	800905a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68d8      	ldr	r0, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	461a      	mov	r2, r3
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	f002 fd1b 	bl	800ba52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	425b      	negs	r3, r3
 8009026:	441a      	add	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d207      	bcs.n	8009048 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	425b      	negs	r3, r3
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d105      	bne.n	800905a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3b01      	subs	r3, #1
 8009058:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009062:	697b      	ldr	r3, [r7, #20]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d018      	beq.n	80090b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	441a      	add	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	d303      	bcc.n	80090a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68d9      	ldr	r1, [r3, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a8:	461a      	mov	r2, r3
 80090aa:	6838      	ldr	r0, [r7, #0]
 80090ac:	f002 fcd1 	bl	800ba52 <memcpy>
	}
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090c0:	f001 f9b8 	bl	800a434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090cc:	e011      	b.n	80090f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d012      	beq.n	80090fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3324      	adds	r3, #36	; 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fc9c 	bl	8009a18 <xTaskRemoveFromEventList>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090e6:	f000 fd71 	bl	8009bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dce9      	bgt.n	80090ce <prvUnlockQueue+0x16>
 80090fa:	e000      	b.n	80090fe <prvUnlockQueue+0x46>
					break;
 80090fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	22ff      	movs	r2, #255	; 0xff
 8009102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009106:	f001 f9c5 	bl	800a494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800910a:	f001 f993 	bl	800a434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009114:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009116:	e011      	b.n	800913c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d012      	beq.n	8009146 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3310      	adds	r3, #16
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fc77 	bl	8009a18 <xTaskRemoveFromEventList>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009130:	f000 fd4c 	bl	8009bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	3b01      	subs	r3, #1
 8009138:	b2db      	uxtb	r3, r3
 800913a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800913c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009140:	2b00      	cmp	r3, #0
 8009142:	dce9      	bgt.n	8009118 <prvUnlockQueue+0x60>
 8009144:	e000      	b.n	8009148 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009146:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	22ff      	movs	r2, #255	; 0xff
 800914c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009150:	f001 f9a0 	bl	800a494 <vPortExitCritical>
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009164:	f001 f966 	bl	800a434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e001      	b.n	800917a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800917a:	f001 f98b 	bl	800a494 <vPortExitCritical>

	return xReturn;
 800917e:	68fb      	ldr	r3, [r7, #12]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009190:	f001 f950 	bl	800a434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919c:	429a      	cmp	r2, r3
 800919e:	d102      	bne.n	80091a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091a0:	2301      	movs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e001      	b.n	80091aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091aa:	f001 f973 	bl	800a494 <vPortExitCritical>

	return xReturn;
 80091ae:	68fb      	ldr	r3, [r7, #12]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08e      	sub	sp, #56	; 0x38
 80091bc:	af04      	add	r7, sp, #16
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	623b      	str	r3, [r7, #32]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xTaskCreateStatic+0x46>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	61fb      	str	r3, [r7, #28]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091fe:	23a0      	movs	r3, #160	; 0xa0
 8009200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2ba0      	cmp	r3, #160	; 0xa0
 8009206:	d00a      	beq.n	800921e <xTaskCreateStatic+0x66>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	61bb      	str	r3, [r7, #24]
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800921e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	d01e      	beq.n	8009264 <xTaskCreateStatic+0xac>
 8009226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01b      	beq.n	8009264 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	2202      	movs	r2, #2
 800923a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800923e:	2300      	movs	r3, #0
 8009240:	9303      	str	r3, [sp, #12]
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	f107 0314 	add.w	r3, r7, #20
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f850 	bl	80092fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800925c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800925e:	f000 f8eb 	bl	8009438 <prvAddNewTaskToReadyList>
 8009262:	e001      	b.n	8009268 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009268:	697b      	ldr	r3, [r7, #20]
	}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009272:	b580      	push	{r7, lr}
 8009274:	b08c      	sub	sp, #48	; 0x30
 8009276:	af04      	add	r7, sp, #16
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	4613      	mov	r3, r2
 8009280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4618      	mov	r0, r3
 8009288:	f001 f9f6 	bl	800a678 <pvPortMalloc>
 800928c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00e      	beq.n	80092b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009294:	20a0      	movs	r0, #160	; 0xa0
 8009296:	f001 f9ef 	bl	800a678 <pvPortMalloc>
 800929a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
 80092a8:	e005      	b.n	80092b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f001 fab0 	bl	800a810 <vPortFree>
 80092b0:	e001      	b.n	80092b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d017      	beq.n	80092ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092c4:	88fa      	ldrh	r2, [r7, #6]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f80e 	bl	80092fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e0:	69f8      	ldr	r0, [r7, #28]
 80092e2:	f000 f8a9 	bl	8009438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092e6:	2301      	movs	r3, #1
 80092e8:	61bb      	str	r3, [r7, #24]
 80092ea:	e002      	b.n	80092f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092ec:	f04f 33ff 	mov.w	r3, #4294967295
 80092f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092f2:	69bb      	ldr	r3, [r7, #24]
	}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009314:	3b01      	subs	r3, #1
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	f023 0307 	bic.w	r3, r3, #7
 8009322:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <prvInitialiseNewTask+0x48>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01f      	beq.n	800938a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e012      	b.n	8009376 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	7819      	ldrb	r1, [r3, #0]
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	3334      	adds	r3, #52	; 0x34
 8009360:	460a      	mov	r2, r1
 8009362:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d006      	beq.n	800937e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	3301      	adds	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	2b0f      	cmp	r3, #15
 800937a:	d9e9      	bls.n	8009350 <prvInitialiseNewTask+0x54>
 800937c:	e000      	b.n	8009380 <prvInitialiseNewTask+0x84>
			{
				break;
 800937e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009388:	e003      	b.n	8009392 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	2b06      	cmp	r3, #6
 8009396:	d901      	bls.n	800939c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009398:	2306      	movs	r3, #6
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	2200      	movs	r2, #0
 80093ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	3304      	adds	r3, #4
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7ff f8f2 	bl	800859c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	3318      	adds	r3, #24
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff f8ed 	bl	800859c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	f1c3 0207 	rsb	r2, r3, #7
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	334c      	adds	r3, #76	; 0x4c
 80093ec:	224c      	movs	r2, #76	; 0x4c
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 fa4a 	bl	800b88a <memset>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	4a0c      	ldr	r2, [pc, #48]	; (800942c <prvInitialiseNewTask+0x130>)
 80093fa:	651a      	str	r2, [r3, #80]	; 0x50
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	4a0c      	ldr	r2, [pc, #48]	; (8009430 <prvInitialiseNewTask+0x134>)
 8009400:	655a      	str	r2, [r3, #84]	; 0x54
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	4a0b      	ldr	r2, [pc, #44]	; (8009434 <prvInitialiseNewTask+0x138>)
 8009406:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	68f9      	ldr	r1, [r7, #12]
 800940c:	69b8      	ldr	r0, [r7, #24]
 800940e:	f000 fee5 	bl	800a1dc <pxPortInitialiseStack>
 8009412:	4602      	mov	r2, r0
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009422:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009424:	bf00      	nop
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	2000475c 	.word	0x2000475c
 8009430:	200047c4 	.word	0x200047c4
 8009434:	2000482c 	.word	0x2000482c

08009438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009440:	f000 fff8 	bl	800a434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009444:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <prvAddNewTaskToReadyList+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <prvAddNewTaskToReadyList+0xb8>)
 800944c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800944e:	4b29      	ldr	r3, [pc, #164]	; (80094f4 <prvAddNewTaskToReadyList+0xbc>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009456:	4a27      	ldr	r2, [pc, #156]	; (80094f4 <prvAddNewTaskToReadyList+0xbc>)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800945c:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <prvAddNewTaskToReadyList+0xb8>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d110      	bne.n	8009486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009464:	f000 fbd6 	bl	8009c14 <prvInitialiseTaskLists>
 8009468:	e00d      	b.n	8009486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800946a:	4b23      	ldr	r3, [pc, #140]	; (80094f8 <prvAddNewTaskToReadyList+0xc0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d109      	bne.n	8009486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009472:	4b20      	ldr	r3, [pc, #128]	; (80094f4 <prvAddNewTaskToReadyList+0xbc>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	429a      	cmp	r2, r3
 800947e:	d802      	bhi.n	8009486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009480:	4a1c      	ldr	r2, [pc, #112]	; (80094f4 <prvAddNewTaskToReadyList+0xbc>)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009486:	4b1d      	ldr	r3, [pc, #116]	; (80094fc <prvAddNewTaskToReadyList+0xc4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <prvAddNewTaskToReadyList+0xc4>)
 800948e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009494:	2201      	movs	r2, #1
 8009496:	409a      	lsls	r2, r3
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <prvAddNewTaskToReadyList+0xc8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4313      	orrs	r3, r2
 800949e:	4a18      	ldr	r2, [pc, #96]	; (8009500 <prvAddNewTaskToReadyList+0xc8>)
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4a15      	ldr	r2, [pc, #84]	; (8009504 <prvAddNewTaskToReadyList+0xcc>)
 80094b0:	441a      	add	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f7ff f87c 	bl	80085b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094be:	f000 ffe9 	bl	800a494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <prvAddNewTaskToReadyList+0xc0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094ca:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <prvAddNewTaskToReadyList+0xbc>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d207      	bcs.n	80094e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <prvAddNewTaskToReadyList+0xd0>)
 80094da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20000b08 	.word	0x20000b08
 80094f4:	20000a08 	.word	0x20000a08
 80094f8:	20000b14 	.word	0x20000b14
 80094fc:	20000b24 	.word	0x20000b24
 8009500:	20000b10 	.word	0x20000b10
 8009504:	20000a0c 	.word	0x20000a0c
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d017      	beq.n	800954e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <vTaskDelay+0x60>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <vTaskDelay+0x30>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	60bb      	str	r3, [r7, #8]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800953c:	f000 f884 	bl	8009648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fde4 	bl	800a110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009548:	f000 f88c 	bl	8009664 <xTaskResumeAll>
 800954c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d107      	bne.n	8009564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <vTaskDelay+0x64>)
 8009556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20000b30 	.word	0x20000b30
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	; 0x28
 8009578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800957a:	2300      	movs	r3, #0
 800957c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009582:	463a      	mov	r2, r7
 8009584:	1d39      	adds	r1, r7, #4
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	4618      	mov	r0, r3
 800958c:	f7f8 fee8 	bl	8002360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	9202      	str	r2, [sp, #8]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	2300      	movs	r3, #0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	2300      	movs	r3, #0
 80095a0:	460a      	mov	r2, r1
 80095a2:	4921      	ldr	r1, [pc, #132]	; (8009628 <vTaskStartScheduler+0xb4>)
 80095a4:	4821      	ldr	r0, [pc, #132]	; (800962c <vTaskStartScheduler+0xb8>)
 80095a6:	f7ff fe07 	bl	80091b8 <xTaskCreateStatic>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a20      	ldr	r2, [pc, #128]	; (8009630 <vTaskStartScheduler+0xbc>)
 80095ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095b0:	4b1f      	ldr	r3, [pc, #124]	; (8009630 <vTaskStartScheduler+0xbc>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	e001      	b.n	80095c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d11b      	bne.n	8009600 <vTaskStartScheduler+0x8c>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	613b      	str	r3, [r7, #16]
}
 80095da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095dc:	4b15      	ldr	r3, [pc, #84]	; (8009634 <vTaskStartScheduler+0xc0>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	334c      	adds	r3, #76	; 0x4c
 80095e2:	4a15      	ldr	r2, [pc, #84]	; (8009638 <vTaskStartScheduler+0xc4>)
 80095e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095e6:	4b15      	ldr	r3, [pc, #84]	; (800963c <vTaskStartScheduler+0xc8>)
 80095e8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095ee:	4b14      	ldr	r3, [pc, #80]	; (8009640 <vTaskStartScheduler+0xcc>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095f4:	4b13      	ldr	r3, [pc, #76]	; (8009644 <vTaskStartScheduler+0xd0>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095fa:	f000 fe79 	bl	800a2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095fe:	e00e      	b.n	800961e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d10a      	bne.n	800961e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <vTaskStartScheduler+0xa8>
}
 800961e:	bf00      	nop
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	0800ebb4 	.word	0x0800ebb4
 800962c:	08009be5 	.word	0x08009be5
 8009630:	20000b2c 	.word	0x20000b2c
 8009634:	20000a08 	.word	0x20000a08
 8009638:	20000240 	.word	0x20000240
 800963c:	20000b28 	.word	0x20000b28
 8009640:	20000b14 	.word	0x20000b14
 8009644:	20000b0c 	.word	0x20000b0c

08009648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800964c:	4b04      	ldr	r3, [pc, #16]	; (8009660 <vTaskSuspendAll+0x18>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	4a03      	ldr	r2, [pc, #12]	; (8009660 <vTaskSuspendAll+0x18>)
 8009654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009656:	bf00      	nop
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000b30 	.word	0x20000b30

08009664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009672:	4b41      	ldr	r3, [pc, #260]	; (8009778 <xTaskResumeAll+0x114>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <xTaskResumeAll+0x2c>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	603b      	str	r3, [r7, #0]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009690:	f000 fed0 	bl	800a434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009694:	4b38      	ldr	r3, [pc, #224]	; (8009778 <xTaskResumeAll+0x114>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3b01      	subs	r3, #1
 800969a:	4a37      	ldr	r2, [pc, #220]	; (8009778 <xTaskResumeAll+0x114>)
 800969c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800969e:	4b36      	ldr	r3, [pc, #216]	; (8009778 <xTaskResumeAll+0x114>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d161      	bne.n	800976a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096a6:	4b35      	ldr	r3, [pc, #212]	; (800977c <xTaskResumeAll+0x118>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d05d      	beq.n	800976a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096ae:	e02e      	b.n	800970e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b0:	4b33      	ldr	r3, [pc, #204]	; (8009780 <xTaskResumeAll+0x11c>)
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3318      	adds	r3, #24
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe ffd7 	bl	8008670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe ffd2 	bl	8008670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d0:	2201      	movs	r2, #1
 80096d2:	409a      	lsls	r2, r3
 80096d4:	4b2b      	ldr	r3, [pc, #172]	; (8009784 <xTaskResumeAll+0x120>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4313      	orrs	r3, r2
 80096da:	4a2a      	ldr	r2, [pc, #168]	; (8009784 <xTaskResumeAll+0x120>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4a27      	ldr	r2, [pc, #156]	; (8009788 <xTaskResumeAll+0x124>)
 80096ec:	441a      	add	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7fe ff5e 	bl	80085b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	4b23      	ldr	r3, [pc, #140]	; (800978c <xTaskResumeAll+0x128>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	429a      	cmp	r2, r3
 8009706:	d302      	bcc.n	800970e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009708:	4b21      	ldr	r3, [pc, #132]	; (8009790 <xTaskResumeAll+0x12c>)
 800970a:	2201      	movs	r2, #1
 800970c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800970e:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <xTaskResumeAll+0x11c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1cc      	bne.n	80096b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800971c:	f000 fb1c 	bl	8009d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009720:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <xTaskResumeAll+0x130>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d010      	beq.n	800974e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800972c:	f000 f836 	bl	800979c <xTaskIncrementTick>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <xTaskResumeAll+0x12c>)
 8009738:	2201      	movs	r2, #1
 800973a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3b01      	subs	r3, #1
 8009740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f1      	bne.n	800972c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009748:	4b12      	ldr	r3, [pc, #72]	; (8009794 <xTaskResumeAll+0x130>)
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800974e:	4b10      	ldr	r3, [pc, #64]	; (8009790 <xTaskResumeAll+0x12c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009756:	2301      	movs	r3, #1
 8009758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800975a:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <xTaskResumeAll+0x134>)
 800975c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800976a:	f000 fe93 	bl	800a494 <vPortExitCritical>

	return xAlreadyYielded;
 800976e:	68bb      	ldr	r3, [r7, #8]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20000b30 	.word	0x20000b30
 800977c:	20000b08 	.word	0x20000b08
 8009780:	20000ac8 	.word	0x20000ac8
 8009784:	20000b10 	.word	0x20000b10
 8009788:	20000a0c 	.word	0x20000a0c
 800978c:	20000a08 	.word	0x20000a08
 8009790:	20000b1c 	.word	0x20000b1c
 8009794:	20000b18 	.word	0x20000b18
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a6:	4b4e      	ldr	r3, [pc, #312]	; (80098e0 <xTaskIncrementTick+0x144>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 808e 	bne.w	80098cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097b0:	4b4c      	ldr	r3, [pc, #304]	; (80098e4 <xTaskIncrementTick+0x148>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3301      	adds	r3, #1
 80097b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097b8:	4a4a      	ldr	r2, [pc, #296]	; (80098e4 <xTaskIncrementTick+0x148>)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d120      	bne.n	8009806 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097c4:	4b48      	ldr	r3, [pc, #288]	; (80098e8 <xTaskIncrementTick+0x14c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	603b      	str	r3, [r7, #0]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <xTaskIncrementTick+0x46>
 80097e4:	4b40      	ldr	r3, [pc, #256]	; (80098e8 <xTaskIncrementTick+0x14c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	4b40      	ldr	r3, [pc, #256]	; (80098ec <xTaskIncrementTick+0x150>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a3e      	ldr	r2, [pc, #248]	; (80098e8 <xTaskIncrementTick+0x14c>)
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	4a3e      	ldr	r2, [pc, #248]	; (80098ec <xTaskIncrementTick+0x150>)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	4b3d      	ldr	r3, [pc, #244]	; (80098f0 <xTaskIncrementTick+0x154>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	4a3c      	ldr	r2, [pc, #240]	; (80098f0 <xTaskIncrementTick+0x154>)
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	f000 faa9 	bl	8009d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009806:	4b3b      	ldr	r3, [pc, #236]	; (80098f4 <xTaskIncrementTick+0x158>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	429a      	cmp	r2, r3
 800980e:	d348      	bcc.n	80098a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009810:	4b35      	ldr	r3, [pc, #212]	; (80098e8 <xTaskIncrementTick+0x14c>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d104      	bne.n	8009824 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800981a:	4b36      	ldr	r3, [pc, #216]	; (80098f4 <xTaskIncrementTick+0x158>)
 800981c:	f04f 32ff 	mov.w	r2, #4294967295
 8009820:	601a      	str	r2, [r3, #0]
					break;
 8009822:	e03e      	b.n	80098a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009824:	4b30      	ldr	r3, [pc, #192]	; (80098e8 <xTaskIncrementTick+0x14c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	429a      	cmp	r2, r3
 800983a:	d203      	bcs.n	8009844 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800983c:	4a2d      	ldr	r2, [pc, #180]	; (80098f4 <xTaskIncrementTick+0x158>)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009842:	e02e      	b.n	80098a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	3304      	adds	r3, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe ff11 	bl	8008670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	3318      	adds	r3, #24
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe ff08 	bl	8008670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	2201      	movs	r2, #1
 8009866:	409a      	lsls	r2, r3
 8009868:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <xTaskIncrementTick+0x15c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4313      	orrs	r3, r2
 800986e:	4a22      	ldr	r2, [pc, #136]	; (80098f8 <xTaskIncrementTick+0x15c>)
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <xTaskIncrementTick+0x160>)
 8009880:	441a      	add	r2, r3
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	3304      	adds	r3, #4
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f7fe fe94 	bl	80085b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009892:	4b1b      	ldr	r3, [pc, #108]	; (8009900 <xTaskIncrementTick+0x164>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	429a      	cmp	r2, r3
 800989a:	d3b9      	bcc.n	8009810 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800989c:	2301      	movs	r3, #1
 800989e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a0:	e7b6      	b.n	8009810 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098a2:	4b17      	ldr	r3, [pc, #92]	; (8009900 <xTaskIncrementTick+0x164>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a8:	4914      	ldr	r1, [pc, #80]	; (80098fc <xTaskIncrementTick+0x160>)
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	440b      	add	r3, r1
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d901      	bls.n	80098be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80098ba:	2301      	movs	r3, #1
 80098bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098be:	4b11      	ldr	r3, [pc, #68]	; (8009904 <xTaskIncrementTick+0x168>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d007      	beq.n	80098d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80098c6:	2301      	movs	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	e004      	b.n	80098d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098cc:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <xTaskIncrementTick+0x16c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3301      	adds	r3, #1
 80098d2:	4a0d      	ldr	r2, [pc, #52]	; (8009908 <xTaskIncrementTick+0x16c>)
 80098d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098d6:	697b      	ldr	r3, [r7, #20]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20000b30 	.word	0x20000b30
 80098e4:	20000b0c 	.word	0x20000b0c
 80098e8:	20000ac0 	.word	0x20000ac0
 80098ec:	20000ac4 	.word	0x20000ac4
 80098f0:	20000b20 	.word	0x20000b20
 80098f4:	20000b28 	.word	0x20000b28
 80098f8:	20000b10 	.word	0x20000b10
 80098fc:	20000a0c 	.word	0x20000a0c
 8009900:	20000a08 	.word	0x20000a08
 8009904:	20000b1c 	.word	0x20000b1c
 8009908:	20000b18 	.word	0x20000b18

0800990c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009912:	4b29      	ldr	r3, [pc, #164]	; (80099b8 <vTaskSwitchContext+0xac>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800991a:	4b28      	ldr	r3, [pc, #160]	; (80099bc <vTaskSwitchContext+0xb0>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009920:	e044      	b.n	80099ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009922:	4b26      	ldr	r3, [pc, #152]	; (80099bc <vTaskSwitchContext+0xb0>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009928:	4b25      	ldr	r3, [pc, #148]	; (80099c0 <vTaskSwitchContext+0xb4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	fab3 f383 	clz	r3, r3
 8009934:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	f1c3 031f 	rsb	r3, r3, #31
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	4921      	ldr	r1, [pc, #132]	; (80099c4 <vTaskSwitchContext+0xb8>)
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	607b      	str	r3, [r7, #4]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <vTaskSwitchContext+0x5a>
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4a14      	ldr	r2, [pc, #80]	; (80099c4 <vTaskSwitchContext+0xb8>)
 8009974:	4413      	add	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	3308      	adds	r3, #8
 800998a:	429a      	cmp	r2, r3
 800998c:	d104      	bne.n	8009998 <vTaskSwitchContext+0x8c>
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	605a      	str	r2, [r3, #4]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <vTaskSwitchContext+0xbc>)
 80099a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <vTaskSwitchContext+0xbc>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	334c      	adds	r3, #76	; 0x4c
 80099a8:	4a08      	ldr	r2, [pc, #32]	; (80099cc <vTaskSwitchContext+0xc0>)
 80099aa:	6013      	str	r3, [r2, #0]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000b30 	.word	0x20000b30
 80099bc:	20000b1c 	.word	0x20000b1c
 80099c0:	20000b10 	.word	0x20000b10
 80099c4:	20000a0c 	.word	0x20000a0c
 80099c8:	20000a08 	.word	0x20000a08
 80099cc:	20000240 	.word	0x20000240

080099d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <vTaskPlaceOnEventList+0x44>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3318      	adds	r3, #24
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe fdfd 	bl	80085fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a04:	2101      	movs	r1, #1
 8009a06:	6838      	ldr	r0, [r7, #0]
 8009a08:	f000 fb82 	bl	800a110 <prvAddCurrentTaskToDelayedList>
}
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	20000a08 	.word	0x20000a08

08009a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3318      	adds	r3, #24
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fe11 	bl	8008670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a4e:	4b1d      	ldr	r3, [pc, #116]	; (8009ac4 <xTaskRemoveFromEventList+0xac>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d11c      	bne.n	8009a90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fe08 	bl	8008670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	2201      	movs	r2, #1
 8009a66:	409a      	lsls	r2, r3
 8009a68:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <xTaskRemoveFromEventList+0xb0>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	4a16      	ldr	r2, [pc, #88]	; (8009ac8 <xTaskRemoveFromEventList+0xb0>)
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4a13      	ldr	r2, [pc, #76]	; (8009acc <xTaskRemoveFromEventList+0xb4>)
 8009a80:	441a      	add	r2, r3
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f7fe fd94 	bl	80085b6 <vListInsertEnd>
 8009a8e:	e005      	b.n	8009a9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	3318      	adds	r3, #24
 8009a94:	4619      	mov	r1, r3
 8009a96:	480e      	ldr	r0, [pc, #56]	; (8009ad0 <xTaskRemoveFromEventList+0xb8>)
 8009a98:	f7fe fd8d 	bl	80085b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa0:	4b0c      	ldr	r3, [pc, #48]	; (8009ad4 <xTaskRemoveFromEventList+0xbc>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d905      	bls.n	8009ab6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <xTaskRemoveFromEventList+0xc0>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e001      	b.n	8009aba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009aba:	697b      	ldr	r3, [r7, #20]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000b30 	.word	0x20000b30
 8009ac8:	20000b10 	.word	0x20000b10
 8009acc:	20000a0c 	.word	0x20000a0c
 8009ad0:	20000ac8 	.word	0x20000ac8
 8009ad4:	20000a08 	.word	0x20000a08
 8009ad8:	20000b1c 	.word	0x20000b1c

08009adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <vTaskInternalSetTimeOutState+0x24>)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <vTaskInternalSetTimeOutState+0x28>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	605a      	str	r2, [r3, #4]
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	20000b20 	.word	0x20000b20
 8009b04:	20000b0c 	.word	0x20000b0c

08009b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	613b      	str	r3, [r7, #16]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	60fb      	str	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b4a:	f000 fc73 	bl	800a434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b4e:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <xTaskCheckForTimeOut+0xbc>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b66:	d102      	bne.n	8009b6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	e023      	b.n	8009bb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <xTaskCheckForTimeOut+0xc0>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d007      	beq.n	8009b8a <xTaskCheckForTimeOut+0x82>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d302      	bcc.n	8009b8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e015      	b.n	8009bb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d20b      	bcs.n	8009bac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff ff9b 	bl	8009adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
 8009baa:	e004      	b.n	8009bb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bb6:	f000 fc6d 	bl	800a494 <vPortExitCritical>

	return xReturn;
 8009bba:	69fb      	ldr	r3, [r7, #28]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000b0c 	.word	0x20000b0c
 8009bc8:	20000b20 	.word	0x20000b20

08009bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <vTaskMissedYield+0x14>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	20000b1c 	.word	0x20000b1c

08009be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bec:	f000 f852 	bl	8009c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <prvIdleTask+0x28>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d9f9      	bls.n	8009bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bf8:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <prvIdleTask+0x2c>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c08:	e7f0      	b.n	8009bec <prvIdleTask+0x8>
 8009c0a:	bf00      	nop
 8009c0c:	20000a0c 	.word	0x20000a0c
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	607b      	str	r3, [r7, #4]
 8009c1e:	e00c      	b.n	8009c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4a12      	ldr	r2, [pc, #72]	; (8009c74 <prvInitialiseTaskLists+0x60>)
 8009c2c:	4413      	add	r3, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fc94 	bl	800855c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3301      	adds	r3, #1
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b06      	cmp	r3, #6
 8009c3e:	d9ef      	bls.n	8009c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c40:	480d      	ldr	r0, [pc, #52]	; (8009c78 <prvInitialiseTaskLists+0x64>)
 8009c42:	f7fe fc8b 	bl	800855c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c46:	480d      	ldr	r0, [pc, #52]	; (8009c7c <prvInitialiseTaskLists+0x68>)
 8009c48:	f7fe fc88 	bl	800855c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c4c:	480c      	ldr	r0, [pc, #48]	; (8009c80 <prvInitialiseTaskLists+0x6c>)
 8009c4e:	f7fe fc85 	bl	800855c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c52:	480c      	ldr	r0, [pc, #48]	; (8009c84 <prvInitialiseTaskLists+0x70>)
 8009c54:	f7fe fc82 	bl	800855c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c58:	480b      	ldr	r0, [pc, #44]	; (8009c88 <prvInitialiseTaskLists+0x74>)
 8009c5a:	f7fe fc7f 	bl	800855c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <prvInitialiseTaskLists+0x78>)
 8009c60:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <prvInitialiseTaskLists+0x64>)
 8009c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c64:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <prvInitialiseTaskLists+0x7c>)
 8009c66:	4a05      	ldr	r2, [pc, #20]	; (8009c7c <prvInitialiseTaskLists+0x68>)
 8009c68:	601a      	str	r2, [r3, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000a0c 	.word	0x20000a0c
 8009c78:	20000a98 	.word	0x20000a98
 8009c7c:	20000aac 	.word	0x20000aac
 8009c80:	20000ac8 	.word	0x20000ac8
 8009c84:	20000adc 	.word	0x20000adc
 8009c88:	20000af4 	.word	0x20000af4
 8009c8c:	20000ac0 	.word	0x20000ac0
 8009c90:	20000ac4 	.word	0x20000ac4

08009c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c9a:	e019      	b.n	8009cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c9c:	f000 fbca 	bl	800a434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca0:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <prvCheckTasksWaitingTermination+0x50>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fcdf 	bl	8008670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <prvCheckTasksWaitingTermination+0x54>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ce8 <prvCheckTasksWaitingTermination+0x54>)
 8009cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <prvCheckTasksWaitingTermination+0x58>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <prvCheckTasksWaitingTermination+0x58>)
 8009cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cc6:	f000 fbe5 	bl	800a494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f810 	bl	8009cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd0:	4b06      	ldr	r3, [pc, #24]	; (8009cec <prvCheckTasksWaitingTermination+0x58>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e1      	bne.n	8009c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000adc 	.word	0x20000adc
 8009ce8:	20000b08 	.word	0x20000b08
 8009cec:	20000af0 	.word	0x20000af0

08009cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	334c      	adds	r3, #76	; 0x4c
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fdef 	bl	800b8e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d108      	bne.n	8009d1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fd7d 	bl	800a810 <vPortFree>
				vPortFree( pxTCB );
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fd7a 	bl	800a810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d1c:	e018      	b.n	8009d50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d103      	bne.n	8009d30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fd71 	bl	800a810 <vPortFree>
	}
 8009d2e:	e00f      	b.n	8009d50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d00a      	beq.n	8009d50 <prvDeleteTCB+0x60>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	60fb      	str	r3, [r7, #12]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <prvDeleteTCB+0x5e>
	}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <prvResetNextTaskUnblockTime+0x38>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d104      	bne.n	8009d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d68:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <prvResetNextTaskUnblockTime+0x3c>)
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d70:	e008      	b.n	8009d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d72:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <prvResetNextTaskUnblockTime+0x38>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a04      	ldr	r2, [pc, #16]	; (8009d94 <prvResetNextTaskUnblockTime+0x3c>)
 8009d82:	6013      	str	r3, [r2, #0]
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	20000ac0 	.word	0x20000ac0
 8009d94:	20000b28 	.word	0x20000b28

08009d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <xTaskGetSchedulerState+0x34>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009da6:	2301      	movs	r3, #1
 8009da8:	607b      	str	r3, [r7, #4]
 8009daa:	e008      	b.n	8009dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dac:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <xTaskGetSchedulerState+0x38>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009db4:	2302      	movs	r3, #2
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	e001      	b.n	8009dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dbe:	687b      	ldr	r3, [r7, #4]
	}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000b14 	.word	0x20000b14
 8009dd0:	20000b30 	.word	0x20000b30

08009dd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d05e      	beq.n	8009ea8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dee:	4b31      	ldr	r3, [pc, #196]	; (8009eb4 <xTaskPriorityInherit+0xe0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d24e      	bcs.n	8009e96 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	db06      	blt.n	8009e0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e00:	4b2c      	ldr	r3, [pc, #176]	; (8009eb4 <xTaskPriorityInherit+0xe0>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	f1c3 0207 	rsb	r2, r3, #7
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6959      	ldr	r1, [r3, #20]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a26      	ldr	r2, [pc, #152]	; (8009eb8 <xTaskPriorityInherit+0xe4>)
 8009e20:	4413      	add	r3, r2
 8009e22:	4299      	cmp	r1, r3
 8009e24:	d12f      	bne.n	8009e86 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fc20 	bl	8008670 <uxListRemove>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e40:	43da      	mvns	r2, r3
 8009e42:	4b1e      	ldr	r3, [pc, #120]	; (8009ebc <xTaskPriorityInherit+0xe8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4013      	ands	r3, r2
 8009e48:	4a1c      	ldr	r2, [pc, #112]	; (8009ebc <xTaskPriorityInherit+0xe8>)
 8009e4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e4c:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <xTaskPriorityInherit+0xe0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	409a      	lsls	r2, r3
 8009e5e:	4b17      	ldr	r3, [pc, #92]	; (8009ebc <xTaskPriorityInherit+0xe8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	4a15      	ldr	r2, [pc, #84]	; (8009ebc <xTaskPriorityInherit+0xe8>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a10      	ldr	r2, [pc, #64]	; (8009eb8 <xTaskPriorityInherit+0xe4>)
 8009e76:	441a      	add	r2, r3
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fb99 	bl	80085b6 <vListInsertEnd>
 8009e84:	e004      	b.n	8009e90 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <xTaskPriorityInherit+0xe0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e90:	2301      	movs	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e008      	b.n	8009ea8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <xTaskPriorityInherit+0xe0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d201      	bcs.n	8009ea8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
	}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000a08 	.word	0x20000a08
 8009eb8:	20000a0c 	.word	0x20000a0c
 8009ebc:	20000b10 	.word	0x20000b10

08009ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d06e      	beq.n	8009fb4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ed6:	4b3a      	ldr	r3, [pc, #232]	; (8009fc0 <xTaskPriorityDisinherit+0x100>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d00a      	beq.n	8009ef6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60bb      	str	r3, [r7, #8]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f18:	1e5a      	subs	r2, r3, #1
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d044      	beq.n	8009fb4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d140      	bne.n	8009fb4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fb9a 	bl	8008670 <uxListRemove>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d115      	bne.n	8009f6e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f46:	491f      	ldr	r1, [pc, #124]	; (8009fc4 <xTaskPriorityDisinherit+0x104>)
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	440b      	add	r3, r1
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xTaskPriorityDisinherit+0xae>
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	43da      	mvns	r2, r3
 8009f64:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <xTaskPriorityDisinherit+0x108>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <xTaskPriorityDisinherit+0x108>)
 8009f6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7a:	f1c3 0207 	rsb	r2, r3, #7
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	2201      	movs	r2, #1
 8009f88:	409a      	lsls	r2, r3
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <xTaskPriorityDisinherit+0x108>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <xTaskPriorityDisinherit+0x108>)
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <xTaskPriorityDisinherit+0x104>)
 8009fa2:	441a      	add	r2, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7fe fb03 	bl	80085b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fb4:	697b      	ldr	r3, [r7, #20]
	}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000a08 	.word	0x20000a08
 8009fc4:	20000a0c 	.word	0x20000a0c
 8009fc8:	20000b10 	.word	0x20000b10

08009fcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d077      	beq.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60fb      	str	r3, [r7, #12]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d902      	bls.n	800a012 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	e002      	b.n	800a018 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a016:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	69fa      	ldr	r2, [r7, #28]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d058      	beq.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d153      	bne.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a02c:	4b2b      	ldr	r3, [pc, #172]	; (800a0dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	429a      	cmp	r2, r3
 800a034:	d10a      	bne.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60bb      	str	r3, [r7, #8]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	db04      	blt.n	800a06a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f1c3 0207 	rsb	r2, r3, #7
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	6959      	ldr	r1, [r3, #20]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4a19      	ldr	r2, [pc, #100]	; (800a0e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a07a:	4413      	add	r3, r2
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d129      	bne.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	3304      	adds	r3, #4
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe faf3 	bl	8008670 <uxListRemove>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	2201      	movs	r2, #1
 800a096:	fa02 f303 	lsl.w	r3, r2, r3
 800a09a:	43da      	mvns	r2, r3
 800a09c:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	4a10      	ldr	r2, [pc, #64]	; (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	409a      	lsls	r2, r3
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	4a0b      	ldr	r2, [pc, #44]	; (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a06      	ldr	r2, [pc, #24]	; (800a0e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a0c6:	441a      	add	r2, r3
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fe fa71 	bl	80085b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0d4:	bf00      	nop
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000a08 	.word	0x20000a08
 800a0e0:	20000a0c 	.word	0x20000a0c
 800a0e4:	20000b10 	.word	0x20000b10

0800a0e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0ec:	4b07      	ldr	r3, [pc, #28]	; (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	; (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a100:	681b      	ldr	r3, [r3, #0]
	}
 800a102:	4618      	mov	r0, r3
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20000a08 	.word	0x20000a08

0800a110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11a:	4b29      	ldr	r3, [pc, #164]	; (800a1c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a120:	4b28      	ldr	r3, [pc, #160]	; (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe faa2 	bl	8008670 <uxListRemove>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a132:	4b24      	ldr	r3, [pc, #144]	; (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	2201      	movs	r2, #1
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43da      	mvns	r2, r3
 800a140:	4b21      	ldr	r3, [pc, #132]	; (800a1c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4013      	ands	r3, r2
 800a146:	4a20      	ldr	r2, [pc, #128]	; (800a1c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d10a      	bne.n	800a168 <prvAddCurrentTaskToDelayedList+0x58>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	481a      	ldr	r0, [pc, #104]	; (800a1cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a162:	f7fe fa28 	bl	80085b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a166:	e026      	b.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a170:	4b14      	ldr	r3, [pc, #80]	; (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d209      	bcs.n	800a194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a180:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3304      	adds	r3, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fe fa36 	bl	80085fe <vListInsert>
}
 800a192:	e010      	b.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a194:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fe fa2c 	bl	80085fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d202      	bcs.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1b0:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6013      	str	r3, [r2, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000b0c 	.word	0x20000b0c
 800a1c4:	20000a08 	.word	0x20000a08
 800a1c8:	20000b10 	.word	0x20000b10
 800a1cc:	20000af4 	.word	0x20000af4
 800a1d0:	20000ac4 	.word	0x20000ac4
 800a1d4:	20000ac0 	.word	0x20000ac0
 800a1d8:	20000b28 	.word	0x20000b28

0800a1dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3b04      	subs	r3, #4
 800a20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a20c:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <pxPortInitialiseStack+0x64>)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3b14      	subs	r3, #20
 800a216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3b04      	subs	r3, #4
 800a222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f06f 0202 	mvn.w	r2, #2
 800a22a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3b20      	subs	r3, #32
 800a230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a232:	68fb      	ldr	r3, [r7, #12]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	0800a245 	.word	0x0800a245

0800a244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a24e:	4b12      	ldr	r3, [pc, #72]	; (800a298 <prvTaskExitError+0x54>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a256:	d00a      	beq.n	800a26e <prvTaskExitError+0x2a>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60fb      	str	r3, [r7, #12]
}
 800a26a:	bf00      	nop
 800a26c:	e7fe      	b.n	800a26c <prvTaskExitError+0x28>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	60bb      	str	r3, [r7, #8]
}
 800a280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a282:	bf00      	nop
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0fc      	beq.n	800a284 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	20000078 	.word	0x20000078
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <pxCurrentTCBConst2>)
 800a2a2:	6819      	ldr	r1, [r3, #0]
 800a2a4:	6808      	ldr	r0, [r1, #0]
 800a2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2aa:	f380 8809 	msr	PSP, r0
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8811 	msr	BASEPRI, r0
 800a2ba:	4770      	bx	lr
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst2>:
 800a2c0:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2c8:	4808      	ldr	r0, [pc, #32]	; (800a2ec <prvPortStartFirstTask+0x24>)
 800a2ca:	6800      	ldr	r0, [r0, #0]
 800a2cc:	6800      	ldr	r0, [r0, #0]
 800a2ce:	f380 8808 	msr	MSP, r0
 800a2d2:	f04f 0000 	mov.w	r0, #0
 800a2d6:	f380 8814 	msr	CONTROL, r0
 800a2da:	b662      	cpsie	i
 800a2dc:	b661      	cpsie	f
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	df00      	svc	0
 800a2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ea:	bf00      	nop
 800a2ec:	e000ed08 	.word	0xe000ed08

0800a2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2f6:	4b46      	ldr	r3, [pc, #280]	; (800a410 <xPortStartScheduler+0x120>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a46      	ldr	r2, [pc, #280]	; (800a414 <xPortStartScheduler+0x124>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10a      	bne.n	800a316 <xPortStartScheduler+0x26>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	613b      	str	r3, [r7, #16]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a316:	4b3e      	ldr	r3, [pc, #248]	; (800a410 <xPortStartScheduler+0x120>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a3f      	ldr	r2, [pc, #252]	; (800a418 <xPortStartScheduler+0x128>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10a      	bne.n	800a336 <xPortStartScheduler+0x46>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60fb      	str	r3, [r7, #12]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a336:	4b39      	ldr	r3, [pc, #228]	; (800a41c <xPortStartScheduler+0x12c>)
 800a338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	22ff      	movs	r2, #255	; 0xff
 800a346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	4b31      	ldr	r3, [pc, #196]	; (800a420 <xPortStartScheduler+0x130>)
 800a35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a35e:	4b31      	ldr	r3, [pc, #196]	; (800a424 <xPortStartScheduler+0x134>)
 800a360:	2207      	movs	r2, #7
 800a362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a364:	e009      	b.n	800a37a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a366:	4b2f      	ldr	r3, [pc, #188]	; (800a424 <xPortStartScheduler+0x134>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	4a2d      	ldr	r2, [pc, #180]	; (800a424 <xPortStartScheduler+0x134>)
 800a36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	b2db      	uxtb	r3, r3
 800a378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a382:	2b80      	cmp	r3, #128	; 0x80
 800a384:	d0ef      	beq.n	800a366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a386:	4b27      	ldr	r3, [pc, #156]	; (800a424 <xPortStartScheduler+0x134>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1c3 0307 	rsb	r3, r3, #7
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d00a      	beq.n	800a3a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	60bb      	str	r3, [r7, #8]
}
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3a8:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <xPortStartScheduler+0x134>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <xPortStartScheduler+0x134>)
 800a3b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <xPortStartScheduler+0x134>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3ba:	4a1a      	ldr	r2, [pc, #104]	; (800a424 <xPortStartScheduler+0x134>)
 800a3bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3c6:	4b18      	ldr	r3, [pc, #96]	; (800a428 <xPortStartScheduler+0x138>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a17      	ldr	r2, [pc, #92]	; (800a428 <xPortStartScheduler+0x138>)
 800a3cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <xPortStartScheduler+0x138>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a14      	ldr	r2, [pc, #80]	; (800a428 <xPortStartScheduler+0x138>)
 800a3d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3de:	f000 f8dd 	bl	800a59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3e2:	4b12      	ldr	r3, [pc, #72]	; (800a42c <xPortStartScheduler+0x13c>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3e8:	f000 f8fc 	bl	800a5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3ec:	4b10      	ldr	r3, [pc, #64]	; (800a430 <xPortStartScheduler+0x140>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a0f      	ldr	r2, [pc, #60]	; (800a430 <xPortStartScheduler+0x140>)
 800a3f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3f8:	f7ff ff66 	bl	800a2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3fc:	f7ff fa86 	bl	800990c <vTaskSwitchContext>
	prvTaskExitError();
 800a400:	f7ff ff20 	bl	800a244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000ed00 	.word	0xe000ed00
 800a414:	410fc271 	.word	0x410fc271
 800a418:	410fc270 	.word	0x410fc270
 800a41c:	e000e400 	.word	0xe000e400
 800a420:	20000b34 	.word	0x20000b34
 800a424:	20000b38 	.word	0x20000b38
 800a428:	e000ed20 	.word	0xe000ed20
 800a42c:	20000078 	.word	0x20000078
 800a430:	e000ef34 	.word	0xe000ef34

0800a434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	607b      	str	r3, [r7, #4]
}
 800a44c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a44e:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <vPortEnterCritical+0x58>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	4a0d      	ldr	r2, [pc, #52]	; (800a48c <vPortEnterCritical+0x58>)
 800a456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a458:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <vPortEnterCritical+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d10f      	bne.n	800a480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <vPortEnterCritical+0x5c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <vPortEnterCritical+0x4c>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	603b      	str	r3, [r7, #0]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <vPortEnterCritical+0x4a>
	}
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	20000078 	.word	0x20000078
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a49a:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <vPortExitCritical+0x50>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <vPortExitCritical+0x24>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	607b      	str	r3, [r7, #4]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4b8:	4b0a      	ldr	r3, [pc, #40]	; (800a4e4 <vPortExitCritical+0x50>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	4a09      	ldr	r2, [pc, #36]	; (800a4e4 <vPortExitCritical+0x50>)
 800a4c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4c2:	4b08      	ldr	r3, [pc, #32]	; (800a4e4 <vPortExitCritical+0x50>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <vPortExitCritical+0x42>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f383 8811 	msr	BASEPRI, r3
}
 800a4d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20000078 	.word	0x20000078
	...

0800a4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4f0:	f3ef 8009 	mrs	r0, PSP
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	4b15      	ldr	r3, [pc, #84]	; (800a550 <pxCurrentTCBConst>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f01e 0f10 	tst.w	lr, #16
 800a500:	bf08      	it	eq
 800a502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50a:	6010      	str	r0, [r2, #0]
 800a50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a510:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a514:	f380 8811 	msr	BASEPRI, r0
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f7ff f9f4 	bl	800990c <vTaskSwitchContext>
 800a524:	f04f 0000 	mov.w	r0, #0
 800a528:	f380 8811 	msr	BASEPRI, r0
 800a52c:	bc09      	pop	{r0, r3}
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	6808      	ldr	r0, [r1, #0]
 800a532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a536:	f01e 0f10 	tst.w	lr, #16
 800a53a:	bf08      	it	eq
 800a53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a540:	f380 8809 	msr	PSP, r0
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst>:
 800a550:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	607b      	str	r3, [r7, #4]
}
 800a570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a572:	f7ff f913 	bl	800979c <xTaskIncrementTick>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a57c:	4b06      	ldr	r3, [pc, #24]	; (800a598 <SysTick_Handler+0x40>)
 800a57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	2300      	movs	r3, #0
 800a586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f383 8811 	msr	BASEPRI, r3
}
 800a58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	; (800a5d4 <vPortSetupTimerInterrupt+0x38>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <vPortSetupTimerInterrupt+0x40>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	099b      	lsrs	r3, r3, #6
 800a5b8:	4a09      	ldr	r2, [pc, #36]	; (800a5e0 <vPortSetupTimerInterrupt+0x44>)
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5be:	4b04      	ldr	r3, [pc, #16]	; (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	601a      	str	r2, [r3, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	e000e010 	.word	0xe000e010
 800a5d4:	e000e018 	.word	0xe000e018
 800a5d8:	2000006c 	.word	0x2000006c
 800a5dc:	10624dd3 	.word	0x10624dd3
 800a5e0:	e000e014 	.word	0xe000e014

0800a5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5f4 <vPortEnableVFP+0x10>
 800a5e8:	6801      	ldr	r1, [r0, #0]
 800a5ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5ee:	6001      	str	r1, [r0, #0]
 800a5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5f2:	bf00      	nop
 800a5f4:	e000ed88 	.word	0xe000ed88

0800a5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5fe:	f3ef 8305 	mrs	r3, IPSR
 800a602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b0f      	cmp	r3, #15
 800a608:	d914      	bls.n	800a634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a60a:	4a17      	ldr	r2, [pc, #92]	; (800a668 <vPortValidateInterruptPriority+0x70>)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a614:	4b15      	ldr	r3, [pc, #84]	; (800a66c <vPortValidateInterruptPriority+0x74>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	7afa      	ldrb	r2, [r7, #11]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d20a      	bcs.n	800a634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	607b      	str	r3, [r7, #4]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a634:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <vPortValidateInterruptPriority+0x78>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <vPortValidateInterruptPriority+0x7c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d90a      	bls.n	800a65a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	603b      	str	r3, [r7, #0]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <vPortValidateInterruptPriority+0x60>
	}
 800a65a:	bf00      	nop
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	e000e3f0 	.word	0xe000e3f0
 800a66c:	20000b34 	.word	0x20000b34
 800a670:	e000ed0c 	.word	0xe000ed0c
 800a674:	20000b38 	.word	0x20000b38

0800a678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08a      	sub	sp, #40	; 0x28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a680:	2300      	movs	r3, #0
 800a682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a684:	f7fe ffe0 	bl	8009648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a688:	4b5b      	ldr	r3, [pc, #364]	; (800a7f8 <pvPortMalloc+0x180>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a690:	f000 f920 	bl	800a8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a694:	4b59      	ldr	r3, [pc, #356]	; (800a7fc <pvPortMalloc+0x184>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f040 8093 	bne.w	800a7c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01d      	beq.n	800a6e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d014      	beq.n	800a6e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f023 0307 	bic.w	r3, r3, #7
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	617b      	str	r3, [r7, #20]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d06e      	beq.n	800a7c8 <pvPortMalloc+0x150>
 800a6ea:	4b45      	ldr	r3, [pc, #276]	; (800a800 <pvPortMalloc+0x188>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d869      	bhi.n	800a7c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6f4:	4b43      	ldr	r3, [pc, #268]	; (800a804 <pvPortMalloc+0x18c>)
 800a6f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6f8:	4b42      	ldr	r3, [pc, #264]	; (800a804 <pvPortMalloc+0x18c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6fe:	e004      	b.n	800a70a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	429a      	cmp	r2, r3
 800a712:	d903      	bls.n	800a71c <pvPortMalloc+0xa4>
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1f1      	bne.n	800a700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a71c:	4b36      	ldr	r3, [pc, #216]	; (800a7f8 <pvPortMalloc+0x180>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a722:	429a      	cmp	r2, r3
 800a724:	d050      	beq.n	800a7c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2208      	movs	r2, #8
 800a72c:	4413      	add	r3, r2
 800a72e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	2308      	movs	r3, #8
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	429a      	cmp	r2, r3
 800a746:	d91f      	bls.n	800a788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4413      	add	r3, r2
 800a74e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <pvPortMalloc+0xf8>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	613b      	str	r3, [r7, #16]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	1ad2      	subs	r2, r2, r3
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a782:	69b8      	ldr	r0, [r7, #24]
 800a784:	f000 f908 	bl	800a998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a788:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <pvPortMalloc+0x188>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	4a1b      	ldr	r2, [pc, #108]	; (800a800 <pvPortMalloc+0x188>)
 800a794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a796:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <pvPortMalloc+0x188>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <pvPortMalloc+0x190>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d203      	bcs.n	800a7aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7a2:	4b17      	ldr	r3, [pc, #92]	; (800a800 <pvPortMalloc+0x188>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a18      	ldr	r2, [pc, #96]	; (800a808 <pvPortMalloc+0x190>)
 800a7a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <pvPortMalloc+0x184>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <pvPortMalloc+0x194>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <pvPortMalloc+0x194>)
 800a7c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7c8:	f7fe ff4c 	bl	8009664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <pvPortMalloc+0x174>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	60fb      	str	r3, [r7, #12]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <pvPortMalloc+0x172>
	return pvReturn;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3728      	adds	r7, #40	; 0x28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20004744 	.word	0x20004744
 800a7fc:	20004758 	.word	0x20004758
 800a800:	20004748 	.word	0x20004748
 800a804:	2000473c 	.word	0x2000473c
 800a808:	2000474c 	.word	0x2000474c
 800a80c:	20004750 	.word	0x20004750

0800a810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d04d      	beq.n	800a8be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a822:	2308      	movs	r3, #8
 800a824:	425b      	negs	r3, r3
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4413      	add	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	4b24      	ldr	r3, [pc, #144]	; (800a8c8 <vPortFree+0xb8>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4013      	ands	r3, r2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <vPortFree+0x44>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	60fb      	str	r3, [r7, #12]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00a      	beq.n	800a872 <vPortFree+0x62>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	60bb      	str	r3, [r7, #8]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <vPortFree+0xb8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4013      	ands	r3, r2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01e      	beq.n	800a8be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d11a      	bne.n	800a8be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <vPortFree+0xb8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	43db      	mvns	r3, r3
 800a892:	401a      	ands	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a898:	f7fe fed6 	bl	8009648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <vPortFree+0xbc>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	4a09      	ldr	r2, [pc, #36]	; (800a8cc <vPortFree+0xbc>)
 800a8a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8aa:	6938      	ldr	r0, [r7, #16]
 800a8ac:	f000 f874 	bl	800a998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <vPortFree+0xc0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	4a06      	ldr	r2, [pc, #24]	; (800a8d0 <vPortFree+0xc0>)
 800a8b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8ba:	f7fe fed3 	bl	8009664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8be:	bf00      	nop
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20004758 	.word	0x20004758
 800a8cc:	20004748 	.word	0x20004748
 800a8d0:	20004754 	.word	0x20004754

0800a8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8e0:	4b27      	ldr	r3, [pc, #156]	; (800a980 <prvHeapInit+0xac>)
 800a8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00c      	beq.n	800a908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3307      	adds	r3, #7
 800a8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0307 	bic.w	r3, r3, #7
 800a8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	4a1f      	ldr	r2, [pc, #124]	; (800a980 <prvHeapInit+0xac>)
 800a904:	4413      	add	r3, r2
 800a906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a90c:	4a1d      	ldr	r2, [pc, #116]	; (800a984 <prvHeapInit+0xb0>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a912:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <prvHeapInit+0xb0>)
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	4413      	add	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a920:	2208      	movs	r2, #8
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1a9b      	subs	r3, r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 0307 	bic.w	r3, r3, #7
 800a92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4a15      	ldr	r2, [pc, #84]	; (800a988 <prvHeapInit+0xb4>)
 800a934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a936:	4b14      	ldr	r3, [pc, #80]	; (800a988 <prvHeapInit+0xb4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2200      	movs	r2, #0
 800a93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a93e:	4b12      	ldr	r3, [pc, #72]	; (800a988 <prvHeapInit+0xb4>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a954:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <prvHeapInit+0xb4>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <prvHeapInit+0xb8>)
 800a962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <prvHeapInit+0xbc>)
 800a96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <prvHeapInit+0xc0>)
 800a96e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	20000b3c 	.word	0x20000b3c
 800a984:	2000473c 	.word	0x2000473c
 800a988:	20004744 	.word	0x20004744
 800a98c:	2000474c 	.word	0x2000474c
 800a990:	20004748 	.word	0x20004748
 800a994:	20004758 	.word	0x20004758

0800a998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9a0:	4b28      	ldr	r3, [pc, #160]	; (800aa44 <prvInsertBlockIntoFreeList+0xac>)
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e002      	b.n	800a9ac <prvInsertBlockIntoFreeList+0x14>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d8f7      	bhi.n	800a9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d108      	bne.n	800a9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d118      	bne.n	800aa20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	4b15      	ldr	r3, [pc, #84]	; (800aa48 <prvInsertBlockIntoFreeList+0xb0>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d00d      	beq.n	800aa16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	441a      	add	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	e008      	b.n	800aa28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa16:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <prvInsertBlockIntoFreeList+0xb0>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	e003      	b.n	800aa28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d002      	beq.n	800aa36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	2000473c 	.word	0x2000473c
 800aa48:	20004744 	.word	0x20004744

0800aa4c <sulp>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4604      	mov	r4, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	ec45 4b10 	vmov	d0, r4, r5
 800aa56:	4616      	mov	r6, r2
 800aa58:	f001 ffe0 	bl	800ca1c <__ulp>
 800aa5c:	ec51 0b10 	vmov	r0, r1, d0
 800aa60:	b17e      	cbz	r6, 800aa82 <sulp+0x36>
 800aa62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	dd09      	ble.n	800aa82 <sulp+0x36>
 800aa6e:	051b      	lsls	r3, r3, #20
 800aa70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa74:	2400      	movs	r4, #0
 800aa76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	f7f5 fdd3 	bl	8000628 <__aeabi_dmul>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	0000      	movs	r0, r0
	...

0800aa88 <_strtod_l>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b02 	vpush	{d8}
 800aa90:	b09b      	sub	sp, #108	; 0x6c
 800aa92:	4604      	mov	r4, r0
 800aa94:	9213      	str	r2, [sp, #76]	; 0x4c
 800aa96:	2200      	movs	r2, #0
 800aa98:	9216      	str	r2, [sp, #88]	; 0x58
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	f04f 0800 	mov.w	r8, #0
 800aaa0:	f04f 0900 	mov.w	r9, #0
 800aaa4:	460a      	mov	r2, r1
 800aaa6:	9215      	str	r2, [sp, #84]	; 0x54
 800aaa8:	7811      	ldrb	r1, [r2, #0]
 800aaaa:	292b      	cmp	r1, #43	; 0x2b
 800aaac:	d04c      	beq.n	800ab48 <_strtod_l+0xc0>
 800aaae:	d83a      	bhi.n	800ab26 <_strtod_l+0x9e>
 800aab0:	290d      	cmp	r1, #13
 800aab2:	d834      	bhi.n	800ab1e <_strtod_l+0x96>
 800aab4:	2908      	cmp	r1, #8
 800aab6:	d834      	bhi.n	800ab22 <_strtod_l+0x9a>
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d03d      	beq.n	800ab38 <_strtod_l+0xb0>
 800aabc:	2200      	movs	r2, #0
 800aabe:	920a      	str	r2, [sp, #40]	; 0x28
 800aac0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aac2:	7832      	ldrb	r2, [r6, #0]
 800aac4:	2a30      	cmp	r2, #48	; 0x30
 800aac6:	f040 80b4 	bne.w	800ac32 <_strtod_l+0x1aa>
 800aaca:	7872      	ldrb	r2, [r6, #1]
 800aacc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aad0:	2a58      	cmp	r2, #88	; 0x58
 800aad2:	d170      	bne.n	800abb6 <_strtod_l+0x12e>
 800aad4:	9302      	str	r3, [sp, #8]
 800aad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	ab16      	add	r3, sp, #88	; 0x58
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4a8e      	ldr	r2, [pc, #568]	; (800ad18 <_strtod_l+0x290>)
 800aae0:	ab17      	add	r3, sp, #92	; 0x5c
 800aae2:	a915      	add	r1, sp, #84	; 0x54
 800aae4:	4620      	mov	r0, r4
 800aae6:	f001 f87f 	bl	800bbe8 <__gethex>
 800aaea:	f010 070f 	ands.w	r7, r0, #15
 800aaee:	4605      	mov	r5, r0
 800aaf0:	d005      	beq.n	800aafe <_strtod_l+0x76>
 800aaf2:	2f06      	cmp	r7, #6
 800aaf4:	d12a      	bne.n	800ab4c <_strtod_l+0xc4>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9615      	str	r6, [sp, #84]	; 0x54
 800aafc:	930a      	str	r3, [sp, #40]	; 0x28
 800aafe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 857f 	bne.w	800b604 <_strtod_l+0xb7c>
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	b1db      	cbz	r3, 800ab42 <_strtod_l+0xba>
 800ab0a:	4642      	mov	r2, r8
 800ab0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab10:	ec43 2b10 	vmov	d0, r2, r3
 800ab14:	b01b      	add	sp, #108	; 0x6c
 800ab16:	ecbd 8b02 	vpop	{d8}
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	2920      	cmp	r1, #32
 800ab20:	d1cc      	bne.n	800aabc <_strtod_l+0x34>
 800ab22:	3201      	adds	r2, #1
 800ab24:	e7bf      	b.n	800aaa6 <_strtod_l+0x1e>
 800ab26:	292d      	cmp	r1, #45	; 0x2d
 800ab28:	d1c8      	bne.n	800aabc <_strtod_l+0x34>
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	910a      	str	r1, [sp, #40]	; 0x28
 800ab2e:	1c51      	adds	r1, r2, #1
 800ab30:	9115      	str	r1, [sp, #84]	; 0x54
 800ab32:	7852      	ldrb	r2, [r2, #1]
 800ab34:	2a00      	cmp	r2, #0
 800ab36:	d1c3      	bne.n	800aac0 <_strtod_l+0x38>
 800ab38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab3a:	9515      	str	r5, [sp, #84]	; 0x54
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 855f 	bne.w	800b600 <_strtod_l+0xb78>
 800ab42:	4642      	mov	r2, r8
 800ab44:	464b      	mov	r3, r9
 800ab46:	e7e3      	b.n	800ab10 <_strtod_l+0x88>
 800ab48:	2100      	movs	r1, #0
 800ab4a:	e7ef      	b.n	800ab2c <_strtod_l+0xa4>
 800ab4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab4e:	b13a      	cbz	r2, 800ab60 <_strtod_l+0xd8>
 800ab50:	2135      	movs	r1, #53	; 0x35
 800ab52:	a818      	add	r0, sp, #96	; 0x60
 800ab54:	f002 f85f 	bl	800cc16 <__copybits>
 800ab58:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f001 fc32 	bl	800c3c4 <_Bfree>
 800ab60:	3f01      	subs	r7, #1
 800ab62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab64:	2f04      	cmp	r7, #4
 800ab66:	d806      	bhi.n	800ab76 <_strtod_l+0xee>
 800ab68:	e8df f007 	tbb	[pc, r7]
 800ab6c:	201d0314 	.word	0x201d0314
 800ab70:	14          	.byte	0x14
 800ab71:	00          	.byte	0x00
 800ab72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ab76:	05e9      	lsls	r1, r5, #23
 800ab78:	bf48      	it	mi
 800ab7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ab7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab82:	0d1b      	lsrs	r3, r3, #20
 800ab84:	051b      	lsls	r3, r3, #20
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1b9      	bne.n	800aafe <_strtod_l+0x76>
 800ab8a:	f000 ff35 	bl	800b9f8 <__errno>
 800ab8e:	2322      	movs	r3, #34	; 0x22
 800ab90:	6003      	str	r3, [r0, #0]
 800ab92:	e7b4      	b.n	800aafe <_strtod_l+0x76>
 800ab94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ab98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aba0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aba4:	e7e7      	b.n	800ab76 <_strtod_l+0xee>
 800aba6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ad20 <_strtod_l+0x298>
 800abaa:	e7e4      	b.n	800ab76 <_strtod_l+0xee>
 800abac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800abb0:	f04f 38ff 	mov.w	r8, #4294967295
 800abb4:	e7df      	b.n	800ab76 <_strtod_l+0xee>
 800abb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	9215      	str	r2, [sp, #84]	; 0x54
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	2b30      	cmp	r3, #48	; 0x30
 800abc0:	d0f9      	beq.n	800abb6 <_strtod_l+0x12e>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d09b      	beq.n	800aafe <_strtod_l+0x76>
 800abc6:	2301      	movs	r3, #1
 800abc8:	f04f 0a00 	mov.w	sl, #0
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800abd6:	46d3      	mov	fp, sl
 800abd8:	220a      	movs	r2, #10
 800abda:	9815      	ldr	r0, [sp, #84]	; 0x54
 800abdc:	7806      	ldrb	r6, [r0, #0]
 800abde:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800abe2:	b2d9      	uxtb	r1, r3
 800abe4:	2909      	cmp	r1, #9
 800abe6:	d926      	bls.n	800ac36 <_strtod_l+0x1ae>
 800abe8:	494c      	ldr	r1, [pc, #304]	; (800ad1c <_strtod_l+0x294>)
 800abea:	2201      	movs	r2, #1
 800abec:	f000 fe55 	bl	800b89a <strncmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d030      	beq.n	800ac56 <_strtod_l+0x1ce>
 800abf4:	2000      	movs	r0, #0
 800abf6:	4632      	mov	r2, r6
 800abf8:	9005      	str	r0, [sp, #20]
 800abfa:	465e      	mov	r6, fp
 800abfc:	4603      	mov	r3, r0
 800abfe:	2a65      	cmp	r2, #101	; 0x65
 800ac00:	d001      	beq.n	800ac06 <_strtod_l+0x17e>
 800ac02:	2a45      	cmp	r2, #69	; 0x45
 800ac04:	d113      	bne.n	800ac2e <_strtod_l+0x1a6>
 800ac06:	b91e      	cbnz	r6, 800ac10 <_strtod_l+0x188>
 800ac08:	9a04      	ldr	r2, [sp, #16]
 800ac0a:	4302      	orrs	r2, r0
 800ac0c:	d094      	beq.n	800ab38 <_strtod_l+0xb0>
 800ac0e:	2600      	movs	r6, #0
 800ac10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ac12:	1c6a      	adds	r2, r5, #1
 800ac14:	9215      	str	r2, [sp, #84]	; 0x54
 800ac16:	786a      	ldrb	r2, [r5, #1]
 800ac18:	2a2b      	cmp	r2, #43	; 0x2b
 800ac1a:	d074      	beq.n	800ad06 <_strtod_l+0x27e>
 800ac1c:	2a2d      	cmp	r2, #45	; 0x2d
 800ac1e:	d078      	beq.n	800ad12 <_strtod_l+0x28a>
 800ac20:	f04f 0c00 	mov.w	ip, #0
 800ac24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac28:	2909      	cmp	r1, #9
 800ac2a:	d97f      	bls.n	800ad2c <_strtod_l+0x2a4>
 800ac2c:	9515      	str	r5, [sp, #84]	; 0x54
 800ac2e:	2700      	movs	r7, #0
 800ac30:	e09e      	b.n	800ad70 <_strtod_l+0x2e8>
 800ac32:	2300      	movs	r3, #0
 800ac34:	e7c8      	b.n	800abc8 <_strtod_l+0x140>
 800ac36:	f1bb 0f08 	cmp.w	fp, #8
 800ac3a:	bfd8      	it	le
 800ac3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ac3e:	f100 0001 	add.w	r0, r0, #1
 800ac42:	bfda      	itte	le
 800ac44:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac48:	9309      	strle	r3, [sp, #36]	; 0x24
 800ac4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ac4e:	f10b 0b01 	add.w	fp, fp, #1
 800ac52:	9015      	str	r0, [sp, #84]	; 0x54
 800ac54:	e7c1      	b.n	800abda <_strtod_l+0x152>
 800ac56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	9215      	str	r2, [sp, #84]	; 0x54
 800ac5c:	785a      	ldrb	r2, [r3, #1]
 800ac5e:	f1bb 0f00 	cmp.w	fp, #0
 800ac62:	d037      	beq.n	800acd4 <_strtod_l+0x24c>
 800ac64:	9005      	str	r0, [sp, #20]
 800ac66:	465e      	mov	r6, fp
 800ac68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d912      	bls.n	800ac96 <_strtod_l+0x20e>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e7c4      	b.n	800abfe <_strtod_l+0x176>
 800ac74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	9215      	str	r2, [sp, #84]	; 0x54
 800ac7a:	785a      	ldrb	r2, [r3, #1]
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	2a30      	cmp	r2, #48	; 0x30
 800ac80:	d0f8      	beq.n	800ac74 <_strtod_l+0x1ec>
 800ac82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	f200 84c1 	bhi.w	800b60e <_strtod_l+0xb86>
 800ac8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac8e:	9005      	str	r0, [sp, #20]
 800ac90:	2000      	movs	r0, #0
 800ac92:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac94:	4606      	mov	r6, r0
 800ac96:	3a30      	subs	r2, #48	; 0x30
 800ac98:	f100 0301 	add.w	r3, r0, #1
 800ac9c:	d014      	beq.n	800acc8 <_strtod_l+0x240>
 800ac9e:	9905      	ldr	r1, [sp, #20]
 800aca0:	4419      	add	r1, r3
 800aca2:	9105      	str	r1, [sp, #20]
 800aca4:	4633      	mov	r3, r6
 800aca6:	eb00 0c06 	add.w	ip, r0, r6
 800acaa:	210a      	movs	r1, #10
 800acac:	4563      	cmp	r3, ip
 800acae:	d113      	bne.n	800acd8 <_strtod_l+0x250>
 800acb0:	1833      	adds	r3, r6, r0
 800acb2:	2b08      	cmp	r3, #8
 800acb4:	f106 0601 	add.w	r6, r6, #1
 800acb8:	4406      	add	r6, r0
 800acba:	dc1a      	bgt.n	800acf2 <_strtod_l+0x26a>
 800acbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acbe:	230a      	movs	r3, #10
 800acc0:	fb03 2301 	mla	r3, r3, r1, r2
 800acc4:	9309      	str	r3, [sp, #36]	; 0x24
 800acc6:	2300      	movs	r3, #0
 800acc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acca:	1c51      	adds	r1, r2, #1
 800accc:	9115      	str	r1, [sp, #84]	; 0x54
 800acce:	7852      	ldrb	r2, [r2, #1]
 800acd0:	4618      	mov	r0, r3
 800acd2:	e7c9      	b.n	800ac68 <_strtod_l+0x1e0>
 800acd4:	4658      	mov	r0, fp
 800acd6:	e7d2      	b.n	800ac7e <_strtod_l+0x1f6>
 800acd8:	2b08      	cmp	r3, #8
 800acda:	f103 0301 	add.w	r3, r3, #1
 800acde:	dc03      	bgt.n	800ace8 <_strtod_l+0x260>
 800ace0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ace2:	434f      	muls	r7, r1
 800ace4:	9709      	str	r7, [sp, #36]	; 0x24
 800ace6:	e7e1      	b.n	800acac <_strtod_l+0x224>
 800ace8:	2b10      	cmp	r3, #16
 800acea:	bfd8      	it	le
 800acec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800acf0:	e7dc      	b.n	800acac <_strtod_l+0x224>
 800acf2:	2e10      	cmp	r6, #16
 800acf4:	bfdc      	itt	le
 800acf6:	230a      	movle	r3, #10
 800acf8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800acfc:	e7e3      	b.n	800acc6 <_strtod_l+0x23e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	2301      	movs	r3, #1
 800ad04:	e780      	b.n	800ac08 <_strtod_l+0x180>
 800ad06:	f04f 0c00 	mov.w	ip, #0
 800ad0a:	1caa      	adds	r2, r5, #2
 800ad0c:	9215      	str	r2, [sp, #84]	; 0x54
 800ad0e:	78aa      	ldrb	r2, [r5, #2]
 800ad10:	e788      	b.n	800ac24 <_strtod_l+0x19c>
 800ad12:	f04f 0c01 	mov.w	ip, #1
 800ad16:	e7f8      	b.n	800ad0a <_strtod_l+0x282>
 800ad18:	0800ec28 	.word	0x0800ec28
 800ad1c:	0800ec18 	.word	0x0800ec18
 800ad20:	7ff00000 	.word	0x7ff00000
 800ad24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad26:	1c51      	adds	r1, r2, #1
 800ad28:	9115      	str	r1, [sp, #84]	; 0x54
 800ad2a:	7852      	ldrb	r2, [r2, #1]
 800ad2c:	2a30      	cmp	r2, #48	; 0x30
 800ad2e:	d0f9      	beq.n	800ad24 <_strtod_l+0x29c>
 800ad30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad34:	2908      	cmp	r1, #8
 800ad36:	f63f af7a 	bhi.w	800ac2e <_strtod_l+0x1a6>
 800ad3a:	3a30      	subs	r2, #48	; 0x30
 800ad3c:	9208      	str	r2, [sp, #32]
 800ad3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad40:	920c      	str	r2, [sp, #48]	; 0x30
 800ad42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad44:	1c57      	adds	r7, r2, #1
 800ad46:	9715      	str	r7, [sp, #84]	; 0x54
 800ad48:	7852      	ldrb	r2, [r2, #1]
 800ad4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad4e:	f1be 0f09 	cmp.w	lr, #9
 800ad52:	d938      	bls.n	800adc6 <_strtod_l+0x33e>
 800ad54:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad56:	1a7f      	subs	r7, r7, r1
 800ad58:	2f08      	cmp	r7, #8
 800ad5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ad5e:	dc03      	bgt.n	800ad68 <_strtod_l+0x2e0>
 800ad60:	9908      	ldr	r1, [sp, #32]
 800ad62:	428f      	cmp	r7, r1
 800ad64:	bfa8      	it	ge
 800ad66:	460f      	movge	r7, r1
 800ad68:	f1bc 0f00 	cmp.w	ip, #0
 800ad6c:	d000      	beq.n	800ad70 <_strtod_l+0x2e8>
 800ad6e:	427f      	negs	r7, r7
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	d14f      	bne.n	800ae14 <_strtod_l+0x38c>
 800ad74:	9904      	ldr	r1, [sp, #16]
 800ad76:	4301      	orrs	r1, r0
 800ad78:	f47f aec1 	bne.w	800aafe <_strtod_l+0x76>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f47f aedb 	bne.w	800ab38 <_strtod_l+0xb0>
 800ad82:	2a69      	cmp	r2, #105	; 0x69
 800ad84:	d029      	beq.n	800adda <_strtod_l+0x352>
 800ad86:	dc26      	bgt.n	800add6 <_strtod_l+0x34e>
 800ad88:	2a49      	cmp	r2, #73	; 0x49
 800ad8a:	d026      	beq.n	800adda <_strtod_l+0x352>
 800ad8c:	2a4e      	cmp	r2, #78	; 0x4e
 800ad8e:	f47f aed3 	bne.w	800ab38 <_strtod_l+0xb0>
 800ad92:	499b      	ldr	r1, [pc, #620]	; (800b000 <_strtod_l+0x578>)
 800ad94:	a815      	add	r0, sp, #84	; 0x54
 800ad96:	f001 f967 	bl	800c068 <__match>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f43f aecc 	beq.w	800ab38 <_strtod_l+0xb0>
 800ada0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b28      	cmp	r3, #40	; 0x28
 800ada6:	d12f      	bne.n	800ae08 <_strtod_l+0x380>
 800ada8:	4996      	ldr	r1, [pc, #600]	; (800b004 <_strtod_l+0x57c>)
 800adaa:	aa18      	add	r2, sp, #96	; 0x60
 800adac:	a815      	add	r0, sp, #84	; 0x54
 800adae:	f001 f96f 	bl	800c090 <__hexnan>
 800adb2:	2805      	cmp	r0, #5
 800adb4:	d128      	bne.n	800ae08 <_strtod_l+0x380>
 800adb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800adbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800adc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800adc4:	e69b      	b.n	800aafe <_strtod_l+0x76>
 800adc6:	9f08      	ldr	r7, [sp, #32]
 800adc8:	210a      	movs	r1, #10
 800adca:	fb01 2107 	mla	r1, r1, r7, r2
 800adce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800add2:	9208      	str	r2, [sp, #32]
 800add4:	e7b5      	b.n	800ad42 <_strtod_l+0x2ba>
 800add6:	2a6e      	cmp	r2, #110	; 0x6e
 800add8:	e7d9      	b.n	800ad8e <_strtod_l+0x306>
 800adda:	498b      	ldr	r1, [pc, #556]	; (800b008 <_strtod_l+0x580>)
 800addc:	a815      	add	r0, sp, #84	; 0x54
 800adde:	f001 f943 	bl	800c068 <__match>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f43f aea8 	beq.w	800ab38 <_strtod_l+0xb0>
 800ade8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adea:	4988      	ldr	r1, [pc, #544]	; (800b00c <_strtod_l+0x584>)
 800adec:	3b01      	subs	r3, #1
 800adee:	a815      	add	r0, sp, #84	; 0x54
 800adf0:	9315      	str	r3, [sp, #84]	; 0x54
 800adf2:	f001 f939 	bl	800c068 <__match>
 800adf6:	b910      	cbnz	r0, 800adfe <_strtod_l+0x376>
 800adf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adfa:	3301      	adds	r3, #1
 800adfc:	9315      	str	r3, [sp, #84]	; 0x54
 800adfe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b01c <_strtod_l+0x594>
 800ae02:	f04f 0800 	mov.w	r8, #0
 800ae06:	e67a      	b.n	800aafe <_strtod_l+0x76>
 800ae08:	4881      	ldr	r0, [pc, #516]	; (800b010 <_strtod_l+0x588>)
 800ae0a:	f000 fe31 	bl	800ba70 <nan>
 800ae0e:	ec59 8b10 	vmov	r8, r9, d0
 800ae12:	e674      	b.n	800aafe <_strtod_l+0x76>
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae18:	1afb      	subs	r3, r7, r3
 800ae1a:	f1bb 0f00 	cmp.w	fp, #0
 800ae1e:	bf08      	it	eq
 800ae20:	46b3      	moveq	fp, r6
 800ae22:	2e10      	cmp	r6, #16
 800ae24:	9308      	str	r3, [sp, #32]
 800ae26:	4635      	mov	r5, r6
 800ae28:	bfa8      	it	ge
 800ae2a:	2510      	movge	r5, #16
 800ae2c:	f7f5 fb82 	bl	8000534 <__aeabi_ui2d>
 800ae30:	2e09      	cmp	r6, #9
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	dd13      	ble.n	800ae60 <_strtod_l+0x3d8>
 800ae38:	4b76      	ldr	r3, [pc, #472]	; (800b014 <_strtod_l+0x58c>)
 800ae3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae42:	f7f5 fbf1 	bl	8000628 <__aeabi_dmul>
 800ae46:	4680      	mov	r8, r0
 800ae48:	4650      	mov	r0, sl
 800ae4a:	4689      	mov	r9, r1
 800ae4c:	f7f5 fb72 	bl	8000534 <__aeabi_ui2d>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4640      	mov	r0, r8
 800ae56:	4649      	mov	r1, r9
 800ae58:	f7f5 fa30 	bl	80002bc <__adddf3>
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4689      	mov	r9, r1
 800ae60:	2e0f      	cmp	r6, #15
 800ae62:	dc38      	bgt.n	800aed6 <_strtod_l+0x44e>
 800ae64:	9b08      	ldr	r3, [sp, #32]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f43f ae49 	beq.w	800aafe <_strtod_l+0x76>
 800ae6c:	dd24      	ble.n	800aeb8 <_strtod_l+0x430>
 800ae6e:	2b16      	cmp	r3, #22
 800ae70:	dc0b      	bgt.n	800ae8a <_strtod_l+0x402>
 800ae72:	4968      	ldr	r1, [pc, #416]	; (800b014 <_strtod_l+0x58c>)
 800ae74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7c:	4642      	mov	r2, r8
 800ae7e:	464b      	mov	r3, r9
 800ae80:	f7f5 fbd2 	bl	8000628 <__aeabi_dmul>
 800ae84:	4680      	mov	r8, r0
 800ae86:	4689      	mov	r9, r1
 800ae88:	e639      	b.n	800aafe <_strtod_l+0x76>
 800ae8a:	9a08      	ldr	r2, [sp, #32]
 800ae8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ae90:	4293      	cmp	r3, r2
 800ae92:	db20      	blt.n	800aed6 <_strtod_l+0x44e>
 800ae94:	4c5f      	ldr	r4, [pc, #380]	; (800b014 <_strtod_l+0x58c>)
 800ae96:	f1c6 060f 	rsb	r6, r6, #15
 800ae9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ae9e:	4642      	mov	r2, r8
 800aea0:	464b      	mov	r3, r9
 800aea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea6:	f7f5 fbbf 	bl	8000628 <__aeabi_dmul>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	1b9e      	subs	r6, r3, r6
 800aeae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aeb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aeb6:	e7e3      	b.n	800ae80 <_strtod_l+0x3f8>
 800aeb8:	9b08      	ldr	r3, [sp, #32]
 800aeba:	3316      	adds	r3, #22
 800aebc:	db0b      	blt.n	800aed6 <_strtod_l+0x44e>
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	1bdf      	subs	r7, r3, r7
 800aec2:	4b54      	ldr	r3, [pc, #336]	; (800b014 <_strtod_l+0x58c>)
 800aec4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 fcd4 	bl	800087c <__aeabi_ddiv>
 800aed4:	e7d6      	b.n	800ae84 <_strtod_l+0x3fc>
 800aed6:	9b08      	ldr	r3, [sp, #32]
 800aed8:	1b75      	subs	r5, r6, r5
 800aeda:	441d      	add	r5, r3
 800aedc:	2d00      	cmp	r5, #0
 800aede:	dd70      	ble.n	800afc2 <_strtod_l+0x53a>
 800aee0:	f015 030f 	ands.w	r3, r5, #15
 800aee4:	d00a      	beq.n	800aefc <_strtod_l+0x474>
 800aee6:	494b      	ldr	r1, [pc, #300]	; (800b014 <_strtod_l+0x58c>)
 800aee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aeec:	4642      	mov	r2, r8
 800aeee:	464b      	mov	r3, r9
 800aef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef4:	f7f5 fb98 	bl	8000628 <__aeabi_dmul>
 800aef8:	4680      	mov	r8, r0
 800aefa:	4689      	mov	r9, r1
 800aefc:	f035 050f 	bics.w	r5, r5, #15
 800af00:	d04d      	beq.n	800af9e <_strtod_l+0x516>
 800af02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800af06:	dd22      	ble.n	800af4e <_strtod_l+0x4c6>
 800af08:	2500      	movs	r5, #0
 800af0a:	46ab      	mov	fp, r5
 800af0c:	9509      	str	r5, [sp, #36]	; 0x24
 800af0e:	9505      	str	r5, [sp, #20]
 800af10:	2322      	movs	r3, #34	; 0x22
 800af12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b01c <_strtod_l+0x594>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	f04f 0800 	mov.w	r8, #0
 800af1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f43f aded 	beq.w	800aafe <_strtod_l+0x76>
 800af24:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af26:	4620      	mov	r0, r4
 800af28:	f001 fa4c 	bl	800c3c4 <_Bfree>
 800af2c:	9905      	ldr	r1, [sp, #20]
 800af2e:	4620      	mov	r0, r4
 800af30:	f001 fa48 	bl	800c3c4 <_Bfree>
 800af34:	4659      	mov	r1, fp
 800af36:	4620      	mov	r0, r4
 800af38:	f001 fa44 	bl	800c3c4 <_Bfree>
 800af3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 fa40 	bl	800c3c4 <_Bfree>
 800af44:	4629      	mov	r1, r5
 800af46:	4620      	mov	r0, r4
 800af48:	f001 fa3c 	bl	800c3c4 <_Bfree>
 800af4c:	e5d7      	b.n	800aafe <_strtod_l+0x76>
 800af4e:	4b32      	ldr	r3, [pc, #200]	; (800b018 <_strtod_l+0x590>)
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	2300      	movs	r3, #0
 800af54:	112d      	asrs	r5, r5, #4
 800af56:	4640      	mov	r0, r8
 800af58:	4649      	mov	r1, r9
 800af5a:	469a      	mov	sl, r3
 800af5c:	2d01      	cmp	r5, #1
 800af5e:	dc21      	bgt.n	800afa4 <_strtod_l+0x51c>
 800af60:	b10b      	cbz	r3, 800af66 <_strtod_l+0x4de>
 800af62:	4680      	mov	r8, r0
 800af64:	4689      	mov	r9, r1
 800af66:	492c      	ldr	r1, [pc, #176]	; (800b018 <_strtod_l+0x590>)
 800af68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800af70:	4642      	mov	r2, r8
 800af72:	464b      	mov	r3, r9
 800af74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af78:	f7f5 fb56 	bl	8000628 <__aeabi_dmul>
 800af7c:	4b27      	ldr	r3, [pc, #156]	; (800b01c <_strtod_l+0x594>)
 800af7e:	460a      	mov	r2, r1
 800af80:	400b      	ands	r3, r1
 800af82:	4927      	ldr	r1, [pc, #156]	; (800b020 <_strtod_l+0x598>)
 800af84:	428b      	cmp	r3, r1
 800af86:	4680      	mov	r8, r0
 800af88:	d8be      	bhi.n	800af08 <_strtod_l+0x480>
 800af8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af8e:	428b      	cmp	r3, r1
 800af90:	bf86      	itte	hi
 800af92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b024 <_strtod_l+0x59c>
 800af96:	f04f 38ff 	movhi.w	r8, #4294967295
 800af9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af9e:	2300      	movs	r3, #0
 800afa0:	9304      	str	r3, [sp, #16]
 800afa2:	e07b      	b.n	800b09c <_strtod_l+0x614>
 800afa4:	07ea      	lsls	r2, r5, #31
 800afa6:	d505      	bpl.n	800afb4 <_strtod_l+0x52c>
 800afa8:	9b04      	ldr	r3, [sp, #16]
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 fb3b 	bl	8000628 <__aeabi_dmul>
 800afb2:	2301      	movs	r3, #1
 800afb4:	9a04      	ldr	r2, [sp, #16]
 800afb6:	3208      	adds	r2, #8
 800afb8:	f10a 0a01 	add.w	sl, sl, #1
 800afbc:	106d      	asrs	r5, r5, #1
 800afbe:	9204      	str	r2, [sp, #16]
 800afc0:	e7cc      	b.n	800af5c <_strtod_l+0x4d4>
 800afc2:	d0ec      	beq.n	800af9e <_strtod_l+0x516>
 800afc4:	426d      	negs	r5, r5
 800afc6:	f015 020f 	ands.w	r2, r5, #15
 800afca:	d00a      	beq.n	800afe2 <_strtod_l+0x55a>
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <_strtod_l+0x58c>)
 800afce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd2:	4640      	mov	r0, r8
 800afd4:	4649      	mov	r1, r9
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	f7f5 fc4f 	bl	800087c <__aeabi_ddiv>
 800afde:	4680      	mov	r8, r0
 800afe0:	4689      	mov	r9, r1
 800afe2:	112d      	asrs	r5, r5, #4
 800afe4:	d0db      	beq.n	800af9e <_strtod_l+0x516>
 800afe6:	2d1f      	cmp	r5, #31
 800afe8:	dd1e      	ble.n	800b028 <_strtod_l+0x5a0>
 800afea:	2500      	movs	r5, #0
 800afec:	46ab      	mov	fp, r5
 800afee:	9509      	str	r5, [sp, #36]	; 0x24
 800aff0:	9505      	str	r5, [sp, #20]
 800aff2:	2322      	movs	r3, #34	; 0x22
 800aff4:	f04f 0800 	mov.w	r8, #0
 800aff8:	f04f 0900 	mov.w	r9, #0
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	e78d      	b.n	800af1c <_strtod_l+0x494>
 800b000:	0800ec23 	.word	0x0800ec23
 800b004:	0800ec3c 	.word	0x0800ec3c
 800b008:	0800ec1a 	.word	0x0800ec1a
 800b00c:	0800ec1d 	.word	0x0800ec1d
 800b010:	0800efa0 	.word	0x0800efa0
 800b014:	0800ed90 	.word	0x0800ed90
 800b018:	0800ed68 	.word	0x0800ed68
 800b01c:	7ff00000 	.word	0x7ff00000
 800b020:	7ca00000 	.word	0x7ca00000
 800b024:	7fefffff 	.word	0x7fefffff
 800b028:	f015 0310 	ands.w	r3, r5, #16
 800b02c:	bf18      	it	ne
 800b02e:	236a      	movne	r3, #106	; 0x6a
 800b030:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b3d4 <_strtod_l+0x94c>
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	4640      	mov	r0, r8
 800b038:	4649      	mov	r1, r9
 800b03a:	2300      	movs	r3, #0
 800b03c:	07ea      	lsls	r2, r5, #31
 800b03e:	d504      	bpl.n	800b04a <_strtod_l+0x5c2>
 800b040:	e9da 2300 	ldrd	r2, r3, [sl]
 800b044:	f7f5 faf0 	bl	8000628 <__aeabi_dmul>
 800b048:	2301      	movs	r3, #1
 800b04a:	106d      	asrs	r5, r5, #1
 800b04c:	f10a 0a08 	add.w	sl, sl, #8
 800b050:	d1f4      	bne.n	800b03c <_strtod_l+0x5b4>
 800b052:	b10b      	cbz	r3, 800b058 <_strtod_l+0x5d0>
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	9b04      	ldr	r3, [sp, #16]
 800b05a:	b1bb      	cbz	r3, 800b08c <_strtod_l+0x604>
 800b05c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b060:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b064:	2b00      	cmp	r3, #0
 800b066:	4649      	mov	r1, r9
 800b068:	dd10      	ble.n	800b08c <_strtod_l+0x604>
 800b06a:	2b1f      	cmp	r3, #31
 800b06c:	f340 811e 	ble.w	800b2ac <_strtod_l+0x824>
 800b070:	2b34      	cmp	r3, #52	; 0x34
 800b072:	bfde      	ittt	le
 800b074:	f04f 33ff 	movle.w	r3, #4294967295
 800b078:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b07c:	4093      	lslle	r3, r2
 800b07e:	f04f 0800 	mov.w	r8, #0
 800b082:	bfcc      	ite	gt
 800b084:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b088:	ea03 0901 	andle.w	r9, r3, r1
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	f7f5 fd30 	bl	8000af8 <__aeabi_dcmpeq>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d1a6      	bne.n	800afea <_strtod_l+0x562>
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0a2:	4633      	mov	r3, r6
 800b0a4:	465a      	mov	r2, fp
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f001 f9f4 	bl	800c494 <__s2b>
 800b0ac:	9009      	str	r0, [sp, #36]	; 0x24
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f af2a 	beq.w	800af08 <_strtod_l+0x480>
 800b0b4:	9a08      	ldr	r2, [sp, #32]
 800b0b6:	9b05      	ldr	r3, [sp, #20]
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	eba3 0307 	sub.w	r3, r3, r7
 800b0be:	bfa8      	it	ge
 800b0c0:	2300      	movge	r3, #0
 800b0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800b0c4:	2500      	movs	r5, #0
 800b0c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b0cc:	46ab      	mov	fp, r5
 800b0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	6859      	ldr	r1, [r3, #4]
 800b0d4:	f001 f936 	bl	800c344 <_Balloc>
 800b0d8:	9005      	str	r0, [sp, #20]
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f43f af18 	beq.w	800af10 <_strtod_l+0x488>
 800b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	3202      	adds	r2, #2
 800b0e6:	f103 010c 	add.w	r1, r3, #12
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	300c      	adds	r0, #12
 800b0ee:	f000 fcb0 	bl	800ba52 <memcpy>
 800b0f2:	ec49 8b10 	vmov	d0, r8, r9
 800b0f6:	aa18      	add	r2, sp, #96	; 0x60
 800b0f8:	a917      	add	r1, sp, #92	; 0x5c
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f001 fcfe 	bl	800cafc <__d2b>
 800b100:	ec49 8b18 	vmov	d8, r8, r9
 800b104:	9016      	str	r0, [sp, #88]	; 0x58
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f af02 	beq.w	800af10 <_strtod_l+0x488>
 800b10c:	2101      	movs	r1, #1
 800b10e:	4620      	mov	r0, r4
 800b110:	f001 fa58 	bl	800c5c4 <__i2b>
 800b114:	4683      	mov	fp, r0
 800b116:	2800      	cmp	r0, #0
 800b118:	f43f aefa 	beq.w	800af10 <_strtod_l+0x488>
 800b11c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b11e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b120:	2e00      	cmp	r6, #0
 800b122:	bfab      	itete	ge
 800b124:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b126:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b12a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b12e:	bfac      	ite	ge
 800b130:	eb06 0a03 	addge.w	sl, r6, r3
 800b134:	1b9f      	sublt	r7, r3, r6
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	1af6      	subs	r6, r6, r3
 800b13a:	4416      	add	r6, r2
 800b13c:	4ba0      	ldr	r3, [pc, #640]	; (800b3c0 <_strtod_l+0x938>)
 800b13e:	3e01      	subs	r6, #1
 800b140:	429e      	cmp	r6, r3
 800b142:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b146:	f280 80c4 	bge.w	800b2d2 <_strtod_l+0x84a>
 800b14a:	1b9b      	subs	r3, r3, r6
 800b14c:	2b1f      	cmp	r3, #31
 800b14e:	eba2 0203 	sub.w	r2, r2, r3
 800b152:	f04f 0101 	mov.w	r1, #1
 800b156:	f300 80b0 	bgt.w	800b2ba <_strtod_l+0x832>
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	930e      	str	r3, [sp, #56]	; 0x38
 800b160:	2300      	movs	r3, #0
 800b162:	930d      	str	r3, [sp, #52]	; 0x34
 800b164:	eb0a 0602 	add.w	r6, sl, r2
 800b168:	9b04      	ldr	r3, [sp, #16]
 800b16a:	45b2      	cmp	sl, r6
 800b16c:	4417      	add	r7, r2
 800b16e:	441f      	add	r7, r3
 800b170:	4653      	mov	r3, sl
 800b172:	bfa8      	it	ge
 800b174:	4633      	movge	r3, r6
 800b176:	42bb      	cmp	r3, r7
 800b178:	bfa8      	it	ge
 800b17a:	463b      	movge	r3, r7
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bfc2      	ittt	gt
 800b180:	1af6      	subgt	r6, r6, r3
 800b182:	1aff      	subgt	r7, r7, r3
 800b184:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dd17      	ble.n	800b1be <_strtod_l+0x736>
 800b18e:	4659      	mov	r1, fp
 800b190:	461a      	mov	r2, r3
 800b192:	4620      	mov	r0, r4
 800b194:	f001 fad6 	bl	800c744 <__pow5mult>
 800b198:	4683      	mov	fp, r0
 800b19a:	2800      	cmp	r0, #0
 800b19c:	f43f aeb8 	beq.w	800af10 <_strtod_l+0x488>
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f001 fa23 	bl	800c5f0 <__multiply>
 800b1aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f43f aeaf 	beq.w	800af10 <_strtod_l+0x488>
 800b1b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f001 f905 	bl	800c3c4 <_Bfree>
 800b1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1bc:	9316      	str	r3, [sp, #88]	; 0x58
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	f300 808c 	bgt.w	800b2dc <_strtod_l+0x854>
 800b1c4:	9b08      	ldr	r3, [sp, #32]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dd08      	ble.n	800b1dc <_strtod_l+0x754>
 800b1ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1cc:	9905      	ldr	r1, [sp, #20]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f001 fab8 	bl	800c744 <__pow5mult>
 800b1d4:	9005      	str	r0, [sp, #20]
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f43f ae9a 	beq.w	800af10 <_strtod_l+0x488>
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	dd08      	ble.n	800b1f2 <_strtod_l+0x76a>
 800b1e0:	9905      	ldr	r1, [sp, #20]
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f001 fb07 	bl	800c7f8 <__lshift>
 800b1ea:	9005      	str	r0, [sp, #20]
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f ae8f 	beq.w	800af10 <_strtod_l+0x488>
 800b1f2:	f1ba 0f00 	cmp.w	sl, #0
 800b1f6:	dd08      	ble.n	800b20a <_strtod_l+0x782>
 800b1f8:	4659      	mov	r1, fp
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f001 fafb 	bl	800c7f8 <__lshift>
 800b202:	4683      	mov	fp, r0
 800b204:	2800      	cmp	r0, #0
 800b206:	f43f ae83 	beq.w	800af10 <_strtod_l+0x488>
 800b20a:	9a05      	ldr	r2, [sp, #20]
 800b20c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 fb7a 	bl	800c908 <__mdiff>
 800b214:	4605      	mov	r5, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f ae7a 	beq.w	800af10 <_strtod_l+0x488>
 800b21c:	68c3      	ldr	r3, [r0, #12]
 800b21e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b220:	2300      	movs	r3, #0
 800b222:	60c3      	str	r3, [r0, #12]
 800b224:	4659      	mov	r1, fp
 800b226:	f001 fb53 	bl	800c8d0 <__mcmp>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	da60      	bge.n	800b2f0 <_strtod_l+0x868>
 800b22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b230:	ea53 0308 	orrs.w	r3, r3, r8
 800b234:	f040 8084 	bne.w	800b340 <_strtod_l+0x8b8>
 800b238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d17f      	bne.n	800b340 <_strtod_l+0x8b8>
 800b240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b244:	0d1b      	lsrs	r3, r3, #20
 800b246:	051b      	lsls	r3, r3, #20
 800b248:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b24c:	d978      	bls.n	800b340 <_strtod_l+0x8b8>
 800b24e:	696b      	ldr	r3, [r5, #20]
 800b250:	b913      	cbnz	r3, 800b258 <_strtod_l+0x7d0>
 800b252:	692b      	ldr	r3, [r5, #16]
 800b254:	2b01      	cmp	r3, #1
 800b256:	dd73      	ble.n	800b340 <_strtod_l+0x8b8>
 800b258:	4629      	mov	r1, r5
 800b25a:	2201      	movs	r2, #1
 800b25c:	4620      	mov	r0, r4
 800b25e:	f001 facb 	bl	800c7f8 <__lshift>
 800b262:	4659      	mov	r1, fp
 800b264:	4605      	mov	r5, r0
 800b266:	f001 fb33 	bl	800c8d0 <__mcmp>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	dd68      	ble.n	800b340 <_strtod_l+0x8b8>
 800b26e:	9904      	ldr	r1, [sp, #16]
 800b270:	4a54      	ldr	r2, [pc, #336]	; (800b3c4 <_strtod_l+0x93c>)
 800b272:	464b      	mov	r3, r9
 800b274:	2900      	cmp	r1, #0
 800b276:	f000 8084 	beq.w	800b382 <_strtod_l+0x8fa>
 800b27a:	ea02 0109 	and.w	r1, r2, r9
 800b27e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b282:	dc7e      	bgt.n	800b382 <_strtod_l+0x8fa>
 800b284:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b288:	f77f aeb3 	ble.w	800aff2 <_strtod_l+0x56a>
 800b28c:	4b4e      	ldr	r3, [pc, #312]	; (800b3c8 <_strtod_l+0x940>)
 800b28e:	4640      	mov	r0, r8
 800b290:	4649      	mov	r1, r9
 800b292:	2200      	movs	r2, #0
 800b294:	f7f5 f9c8 	bl	8000628 <__aeabi_dmul>
 800b298:	4b4a      	ldr	r3, [pc, #296]	; (800b3c4 <_strtod_l+0x93c>)
 800b29a:	400b      	ands	r3, r1
 800b29c:	4680      	mov	r8, r0
 800b29e:	4689      	mov	r9, r1
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f47f ae3f 	bne.w	800af24 <_strtod_l+0x49c>
 800b2a6:	2322      	movs	r3, #34	; 0x22
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	e63b      	b.n	800af24 <_strtod_l+0x49c>
 800b2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b4:	ea03 0808 	and.w	r8, r3, r8
 800b2b8:	e6e8      	b.n	800b08c <_strtod_l+0x604>
 800b2ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b2be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b2c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b2c6:	36e2      	adds	r6, #226	; 0xe2
 800b2c8:	fa01 f306 	lsl.w	r3, r1, r6
 800b2cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b2d0:	e748      	b.n	800b164 <_strtod_l+0x6dc>
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b2da:	e743      	b.n	800b164 <_strtod_l+0x6dc>
 800b2dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2de:	4632      	mov	r2, r6
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f001 fa89 	bl	800c7f8 <__lshift>
 800b2e6:	9016      	str	r0, [sp, #88]	; 0x58
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f47f af6b 	bne.w	800b1c4 <_strtod_l+0x73c>
 800b2ee:	e60f      	b.n	800af10 <_strtod_l+0x488>
 800b2f0:	46ca      	mov	sl, r9
 800b2f2:	d171      	bne.n	800b3d8 <_strtod_l+0x950>
 800b2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2fa:	b352      	cbz	r2, 800b352 <_strtod_l+0x8ca>
 800b2fc:	4a33      	ldr	r2, [pc, #204]	; (800b3cc <_strtod_l+0x944>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d12a      	bne.n	800b358 <_strtod_l+0x8d0>
 800b302:	9b04      	ldr	r3, [sp, #16]
 800b304:	4641      	mov	r1, r8
 800b306:	b1fb      	cbz	r3, 800b348 <_strtod_l+0x8c0>
 800b308:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <_strtod_l+0x93c>)
 800b30a:	ea09 0303 	and.w	r3, r9, r3
 800b30e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b312:	f04f 32ff 	mov.w	r2, #4294967295
 800b316:	d81a      	bhi.n	800b34e <_strtod_l+0x8c6>
 800b318:	0d1b      	lsrs	r3, r3, #20
 800b31a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	4299      	cmp	r1, r3
 800b324:	d118      	bne.n	800b358 <_strtod_l+0x8d0>
 800b326:	4b2a      	ldr	r3, [pc, #168]	; (800b3d0 <_strtod_l+0x948>)
 800b328:	459a      	cmp	sl, r3
 800b32a:	d102      	bne.n	800b332 <_strtod_l+0x8aa>
 800b32c:	3101      	adds	r1, #1
 800b32e:	f43f adef 	beq.w	800af10 <_strtod_l+0x488>
 800b332:	4b24      	ldr	r3, [pc, #144]	; (800b3c4 <_strtod_l+0x93c>)
 800b334:	ea0a 0303 	and.w	r3, sl, r3
 800b338:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b33c:	f04f 0800 	mov.w	r8, #0
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1a2      	bne.n	800b28c <_strtod_l+0x804>
 800b346:	e5ed      	b.n	800af24 <_strtod_l+0x49c>
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	e7e9      	b.n	800b322 <_strtod_l+0x89a>
 800b34e:	4613      	mov	r3, r2
 800b350:	e7e7      	b.n	800b322 <_strtod_l+0x89a>
 800b352:	ea53 0308 	orrs.w	r3, r3, r8
 800b356:	d08a      	beq.n	800b26e <_strtod_l+0x7e6>
 800b358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b35a:	b1e3      	cbz	r3, 800b396 <_strtod_l+0x90e>
 800b35c:	ea13 0f0a 	tst.w	r3, sl
 800b360:	d0ee      	beq.n	800b340 <_strtod_l+0x8b8>
 800b362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b364:	9a04      	ldr	r2, [sp, #16]
 800b366:	4640      	mov	r0, r8
 800b368:	4649      	mov	r1, r9
 800b36a:	b1c3      	cbz	r3, 800b39e <_strtod_l+0x916>
 800b36c:	f7ff fb6e 	bl	800aa4c <sulp>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	ec51 0b18 	vmov	r0, r1, d8
 800b378:	f7f4 ffa0 	bl	80002bc <__adddf3>
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	e7de      	b.n	800b340 <_strtod_l+0x8b8>
 800b382:	4013      	ands	r3, r2
 800b384:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b388:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b38c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b390:	f04f 38ff 	mov.w	r8, #4294967295
 800b394:	e7d4      	b.n	800b340 <_strtod_l+0x8b8>
 800b396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b398:	ea13 0f08 	tst.w	r3, r8
 800b39c:	e7e0      	b.n	800b360 <_strtod_l+0x8d8>
 800b39e:	f7ff fb55 	bl	800aa4c <sulp>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	ec51 0b18 	vmov	r0, r1, d8
 800b3aa:	f7f4 ff85 	bl	80002b8 <__aeabi_dsub>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	4689      	mov	r9, r1
 800b3b6:	f7f5 fb9f 	bl	8000af8 <__aeabi_dcmpeq>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d0c0      	beq.n	800b340 <_strtod_l+0x8b8>
 800b3be:	e618      	b.n	800aff2 <_strtod_l+0x56a>
 800b3c0:	fffffc02 	.word	0xfffffc02
 800b3c4:	7ff00000 	.word	0x7ff00000
 800b3c8:	39500000 	.word	0x39500000
 800b3cc:	000fffff 	.word	0x000fffff
 800b3d0:	7fefffff 	.word	0x7fefffff
 800b3d4:	0800ec50 	.word	0x0800ec50
 800b3d8:	4659      	mov	r1, fp
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f001 fbe8 	bl	800cbb0 <__ratio>
 800b3e0:	ec57 6b10 	vmov	r6, r7, d0
 800b3e4:	ee10 0a10 	vmov	r0, s0
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 fb96 	bl	8000b20 <__aeabi_dcmple>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d071      	beq.n	800b4dc <_strtod_l+0xa54>
 800b3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d17c      	bne.n	800b4f8 <_strtod_l+0xa70>
 800b3fe:	f1b8 0f00 	cmp.w	r8, #0
 800b402:	d15a      	bne.n	800b4ba <_strtod_l+0xa32>
 800b404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d15d      	bne.n	800b4c8 <_strtod_l+0xa40>
 800b40c:	4b90      	ldr	r3, [pc, #576]	; (800b650 <_strtod_l+0xbc8>)
 800b40e:	2200      	movs	r2, #0
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb7a 	bl	8000b0c <__aeabi_dcmplt>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d15c      	bne.n	800b4d6 <_strtod_l+0xa4e>
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	4b8c      	ldr	r3, [pc, #560]	; (800b654 <_strtod_l+0xbcc>)
 800b422:	2200      	movs	r2, #0
 800b424:	f7f5 f900 	bl	8000628 <__aeabi_dmul>
 800b428:	4606      	mov	r6, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b430:	9606      	str	r6, [sp, #24]
 800b432:	9307      	str	r3, [sp, #28]
 800b434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b438:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b43c:	4b86      	ldr	r3, [pc, #536]	; (800b658 <_strtod_l+0xbd0>)
 800b43e:	ea0a 0303 	and.w	r3, sl, r3
 800b442:	930d      	str	r3, [sp, #52]	; 0x34
 800b444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b446:	4b85      	ldr	r3, [pc, #532]	; (800b65c <_strtod_l+0xbd4>)
 800b448:	429a      	cmp	r2, r3
 800b44a:	f040 8090 	bne.w	800b56e <_strtod_l+0xae6>
 800b44e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b452:	ec49 8b10 	vmov	d0, r8, r9
 800b456:	f001 fae1 	bl	800ca1c <__ulp>
 800b45a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b45e:	ec51 0b10 	vmov	r0, r1, d0
 800b462:	f7f5 f8e1 	bl	8000628 <__aeabi_dmul>
 800b466:	4642      	mov	r2, r8
 800b468:	464b      	mov	r3, r9
 800b46a:	f7f4 ff27 	bl	80002bc <__adddf3>
 800b46e:	460b      	mov	r3, r1
 800b470:	4979      	ldr	r1, [pc, #484]	; (800b658 <_strtod_l+0xbd0>)
 800b472:	4a7b      	ldr	r2, [pc, #492]	; (800b660 <_strtod_l+0xbd8>)
 800b474:	4019      	ands	r1, r3
 800b476:	4291      	cmp	r1, r2
 800b478:	4680      	mov	r8, r0
 800b47a:	d944      	bls.n	800b506 <_strtod_l+0xa7e>
 800b47c:	ee18 2a90 	vmov	r2, s17
 800b480:	4b78      	ldr	r3, [pc, #480]	; (800b664 <_strtod_l+0xbdc>)
 800b482:	429a      	cmp	r2, r3
 800b484:	d104      	bne.n	800b490 <_strtod_l+0xa08>
 800b486:	ee18 3a10 	vmov	r3, s16
 800b48a:	3301      	adds	r3, #1
 800b48c:	f43f ad40 	beq.w	800af10 <_strtod_l+0x488>
 800b490:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b664 <_strtod_l+0xbdc>
 800b494:	f04f 38ff 	mov.w	r8, #4294967295
 800b498:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 ff92 	bl	800c3c4 <_Bfree>
 800b4a0:	9905      	ldr	r1, [sp, #20]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 ff8e 	bl	800c3c4 <_Bfree>
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 ff8a 	bl	800c3c4 <_Bfree>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 ff86 	bl	800c3c4 <_Bfree>
 800b4b8:	e609      	b.n	800b0ce <_strtod_l+0x646>
 800b4ba:	f1b8 0f01 	cmp.w	r8, #1
 800b4be:	d103      	bne.n	800b4c8 <_strtod_l+0xa40>
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	f43f ad95 	beq.w	800aff2 <_strtod_l+0x56a>
 800b4c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b620 <_strtod_l+0xb98>
 800b4cc:	4f60      	ldr	r7, [pc, #384]	; (800b650 <_strtod_l+0xbc8>)
 800b4ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4d2:	2600      	movs	r6, #0
 800b4d4:	e7ae      	b.n	800b434 <_strtod_l+0x9ac>
 800b4d6:	4f5f      	ldr	r7, [pc, #380]	; (800b654 <_strtod_l+0xbcc>)
 800b4d8:	2600      	movs	r6, #0
 800b4da:	e7a7      	b.n	800b42c <_strtod_l+0x9a4>
 800b4dc:	4b5d      	ldr	r3, [pc, #372]	; (800b654 <_strtod_l+0xbcc>)
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f7f5 f8a0 	bl	8000628 <__aeabi_dmul>
 800b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d09c      	beq.n	800b42c <_strtod_l+0x9a4>
 800b4f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4f6:	e79d      	b.n	800b434 <_strtod_l+0x9ac>
 800b4f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b628 <_strtod_l+0xba0>
 800b4fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b500:	ec57 6b17 	vmov	r6, r7, d7
 800b504:	e796      	b.n	800b434 <_strtod_l+0x9ac>
 800b506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b50a:	9b04      	ldr	r3, [sp, #16]
 800b50c:	46ca      	mov	sl, r9
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1c2      	bne.n	800b498 <_strtod_l+0xa10>
 800b512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b518:	0d1b      	lsrs	r3, r3, #20
 800b51a:	051b      	lsls	r3, r3, #20
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d1bb      	bne.n	800b498 <_strtod_l+0xa10>
 800b520:	4630      	mov	r0, r6
 800b522:	4639      	mov	r1, r7
 800b524:	f7f5 fc30 	bl	8000d88 <__aeabi_d2lz>
 800b528:	f7f5 f850 	bl	80005cc <__aeabi_l2d>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fec0 	bl	80002b8 <__aeabi_dsub>
 800b538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b53a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b53e:	ea43 0308 	orr.w	r3, r3, r8
 800b542:	4313      	orrs	r3, r2
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	d054      	beq.n	800b5f4 <_strtod_l+0xb6c>
 800b54a:	a339      	add	r3, pc, #228	; (adr r3, 800b630 <_strtod_l+0xba8>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f5 fadc 	bl	8000b0c <__aeabi_dcmplt>
 800b554:	2800      	cmp	r0, #0
 800b556:	f47f ace5 	bne.w	800af24 <_strtod_l+0x49c>
 800b55a:	a337      	add	r3, pc, #220	; (adr r3, 800b638 <_strtod_l+0xbb0>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 faf0 	bl	8000b48 <__aeabi_dcmpgt>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d095      	beq.n	800b498 <_strtod_l+0xa10>
 800b56c:	e4da      	b.n	800af24 <_strtod_l+0x49c>
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	b333      	cbz	r3, 800b5c0 <_strtod_l+0xb38>
 800b572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b578:	d822      	bhi.n	800b5c0 <_strtod_l+0xb38>
 800b57a:	a331      	add	r3, pc, #196	; (adr r3, 800b640 <_strtod_l+0xbb8>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 facc 	bl	8000b20 <__aeabi_dcmple>
 800b588:	b1a0      	cbz	r0, 800b5b4 <_strtod_l+0xb2c>
 800b58a:	4639      	mov	r1, r7
 800b58c:	4630      	mov	r0, r6
 800b58e:	f7f5 fb23 	bl	8000bd8 <__aeabi_d2uiz>
 800b592:	2801      	cmp	r0, #1
 800b594:	bf38      	it	cc
 800b596:	2001      	movcc	r0, #1
 800b598:	f7f4 ffcc 	bl	8000534 <__aeabi_ui2d>
 800b59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	bb23      	cbnz	r3, 800b5ee <_strtod_l+0xb66>
 800b5a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5a8:	9010      	str	r0, [sp, #64]	; 0x40
 800b5aa:	9311      	str	r3, [sp, #68]	; 0x44
 800b5ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b5bc:	1a9b      	subs	r3, r3, r2
 800b5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b5c8:	eef0 0a68 	vmov.f32	s1, s17
 800b5cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b5d0:	f001 fa24 	bl	800ca1c <__ulp>
 800b5d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5d8:	ec53 2b10 	vmov	r2, r3, d0
 800b5dc:	f7f5 f824 	bl	8000628 <__aeabi_dmul>
 800b5e0:	ec53 2b18 	vmov	r2, r3, d8
 800b5e4:	f7f4 fe6a 	bl	80002bc <__adddf3>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	e78d      	b.n	800b50a <_strtod_l+0xa82>
 800b5ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b5f2:	e7db      	b.n	800b5ac <_strtod_l+0xb24>
 800b5f4:	a314      	add	r3, pc, #80	; (adr r3, 800b648 <_strtod_l+0xbc0>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f7f5 fa87 	bl	8000b0c <__aeabi_dcmplt>
 800b5fe:	e7b3      	b.n	800b568 <_strtod_l+0xae0>
 800b600:	2300      	movs	r3, #0
 800b602:	930a      	str	r3, [sp, #40]	; 0x28
 800b604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	f7ff ba7c 	b.w	800ab06 <_strtod_l+0x7e>
 800b60e:	2a65      	cmp	r2, #101	; 0x65
 800b610:	f43f ab75 	beq.w	800acfe <_strtod_l+0x276>
 800b614:	2a45      	cmp	r2, #69	; 0x45
 800b616:	f43f ab72 	beq.w	800acfe <_strtod_l+0x276>
 800b61a:	2301      	movs	r3, #1
 800b61c:	f7ff bbaa 	b.w	800ad74 <_strtod_l+0x2ec>
 800b620:	00000000 	.word	0x00000000
 800b624:	bff00000 	.word	0xbff00000
 800b628:	00000000 	.word	0x00000000
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	94a03595 	.word	0x94a03595
 800b634:	3fdfffff 	.word	0x3fdfffff
 800b638:	35afe535 	.word	0x35afe535
 800b63c:	3fe00000 	.word	0x3fe00000
 800b640:	ffc00000 	.word	0xffc00000
 800b644:	41dfffff 	.word	0x41dfffff
 800b648:	94a03595 	.word	0x94a03595
 800b64c:	3fcfffff 	.word	0x3fcfffff
 800b650:	3ff00000 	.word	0x3ff00000
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	7fe00000 	.word	0x7fe00000
 800b660:	7c9fffff 	.word	0x7c9fffff
 800b664:	7fefffff 	.word	0x7fefffff

0800b668 <strtod>:
 800b668:	460a      	mov	r2, r1
 800b66a:	4601      	mov	r1, r0
 800b66c:	4802      	ldr	r0, [pc, #8]	; (800b678 <strtod+0x10>)
 800b66e:	4b03      	ldr	r3, [pc, #12]	; (800b67c <strtod+0x14>)
 800b670:	6800      	ldr	r0, [r0, #0]
 800b672:	f7ff ba09 	b.w	800aa88 <_strtod_l>
 800b676:	bf00      	nop
 800b678:	20000240 	.word	0x20000240
 800b67c:	20000088 	.word	0x20000088

0800b680 <std>:
 800b680:	2300      	movs	r3, #0
 800b682:	b510      	push	{r4, lr}
 800b684:	4604      	mov	r4, r0
 800b686:	e9c0 3300 	strd	r3, r3, [r0]
 800b68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b68e:	6083      	str	r3, [r0, #8]
 800b690:	8181      	strh	r1, [r0, #12]
 800b692:	6643      	str	r3, [r0, #100]	; 0x64
 800b694:	81c2      	strh	r2, [r0, #14]
 800b696:	6183      	str	r3, [r0, #24]
 800b698:	4619      	mov	r1, r3
 800b69a:	2208      	movs	r2, #8
 800b69c:	305c      	adds	r0, #92	; 0x5c
 800b69e:	f000 f8f4 	bl	800b88a <memset>
 800b6a2:	4b0d      	ldr	r3, [pc, #52]	; (800b6d8 <std+0x58>)
 800b6a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b6a6:	4b0d      	ldr	r3, [pc, #52]	; (800b6dc <std+0x5c>)
 800b6a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <std+0x60>)
 800b6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	; (800b6e4 <std+0x64>)
 800b6b0:	6323      	str	r3, [r4, #48]	; 0x30
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <std+0x68>)
 800b6b4:	6224      	str	r4, [r4, #32]
 800b6b6:	429c      	cmp	r4, r3
 800b6b8:	d006      	beq.n	800b6c8 <std+0x48>
 800b6ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b6be:	4294      	cmp	r4, r2
 800b6c0:	d002      	beq.n	800b6c8 <std+0x48>
 800b6c2:	33d0      	adds	r3, #208	; 0xd0
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	d105      	bne.n	800b6d4 <std+0x54>
 800b6c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d0:	f000 b9bc 	b.w	800ba4c <__retarget_lock_init_recursive>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800b805 	.word	0x0800b805
 800b6dc:	0800b827 	.word	0x0800b827
 800b6e0:	0800b85f 	.word	0x0800b85f
 800b6e4:	0800b883 	.word	0x0800b883
 800b6e8:	2000475c 	.word	0x2000475c

0800b6ec <stdio_exit_handler>:
 800b6ec:	4a02      	ldr	r2, [pc, #8]	; (800b6f8 <stdio_exit_handler+0xc>)
 800b6ee:	4903      	ldr	r1, [pc, #12]	; (800b6fc <stdio_exit_handler+0x10>)
 800b6f0:	4803      	ldr	r0, [pc, #12]	; (800b700 <stdio_exit_handler+0x14>)
 800b6f2:	f000 b869 	b.w	800b7c8 <_fwalk_sglue>
 800b6f6:	bf00      	nop
 800b6f8:	2000007c 	.word	0x2000007c
 800b6fc:	0800cdc5 	.word	0x0800cdc5
 800b700:	200001f4 	.word	0x200001f4

0800b704 <cleanup_stdio>:
 800b704:	6841      	ldr	r1, [r0, #4]
 800b706:	4b0c      	ldr	r3, [pc, #48]	; (800b738 <cleanup_stdio+0x34>)
 800b708:	4299      	cmp	r1, r3
 800b70a:	b510      	push	{r4, lr}
 800b70c:	4604      	mov	r4, r0
 800b70e:	d001      	beq.n	800b714 <cleanup_stdio+0x10>
 800b710:	f001 fb58 	bl	800cdc4 <_fflush_r>
 800b714:	68a1      	ldr	r1, [r4, #8]
 800b716:	4b09      	ldr	r3, [pc, #36]	; (800b73c <cleanup_stdio+0x38>)
 800b718:	4299      	cmp	r1, r3
 800b71a:	d002      	beq.n	800b722 <cleanup_stdio+0x1e>
 800b71c:	4620      	mov	r0, r4
 800b71e:	f001 fb51 	bl	800cdc4 <_fflush_r>
 800b722:	68e1      	ldr	r1, [r4, #12]
 800b724:	4b06      	ldr	r3, [pc, #24]	; (800b740 <cleanup_stdio+0x3c>)
 800b726:	4299      	cmp	r1, r3
 800b728:	d004      	beq.n	800b734 <cleanup_stdio+0x30>
 800b72a:	4620      	mov	r0, r4
 800b72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b730:	f001 bb48 	b.w	800cdc4 <_fflush_r>
 800b734:	bd10      	pop	{r4, pc}
 800b736:	bf00      	nop
 800b738:	2000475c 	.word	0x2000475c
 800b73c:	200047c4 	.word	0x200047c4
 800b740:	2000482c 	.word	0x2000482c

0800b744 <global_stdio_init.part.0>:
 800b744:	b510      	push	{r4, lr}
 800b746:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <global_stdio_init.part.0+0x30>)
 800b748:	4c0b      	ldr	r4, [pc, #44]	; (800b778 <global_stdio_init.part.0+0x34>)
 800b74a:	4a0c      	ldr	r2, [pc, #48]	; (800b77c <global_stdio_init.part.0+0x38>)
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	4620      	mov	r0, r4
 800b750:	2200      	movs	r2, #0
 800b752:	2104      	movs	r1, #4
 800b754:	f7ff ff94 	bl	800b680 <std>
 800b758:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b75c:	2201      	movs	r2, #1
 800b75e:	2109      	movs	r1, #9
 800b760:	f7ff ff8e 	bl	800b680 <std>
 800b764:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b768:	2202      	movs	r2, #2
 800b76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b76e:	2112      	movs	r1, #18
 800b770:	f7ff bf86 	b.w	800b680 <std>
 800b774:	20004894 	.word	0x20004894
 800b778:	2000475c 	.word	0x2000475c
 800b77c:	0800b6ed 	.word	0x0800b6ed

0800b780 <__sfp_lock_acquire>:
 800b780:	4801      	ldr	r0, [pc, #4]	; (800b788 <__sfp_lock_acquire+0x8>)
 800b782:	f000 b964 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800b786:	bf00      	nop
 800b788:	2000489d 	.word	0x2000489d

0800b78c <__sfp_lock_release>:
 800b78c:	4801      	ldr	r0, [pc, #4]	; (800b794 <__sfp_lock_release+0x8>)
 800b78e:	f000 b95f 	b.w	800ba50 <__retarget_lock_release_recursive>
 800b792:	bf00      	nop
 800b794:	2000489d 	.word	0x2000489d

0800b798 <__sinit>:
 800b798:	b510      	push	{r4, lr}
 800b79a:	4604      	mov	r4, r0
 800b79c:	f7ff fff0 	bl	800b780 <__sfp_lock_acquire>
 800b7a0:	6a23      	ldr	r3, [r4, #32]
 800b7a2:	b11b      	cbz	r3, 800b7ac <__sinit+0x14>
 800b7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a8:	f7ff bff0 	b.w	800b78c <__sfp_lock_release>
 800b7ac:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <__sinit+0x28>)
 800b7ae:	6223      	str	r3, [r4, #32]
 800b7b0:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <__sinit+0x2c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1f5      	bne.n	800b7a4 <__sinit+0xc>
 800b7b8:	f7ff ffc4 	bl	800b744 <global_stdio_init.part.0>
 800b7bc:	e7f2      	b.n	800b7a4 <__sinit+0xc>
 800b7be:	bf00      	nop
 800b7c0:	0800b705 	.word	0x0800b705
 800b7c4:	20004894 	.word	0x20004894

0800b7c8 <_fwalk_sglue>:
 800b7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	4688      	mov	r8, r1
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	2600      	movs	r6, #0
 800b7d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b7dc:	d505      	bpl.n	800b7ea <_fwalk_sglue+0x22>
 800b7de:	6824      	ldr	r4, [r4, #0]
 800b7e0:	2c00      	cmp	r4, #0
 800b7e2:	d1f7      	bne.n	800b7d4 <_fwalk_sglue+0xc>
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d907      	bls.n	800b800 <_fwalk_sglue+0x38>
 800b7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	d003      	beq.n	800b800 <_fwalk_sglue+0x38>
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	47c0      	blx	r8
 800b7fe:	4306      	orrs	r6, r0
 800b800:	3568      	adds	r5, #104	; 0x68
 800b802:	e7e9      	b.n	800b7d8 <_fwalk_sglue+0x10>

0800b804 <__sread>:
 800b804:	b510      	push	{r4, lr}
 800b806:	460c      	mov	r4, r1
 800b808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b80c:	f000 f8d0 	bl	800b9b0 <_read_r>
 800b810:	2800      	cmp	r0, #0
 800b812:	bfab      	itete	ge
 800b814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b816:	89a3      	ldrhlt	r3, [r4, #12]
 800b818:	181b      	addge	r3, r3, r0
 800b81a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b81e:	bfac      	ite	ge
 800b820:	6563      	strge	r3, [r4, #84]	; 0x54
 800b822:	81a3      	strhlt	r3, [r4, #12]
 800b824:	bd10      	pop	{r4, pc}

0800b826 <__swrite>:
 800b826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82a:	461f      	mov	r7, r3
 800b82c:	898b      	ldrh	r3, [r1, #12]
 800b82e:	05db      	lsls	r3, r3, #23
 800b830:	4605      	mov	r5, r0
 800b832:	460c      	mov	r4, r1
 800b834:	4616      	mov	r6, r2
 800b836:	d505      	bpl.n	800b844 <__swrite+0x1e>
 800b838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83c:	2302      	movs	r3, #2
 800b83e:	2200      	movs	r2, #0
 800b840:	f000 f8a4 	bl	800b98c <_lseek_r>
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b84a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b84e:	81a3      	strh	r3, [r4, #12]
 800b850:	4632      	mov	r2, r6
 800b852:	463b      	mov	r3, r7
 800b854:	4628      	mov	r0, r5
 800b856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b85a:	f000 b8bb 	b.w	800b9d4 <_write_r>

0800b85e <__sseek>:
 800b85e:	b510      	push	{r4, lr}
 800b860:	460c      	mov	r4, r1
 800b862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b866:	f000 f891 	bl	800b98c <_lseek_r>
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	bf15      	itete	ne
 800b870:	6560      	strne	r0, [r4, #84]	; 0x54
 800b872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b87a:	81a3      	strheq	r3, [r4, #12]
 800b87c:	bf18      	it	ne
 800b87e:	81a3      	strhne	r3, [r4, #12]
 800b880:	bd10      	pop	{r4, pc}

0800b882 <__sclose>:
 800b882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b886:	f000 b81b 	b.w	800b8c0 <_close_r>

0800b88a <memset>:
 800b88a:	4402      	add	r2, r0
 800b88c:	4603      	mov	r3, r0
 800b88e:	4293      	cmp	r3, r2
 800b890:	d100      	bne.n	800b894 <memset+0xa>
 800b892:	4770      	bx	lr
 800b894:	f803 1b01 	strb.w	r1, [r3], #1
 800b898:	e7f9      	b.n	800b88e <memset+0x4>

0800b89a <strncmp>:
 800b89a:	b510      	push	{r4, lr}
 800b89c:	b16a      	cbz	r2, 800b8ba <strncmp+0x20>
 800b89e:	3901      	subs	r1, #1
 800b8a0:	1884      	adds	r4, r0, r2
 800b8a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d103      	bne.n	800b8b6 <strncmp+0x1c>
 800b8ae:	42a0      	cmp	r0, r4
 800b8b0:	d001      	beq.n	800b8b6 <strncmp+0x1c>
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	d1f5      	bne.n	800b8a2 <strncmp+0x8>
 800b8b6:	1ad0      	subs	r0, r2, r3
 800b8b8:	bd10      	pop	{r4, pc}
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	e7fc      	b.n	800b8b8 <strncmp+0x1e>
	...

0800b8c0 <_close_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d06      	ldr	r5, [pc, #24]	; (800b8dc <_close_r+0x1c>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	602b      	str	r3, [r5, #0]
 800b8cc:	f7f8 fe81 	bl	80045d2 <_close>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_close_r+0x1a>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_close_r+0x1a>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	20004898 	.word	0x20004898

0800b8e0 <_reclaim_reent>:
 800b8e0:	4b29      	ldr	r3, [pc, #164]	; (800b988 <_reclaim_reent+0xa8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4283      	cmp	r3, r0
 800b8e6:	b570      	push	{r4, r5, r6, lr}
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	d04b      	beq.n	800b984 <_reclaim_reent+0xa4>
 800b8ec:	69c3      	ldr	r3, [r0, #28]
 800b8ee:	b143      	cbz	r3, 800b902 <_reclaim_reent+0x22>
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d144      	bne.n	800b980 <_reclaim_reent+0xa0>
 800b8f6:	69e3      	ldr	r3, [r4, #28]
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	b111      	cbz	r1, 800b902 <_reclaim_reent+0x22>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 f8bf 	bl	800ba80 <_free_r>
 800b902:	6961      	ldr	r1, [r4, #20]
 800b904:	b111      	cbz	r1, 800b90c <_reclaim_reent+0x2c>
 800b906:	4620      	mov	r0, r4
 800b908:	f000 f8ba 	bl	800ba80 <_free_r>
 800b90c:	69e1      	ldr	r1, [r4, #28]
 800b90e:	b111      	cbz	r1, 800b916 <_reclaim_reent+0x36>
 800b910:	4620      	mov	r0, r4
 800b912:	f000 f8b5 	bl	800ba80 <_free_r>
 800b916:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b918:	b111      	cbz	r1, 800b920 <_reclaim_reent+0x40>
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 f8b0 	bl	800ba80 <_free_r>
 800b920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b922:	b111      	cbz	r1, 800b92a <_reclaim_reent+0x4a>
 800b924:	4620      	mov	r0, r4
 800b926:	f000 f8ab 	bl	800ba80 <_free_r>
 800b92a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b92c:	b111      	cbz	r1, 800b934 <_reclaim_reent+0x54>
 800b92e:	4620      	mov	r0, r4
 800b930:	f000 f8a6 	bl	800ba80 <_free_r>
 800b934:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b936:	b111      	cbz	r1, 800b93e <_reclaim_reent+0x5e>
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 f8a1 	bl	800ba80 <_free_r>
 800b93e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b940:	b111      	cbz	r1, 800b948 <_reclaim_reent+0x68>
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f89c 	bl	800ba80 <_free_r>
 800b948:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b94a:	b111      	cbz	r1, 800b952 <_reclaim_reent+0x72>
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 f897 	bl	800ba80 <_free_r>
 800b952:	6a23      	ldr	r3, [r4, #32]
 800b954:	b1b3      	cbz	r3, 800b984 <_reclaim_reent+0xa4>
 800b956:	4620      	mov	r0, r4
 800b958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b95c:	4718      	bx	r3
 800b95e:	5949      	ldr	r1, [r1, r5]
 800b960:	b941      	cbnz	r1, 800b974 <_reclaim_reent+0x94>
 800b962:	3504      	adds	r5, #4
 800b964:	69e3      	ldr	r3, [r4, #28]
 800b966:	2d80      	cmp	r5, #128	; 0x80
 800b968:	68d9      	ldr	r1, [r3, #12]
 800b96a:	d1f8      	bne.n	800b95e <_reclaim_reent+0x7e>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 f887 	bl	800ba80 <_free_r>
 800b972:	e7c0      	b.n	800b8f6 <_reclaim_reent+0x16>
 800b974:	680e      	ldr	r6, [r1, #0]
 800b976:	4620      	mov	r0, r4
 800b978:	f000 f882 	bl	800ba80 <_free_r>
 800b97c:	4631      	mov	r1, r6
 800b97e:	e7ef      	b.n	800b960 <_reclaim_reent+0x80>
 800b980:	2500      	movs	r5, #0
 800b982:	e7ef      	b.n	800b964 <_reclaim_reent+0x84>
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	bf00      	nop
 800b988:	20000240 	.word	0x20000240

0800b98c <_lseek_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	; (800b9ac <_lseek_r+0x20>)
 800b990:	4604      	mov	r4, r0
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f8 fe40 	bl	8004620 <_lseek>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_lseek_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_lseek_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20004898 	.word	0x20004898

0800b9b0 <_read_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	; (800b9d0 <_read_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f8 fdce 	bl	8004560 <_read>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_read_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_read_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	20004898 	.word	0x20004898

0800b9d4 <_write_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	; (800b9f4 <_write_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f8 fdd9 	bl	800459a <_write>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_write_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_write_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	20004898 	.word	0x20004898

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	; (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20000240 	.word	0x20000240

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4d0d      	ldr	r5, [pc, #52]	; (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	; (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1b64      	subs	r4, r4, r5
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2600      	movs	r6, #0
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4d0b      	ldr	r5, [pc, #44]	; (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	; (800ba48 <__libc_init_array+0x44>)
 800ba18:	f003 f838 	bl	800ea8c <_init>
 800ba1c:	1b64      	subs	r4, r4, r5
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2600      	movs	r6, #0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2c:	4798      	blx	r3
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba36:	4798      	blx	r3
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800f080 	.word	0x0800f080
 800ba40:	0800f080 	.word	0x0800f080
 800ba44:	0800f080 	.word	0x0800f080
 800ba48:	0800f084 	.word	0x0800f084

0800ba4c <__retarget_lock_init_recursive>:
 800ba4c:	4770      	bx	lr

0800ba4e <__retarget_lock_acquire_recursive>:
 800ba4e:	4770      	bx	lr

0800ba50 <__retarget_lock_release_recursive>:
 800ba50:	4770      	bx	lr

0800ba52 <memcpy>:
 800ba52:	440a      	add	r2, r1
 800ba54:	4291      	cmp	r1, r2
 800ba56:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba5a:	d100      	bne.n	800ba5e <memcpy+0xc>
 800ba5c:	4770      	bx	lr
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba68:	4291      	cmp	r1, r2
 800ba6a:	d1f9      	bne.n	800ba60 <memcpy+0xe>
 800ba6c:	bd10      	pop	{r4, pc}
	...

0800ba70 <nan>:
 800ba70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba78 <nan+0x8>
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	00000000 	.word	0x00000000
 800ba7c:	7ff80000 	.word	0x7ff80000

0800ba80 <_free_r>:
 800ba80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba82:	2900      	cmp	r1, #0
 800ba84:	d044      	beq.n	800bb10 <_free_r+0x90>
 800ba86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba8a:	9001      	str	r0, [sp, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba92:	bfb8      	it	lt
 800ba94:	18e4      	addlt	r4, r4, r3
 800ba96:	f000 fc49 	bl	800c32c <__malloc_lock>
 800ba9a:	4a1e      	ldr	r2, [pc, #120]	; (800bb14 <_free_r+0x94>)
 800ba9c:	9801      	ldr	r0, [sp, #4]
 800ba9e:	6813      	ldr	r3, [r2, #0]
 800baa0:	b933      	cbnz	r3, 800bab0 <_free_r+0x30>
 800baa2:	6063      	str	r3, [r4, #4]
 800baa4:	6014      	str	r4, [r2, #0]
 800baa6:	b003      	add	sp, #12
 800baa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baac:	f000 bc44 	b.w	800c338 <__malloc_unlock>
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	d908      	bls.n	800bac6 <_free_r+0x46>
 800bab4:	6825      	ldr	r5, [r4, #0]
 800bab6:	1961      	adds	r1, r4, r5
 800bab8:	428b      	cmp	r3, r1
 800baba:	bf01      	itttt	eq
 800babc:	6819      	ldreq	r1, [r3, #0]
 800babe:	685b      	ldreq	r3, [r3, #4]
 800bac0:	1949      	addeq	r1, r1, r5
 800bac2:	6021      	streq	r1, [r4, #0]
 800bac4:	e7ed      	b.n	800baa2 <_free_r+0x22>
 800bac6:	461a      	mov	r2, r3
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	b10b      	cbz	r3, 800bad0 <_free_r+0x50>
 800bacc:	42a3      	cmp	r3, r4
 800bace:	d9fa      	bls.n	800bac6 <_free_r+0x46>
 800bad0:	6811      	ldr	r1, [r2, #0]
 800bad2:	1855      	adds	r5, r2, r1
 800bad4:	42a5      	cmp	r5, r4
 800bad6:	d10b      	bne.n	800baf0 <_free_r+0x70>
 800bad8:	6824      	ldr	r4, [r4, #0]
 800bada:	4421      	add	r1, r4
 800badc:	1854      	adds	r4, r2, r1
 800bade:	42a3      	cmp	r3, r4
 800bae0:	6011      	str	r1, [r2, #0]
 800bae2:	d1e0      	bne.n	800baa6 <_free_r+0x26>
 800bae4:	681c      	ldr	r4, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	6053      	str	r3, [r2, #4]
 800baea:	440c      	add	r4, r1
 800baec:	6014      	str	r4, [r2, #0]
 800baee:	e7da      	b.n	800baa6 <_free_r+0x26>
 800baf0:	d902      	bls.n	800baf8 <_free_r+0x78>
 800baf2:	230c      	movs	r3, #12
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	e7d6      	b.n	800baa6 <_free_r+0x26>
 800baf8:	6825      	ldr	r5, [r4, #0]
 800bafa:	1961      	adds	r1, r4, r5
 800bafc:	428b      	cmp	r3, r1
 800bafe:	bf04      	itt	eq
 800bb00:	6819      	ldreq	r1, [r3, #0]
 800bb02:	685b      	ldreq	r3, [r3, #4]
 800bb04:	6063      	str	r3, [r4, #4]
 800bb06:	bf04      	itt	eq
 800bb08:	1949      	addeq	r1, r1, r5
 800bb0a:	6021      	streq	r1, [r4, #0]
 800bb0c:	6054      	str	r4, [r2, #4]
 800bb0e:	e7ca      	b.n	800baa6 <_free_r+0x26>
 800bb10:	b003      	add	sp, #12
 800bb12:	bd30      	pop	{r4, r5, pc}
 800bb14:	200048a0 	.word	0x200048a0

0800bb18 <rshift>:
 800bb18:	6903      	ldr	r3, [r0, #16]
 800bb1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb26:	f100 0414 	add.w	r4, r0, #20
 800bb2a:	dd45      	ble.n	800bbb8 <rshift+0xa0>
 800bb2c:	f011 011f 	ands.w	r1, r1, #31
 800bb30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb38:	d10c      	bne.n	800bb54 <rshift+0x3c>
 800bb3a:	f100 0710 	add.w	r7, r0, #16
 800bb3e:	4629      	mov	r1, r5
 800bb40:	42b1      	cmp	r1, r6
 800bb42:	d334      	bcc.n	800bbae <rshift+0x96>
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	1eea      	subs	r2, r5, #3
 800bb4a:	4296      	cmp	r6, r2
 800bb4c:	bf38      	it	cc
 800bb4e:	2300      	movcc	r3, #0
 800bb50:	4423      	add	r3, r4
 800bb52:	e015      	b.n	800bb80 <rshift+0x68>
 800bb54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb58:	f1c1 0820 	rsb	r8, r1, #32
 800bb5c:	40cf      	lsrs	r7, r1
 800bb5e:	f105 0e04 	add.w	lr, r5, #4
 800bb62:	46a1      	mov	r9, r4
 800bb64:	4576      	cmp	r6, lr
 800bb66:	46f4      	mov	ip, lr
 800bb68:	d815      	bhi.n	800bb96 <rshift+0x7e>
 800bb6a:	1a9a      	subs	r2, r3, r2
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	3a04      	subs	r2, #4
 800bb70:	3501      	adds	r5, #1
 800bb72:	42ae      	cmp	r6, r5
 800bb74:	bf38      	it	cc
 800bb76:	2200      	movcc	r2, #0
 800bb78:	18a3      	adds	r3, r4, r2
 800bb7a:	50a7      	str	r7, [r4, r2]
 800bb7c:	b107      	cbz	r7, 800bb80 <rshift+0x68>
 800bb7e:	3304      	adds	r3, #4
 800bb80:	1b1a      	subs	r2, r3, r4
 800bb82:	42a3      	cmp	r3, r4
 800bb84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb88:	bf08      	it	eq
 800bb8a:	2300      	moveq	r3, #0
 800bb8c:	6102      	str	r2, [r0, #16]
 800bb8e:	bf08      	it	eq
 800bb90:	6143      	streq	r3, [r0, #20]
 800bb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb96:	f8dc c000 	ldr.w	ip, [ip]
 800bb9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb9e:	ea4c 0707 	orr.w	r7, ip, r7
 800bba2:	f849 7b04 	str.w	r7, [r9], #4
 800bba6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbaa:	40cf      	lsrs	r7, r1
 800bbac:	e7da      	b.n	800bb64 <rshift+0x4c>
 800bbae:	f851 cb04 	ldr.w	ip, [r1], #4
 800bbb2:	f847 cf04 	str.w	ip, [r7, #4]!
 800bbb6:	e7c3      	b.n	800bb40 <rshift+0x28>
 800bbb8:	4623      	mov	r3, r4
 800bbba:	e7e1      	b.n	800bb80 <rshift+0x68>

0800bbbc <__hexdig_fun>:
 800bbbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bbc0:	2b09      	cmp	r3, #9
 800bbc2:	d802      	bhi.n	800bbca <__hexdig_fun+0xe>
 800bbc4:	3820      	subs	r0, #32
 800bbc6:	b2c0      	uxtb	r0, r0
 800bbc8:	4770      	bx	lr
 800bbca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bbce:	2b05      	cmp	r3, #5
 800bbd0:	d801      	bhi.n	800bbd6 <__hexdig_fun+0x1a>
 800bbd2:	3847      	subs	r0, #71	; 0x47
 800bbd4:	e7f7      	b.n	800bbc6 <__hexdig_fun+0xa>
 800bbd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bbda:	2b05      	cmp	r3, #5
 800bbdc:	d801      	bhi.n	800bbe2 <__hexdig_fun+0x26>
 800bbde:	3827      	subs	r0, #39	; 0x27
 800bbe0:	e7f1      	b.n	800bbc6 <__hexdig_fun+0xa>
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	4770      	bx	lr
	...

0800bbe8 <__gethex>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	4617      	mov	r7, r2
 800bbee:	680a      	ldr	r2, [r1, #0]
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	f102 0b02 	add.w	fp, r2, #2
 800bbf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bbfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bbfe:	4681      	mov	r9, r0
 800bc00:	468a      	mov	sl, r1
 800bc02:	9302      	str	r3, [sp, #8]
 800bc04:	32fe      	adds	r2, #254	; 0xfe
 800bc06:	eb02 030b 	add.w	r3, r2, fp
 800bc0a:	46d8      	mov	r8, fp
 800bc0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bc10:	9301      	str	r3, [sp, #4]
 800bc12:	2830      	cmp	r0, #48	; 0x30
 800bc14:	d0f7      	beq.n	800bc06 <__gethex+0x1e>
 800bc16:	f7ff ffd1 	bl	800bbbc <__hexdig_fun>
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d138      	bne.n	800bc92 <__gethex+0xaa>
 800bc20:	49a7      	ldr	r1, [pc, #668]	; (800bec0 <__gethex+0x2d8>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	4640      	mov	r0, r8
 800bc26:	f7ff fe38 	bl	800b89a <strncmp>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d169      	bne.n	800bd04 <__gethex+0x11c>
 800bc30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bc34:	465d      	mov	r5, fp
 800bc36:	f7ff ffc1 	bl	800bbbc <__hexdig_fun>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d064      	beq.n	800bd08 <__gethex+0x120>
 800bc3e:	465a      	mov	r2, fp
 800bc40:	7810      	ldrb	r0, [r2, #0]
 800bc42:	2830      	cmp	r0, #48	; 0x30
 800bc44:	4690      	mov	r8, r2
 800bc46:	f102 0201 	add.w	r2, r2, #1
 800bc4a:	d0f9      	beq.n	800bc40 <__gethex+0x58>
 800bc4c:	f7ff ffb6 	bl	800bbbc <__hexdig_fun>
 800bc50:	2301      	movs	r3, #1
 800bc52:	fab0 f480 	clz	r4, r0
 800bc56:	0964      	lsrs	r4, r4, #5
 800bc58:	465e      	mov	r6, fp
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	4642      	mov	r2, r8
 800bc5e:	4615      	mov	r5, r2
 800bc60:	3201      	adds	r2, #1
 800bc62:	7828      	ldrb	r0, [r5, #0]
 800bc64:	f7ff ffaa 	bl	800bbbc <__hexdig_fun>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d1f8      	bne.n	800bc5e <__gethex+0x76>
 800bc6c:	4994      	ldr	r1, [pc, #592]	; (800bec0 <__gethex+0x2d8>)
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4628      	mov	r0, r5
 800bc72:	f7ff fe12 	bl	800b89a <strncmp>
 800bc76:	b978      	cbnz	r0, 800bc98 <__gethex+0xb0>
 800bc78:	b946      	cbnz	r6, 800bc8c <__gethex+0xa4>
 800bc7a:	1c6e      	adds	r6, r5, #1
 800bc7c:	4632      	mov	r2, r6
 800bc7e:	4615      	mov	r5, r2
 800bc80:	3201      	adds	r2, #1
 800bc82:	7828      	ldrb	r0, [r5, #0]
 800bc84:	f7ff ff9a 	bl	800bbbc <__hexdig_fun>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d1f8      	bne.n	800bc7e <__gethex+0x96>
 800bc8c:	1b73      	subs	r3, r6, r5
 800bc8e:	009e      	lsls	r6, r3, #2
 800bc90:	e004      	b.n	800bc9c <__gethex+0xb4>
 800bc92:	2400      	movs	r4, #0
 800bc94:	4626      	mov	r6, r4
 800bc96:	e7e1      	b.n	800bc5c <__gethex+0x74>
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	d1f7      	bne.n	800bc8c <__gethex+0xa4>
 800bc9c:	782b      	ldrb	r3, [r5, #0]
 800bc9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bca2:	2b50      	cmp	r3, #80	; 0x50
 800bca4:	d13d      	bne.n	800bd22 <__gethex+0x13a>
 800bca6:	786b      	ldrb	r3, [r5, #1]
 800bca8:	2b2b      	cmp	r3, #43	; 0x2b
 800bcaa:	d02f      	beq.n	800bd0c <__gethex+0x124>
 800bcac:	2b2d      	cmp	r3, #45	; 0x2d
 800bcae:	d031      	beq.n	800bd14 <__gethex+0x12c>
 800bcb0:	1c69      	adds	r1, r5, #1
 800bcb2:	f04f 0b00 	mov.w	fp, #0
 800bcb6:	7808      	ldrb	r0, [r1, #0]
 800bcb8:	f7ff ff80 	bl	800bbbc <__hexdig_fun>
 800bcbc:	1e42      	subs	r2, r0, #1
 800bcbe:	b2d2      	uxtb	r2, r2
 800bcc0:	2a18      	cmp	r2, #24
 800bcc2:	d82e      	bhi.n	800bd22 <__gethex+0x13a>
 800bcc4:	f1a0 0210 	sub.w	r2, r0, #16
 800bcc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bccc:	f7ff ff76 	bl	800bbbc <__hexdig_fun>
 800bcd0:	f100 3cff 	add.w	ip, r0, #4294967295
 800bcd4:	fa5f fc8c 	uxtb.w	ip, ip
 800bcd8:	f1bc 0f18 	cmp.w	ip, #24
 800bcdc:	d91d      	bls.n	800bd1a <__gethex+0x132>
 800bcde:	f1bb 0f00 	cmp.w	fp, #0
 800bce2:	d000      	beq.n	800bce6 <__gethex+0xfe>
 800bce4:	4252      	negs	r2, r2
 800bce6:	4416      	add	r6, r2
 800bce8:	f8ca 1000 	str.w	r1, [sl]
 800bcec:	b1dc      	cbz	r4, 800bd26 <__gethex+0x13e>
 800bcee:	9b01      	ldr	r3, [sp, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bf14      	ite	ne
 800bcf4:	f04f 0800 	movne.w	r8, #0
 800bcf8:	f04f 0806 	moveq.w	r8, #6
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	b005      	add	sp, #20
 800bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	4645      	mov	r5, r8
 800bd06:	4626      	mov	r6, r4
 800bd08:	2401      	movs	r4, #1
 800bd0a:	e7c7      	b.n	800bc9c <__gethex+0xb4>
 800bd0c:	f04f 0b00 	mov.w	fp, #0
 800bd10:	1ca9      	adds	r1, r5, #2
 800bd12:	e7d0      	b.n	800bcb6 <__gethex+0xce>
 800bd14:	f04f 0b01 	mov.w	fp, #1
 800bd18:	e7fa      	b.n	800bd10 <__gethex+0x128>
 800bd1a:	230a      	movs	r3, #10
 800bd1c:	fb03 0002 	mla	r0, r3, r2, r0
 800bd20:	e7d0      	b.n	800bcc4 <__gethex+0xdc>
 800bd22:	4629      	mov	r1, r5
 800bd24:	e7e0      	b.n	800bce8 <__gethex+0x100>
 800bd26:	eba5 0308 	sub.w	r3, r5, r8
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	2b07      	cmp	r3, #7
 800bd30:	dc0a      	bgt.n	800bd48 <__gethex+0x160>
 800bd32:	4648      	mov	r0, r9
 800bd34:	f000 fb06 	bl	800c344 <_Balloc>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	b940      	cbnz	r0, 800bd4e <__gethex+0x166>
 800bd3c:	4b61      	ldr	r3, [pc, #388]	; (800bec4 <__gethex+0x2dc>)
 800bd3e:	4602      	mov	r2, r0
 800bd40:	21e4      	movs	r1, #228	; 0xe4
 800bd42:	4861      	ldr	r0, [pc, #388]	; (800bec8 <__gethex+0x2e0>)
 800bd44:	f001 f876 	bl	800ce34 <__assert_func>
 800bd48:	3101      	adds	r1, #1
 800bd4a:	105b      	asrs	r3, r3, #1
 800bd4c:	e7ef      	b.n	800bd2e <__gethex+0x146>
 800bd4e:	f100 0a14 	add.w	sl, r0, #20
 800bd52:	2300      	movs	r3, #0
 800bd54:	495a      	ldr	r1, [pc, #360]	; (800bec0 <__gethex+0x2d8>)
 800bd56:	f8cd a004 	str.w	sl, [sp, #4]
 800bd5a:	469b      	mov	fp, r3
 800bd5c:	45a8      	cmp	r8, r5
 800bd5e:	d342      	bcc.n	800bde6 <__gethex+0x1fe>
 800bd60:	9801      	ldr	r0, [sp, #4]
 800bd62:	f840 bb04 	str.w	fp, [r0], #4
 800bd66:	eba0 000a 	sub.w	r0, r0, sl
 800bd6a:	1080      	asrs	r0, r0, #2
 800bd6c:	6120      	str	r0, [r4, #16]
 800bd6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bd72:	4658      	mov	r0, fp
 800bd74:	f000 fbd8 	bl	800c528 <__hi0bits>
 800bd78:	683d      	ldr	r5, [r7, #0]
 800bd7a:	eba8 0000 	sub.w	r0, r8, r0
 800bd7e:	42a8      	cmp	r0, r5
 800bd80:	dd59      	ble.n	800be36 <__gethex+0x24e>
 800bd82:	eba0 0805 	sub.w	r8, r0, r5
 800bd86:	4641      	mov	r1, r8
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 ff67 	bl	800cc5c <__any_on>
 800bd8e:	4683      	mov	fp, r0
 800bd90:	b1b8      	cbz	r0, 800bdc2 <__gethex+0x1da>
 800bd92:	f108 33ff 	add.w	r3, r8, #4294967295
 800bd96:	1159      	asrs	r1, r3, #5
 800bd98:	f003 021f 	and.w	r2, r3, #31
 800bd9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bda0:	f04f 0b01 	mov.w	fp, #1
 800bda4:	fa0b f202 	lsl.w	r2, fp, r2
 800bda8:	420a      	tst	r2, r1
 800bdaa:	d00a      	beq.n	800bdc2 <__gethex+0x1da>
 800bdac:	455b      	cmp	r3, fp
 800bdae:	dd06      	ble.n	800bdbe <__gethex+0x1d6>
 800bdb0:	f1a8 0102 	sub.w	r1, r8, #2
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f000 ff51 	bl	800cc5c <__any_on>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d138      	bne.n	800be30 <__gethex+0x248>
 800bdbe:	f04f 0b02 	mov.w	fp, #2
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f7ff fea7 	bl	800bb18 <rshift>
 800bdca:	4446      	add	r6, r8
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	42b3      	cmp	r3, r6
 800bdd0:	da41      	bge.n	800be56 <__gethex+0x26e>
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	4648      	mov	r0, r9
 800bdd6:	f000 faf5 	bl	800c3c4 <_Bfree>
 800bdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bddc:	2300      	movs	r3, #0
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bde4:	e78a      	b.n	800bcfc <__gethex+0x114>
 800bde6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bdea:	2a2e      	cmp	r2, #46	; 0x2e
 800bdec:	d014      	beq.n	800be18 <__gethex+0x230>
 800bdee:	2b20      	cmp	r3, #32
 800bdf0:	d106      	bne.n	800be00 <__gethex+0x218>
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	f843 bb04 	str.w	fp, [r3], #4
 800bdf8:	f04f 0b00 	mov.w	fp, #0
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	465b      	mov	r3, fp
 800be00:	7828      	ldrb	r0, [r5, #0]
 800be02:	9303      	str	r3, [sp, #12]
 800be04:	f7ff feda 	bl	800bbbc <__hexdig_fun>
 800be08:	9b03      	ldr	r3, [sp, #12]
 800be0a:	f000 000f 	and.w	r0, r0, #15
 800be0e:	4098      	lsls	r0, r3
 800be10:	ea4b 0b00 	orr.w	fp, fp, r0
 800be14:	3304      	adds	r3, #4
 800be16:	e7a1      	b.n	800bd5c <__gethex+0x174>
 800be18:	45a8      	cmp	r8, r5
 800be1a:	d8e8      	bhi.n	800bdee <__gethex+0x206>
 800be1c:	2201      	movs	r2, #1
 800be1e:	4628      	mov	r0, r5
 800be20:	9303      	str	r3, [sp, #12]
 800be22:	f7ff fd3a 	bl	800b89a <strncmp>
 800be26:	4926      	ldr	r1, [pc, #152]	; (800bec0 <__gethex+0x2d8>)
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1df      	bne.n	800bdee <__gethex+0x206>
 800be2e:	e795      	b.n	800bd5c <__gethex+0x174>
 800be30:	f04f 0b03 	mov.w	fp, #3
 800be34:	e7c5      	b.n	800bdc2 <__gethex+0x1da>
 800be36:	da0b      	bge.n	800be50 <__gethex+0x268>
 800be38:	eba5 0800 	sub.w	r8, r5, r0
 800be3c:	4621      	mov	r1, r4
 800be3e:	4642      	mov	r2, r8
 800be40:	4648      	mov	r0, r9
 800be42:	f000 fcd9 	bl	800c7f8 <__lshift>
 800be46:	eba6 0608 	sub.w	r6, r6, r8
 800be4a:	4604      	mov	r4, r0
 800be4c:	f100 0a14 	add.w	sl, r0, #20
 800be50:	f04f 0b00 	mov.w	fp, #0
 800be54:	e7ba      	b.n	800bdcc <__gethex+0x1e4>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	42b3      	cmp	r3, r6
 800be5a:	dd73      	ble.n	800bf44 <__gethex+0x35c>
 800be5c:	1b9e      	subs	r6, r3, r6
 800be5e:	42b5      	cmp	r5, r6
 800be60:	dc34      	bgt.n	800becc <__gethex+0x2e4>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b02      	cmp	r3, #2
 800be66:	d023      	beq.n	800beb0 <__gethex+0x2c8>
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d025      	beq.n	800beb8 <__gethex+0x2d0>
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d115      	bne.n	800be9c <__gethex+0x2b4>
 800be70:	42b5      	cmp	r5, r6
 800be72:	d113      	bne.n	800be9c <__gethex+0x2b4>
 800be74:	2d01      	cmp	r5, #1
 800be76:	d10b      	bne.n	800be90 <__gethex+0x2a8>
 800be78:	9a02      	ldr	r2, [sp, #8]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	2301      	movs	r3, #1
 800be80:	6123      	str	r3, [r4, #16]
 800be82:	f8ca 3000 	str.w	r3, [sl]
 800be86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800be8c:	601c      	str	r4, [r3, #0]
 800be8e:	e735      	b.n	800bcfc <__gethex+0x114>
 800be90:	1e69      	subs	r1, r5, #1
 800be92:	4620      	mov	r0, r4
 800be94:	f000 fee2 	bl	800cc5c <__any_on>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d1ed      	bne.n	800be78 <__gethex+0x290>
 800be9c:	4621      	mov	r1, r4
 800be9e:	4648      	mov	r0, r9
 800bea0:	f000 fa90 	bl	800c3c4 <_Bfree>
 800bea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bea6:	2300      	movs	r3, #0
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800beae:	e725      	b.n	800bcfc <__gethex+0x114>
 800beb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1f2      	bne.n	800be9c <__gethex+0x2b4>
 800beb6:	e7df      	b.n	800be78 <__gethex+0x290>
 800beb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1dc      	bne.n	800be78 <__gethex+0x290>
 800bebe:	e7ed      	b.n	800be9c <__gethex+0x2b4>
 800bec0:	0800ec18 	.word	0x0800ec18
 800bec4:	0800ec80 	.word	0x0800ec80
 800bec8:	0800ec91 	.word	0x0800ec91
 800becc:	f106 38ff 	add.w	r8, r6, #4294967295
 800bed0:	f1bb 0f00 	cmp.w	fp, #0
 800bed4:	d133      	bne.n	800bf3e <__gethex+0x356>
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	d004      	beq.n	800bee6 <__gethex+0x2fe>
 800bedc:	4641      	mov	r1, r8
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 febc 	bl	800cc5c <__any_on>
 800bee4:	4683      	mov	fp, r0
 800bee6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800beea:	2301      	movs	r3, #1
 800beec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bef0:	f008 081f 	and.w	r8, r8, #31
 800bef4:	fa03 f308 	lsl.w	r3, r3, r8
 800bef8:	4213      	tst	r3, r2
 800befa:	4631      	mov	r1, r6
 800befc:	4620      	mov	r0, r4
 800befe:	bf18      	it	ne
 800bf00:	f04b 0b02 	orrne.w	fp, fp, #2
 800bf04:	1bad      	subs	r5, r5, r6
 800bf06:	f7ff fe07 	bl	800bb18 <rshift>
 800bf0a:	687e      	ldr	r6, [r7, #4]
 800bf0c:	f04f 0802 	mov.w	r8, #2
 800bf10:	f1bb 0f00 	cmp.w	fp, #0
 800bf14:	d04a      	beq.n	800bfac <__gethex+0x3c4>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d016      	beq.n	800bf4a <__gethex+0x362>
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d018      	beq.n	800bf52 <__gethex+0x36a>
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d109      	bne.n	800bf38 <__gethex+0x350>
 800bf24:	f01b 0f02 	tst.w	fp, #2
 800bf28:	d006      	beq.n	800bf38 <__gethex+0x350>
 800bf2a:	f8da 3000 	ldr.w	r3, [sl]
 800bf2e:	ea4b 0b03 	orr.w	fp, fp, r3
 800bf32:	f01b 0f01 	tst.w	fp, #1
 800bf36:	d10f      	bne.n	800bf58 <__gethex+0x370>
 800bf38:	f048 0810 	orr.w	r8, r8, #16
 800bf3c:	e036      	b.n	800bfac <__gethex+0x3c4>
 800bf3e:	f04f 0b01 	mov.w	fp, #1
 800bf42:	e7d0      	b.n	800bee6 <__gethex+0x2fe>
 800bf44:	f04f 0801 	mov.w	r8, #1
 800bf48:	e7e2      	b.n	800bf10 <__gethex+0x328>
 800bf4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf4c:	f1c3 0301 	rsb	r3, r3, #1
 800bf50:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0ef      	beq.n	800bf38 <__gethex+0x350>
 800bf58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf5c:	f104 0214 	add.w	r2, r4, #20
 800bf60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4694      	mov	ip, r2
 800bf6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf72:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bf76:	d01e      	beq.n	800bfb6 <__gethex+0x3ce>
 800bf78:	3101      	adds	r1, #1
 800bf7a:	f8cc 1000 	str.w	r1, [ip]
 800bf7e:	f1b8 0f02 	cmp.w	r8, #2
 800bf82:	f104 0214 	add.w	r2, r4, #20
 800bf86:	d13d      	bne.n	800c004 <__gethex+0x41c>
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	42ab      	cmp	r3, r5
 800bf8e:	d10b      	bne.n	800bfa8 <__gethex+0x3c0>
 800bf90:	1169      	asrs	r1, r5, #5
 800bf92:	2301      	movs	r3, #1
 800bf94:	f005 051f 	and.w	r5, r5, #31
 800bf98:	fa03 f505 	lsl.w	r5, r3, r5
 800bf9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfa0:	421d      	tst	r5, r3
 800bfa2:	bf18      	it	ne
 800bfa4:	f04f 0801 	movne.w	r8, #1
 800bfa8:	f048 0820 	orr.w	r8, r8, #32
 800bfac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfae:	601c      	str	r4, [r3, #0]
 800bfb0:	9b02      	ldr	r3, [sp, #8]
 800bfb2:	601e      	str	r6, [r3, #0]
 800bfb4:	e6a2      	b.n	800bcfc <__gethex+0x114>
 800bfb6:	4290      	cmp	r0, r2
 800bfb8:	f842 3c04 	str.w	r3, [r2, #-4]
 800bfbc:	d8d6      	bhi.n	800bf6c <__gethex+0x384>
 800bfbe:	68a2      	ldr	r2, [r4, #8]
 800bfc0:	4593      	cmp	fp, r2
 800bfc2:	db17      	blt.n	800bff4 <__gethex+0x40c>
 800bfc4:	6861      	ldr	r1, [r4, #4]
 800bfc6:	4648      	mov	r0, r9
 800bfc8:	3101      	adds	r1, #1
 800bfca:	f000 f9bb 	bl	800c344 <_Balloc>
 800bfce:	4682      	mov	sl, r0
 800bfd0:	b918      	cbnz	r0, 800bfda <__gethex+0x3f2>
 800bfd2:	4b1b      	ldr	r3, [pc, #108]	; (800c040 <__gethex+0x458>)
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	2184      	movs	r1, #132	; 0x84
 800bfd8:	e6b3      	b.n	800bd42 <__gethex+0x15a>
 800bfda:	6922      	ldr	r2, [r4, #16]
 800bfdc:	3202      	adds	r2, #2
 800bfde:	f104 010c 	add.w	r1, r4, #12
 800bfe2:	0092      	lsls	r2, r2, #2
 800bfe4:	300c      	adds	r0, #12
 800bfe6:	f7ff fd34 	bl	800ba52 <memcpy>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4648      	mov	r0, r9
 800bfee:	f000 f9e9 	bl	800c3c4 <_Bfree>
 800bff2:	4654      	mov	r4, sl
 800bff4:	6922      	ldr	r2, [r4, #16]
 800bff6:	1c51      	adds	r1, r2, #1
 800bff8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bffc:	6121      	str	r1, [r4, #16]
 800bffe:	2101      	movs	r1, #1
 800c000:	6151      	str	r1, [r2, #20]
 800c002:	e7bc      	b.n	800bf7e <__gethex+0x396>
 800c004:	6921      	ldr	r1, [r4, #16]
 800c006:	4559      	cmp	r1, fp
 800c008:	dd0b      	ble.n	800c022 <__gethex+0x43a>
 800c00a:	2101      	movs	r1, #1
 800c00c:	4620      	mov	r0, r4
 800c00e:	f7ff fd83 	bl	800bb18 <rshift>
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	3601      	adds	r6, #1
 800c016:	42b3      	cmp	r3, r6
 800c018:	f6ff aedb 	blt.w	800bdd2 <__gethex+0x1ea>
 800c01c:	f04f 0801 	mov.w	r8, #1
 800c020:	e7c2      	b.n	800bfa8 <__gethex+0x3c0>
 800c022:	f015 051f 	ands.w	r5, r5, #31
 800c026:	d0f9      	beq.n	800c01c <__gethex+0x434>
 800c028:	9b01      	ldr	r3, [sp, #4]
 800c02a:	441a      	add	r2, r3
 800c02c:	f1c5 0520 	rsb	r5, r5, #32
 800c030:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c034:	f000 fa78 	bl	800c528 <__hi0bits>
 800c038:	42a8      	cmp	r0, r5
 800c03a:	dbe6      	blt.n	800c00a <__gethex+0x422>
 800c03c:	e7ee      	b.n	800c01c <__gethex+0x434>
 800c03e:	bf00      	nop
 800c040:	0800ec80 	.word	0x0800ec80

0800c044 <L_shift>:
 800c044:	f1c2 0208 	rsb	r2, r2, #8
 800c048:	0092      	lsls	r2, r2, #2
 800c04a:	b570      	push	{r4, r5, r6, lr}
 800c04c:	f1c2 0620 	rsb	r6, r2, #32
 800c050:	6843      	ldr	r3, [r0, #4]
 800c052:	6804      	ldr	r4, [r0, #0]
 800c054:	fa03 f506 	lsl.w	r5, r3, r6
 800c058:	432c      	orrs	r4, r5
 800c05a:	40d3      	lsrs	r3, r2
 800c05c:	6004      	str	r4, [r0, #0]
 800c05e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c062:	4288      	cmp	r0, r1
 800c064:	d3f4      	bcc.n	800c050 <L_shift+0xc>
 800c066:	bd70      	pop	{r4, r5, r6, pc}

0800c068 <__match>:
 800c068:	b530      	push	{r4, r5, lr}
 800c06a:	6803      	ldr	r3, [r0, #0]
 800c06c:	3301      	adds	r3, #1
 800c06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c072:	b914      	cbnz	r4, 800c07a <__match+0x12>
 800c074:	6003      	str	r3, [r0, #0]
 800c076:	2001      	movs	r0, #1
 800c078:	bd30      	pop	{r4, r5, pc}
 800c07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c07e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c082:	2d19      	cmp	r5, #25
 800c084:	bf98      	it	ls
 800c086:	3220      	addls	r2, #32
 800c088:	42a2      	cmp	r2, r4
 800c08a:	d0f0      	beq.n	800c06e <__match+0x6>
 800c08c:	2000      	movs	r0, #0
 800c08e:	e7f3      	b.n	800c078 <__match+0x10>

0800c090 <__hexnan>:
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	680b      	ldr	r3, [r1, #0]
 800c096:	6801      	ldr	r1, [r0, #0]
 800c098:	115e      	asrs	r6, r3, #5
 800c09a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c09e:	f013 031f 	ands.w	r3, r3, #31
 800c0a2:	b087      	sub	sp, #28
 800c0a4:	bf18      	it	ne
 800c0a6:	3604      	addne	r6, #4
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	1f37      	subs	r7, r6, #4
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	4690      	mov	r8, r2
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0b6:	46b9      	mov	r9, r7
 800c0b8:	463c      	mov	r4, r7
 800c0ba:	9502      	str	r5, [sp, #8]
 800c0bc:	46ab      	mov	fp, r5
 800c0be:	784a      	ldrb	r2, [r1, #1]
 800c0c0:	1c4b      	adds	r3, r1, #1
 800c0c2:	9303      	str	r3, [sp, #12]
 800c0c4:	b342      	cbz	r2, 800c118 <__hexnan+0x88>
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	9105      	str	r1, [sp, #20]
 800c0ca:	9204      	str	r2, [sp, #16]
 800c0cc:	f7ff fd76 	bl	800bbbc <__hexdig_fun>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d14f      	bne.n	800c174 <__hexnan+0xe4>
 800c0d4:	9a04      	ldr	r2, [sp, #16]
 800c0d6:	9905      	ldr	r1, [sp, #20]
 800c0d8:	2a20      	cmp	r2, #32
 800c0da:	d818      	bhi.n	800c10e <__hexnan+0x7e>
 800c0dc:	9b02      	ldr	r3, [sp, #8]
 800c0de:	459b      	cmp	fp, r3
 800c0e0:	dd13      	ble.n	800c10a <__hexnan+0x7a>
 800c0e2:	454c      	cmp	r4, r9
 800c0e4:	d206      	bcs.n	800c0f4 <__hexnan+0x64>
 800c0e6:	2d07      	cmp	r5, #7
 800c0e8:	dc04      	bgt.n	800c0f4 <__hexnan+0x64>
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f7ff ffa8 	bl	800c044 <L_shift>
 800c0f4:	4544      	cmp	r4, r8
 800c0f6:	d950      	bls.n	800c19a <__hexnan+0x10a>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f1a4 0904 	sub.w	r9, r4, #4
 800c0fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800c102:	f8cd b008 	str.w	fp, [sp, #8]
 800c106:	464c      	mov	r4, r9
 800c108:	461d      	mov	r5, r3
 800c10a:	9903      	ldr	r1, [sp, #12]
 800c10c:	e7d7      	b.n	800c0be <__hexnan+0x2e>
 800c10e:	2a29      	cmp	r2, #41	; 0x29
 800c110:	d155      	bne.n	800c1be <__hexnan+0x12e>
 800c112:	3102      	adds	r1, #2
 800c114:	f8ca 1000 	str.w	r1, [sl]
 800c118:	f1bb 0f00 	cmp.w	fp, #0
 800c11c:	d04f      	beq.n	800c1be <__hexnan+0x12e>
 800c11e:	454c      	cmp	r4, r9
 800c120:	d206      	bcs.n	800c130 <__hexnan+0xa0>
 800c122:	2d07      	cmp	r5, #7
 800c124:	dc04      	bgt.n	800c130 <__hexnan+0xa0>
 800c126:	462a      	mov	r2, r5
 800c128:	4649      	mov	r1, r9
 800c12a:	4620      	mov	r0, r4
 800c12c:	f7ff ff8a 	bl	800c044 <L_shift>
 800c130:	4544      	cmp	r4, r8
 800c132:	d934      	bls.n	800c19e <__hexnan+0x10e>
 800c134:	f1a8 0204 	sub.w	r2, r8, #4
 800c138:	4623      	mov	r3, r4
 800c13a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c13e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c142:	429f      	cmp	r7, r3
 800c144:	d2f9      	bcs.n	800c13a <__hexnan+0xaa>
 800c146:	1b3b      	subs	r3, r7, r4
 800c148:	f023 0303 	bic.w	r3, r3, #3
 800c14c:	3304      	adds	r3, #4
 800c14e:	3e03      	subs	r6, #3
 800c150:	3401      	adds	r4, #1
 800c152:	42a6      	cmp	r6, r4
 800c154:	bf38      	it	cc
 800c156:	2304      	movcc	r3, #4
 800c158:	4443      	add	r3, r8
 800c15a:	2200      	movs	r2, #0
 800c15c:	f843 2b04 	str.w	r2, [r3], #4
 800c160:	429f      	cmp	r7, r3
 800c162:	d2fb      	bcs.n	800c15c <__hexnan+0xcc>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	b91b      	cbnz	r3, 800c170 <__hexnan+0xe0>
 800c168:	4547      	cmp	r7, r8
 800c16a:	d126      	bne.n	800c1ba <__hexnan+0x12a>
 800c16c:	2301      	movs	r3, #1
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	2005      	movs	r0, #5
 800c172:	e025      	b.n	800c1c0 <__hexnan+0x130>
 800c174:	3501      	adds	r5, #1
 800c176:	2d08      	cmp	r5, #8
 800c178:	f10b 0b01 	add.w	fp, fp, #1
 800c17c:	dd06      	ble.n	800c18c <__hexnan+0xfc>
 800c17e:	4544      	cmp	r4, r8
 800c180:	d9c3      	bls.n	800c10a <__hexnan+0x7a>
 800c182:	2300      	movs	r3, #0
 800c184:	f844 3c04 	str.w	r3, [r4, #-4]
 800c188:	2501      	movs	r5, #1
 800c18a:	3c04      	subs	r4, #4
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	f000 000f 	and.w	r0, r0, #15
 800c192:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	e7b7      	b.n	800c10a <__hexnan+0x7a>
 800c19a:	2508      	movs	r5, #8
 800c19c:	e7b5      	b.n	800c10a <__hexnan+0x7a>
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d0df      	beq.n	800c164 <__hexnan+0xd4>
 800c1a4:	f1c3 0320 	rsb	r3, r3, #32
 800c1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ac:	40da      	lsrs	r2, r3
 800c1ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1b8:	e7d4      	b.n	800c164 <__hexnan+0xd4>
 800c1ba:	3f04      	subs	r7, #4
 800c1bc:	e7d2      	b.n	800c164 <__hexnan+0xd4>
 800c1be:	2004      	movs	r0, #4
 800c1c0:	b007      	add	sp, #28
 800c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c1c8 <sbrk_aligned>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	4e0e      	ldr	r6, [pc, #56]	; (800c204 <sbrk_aligned+0x3c>)
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	6831      	ldr	r1, [r6, #0]
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	b911      	cbnz	r1, 800c1da <sbrk_aligned+0x12>
 800c1d4:	f000 fe1e 	bl	800ce14 <_sbrk_r>
 800c1d8:	6030      	str	r0, [r6, #0]
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f000 fe19 	bl	800ce14 <_sbrk_r>
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	d00a      	beq.n	800c1fc <sbrk_aligned+0x34>
 800c1e6:	1cc4      	adds	r4, r0, #3
 800c1e8:	f024 0403 	bic.w	r4, r4, #3
 800c1ec:	42a0      	cmp	r0, r4
 800c1ee:	d007      	beq.n	800c200 <sbrk_aligned+0x38>
 800c1f0:	1a21      	subs	r1, r4, r0
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 fe0e 	bl	800ce14 <_sbrk_r>
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	d101      	bne.n	800c200 <sbrk_aligned+0x38>
 800c1fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c200:	4620      	mov	r0, r4
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	200048a4 	.word	0x200048a4

0800c208 <_malloc_r>:
 800c208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	1ccd      	adds	r5, r1, #3
 800c20e:	f025 0503 	bic.w	r5, r5, #3
 800c212:	3508      	adds	r5, #8
 800c214:	2d0c      	cmp	r5, #12
 800c216:	bf38      	it	cc
 800c218:	250c      	movcc	r5, #12
 800c21a:	2d00      	cmp	r5, #0
 800c21c:	4607      	mov	r7, r0
 800c21e:	db01      	blt.n	800c224 <_malloc_r+0x1c>
 800c220:	42a9      	cmp	r1, r5
 800c222:	d905      	bls.n	800c230 <_malloc_r+0x28>
 800c224:	230c      	movs	r3, #12
 800c226:	603b      	str	r3, [r7, #0]
 800c228:	2600      	movs	r6, #0
 800c22a:	4630      	mov	r0, r6
 800c22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c304 <_malloc_r+0xfc>
 800c234:	f000 f87a 	bl	800c32c <__malloc_lock>
 800c238:	f8d8 3000 	ldr.w	r3, [r8]
 800c23c:	461c      	mov	r4, r3
 800c23e:	bb5c      	cbnz	r4, 800c298 <_malloc_r+0x90>
 800c240:	4629      	mov	r1, r5
 800c242:	4638      	mov	r0, r7
 800c244:	f7ff ffc0 	bl	800c1c8 <sbrk_aligned>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	4604      	mov	r4, r0
 800c24c:	d155      	bne.n	800c2fa <_malloc_r+0xf2>
 800c24e:	f8d8 4000 	ldr.w	r4, [r8]
 800c252:	4626      	mov	r6, r4
 800c254:	2e00      	cmp	r6, #0
 800c256:	d145      	bne.n	800c2e4 <_malloc_r+0xdc>
 800c258:	2c00      	cmp	r4, #0
 800c25a:	d048      	beq.n	800c2ee <_malloc_r+0xe6>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	4631      	mov	r1, r6
 800c260:	4638      	mov	r0, r7
 800c262:	eb04 0903 	add.w	r9, r4, r3
 800c266:	f000 fdd5 	bl	800ce14 <_sbrk_r>
 800c26a:	4581      	cmp	r9, r0
 800c26c:	d13f      	bne.n	800c2ee <_malloc_r+0xe6>
 800c26e:	6821      	ldr	r1, [r4, #0]
 800c270:	1a6d      	subs	r5, r5, r1
 800c272:	4629      	mov	r1, r5
 800c274:	4638      	mov	r0, r7
 800c276:	f7ff ffa7 	bl	800c1c8 <sbrk_aligned>
 800c27a:	3001      	adds	r0, #1
 800c27c:	d037      	beq.n	800c2ee <_malloc_r+0xe6>
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	442b      	add	r3, r5
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	f8d8 3000 	ldr.w	r3, [r8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d038      	beq.n	800c2fe <_malloc_r+0xf6>
 800c28c:	685a      	ldr	r2, [r3, #4]
 800c28e:	42a2      	cmp	r2, r4
 800c290:	d12b      	bne.n	800c2ea <_malloc_r+0xe2>
 800c292:	2200      	movs	r2, #0
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	e00f      	b.n	800c2b8 <_malloc_r+0xb0>
 800c298:	6822      	ldr	r2, [r4, #0]
 800c29a:	1b52      	subs	r2, r2, r5
 800c29c:	d41f      	bmi.n	800c2de <_malloc_r+0xd6>
 800c29e:	2a0b      	cmp	r2, #11
 800c2a0:	d917      	bls.n	800c2d2 <_malloc_r+0xca>
 800c2a2:	1961      	adds	r1, r4, r5
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	6025      	str	r5, [r4, #0]
 800c2a8:	bf18      	it	ne
 800c2aa:	6059      	strne	r1, [r3, #4]
 800c2ac:	6863      	ldr	r3, [r4, #4]
 800c2ae:	bf08      	it	eq
 800c2b0:	f8c8 1000 	streq.w	r1, [r8]
 800c2b4:	5162      	str	r2, [r4, r5]
 800c2b6:	604b      	str	r3, [r1, #4]
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f104 060b 	add.w	r6, r4, #11
 800c2be:	f000 f83b 	bl	800c338 <__malloc_unlock>
 800c2c2:	f026 0607 	bic.w	r6, r6, #7
 800c2c6:	1d23      	adds	r3, r4, #4
 800c2c8:	1af2      	subs	r2, r6, r3
 800c2ca:	d0ae      	beq.n	800c22a <_malloc_r+0x22>
 800c2cc:	1b9b      	subs	r3, r3, r6
 800c2ce:	50a3      	str	r3, [r4, r2]
 800c2d0:	e7ab      	b.n	800c22a <_malloc_r+0x22>
 800c2d2:	42a3      	cmp	r3, r4
 800c2d4:	6862      	ldr	r2, [r4, #4]
 800c2d6:	d1dd      	bne.n	800c294 <_malloc_r+0x8c>
 800c2d8:	f8c8 2000 	str.w	r2, [r8]
 800c2dc:	e7ec      	b.n	800c2b8 <_malloc_r+0xb0>
 800c2de:	4623      	mov	r3, r4
 800c2e0:	6864      	ldr	r4, [r4, #4]
 800c2e2:	e7ac      	b.n	800c23e <_malloc_r+0x36>
 800c2e4:	4634      	mov	r4, r6
 800c2e6:	6876      	ldr	r6, [r6, #4]
 800c2e8:	e7b4      	b.n	800c254 <_malloc_r+0x4c>
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	e7cc      	b.n	800c288 <_malloc_r+0x80>
 800c2ee:	230c      	movs	r3, #12
 800c2f0:	603b      	str	r3, [r7, #0]
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f000 f820 	bl	800c338 <__malloc_unlock>
 800c2f8:	e797      	b.n	800c22a <_malloc_r+0x22>
 800c2fa:	6025      	str	r5, [r4, #0]
 800c2fc:	e7dc      	b.n	800c2b8 <_malloc_r+0xb0>
 800c2fe:	605b      	str	r3, [r3, #4]
 800c300:	deff      	udf	#255	; 0xff
 800c302:	bf00      	nop
 800c304:	200048a0 	.word	0x200048a0

0800c308 <__ascii_mbtowc>:
 800c308:	b082      	sub	sp, #8
 800c30a:	b901      	cbnz	r1, 800c30e <__ascii_mbtowc+0x6>
 800c30c:	a901      	add	r1, sp, #4
 800c30e:	b142      	cbz	r2, 800c322 <__ascii_mbtowc+0x1a>
 800c310:	b14b      	cbz	r3, 800c326 <__ascii_mbtowc+0x1e>
 800c312:	7813      	ldrb	r3, [r2, #0]
 800c314:	600b      	str	r3, [r1, #0]
 800c316:	7812      	ldrb	r2, [r2, #0]
 800c318:	1e10      	subs	r0, r2, #0
 800c31a:	bf18      	it	ne
 800c31c:	2001      	movne	r0, #1
 800c31e:	b002      	add	sp, #8
 800c320:	4770      	bx	lr
 800c322:	4610      	mov	r0, r2
 800c324:	e7fb      	b.n	800c31e <__ascii_mbtowc+0x16>
 800c326:	f06f 0001 	mvn.w	r0, #1
 800c32a:	e7f8      	b.n	800c31e <__ascii_mbtowc+0x16>

0800c32c <__malloc_lock>:
 800c32c:	4801      	ldr	r0, [pc, #4]	; (800c334 <__malloc_lock+0x8>)
 800c32e:	f7ff bb8e 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800c332:	bf00      	nop
 800c334:	2000489c 	.word	0x2000489c

0800c338 <__malloc_unlock>:
 800c338:	4801      	ldr	r0, [pc, #4]	; (800c340 <__malloc_unlock+0x8>)
 800c33a:	f7ff bb89 	b.w	800ba50 <__retarget_lock_release_recursive>
 800c33e:	bf00      	nop
 800c340:	2000489c 	.word	0x2000489c

0800c344 <_Balloc>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	69c6      	ldr	r6, [r0, #28]
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	b976      	cbnz	r6, 800c36c <_Balloc+0x28>
 800c34e:	2010      	movs	r0, #16
 800c350:	f000 fda4 	bl	800ce9c <malloc>
 800c354:	4602      	mov	r2, r0
 800c356:	61e0      	str	r0, [r4, #28]
 800c358:	b920      	cbnz	r0, 800c364 <_Balloc+0x20>
 800c35a:	4b18      	ldr	r3, [pc, #96]	; (800c3bc <_Balloc+0x78>)
 800c35c:	4818      	ldr	r0, [pc, #96]	; (800c3c0 <_Balloc+0x7c>)
 800c35e:	216b      	movs	r1, #107	; 0x6b
 800c360:	f000 fd68 	bl	800ce34 <__assert_func>
 800c364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c368:	6006      	str	r6, [r0, #0]
 800c36a:	60c6      	str	r6, [r0, #12]
 800c36c:	69e6      	ldr	r6, [r4, #28]
 800c36e:	68f3      	ldr	r3, [r6, #12]
 800c370:	b183      	cbz	r3, 800c394 <_Balloc+0x50>
 800c372:	69e3      	ldr	r3, [r4, #28]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c37a:	b9b8      	cbnz	r0, 800c3ac <_Balloc+0x68>
 800c37c:	2101      	movs	r1, #1
 800c37e:	fa01 f605 	lsl.w	r6, r1, r5
 800c382:	1d72      	adds	r2, r6, #5
 800c384:	0092      	lsls	r2, r2, #2
 800c386:	4620      	mov	r0, r4
 800c388:	f000 fd72 	bl	800ce70 <_calloc_r>
 800c38c:	b160      	cbz	r0, 800c3a8 <_Balloc+0x64>
 800c38e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c392:	e00e      	b.n	800c3b2 <_Balloc+0x6e>
 800c394:	2221      	movs	r2, #33	; 0x21
 800c396:	2104      	movs	r1, #4
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 fd69 	bl	800ce70 <_calloc_r>
 800c39e:	69e3      	ldr	r3, [r4, #28]
 800c3a0:	60f0      	str	r0, [r6, #12]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1e4      	bne.n	800c372 <_Balloc+0x2e>
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	6802      	ldr	r2, [r0, #0]
 800c3ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3b8:	e7f7      	b.n	800c3aa <_Balloc+0x66>
 800c3ba:	bf00      	nop
 800c3bc:	0800ecf1 	.word	0x0800ecf1
 800c3c0:	0800ed08 	.word	0x0800ed08

0800c3c4 <_Bfree>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	69c6      	ldr	r6, [r0, #28]
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	b976      	cbnz	r6, 800c3ec <_Bfree+0x28>
 800c3ce:	2010      	movs	r0, #16
 800c3d0:	f000 fd64 	bl	800ce9c <malloc>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	61e8      	str	r0, [r5, #28]
 800c3d8:	b920      	cbnz	r0, 800c3e4 <_Bfree+0x20>
 800c3da:	4b09      	ldr	r3, [pc, #36]	; (800c400 <_Bfree+0x3c>)
 800c3dc:	4809      	ldr	r0, [pc, #36]	; (800c404 <_Bfree+0x40>)
 800c3de:	218f      	movs	r1, #143	; 0x8f
 800c3e0:	f000 fd28 	bl	800ce34 <__assert_func>
 800c3e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e8:	6006      	str	r6, [r0, #0]
 800c3ea:	60c6      	str	r6, [r0, #12]
 800c3ec:	b13c      	cbz	r4, 800c3fe <_Bfree+0x3a>
 800c3ee:	69eb      	ldr	r3, [r5, #28]
 800c3f0:	6862      	ldr	r2, [r4, #4]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3f8:	6021      	str	r1, [r4, #0]
 800c3fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}
 800c400:	0800ecf1 	.word	0x0800ecf1
 800c404:	0800ed08 	.word	0x0800ed08

0800c408 <__multadd>:
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	690d      	ldr	r5, [r1, #16]
 800c40e:	4607      	mov	r7, r0
 800c410:	460c      	mov	r4, r1
 800c412:	461e      	mov	r6, r3
 800c414:	f101 0c14 	add.w	ip, r1, #20
 800c418:	2000      	movs	r0, #0
 800c41a:	f8dc 3000 	ldr.w	r3, [ip]
 800c41e:	b299      	uxth	r1, r3
 800c420:	fb02 6101 	mla	r1, r2, r1, r6
 800c424:	0c1e      	lsrs	r6, r3, #16
 800c426:	0c0b      	lsrs	r3, r1, #16
 800c428:	fb02 3306 	mla	r3, r2, r6, r3
 800c42c:	b289      	uxth	r1, r1
 800c42e:	3001      	adds	r0, #1
 800c430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c434:	4285      	cmp	r5, r0
 800c436:	f84c 1b04 	str.w	r1, [ip], #4
 800c43a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c43e:	dcec      	bgt.n	800c41a <__multadd+0x12>
 800c440:	b30e      	cbz	r6, 800c486 <__multadd+0x7e>
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	42ab      	cmp	r3, r5
 800c446:	dc19      	bgt.n	800c47c <__multadd+0x74>
 800c448:	6861      	ldr	r1, [r4, #4]
 800c44a:	4638      	mov	r0, r7
 800c44c:	3101      	adds	r1, #1
 800c44e:	f7ff ff79 	bl	800c344 <_Balloc>
 800c452:	4680      	mov	r8, r0
 800c454:	b928      	cbnz	r0, 800c462 <__multadd+0x5a>
 800c456:	4602      	mov	r2, r0
 800c458:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <__multadd+0x84>)
 800c45a:	480d      	ldr	r0, [pc, #52]	; (800c490 <__multadd+0x88>)
 800c45c:	21ba      	movs	r1, #186	; 0xba
 800c45e:	f000 fce9 	bl	800ce34 <__assert_func>
 800c462:	6922      	ldr	r2, [r4, #16]
 800c464:	3202      	adds	r2, #2
 800c466:	f104 010c 	add.w	r1, r4, #12
 800c46a:	0092      	lsls	r2, r2, #2
 800c46c:	300c      	adds	r0, #12
 800c46e:	f7ff faf0 	bl	800ba52 <memcpy>
 800c472:	4621      	mov	r1, r4
 800c474:	4638      	mov	r0, r7
 800c476:	f7ff ffa5 	bl	800c3c4 <_Bfree>
 800c47a:	4644      	mov	r4, r8
 800c47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c480:	3501      	adds	r5, #1
 800c482:	615e      	str	r6, [r3, #20]
 800c484:	6125      	str	r5, [r4, #16]
 800c486:	4620      	mov	r0, r4
 800c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c48c:	0800ec80 	.word	0x0800ec80
 800c490:	0800ed08 	.word	0x0800ed08

0800c494 <__s2b>:
 800c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c498:	460c      	mov	r4, r1
 800c49a:	4615      	mov	r5, r2
 800c49c:	461f      	mov	r7, r3
 800c49e:	2209      	movs	r2, #9
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	db09      	blt.n	800c4c4 <__s2b+0x30>
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f7ff ff47 	bl	800c344 <_Balloc>
 800c4b6:	b940      	cbnz	r0, 800c4ca <__s2b+0x36>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	4b19      	ldr	r3, [pc, #100]	; (800c520 <__s2b+0x8c>)
 800c4bc:	4819      	ldr	r0, [pc, #100]	; (800c524 <__s2b+0x90>)
 800c4be:	21d3      	movs	r1, #211	; 0xd3
 800c4c0:	f000 fcb8 	bl	800ce34 <__assert_func>
 800c4c4:	0052      	lsls	r2, r2, #1
 800c4c6:	3101      	adds	r1, #1
 800c4c8:	e7f0      	b.n	800c4ac <__s2b+0x18>
 800c4ca:	9b08      	ldr	r3, [sp, #32]
 800c4cc:	6143      	str	r3, [r0, #20]
 800c4ce:	2d09      	cmp	r5, #9
 800c4d0:	f04f 0301 	mov.w	r3, #1
 800c4d4:	6103      	str	r3, [r0, #16]
 800c4d6:	dd16      	ble.n	800c506 <__s2b+0x72>
 800c4d8:	f104 0909 	add.w	r9, r4, #9
 800c4dc:	46c8      	mov	r8, r9
 800c4de:	442c      	add	r4, r5
 800c4e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	3b30      	subs	r3, #48	; 0x30
 800c4e8:	220a      	movs	r2, #10
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ff8c 	bl	800c408 <__multadd>
 800c4f0:	45a0      	cmp	r8, r4
 800c4f2:	d1f5      	bne.n	800c4e0 <__s2b+0x4c>
 800c4f4:	f1a5 0408 	sub.w	r4, r5, #8
 800c4f8:	444c      	add	r4, r9
 800c4fa:	1b2d      	subs	r5, r5, r4
 800c4fc:	1963      	adds	r3, r4, r5
 800c4fe:	42bb      	cmp	r3, r7
 800c500:	db04      	blt.n	800c50c <__s2b+0x78>
 800c502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c506:	340a      	adds	r4, #10
 800c508:	2509      	movs	r5, #9
 800c50a:	e7f6      	b.n	800c4fa <__s2b+0x66>
 800c50c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c510:	4601      	mov	r1, r0
 800c512:	3b30      	subs	r3, #48	; 0x30
 800c514:	220a      	movs	r2, #10
 800c516:	4630      	mov	r0, r6
 800c518:	f7ff ff76 	bl	800c408 <__multadd>
 800c51c:	e7ee      	b.n	800c4fc <__s2b+0x68>
 800c51e:	bf00      	nop
 800c520:	0800ec80 	.word	0x0800ec80
 800c524:	0800ed08 	.word	0x0800ed08

0800c528 <__hi0bits>:
 800c528:	0c03      	lsrs	r3, r0, #16
 800c52a:	041b      	lsls	r3, r3, #16
 800c52c:	b9d3      	cbnz	r3, 800c564 <__hi0bits+0x3c>
 800c52e:	0400      	lsls	r0, r0, #16
 800c530:	2310      	movs	r3, #16
 800c532:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c536:	bf04      	itt	eq
 800c538:	0200      	lsleq	r0, r0, #8
 800c53a:	3308      	addeq	r3, #8
 800c53c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c540:	bf04      	itt	eq
 800c542:	0100      	lsleq	r0, r0, #4
 800c544:	3304      	addeq	r3, #4
 800c546:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c54a:	bf04      	itt	eq
 800c54c:	0080      	lsleq	r0, r0, #2
 800c54e:	3302      	addeq	r3, #2
 800c550:	2800      	cmp	r0, #0
 800c552:	db05      	blt.n	800c560 <__hi0bits+0x38>
 800c554:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c558:	f103 0301 	add.w	r3, r3, #1
 800c55c:	bf08      	it	eq
 800c55e:	2320      	moveq	r3, #32
 800c560:	4618      	mov	r0, r3
 800c562:	4770      	bx	lr
 800c564:	2300      	movs	r3, #0
 800c566:	e7e4      	b.n	800c532 <__hi0bits+0xa>

0800c568 <__lo0bits>:
 800c568:	6803      	ldr	r3, [r0, #0]
 800c56a:	f013 0207 	ands.w	r2, r3, #7
 800c56e:	d00c      	beq.n	800c58a <__lo0bits+0x22>
 800c570:	07d9      	lsls	r1, r3, #31
 800c572:	d422      	bmi.n	800c5ba <__lo0bits+0x52>
 800c574:	079a      	lsls	r2, r3, #30
 800c576:	bf49      	itett	mi
 800c578:	085b      	lsrmi	r3, r3, #1
 800c57a:	089b      	lsrpl	r3, r3, #2
 800c57c:	6003      	strmi	r3, [r0, #0]
 800c57e:	2201      	movmi	r2, #1
 800c580:	bf5c      	itt	pl
 800c582:	6003      	strpl	r3, [r0, #0]
 800c584:	2202      	movpl	r2, #2
 800c586:	4610      	mov	r0, r2
 800c588:	4770      	bx	lr
 800c58a:	b299      	uxth	r1, r3
 800c58c:	b909      	cbnz	r1, 800c592 <__lo0bits+0x2a>
 800c58e:	0c1b      	lsrs	r3, r3, #16
 800c590:	2210      	movs	r2, #16
 800c592:	b2d9      	uxtb	r1, r3
 800c594:	b909      	cbnz	r1, 800c59a <__lo0bits+0x32>
 800c596:	3208      	adds	r2, #8
 800c598:	0a1b      	lsrs	r3, r3, #8
 800c59a:	0719      	lsls	r1, r3, #28
 800c59c:	bf04      	itt	eq
 800c59e:	091b      	lsreq	r3, r3, #4
 800c5a0:	3204      	addeq	r2, #4
 800c5a2:	0799      	lsls	r1, r3, #30
 800c5a4:	bf04      	itt	eq
 800c5a6:	089b      	lsreq	r3, r3, #2
 800c5a8:	3202      	addeq	r2, #2
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d403      	bmi.n	800c5b6 <__lo0bits+0x4e>
 800c5ae:	085b      	lsrs	r3, r3, #1
 800c5b0:	f102 0201 	add.w	r2, r2, #1
 800c5b4:	d003      	beq.n	800c5be <__lo0bits+0x56>
 800c5b6:	6003      	str	r3, [r0, #0]
 800c5b8:	e7e5      	b.n	800c586 <__lo0bits+0x1e>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	e7e3      	b.n	800c586 <__lo0bits+0x1e>
 800c5be:	2220      	movs	r2, #32
 800c5c0:	e7e1      	b.n	800c586 <__lo0bits+0x1e>
	...

0800c5c4 <__i2b>:
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	f7ff febb 	bl	800c344 <_Balloc>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	b928      	cbnz	r0, 800c5de <__i2b+0x1a>
 800c5d2:	4b05      	ldr	r3, [pc, #20]	; (800c5e8 <__i2b+0x24>)
 800c5d4:	4805      	ldr	r0, [pc, #20]	; (800c5ec <__i2b+0x28>)
 800c5d6:	f240 1145 	movw	r1, #325	; 0x145
 800c5da:	f000 fc2b 	bl	800ce34 <__assert_func>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	6144      	str	r4, [r0, #20]
 800c5e2:	6103      	str	r3, [r0, #16]
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	bf00      	nop
 800c5e8:	0800ec80 	.word	0x0800ec80
 800c5ec:	0800ed08 	.word	0x0800ed08

0800c5f0 <__multiply>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	4691      	mov	r9, r2
 800c5f6:	690a      	ldr	r2, [r1, #16]
 800c5f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	bfb8      	it	lt
 800c600:	460b      	movlt	r3, r1
 800c602:	460c      	mov	r4, r1
 800c604:	bfbc      	itt	lt
 800c606:	464c      	movlt	r4, r9
 800c608:	4699      	movlt	r9, r3
 800c60a:	6927      	ldr	r7, [r4, #16]
 800c60c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c610:	68a3      	ldr	r3, [r4, #8]
 800c612:	6861      	ldr	r1, [r4, #4]
 800c614:	eb07 060a 	add.w	r6, r7, sl
 800c618:	42b3      	cmp	r3, r6
 800c61a:	b085      	sub	sp, #20
 800c61c:	bfb8      	it	lt
 800c61e:	3101      	addlt	r1, #1
 800c620:	f7ff fe90 	bl	800c344 <_Balloc>
 800c624:	b930      	cbnz	r0, 800c634 <__multiply+0x44>
 800c626:	4602      	mov	r2, r0
 800c628:	4b44      	ldr	r3, [pc, #272]	; (800c73c <__multiply+0x14c>)
 800c62a:	4845      	ldr	r0, [pc, #276]	; (800c740 <__multiply+0x150>)
 800c62c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c630:	f000 fc00 	bl	800ce34 <__assert_func>
 800c634:	f100 0514 	add.w	r5, r0, #20
 800c638:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c63c:	462b      	mov	r3, r5
 800c63e:	2200      	movs	r2, #0
 800c640:	4543      	cmp	r3, r8
 800c642:	d321      	bcc.n	800c688 <__multiply+0x98>
 800c644:	f104 0314 	add.w	r3, r4, #20
 800c648:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c64c:	f109 0314 	add.w	r3, r9, #20
 800c650:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c654:	9202      	str	r2, [sp, #8]
 800c656:	1b3a      	subs	r2, r7, r4
 800c658:	3a15      	subs	r2, #21
 800c65a:	f022 0203 	bic.w	r2, r2, #3
 800c65e:	3204      	adds	r2, #4
 800c660:	f104 0115 	add.w	r1, r4, #21
 800c664:	428f      	cmp	r7, r1
 800c666:	bf38      	it	cc
 800c668:	2204      	movcc	r2, #4
 800c66a:	9201      	str	r2, [sp, #4]
 800c66c:	9a02      	ldr	r2, [sp, #8]
 800c66e:	9303      	str	r3, [sp, #12]
 800c670:	429a      	cmp	r2, r3
 800c672:	d80c      	bhi.n	800c68e <__multiply+0x9e>
 800c674:	2e00      	cmp	r6, #0
 800c676:	dd03      	ble.n	800c680 <__multiply+0x90>
 800c678:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d05b      	beq.n	800c738 <__multiply+0x148>
 800c680:	6106      	str	r6, [r0, #16]
 800c682:	b005      	add	sp, #20
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	f843 2b04 	str.w	r2, [r3], #4
 800c68c:	e7d8      	b.n	800c640 <__multiply+0x50>
 800c68e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c692:	f1ba 0f00 	cmp.w	sl, #0
 800c696:	d024      	beq.n	800c6e2 <__multiply+0xf2>
 800c698:	f104 0e14 	add.w	lr, r4, #20
 800c69c:	46a9      	mov	r9, r5
 800c69e:	f04f 0c00 	mov.w	ip, #0
 800c6a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c6aa:	fa1f fb82 	uxth.w	fp, r2
 800c6ae:	b289      	uxth	r1, r1
 800c6b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c6b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c6b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c6bc:	4461      	add	r1, ip
 800c6be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c6c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6ca:	b289      	uxth	r1, r1
 800c6cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6d0:	4577      	cmp	r7, lr
 800c6d2:	f849 1b04 	str.w	r1, [r9], #4
 800c6d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6da:	d8e2      	bhi.n	800c6a2 <__multiply+0xb2>
 800c6dc:	9a01      	ldr	r2, [sp, #4]
 800c6de:	f845 c002 	str.w	ip, [r5, r2]
 800c6e2:	9a03      	ldr	r2, [sp, #12]
 800c6e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	f1b9 0f00 	cmp.w	r9, #0
 800c6ee:	d021      	beq.n	800c734 <__multiply+0x144>
 800c6f0:	6829      	ldr	r1, [r5, #0]
 800c6f2:	f104 0c14 	add.w	ip, r4, #20
 800c6f6:	46ae      	mov	lr, r5
 800c6f8:	f04f 0a00 	mov.w	sl, #0
 800c6fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c700:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c704:	fb09 220b 	mla	r2, r9, fp, r2
 800c708:	4452      	add	r2, sl
 800c70a:	b289      	uxth	r1, r1
 800c70c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c710:	f84e 1b04 	str.w	r1, [lr], #4
 800c714:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c718:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c71c:	f8be 1000 	ldrh.w	r1, [lr]
 800c720:	fb09 110a 	mla	r1, r9, sl, r1
 800c724:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c728:	4567      	cmp	r7, ip
 800c72a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c72e:	d8e5      	bhi.n	800c6fc <__multiply+0x10c>
 800c730:	9a01      	ldr	r2, [sp, #4]
 800c732:	50a9      	str	r1, [r5, r2]
 800c734:	3504      	adds	r5, #4
 800c736:	e799      	b.n	800c66c <__multiply+0x7c>
 800c738:	3e01      	subs	r6, #1
 800c73a:	e79b      	b.n	800c674 <__multiply+0x84>
 800c73c:	0800ec80 	.word	0x0800ec80
 800c740:	0800ed08 	.word	0x0800ed08

0800c744 <__pow5mult>:
 800c744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c748:	4615      	mov	r5, r2
 800c74a:	f012 0203 	ands.w	r2, r2, #3
 800c74e:	4606      	mov	r6, r0
 800c750:	460f      	mov	r7, r1
 800c752:	d007      	beq.n	800c764 <__pow5mult+0x20>
 800c754:	4c25      	ldr	r4, [pc, #148]	; (800c7ec <__pow5mult+0xa8>)
 800c756:	3a01      	subs	r2, #1
 800c758:	2300      	movs	r3, #0
 800c75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c75e:	f7ff fe53 	bl	800c408 <__multadd>
 800c762:	4607      	mov	r7, r0
 800c764:	10ad      	asrs	r5, r5, #2
 800c766:	d03d      	beq.n	800c7e4 <__pow5mult+0xa0>
 800c768:	69f4      	ldr	r4, [r6, #28]
 800c76a:	b97c      	cbnz	r4, 800c78c <__pow5mult+0x48>
 800c76c:	2010      	movs	r0, #16
 800c76e:	f000 fb95 	bl	800ce9c <malloc>
 800c772:	4602      	mov	r2, r0
 800c774:	61f0      	str	r0, [r6, #28]
 800c776:	b928      	cbnz	r0, 800c784 <__pow5mult+0x40>
 800c778:	4b1d      	ldr	r3, [pc, #116]	; (800c7f0 <__pow5mult+0xac>)
 800c77a:	481e      	ldr	r0, [pc, #120]	; (800c7f4 <__pow5mult+0xb0>)
 800c77c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c780:	f000 fb58 	bl	800ce34 <__assert_func>
 800c784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c788:	6004      	str	r4, [r0, #0]
 800c78a:	60c4      	str	r4, [r0, #12]
 800c78c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c794:	b94c      	cbnz	r4, 800c7aa <__pow5mult+0x66>
 800c796:	f240 2171 	movw	r1, #625	; 0x271
 800c79a:	4630      	mov	r0, r6
 800c79c:	f7ff ff12 	bl	800c5c4 <__i2b>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	6003      	str	r3, [r0, #0]
 800c7aa:	f04f 0900 	mov.w	r9, #0
 800c7ae:	07eb      	lsls	r3, r5, #31
 800c7b0:	d50a      	bpl.n	800c7c8 <__pow5mult+0x84>
 800c7b2:	4639      	mov	r1, r7
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7ff ff1a 	bl	800c5f0 <__multiply>
 800c7bc:	4639      	mov	r1, r7
 800c7be:	4680      	mov	r8, r0
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f7ff fdff 	bl	800c3c4 <_Bfree>
 800c7c6:	4647      	mov	r7, r8
 800c7c8:	106d      	asrs	r5, r5, #1
 800c7ca:	d00b      	beq.n	800c7e4 <__pow5mult+0xa0>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	b938      	cbnz	r0, 800c7e0 <__pow5mult+0x9c>
 800c7d0:	4622      	mov	r2, r4
 800c7d2:	4621      	mov	r1, r4
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	f7ff ff0b 	bl	800c5f0 <__multiply>
 800c7da:	6020      	str	r0, [r4, #0]
 800c7dc:	f8c0 9000 	str.w	r9, [r0]
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	e7e4      	b.n	800c7ae <__pow5mult+0x6a>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ea:	bf00      	nop
 800c7ec:	0800ee58 	.word	0x0800ee58
 800c7f0:	0800ecf1 	.word	0x0800ecf1
 800c7f4:	0800ed08 	.word	0x0800ed08

0800c7f8 <__lshift>:
 800c7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	6849      	ldr	r1, [r1, #4]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c806:	68a3      	ldr	r3, [r4, #8]
 800c808:	4607      	mov	r7, r0
 800c80a:	4691      	mov	r9, r2
 800c80c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c810:	f108 0601 	add.w	r6, r8, #1
 800c814:	42b3      	cmp	r3, r6
 800c816:	db0b      	blt.n	800c830 <__lshift+0x38>
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff fd93 	bl	800c344 <_Balloc>
 800c81e:	4605      	mov	r5, r0
 800c820:	b948      	cbnz	r0, 800c836 <__lshift+0x3e>
 800c822:	4602      	mov	r2, r0
 800c824:	4b28      	ldr	r3, [pc, #160]	; (800c8c8 <__lshift+0xd0>)
 800c826:	4829      	ldr	r0, [pc, #164]	; (800c8cc <__lshift+0xd4>)
 800c828:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c82c:	f000 fb02 	bl	800ce34 <__assert_func>
 800c830:	3101      	adds	r1, #1
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	e7ee      	b.n	800c814 <__lshift+0x1c>
 800c836:	2300      	movs	r3, #0
 800c838:	f100 0114 	add.w	r1, r0, #20
 800c83c:	f100 0210 	add.w	r2, r0, #16
 800c840:	4618      	mov	r0, r3
 800c842:	4553      	cmp	r3, sl
 800c844:	db33      	blt.n	800c8ae <__lshift+0xb6>
 800c846:	6920      	ldr	r0, [r4, #16]
 800c848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c84c:	f104 0314 	add.w	r3, r4, #20
 800c850:	f019 091f 	ands.w	r9, r9, #31
 800c854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c85c:	d02b      	beq.n	800c8b6 <__lshift+0xbe>
 800c85e:	f1c9 0e20 	rsb	lr, r9, #32
 800c862:	468a      	mov	sl, r1
 800c864:	2200      	movs	r2, #0
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	fa00 f009 	lsl.w	r0, r0, r9
 800c86c:	4310      	orrs	r0, r2
 800c86e:	f84a 0b04 	str.w	r0, [sl], #4
 800c872:	f853 2b04 	ldr.w	r2, [r3], #4
 800c876:	459c      	cmp	ip, r3
 800c878:	fa22 f20e 	lsr.w	r2, r2, lr
 800c87c:	d8f3      	bhi.n	800c866 <__lshift+0x6e>
 800c87e:	ebac 0304 	sub.w	r3, ip, r4
 800c882:	3b15      	subs	r3, #21
 800c884:	f023 0303 	bic.w	r3, r3, #3
 800c888:	3304      	adds	r3, #4
 800c88a:	f104 0015 	add.w	r0, r4, #21
 800c88e:	4584      	cmp	ip, r0
 800c890:	bf38      	it	cc
 800c892:	2304      	movcc	r3, #4
 800c894:	50ca      	str	r2, [r1, r3]
 800c896:	b10a      	cbz	r2, 800c89c <__lshift+0xa4>
 800c898:	f108 0602 	add.w	r6, r8, #2
 800c89c:	3e01      	subs	r6, #1
 800c89e:	4638      	mov	r0, r7
 800c8a0:	612e      	str	r6, [r5, #16]
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	f7ff fd8e 	bl	800c3c4 <_Bfree>
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	e7c5      	b.n	800c842 <__lshift+0x4a>
 800c8b6:	3904      	subs	r1, #4
 800c8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8c0:	459c      	cmp	ip, r3
 800c8c2:	d8f9      	bhi.n	800c8b8 <__lshift+0xc0>
 800c8c4:	e7ea      	b.n	800c89c <__lshift+0xa4>
 800c8c6:	bf00      	nop
 800c8c8:	0800ec80 	.word	0x0800ec80
 800c8cc:	0800ed08 	.word	0x0800ed08

0800c8d0 <__mcmp>:
 800c8d0:	b530      	push	{r4, r5, lr}
 800c8d2:	6902      	ldr	r2, [r0, #16]
 800c8d4:	690c      	ldr	r4, [r1, #16]
 800c8d6:	1b12      	subs	r2, r2, r4
 800c8d8:	d10e      	bne.n	800c8f8 <__mcmp+0x28>
 800c8da:	f100 0314 	add.w	r3, r0, #20
 800c8de:	3114      	adds	r1, #20
 800c8e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c8f0:	42a5      	cmp	r5, r4
 800c8f2:	d003      	beq.n	800c8fc <__mcmp+0x2c>
 800c8f4:	d305      	bcc.n	800c902 <__mcmp+0x32>
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	bd30      	pop	{r4, r5, pc}
 800c8fc:	4283      	cmp	r3, r0
 800c8fe:	d3f3      	bcc.n	800c8e8 <__mcmp+0x18>
 800c900:	e7fa      	b.n	800c8f8 <__mcmp+0x28>
 800c902:	f04f 32ff 	mov.w	r2, #4294967295
 800c906:	e7f7      	b.n	800c8f8 <__mcmp+0x28>

0800c908 <__mdiff>:
 800c908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	460c      	mov	r4, r1
 800c90e:	4606      	mov	r6, r0
 800c910:	4611      	mov	r1, r2
 800c912:	4620      	mov	r0, r4
 800c914:	4690      	mov	r8, r2
 800c916:	f7ff ffdb 	bl	800c8d0 <__mcmp>
 800c91a:	1e05      	subs	r5, r0, #0
 800c91c:	d110      	bne.n	800c940 <__mdiff+0x38>
 800c91e:	4629      	mov	r1, r5
 800c920:	4630      	mov	r0, r6
 800c922:	f7ff fd0f 	bl	800c344 <_Balloc>
 800c926:	b930      	cbnz	r0, 800c936 <__mdiff+0x2e>
 800c928:	4b3a      	ldr	r3, [pc, #232]	; (800ca14 <__mdiff+0x10c>)
 800c92a:	4602      	mov	r2, r0
 800c92c:	f240 2137 	movw	r1, #567	; 0x237
 800c930:	4839      	ldr	r0, [pc, #228]	; (800ca18 <__mdiff+0x110>)
 800c932:	f000 fa7f 	bl	800ce34 <__assert_func>
 800c936:	2301      	movs	r3, #1
 800c938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c940:	bfa4      	itt	ge
 800c942:	4643      	movge	r3, r8
 800c944:	46a0      	movge	r8, r4
 800c946:	4630      	mov	r0, r6
 800c948:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c94c:	bfa6      	itte	ge
 800c94e:	461c      	movge	r4, r3
 800c950:	2500      	movge	r5, #0
 800c952:	2501      	movlt	r5, #1
 800c954:	f7ff fcf6 	bl	800c344 <_Balloc>
 800c958:	b920      	cbnz	r0, 800c964 <__mdiff+0x5c>
 800c95a:	4b2e      	ldr	r3, [pc, #184]	; (800ca14 <__mdiff+0x10c>)
 800c95c:	4602      	mov	r2, r0
 800c95e:	f240 2145 	movw	r1, #581	; 0x245
 800c962:	e7e5      	b.n	800c930 <__mdiff+0x28>
 800c964:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c968:	6926      	ldr	r6, [r4, #16]
 800c96a:	60c5      	str	r5, [r0, #12]
 800c96c:	f104 0914 	add.w	r9, r4, #20
 800c970:	f108 0514 	add.w	r5, r8, #20
 800c974:	f100 0e14 	add.w	lr, r0, #20
 800c978:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c97c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c980:	f108 0210 	add.w	r2, r8, #16
 800c984:	46f2      	mov	sl, lr
 800c986:	2100      	movs	r1, #0
 800c988:	f859 3b04 	ldr.w	r3, [r9], #4
 800c98c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c990:	fa11 f88b 	uxtah	r8, r1, fp
 800c994:	b299      	uxth	r1, r3
 800c996:	0c1b      	lsrs	r3, r3, #16
 800c998:	eba8 0801 	sub.w	r8, r8, r1
 800c99c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c9a4:	fa1f f888 	uxth.w	r8, r8
 800c9a8:	1419      	asrs	r1, r3, #16
 800c9aa:	454e      	cmp	r6, r9
 800c9ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c9b0:	f84a 3b04 	str.w	r3, [sl], #4
 800c9b4:	d8e8      	bhi.n	800c988 <__mdiff+0x80>
 800c9b6:	1b33      	subs	r3, r6, r4
 800c9b8:	3b15      	subs	r3, #21
 800c9ba:	f023 0303 	bic.w	r3, r3, #3
 800c9be:	3304      	adds	r3, #4
 800c9c0:	3415      	adds	r4, #21
 800c9c2:	42a6      	cmp	r6, r4
 800c9c4:	bf38      	it	cc
 800c9c6:	2304      	movcc	r3, #4
 800c9c8:	441d      	add	r5, r3
 800c9ca:	4473      	add	r3, lr
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	462e      	mov	r6, r5
 800c9d0:	4566      	cmp	r6, ip
 800c9d2:	d30e      	bcc.n	800c9f2 <__mdiff+0xea>
 800c9d4:	f10c 0203 	add.w	r2, ip, #3
 800c9d8:	1b52      	subs	r2, r2, r5
 800c9da:	f022 0203 	bic.w	r2, r2, #3
 800c9de:	3d03      	subs	r5, #3
 800c9e0:	45ac      	cmp	ip, r5
 800c9e2:	bf38      	it	cc
 800c9e4:	2200      	movcc	r2, #0
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c9ec:	b17a      	cbz	r2, 800ca0e <__mdiff+0x106>
 800c9ee:	6107      	str	r7, [r0, #16]
 800c9f0:	e7a4      	b.n	800c93c <__mdiff+0x34>
 800c9f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800c9f6:	fa11 f288 	uxtah	r2, r1, r8
 800c9fa:	1414      	asrs	r4, r2, #16
 800c9fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca00:	b292      	uxth	r2, r2
 800ca02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca06:	f84e 2b04 	str.w	r2, [lr], #4
 800ca0a:	1421      	asrs	r1, r4, #16
 800ca0c:	e7e0      	b.n	800c9d0 <__mdiff+0xc8>
 800ca0e:	3f01      	subs	r7, #1
 800ca10:	e7ea      	b.n	800c9e8 <__mdiff+0xe0>
 800ca12:	bf00      	nop
 800ca14:	0800ec80 	.word	0x0800ec80
 800ca18:	0800ed08 	.word	0x0800ed08

0800ca1c <__ulp>:
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	ed8d 0b00 	vstr	d0, [sp]
 800ca22:	9a01      	ldr	r2, [sp, #4]
 800ca24:	4b0f      	ldr	r3, [pc, #60]	; (800ca64 <__ulp+0x48>)
 800ca26:	4013      	ands	r3, r2
 800ca28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	dc08      	bgt.n	800ca42 <__ulp+0x26>
 800ca30:	425b      	negs	r3, r3
 800ca32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ca36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca3a:	da04      	bge.n	800ca46 <__ulp+0x2a>
 800ca3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca40:	4113      	asrs	r3, r2
 800ca42:	2200      	movs	r2, #0
 800ca44:	e008      	b.n	800ca58 <__ulp+0x3c>
 800ca46:	f1a2 0314 	sub.w	r3, r2, #20
 800ca4a:	2b1e      	cmp	r3, #30
 800ca4c:	bfda      	itte	le
 800ca4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ca52:	40da      	lsrle	r2, r3
 800ca54:	2201      	movgt	r2, #1
 800ca56:	2300      	movs	r3, #0
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	ec41 0b10 	vmov	d0, r0, r1
 800ca60:	b002      	add	sp, #8
 800ca62:	4770      	bx	lr
 800ca64:	7ff00000 	.word	0x7ff00000

0800ca68 <__b2d>:
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	6906      	ldr	r6, [r0, #16]
 800ca6e:	f100 0814 	add.w	r8, r0, #20
 800ca72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ca76:	1f37      	subs	r7, r6, #4
 800ca78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f7ff fd53 	bl	800c528 <__hi0bits>
 800ca82:	f1c0 0320 	rsb	r3, r0, #32
 800ca86:	280a      	cmp	r0, #10
 800ca88:	600b      	str	r3, [r1, #0]
 800ca8a:	491b      	ldr	r1, [pc, #108]	; (800caf8 <__b2d+0x90>)
 800ca8c:	dc15      	bgt.n	800caba <__b2d+0x52>
 800ca8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca92:	fa22 f30c 	lsr.w	r3, r2, ip
 800ca96:	45b8      	cmp	r8, r7
 800ca98:	ea43 0501 	orr.w	r5, r3, r1
 800ca9c:	bf34      	ite	cc
 800ca9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800caa2:	2300      	movcs	r3, #0
 800caa4:	3015      	adds	r0, #21
 800caa6:	fa02 f000 	lsl.w	r0, r2, r0
 800caaa:	fa23 f30c 	lsr.w	r3, r3, ip
 800caae:	4303      	orrs	r3, r0
 800cab0:	461c      	mov	r4, r3
 800cab2:	ec45 4b10 	vmov	d0, r4, r5
 800cab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caba:	45b8      	cmp	r8, r7
 800cabc:	bf3a      	itte	cc
 800cabe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cac2:	f1a6 0708 	subcc.w	r7, r6, #8
 800cac6:	2300      	movcs	r3, #0
 800cac8:	380b      	subs	r0, #11
 800caca:	d012      	beq.n	800caf2 <__b2d+0x8a>
 800cacc:	f1c0 0120 	rsb	r1, r0, #32
 800cad0:	fa23 f401 	lsr.w	r4, r3, r1
 800cad4:	4082      	lsls	r2, r0
 800cad6:	4322      	orrs	r2, r4
 800cad8:	4547      	cmp	r7, r8
 800cada:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cade:	bf8c      	ite	hi
 800cae0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cae4:	2200      	movls	r2, #0
 800cae6:	4083      	lsls	r3, r0
 800cae8:	40ca      	lsrs	r2, r1
 800caea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800caee:	4313      	orrs	r3, r2
 800caf0:	e7de      	b.n	800cab0 <__b2d+0x48>
 800caf2:	ea42 0501 	orr.w	r5, r2, r1
 800caf6:	e7db      	b.n	800cab0 <__b2d+0x48>
 800caf8:	3ff00000 	.word	0x3ff00000

0800cafc <__d2b>:
 800cafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb00:	460f      	mov	r7, r1
 800cb02:	2101      	movs	r1, #1
 800cb04:	ec59 8b10 	vmov	r8, r9, d0
 800cb08:	4616      	mov	r6, r2
 800cb0a:	f7ff fc1b 	bl	800c344 <_Balloc>
 800cb0e:	4604      	mov	r4, r0
 800cb10:	b930      	cbnz	r0, 800cb20 <__d2b+0x24>
 800cb12:	4602      	mov	r2, r0
 800cb14:	4b24      	ldr	r3, [pc, #144]	; (800cba8 <__d2b+0xac>)
 800cb16:	4825      	ldr	r0, [pc, #148]	; (800cbac <__d2b+0xb0>)
 800cb18:	f240 310f 	movw	r1, #783	; 0x30f
 800cb1c:	f000 f98a 	bl	800ce34 <__assert_func>
 800cb20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb28:	bb2d      	cbnz	r5, 800cb76 <__d2b+0x7a>
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	f1b8 0300 	subs.w	r3, r8, #0
 800cb30:	d026      	beq.n	800cb80 <__d2b+0x84>
 800cb32:	4668      	mov	r0, sp
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	f7ff fd17 	bl	800c568 <__lo0bits>
 800cb3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb3e:	b1e8      	cbz	r0, 800cb7c <__d2b+0x80>
 800cb40:	f1c0 0320 	rsb	r3, r0, #32
 800cb44:	fa02 f303 	lsl.w	r3, r2, r3
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	40c2      	lsrs	r2, r0
 800cb4c:	6163      	str	r3, [r4, #20]
 800cb4e:	9201      	str	r2, [sp, #4]
 800cb50:	9b01      	ldr	r3, [sp, #4]
 800cb52:	61a3      	str	r3, [r4, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	bf14      	ite	ne
 800cb58:	2202      	movne	r2, #2
 800cb5a:	2201      	moveq	r2, #1
 800cb5c:	6122      	str	r2, [r4, #16]
 800cb5e:	b1bd      	cbz	r5, 800cb90 <__d2b+0x94>
 800cb60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb64:	4405      	add	r5, r0
 800cb66:	603d      	str	r5, [r7, #0]
 800cb68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb6c:	6030      	str	r0, [r6, #0]
 800cb6e:	4620      	mov	r0, r4
 800cb70:	b003      	add	sp, #12
 800cb72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb7a:	e7d6      	b.n	800cb2a <__d2b+0x2e>
 800cb7c:	6161      	str	r1, [r4, #20]
 800cb7e:	e7e7      	b.n	800cb50 <__d2b+0x54>
 800cb80:	a801      	add	r0, sp, #4
 800cb82:	f7ff fcf1 	bl	800c568 <__lo0bits>
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	6163      	str	r3, [r4, #20]
 800cb8a:	3020      	adds	r0, #32
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	e7e5      	b.n	800cb5c <__d2b+0x60>
 800cb90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb98:	6038      	str	r0, [r7, #0]
 800cb9a:	6918      	ldr	r0, [r3, #16]
 800cb9c:	f7ff fcc4 	bl	800c528 <__hi0bits>
 800cba0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cba4:	e7e2      	b.n	800cb6c <__d2b+0x70>
 800cba6:	bf00      	nop
 800cba8:	0800ec80 	.word	0x0800ec80
 800cbac:	0800ed08 	.word	0x0800ed08

0800cbb0 <__ratio>:
 800cbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	4688      	mov	r8, r1
 800cbb6:	4669      	mov	r1, sp
 800cbb8:	4681      	mov	r9, r0
 800cbba:	f7ff ff55 	bl	800ca68 <__b2d>
 800cbbe:	a901      	add	r1, sp, #4
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	ec55 4b10 	vmov	r4, r5, d0
 800cbc6:	f7ff ff4f 	bl	800ca68 <__b2d>
 800cbca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cbd2:	eba3 0c02 	sub.w	ip, r3, r2
 800cbd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cbe0:	ec51 0b10 	vmov	r0, r1, d0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bfd6      	itet	le
 800cbe8:	460a      	movle	r2, r1
 800cbea:	462a      	movgt	r2, r5
 800cbec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbf0:	468b      	mov	fp, r1
 800cbf2:	462f      	mov	r7, r5
 800cbf4:	bfd4      	ite	le
 800cbf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cbfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbfe:	4620      	mov	r0, r4
 800cc00:	ee10 2a10 	vmov	r2, s0
 800cc04:	465b      	mov	r3, fp
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 fe38 	bl	800087c <__aeabi_ddiv>
 800cc0c:	ec41 0b10 	vmov	d0, r0, r1
 800cc10:	b003      	add	sp, #12
 800cc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc16 <__copybits>:
 800cc16:	3901      	subs	r1, #1
 800cc18:	b570      	push	{r4, r5, r6, lr}
 800cc1a:	1149      	asrs	r1, r1, #5
 800cc1c:	6914      	ldr	r4, [r2, #16]
 800cc1e:	3101      	adds	r1, #1
 800cc20:	f102 0314 	add.w	r3, r2, #20
 800cc24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc2c:	1f05      	subs	r5, r0, #4
 800cc2e:	42a3      	cmp	r3, r4
 800cc30:	d30c      	bcc.n	800cc4c <__copybits+0x36>
 800cc32:	1aa3      	subs	r3, r4, r2
 800cc34:	3b11      	subs	r3, #17
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	3211      	adds	r2, #17
 800cc3c:	42a2      	cmp	r2, r4
 800cc3e:	bf88      	it	hi
 800cc40:	2300      	movhi	r3, #0
 800cc42:	4418      	add	r0, r3
 800cc44:	2300      	movs	r3, #0
 800cc46:	4288      	cmp	r0, r1
 800cc48:	d305      	bcc.n	800cc56 <__copybits+0x40>
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc50:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc54:	e7eb      	b.n	800cc2e <__copybits+0x18>
 800cc56:	f840 3b04 	str.w	r3, [r0], #4
 800cc5a:	e7f4      	b.n	800cc46 <__copybits+0x30>

0800cc5c <__any_on>:
 800cc5c:	f100 0214 	add.w	r2, r0, #20
 800cc60:	6900      	ldr	r0, [r0, #16]
 800cc62:	114b      	asrs	r3, r1, #5
 800cc64:	4298      	cmp	r0, r3
 800cc66:	b510      	push	{r4, lr}
 800cc68:	db11      	blt.n	800cc8e <__any_on+0x32>
 800cc6a:	dd0a      	ble.n	800cc82 <__any_on+0x26>
 800cc6c:	f011 011f 	ands.w	r1, r1, #31
 800cc70:	d007      	beq.n	800cc82 <__any_on+0x26>
 800cc72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc76:	fa24 f001 	lsr.w	r0, r4, r1
 800cc7a:	fa00 f101 	lsl.w	r1, r0, r1
 800cc7e:	428c      	cmp	r4, r1
 800cc80:	d10b      	bne.n	800cc9a <__any_on+0x3e>
 800cc82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d803      	bhi.n	800cc92 <__any_on+0x36>
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	4603      	mov	r3, r0
 800cc90:	e7f7      	b.n	800cc82 <__any_on+0x26>
 800cc92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc96:	2900      	cmp	r1, #0
 800cc98:	d0f5      	beq.n	800cc86 <__any_on+0x2a>
 800cc9a:	2001      	movs	r0, #1
 800cc9c:	e7f6      	b.n	800cc8c <__any_on+0x30>

0800cc9e <__ascii_wctomb>:
 800cc9e:	b149      	cbz	r1, 800ccb4 <__ascii_wctomb+0x16>
 800cca0:	2aff      	cmp	r2, #255	; 0xff
 800cca2:	bf85      	ittet	hi
 800cca4:	238a      	movhi	r3, #138	; 0x8a
 800cca6:	6003      	strhi	r3, [r0, #0]
 800cca8:	700a      	strbls	r2, [r1, #0]
 800ccaa:	f04f 30ff 	movhi.w	r0, #4294967295
 800ccae:	bf98      	it	ls
 800ccb0:	2001      	movls	r0, #1
 800ccb2:	4770      	bx	lr
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	4770      	bx	lr

0800ccb8 <__sflush_r>:
 800ccb8:	898a      	ldrh	r2, [r1, #12]
 800ccba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	0710      	lsls	r0, r2, #28
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	d458      	bmi.n	800cd78 <__sflush_r+0xc0>
 800ccc6:	684b      	ldr	r3, [r1, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dc05      	bgt.n	800ccd8 <__sflush_r+0x20>
 800cccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	dc02      	bgt.n	800ccd8 <__sflush_r+0x20>
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccda:	2e00      	cmp	r6, #0
 800ccdc:	d0f9      	beq.n	800ccd2 <__sflush_r+0x1a>
 800ccde:	2300      	movs	r3, #0
 800cce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cce4:	682f      	ldr	r7, [r5, #0]
 800cce6:	6a21      	ldr	r1, [r4, #32]
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	d032      	beq.n	800cd52 <__sflush_r+0x9a>
 800ccec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	075a      	lsls	r2, r3, #29
 800ccf2:	d505      	bpl.n	800cd00 <__sflush_r+0x48>
 800ccf4:	6863      	ldr	r3, [r4, #4]
 800ccf6:	1ac0      	subs	r0, r0, r3
 800ccf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccfa:	b10b      	cbz	r3, 800cd00 <__sflush_r+0x48>
 800ccfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccfe:	1ac0      	subs	r0, r0, r3
 800cd00:	2300      	movs	r3, #0
 800cd02:	4602      	mov	r2, r0
 800cd04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd06:	6a21      	ldr	r1, [r4, #32]
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b0      	blx	r6
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	d106      	bne.n	800cd20 <__sflush_r+0x68>
 800cd12:	6829      	ldr	r1, [r5, #0]
 800cd14:	291d      	cmp	r1, #29
 800cd16:	d82b      	bhi.n	800cd70 <__sflush_r+0xb8>
 800cd18:	4a29      	ldr	r2, [pc, #164]	; (800cdc0 <__sflush_r+0x108>)
 800cd1a:	410a      	asrs	r2, r1
 800cd1c:	07d6      	lsls	r6, r2, #31
 800cd1e:	d427      	bmi.n	800cd70 <__sflush_r+0xb8>
 800cd20:	2200      	movs	r2, #0
 800cd22:	6062      	str	r2, [r4, #4]
 800cd24:	04d9      	lsls	r1, r3, #19
 800cd26:	6922      	ldr	r2, [r4, #16]
 800cd28:	6022      	str	r2, [r4, #0]
 800cd2a:	d504      	bpl.n	800cd36 <__sflush_r+0x7e>
 800cd2c:	1c42      	adds	r2, r0, #1
 800cd2e:	d101      	bne.n	800cd34 <__sflush_r+0x7c>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	b903      	cbnz	r3, 800cd36 <__sflush_r+0x7e>
 800cd34:	6560      	str	r0, [r4, #84]	; 0x54
 800cd36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd38:	602f      	str	r7, [r5, #0]
 800cd3a:	2900      	cmp	r1, #0
 800cd3c:	d0c9      	beq.n	800ccd2 <__sflush_r+0x1a>
 800cd3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd42:	4299      	cmp	r1, r3
 800cd44:	d002      	beq.n	800cd4c <__sflush_r+0x94>
 800cd46:	4628      	mov	r0, r5
 800cd48:	f7fe fe9a 	bl	800ba80 <_free_r>
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	6360      	str	r0, [r4, #52]	; 0x34
 800cd50:	e7c0      	b.n	800ccd4 <__sflush_r+0x1c>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4628      	mov	r0, r5
 800cd56:	47b0      	blx	r6
 800cd58:	1c41      	adds	r1, r0, #1
 800cd5a:	d1c8      	bne.n	800ccee <__sflush_r+0x36>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0c5      	beq.n	800ccee <__sflush_r+0x36>
 800cd62:	2b1d      	cmp	r3, #29
 800cd64:	d001      	beq.n	800cd6a <__sflush_r+0xb2>
 800cd66:	2b16      	cmp	r3, #22
 800cd68:	d101      	bne.n	800cd6e <__sflush_r+0xb6>
 800cd6a:	602f      	str	r7, [r5, #0]
 800cd6c:	e7b1      	b.n	800ccd2 <__sflush_r+0x1a>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd74:	81a3      	strh	r3, [r4, #12]
 800cd76:	e7ad      	b.n	800ccd4 <__sflush_r+0x1c>
 800cd78:	690f      	ldr	r7, [r1, #16]
 800cd7a:	2f00      	cmp	r7, #0
 800cd7c:	d0a9      	beq.n	800ccd2 <__sflush_r+0x1a>
 800cd7e:	0793      	lsls	r3, r2, #30
 800cd80:	680e      	ldr	r6, [r1, #0]
 800cd82:	bf08      	it	eq
 800cd84:	694b      	ldreq	r3, [r1, #20]
 800cd86:	600f      	str	r7, [r1, #0]
 800cd88:	bf18      	it	ne
 800cd8a:	2300      	movne	r3, #0
 800cd8c:	eba6 0807 	sub.w	r8, r6, r7
 800cd90:	608b      	str	r3, [r1, #8]
 800cd92:	f1b8 0f00 	cmp.w	r8, #0
 800cd96:	dd9c      	ble.n	800ccd2 <__sflush_r+0x1a>
 800cd98:	6a21      	ldr	r1, [r4, #32]
 800cd9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd9c:	4643      	mov	r3, r8
 800cd9e:	463a      	mov	r2, r7
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b0      	blx	r6
 800cda4:	2800      	cmp	r0, #0
 800cda6:	dc06      	bgt.n	800cdb6 <__sflush_r+0xfe>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb4:	e78e      	b.n	800ccd4 <__sflush_r+0x1c>
 800cdb6:	4407      	add	r7, r0
 800cdb8:	eba8 0800 	sub.w	r8, r8, r0
 800cdbc:	e7e9      	b.n	800cd92 <__sflush_r+0xda>
 800cdbe:	bf00      	nop
 800cdc0:	dfbffffe 	.word	0xdfbffffe

0800cdc4 <_fflush_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	690b      	ldr	r3, [r1, #16]
 800cdc8:	4605      	mov	r5, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	b913      	cbnz	r3, 800cdd4 <_fflush_r+0x10>
 800cdce:	2500      	movs	r5, #0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	b118      	cbz	r0, 800cdde <_fflush_r+0x1a>
 800cdd6:	6a03      	ldr	r3, [r0, #32]
 800cdd8:	b90b      	cbnz	r3, 800cdde <_fflush_r+0x1a>
 800cdda:	f7fe fcdd 	bl	800b798 <__sinit>
 800cdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0f3      	beq.n	800cdce <_fflush_r+0xa>
 800cde6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cde8:	07d0      	lsls	r0, r2, #31
 800cdea:	d404      	bmi.n	800cdf6 <_fflush_r+0x32>
 800cdec:	0599      	lsls	r1, r3, #22
 800cdee:	d402      	bmi.n	800cdf6 <_fflush_r+0x32>
 800cdf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdf2:	f7fe fe2c 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f7ff ff5d 	bl	800ccb8 <__sflush_r>
 800cdfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce00:	07da      	lsls	r2, r3, #31
 800ce02:	4605      	mov	r5, r0
 800ce04:	d4e4      	bmi.n	800cdd0 <_fflush_r+0xc>
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	059b      	lsls	r3, r3, #22
 800ce0a:	d4e1      	bmi.n	800cdd0 <_fflush_r+0xc>
 800ce0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce0e:	f7fe fe1f 	bl	800ba50 <__retarget_lock_release_recursive>
 800ce12:	e7dd      	b.n	800cdd0 <_fflush_r+0xc>

0800ce14 <_sbrk_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d06      	ldr	r5, [pc, #24]	; (800ce30 <_sbrk_r+0x1c>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f7 fc0c 	bl	800463c <_sbrk>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_sbrk_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_sbrk_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	20004898 	.word	0x20004898

0800ce34 <__assert_func>:
 800ce34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce36:	4614      	mov	r4, r2
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <__assert_func+0x2c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4605      	mov	r5, r0
 800ce40:	68d8      	ldr	r0, [r3, #12]
 800ce42:	b14c      	cbz	r4, 800ce58 <__assert_func+0x24>
 800ce44:	4b07      	ldr	r3, [pc, #28]	; (800ce64 <__assert_func+0x30>)
 800ce46:	9100      	str	r1, [sp, #0]
 800ce48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce4c:	4906      	ldr	r1, [pc, #24]	; (800ce68 <__assert_func+0x34>)
 800ce4e:	462b      	mov	r3, r5
 800ce50:	f000 f82c 	bl	800ceac <fiprintf>
 800ce54:	f000 f83c 	bl	800ced0 <abort>
 800ce58:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <__assert_func+0x38>)
 800ce5a:	461c      	mov	r4, r3
 800ce5c:	e7f3      	b.n	800ce46 <__assert_func+0x12>
 800ce5e:	bf00      	nop
 800ce60:	20000240 	.word	0x20000240
 800ce64:	0800ef65 	.word	0x0800ef65
 800ce68:	0800ef72 	.word	0x0800ef72
 800ce6c:	0800efa0 	.word	0x0800efa0

0800ce70 <_calloc_r>:
 800ce70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce72:	fba1 2402 	umull	r2, r4, r1, r2
 800ce76:	b94c      	cbnz	r4, 800ce8c <_calloc_r+0x1c>
 800ce78:	4611      	mov	r1, r2
 800ce7a:	9201      	str	r2, [sp, #4]
 800ce7c:	f7ff f9c4 	bl	800c208 <_malloc_r>
 800ce80:	9a01      	ldr	r2, [sp, #4]
 800ce82:	4605      	mov	r5, r0
 800ce84:	b930      	cbnz	r0, 800ce94 <_calloc_r+0x24>
 800ce86:	4628      	mov	r0, r5
 800ce88:	b003      	add	sp, #12
 800ce8a:	bd30      	pop	{r4, r5, pc}
 800ce8c:	220c      	movs	r2, #12
 800ce8e:	6002      	str	r2, [r0, #0]
 800ce90:	2500      	movs	r5, #0
 800ce92:	e7f8      	b.n	800ce86 <_calloc_r+0x16>
 800ce94:	4621      	mov	r1, r4
 800ce96:	f7fe fcf8 	bl	800b88a <memset>
 800ce9a:	e7f4      	b.n	800ce86 <_calloc_r+0x16>

0800ce9c <malloc>:
 800ce9c:	4b02      	ldr	r3, [pc, #8]	; (800cea8 <malloc+0xc>)
 800ce9e:	4601      	mov	r1, r0
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	f7ff b9b1 	b.w	800c208 <_malloc_r>
 800cea6:	bf00      	nop
 800cea8:	20000240 	.word	0x20000240

0800ceac <fiprintf>:
 800ceac:	b40e      	push	{r1, r2, r3}
 800ceae:	b503      	push	{r0, r1, lr}
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	ab03      	add	r3, sp, #12
 800ceb4:	4805      	ldr	r0, [pc, #20]	; (800cecc <fiprintf+0x20>)
 800ceb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceba:	6800      	ldr	r0, [r0, #0]
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	f000 f837 	bl	800cf30 <_vfiprintf_r>
 800cec2:	b002      	add	sp, #8
 800cec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec8:	b003      	add	sp, #12
 800ceca:	4770      	bx	lr
 800cecc:	20000240 	.word	0x20000240

0800ced0 <abort>:
 800ced0:	b508      	push	{r3, lr}
 800ced2:	2006      	movs	r0, #6
 800ced4:	f000 fb94 	bl	800d600 <raise>
 800ced8:	2001      	movs	r0, #1
 800ceda:	f7f7 fb37 	bl	800454c <_exit>

0800cede <__sfputc_r>:
 800cede:	6893      	ldr	r3, [r2, #8]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	b410      	push	{r4}
 800cee6:	6093      	str	r3, [r2, #8]
 800cee8:	da08      	bge.n	800cefc <__sfputc_r+0x1e>
 800ceea:	6994      	ldr	r4, [r2, #24]
 800ceec:	42a3      	cmp	r3, r4
 800ceee:	db01      	blt.n	800cef4 <__sfputc_r+0x16>
 800cef0:	290a      	cmp	r1, #10
 800cef2:	d103      	bne.n	800cefc <__sfputc_r+0x1e>
 800cef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef8:	f000 bac4 	b.w	800d484 <__swbuf_r>
 800cefc:	6813      	ldr	r3, [r2, #0]
 800cefe:	1c58      	adds	r0, r3, #1
 800cf00:	6010      	str	r0, [r2, #0]
 800cf02:	7019      	strb	r1, [r3, #0]
 800cf04:	4608      	mov	r0, r1
 800cf06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <__sfputs_r>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	4606      	mov	r6, r0
 800cf10:	460f      	mov	r7, r1
 800cf12:	4614      	mov	r4, r2
 800cf14:	18d5      	adds	r5, r2, r3
 800cf16:	42ac      	cmp	r4, r5
 800cf18:	d101      	bne.n	800cf1e <__sfputs_r+0x12>
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e007      	b.n	800cf2e <__sfputs_r+0x22>
 800cf1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf22:	463a      	mov	r2, r7
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7ff ffda 	bl	800cede <__sfputc_r>
 800cf2a:	1c43      	adds	r3, r0, #1
 800cf2c:	d1f3      	bne.n	800cf16 <__sfputs_r+0xa>
 800cf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf30 <_vfiprintf_r>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	460d      	mov	r5, r1
 800cf36:	b09d      	sub	sp, #116	; 0x74
 800cf38:	4614      	mov	r4, r2
 800cf3a:	4698      	mov	r8, r3
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	b118      	cbz	r0, 800cf48 <_vfiprintf_r+0x18>
 800cf40:	6a03      	ldr	r3, [r0, #32]
 800cf42:	b90b      	cbnz	r3, 800cf48 <_vfiprintf_r+0x18>
 800cf44:	f7fe fc28 	bl	800b798 <__sinit>
 800cf48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf4a:	07d9      	lsls	r1, r3, #31
 800cf4c:	d405      	bmi.n	800cf5a <_vfiprintf_r+0x2a>
 800cf4e:	89ab      	ldrh	r3, [r5, #12]
 800cf50:	059a      	lsls	r2, r3, #22
 800cf52:	d402      	bmi.n	800cf5a <_vfiprintf_r+0x2a>
 800cf54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf56:	f7fe fd7a 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	071b      	lsls	r3, r3, #28
 800cf5e:	d501      	bpl.n	800cf64 <_vfiprintf_r+0x34>
 800cf60:	692b      	ldr	r3, [r5, #16]
 800cf62:	b99b      	cbnz	r3, 800cf8c <_vfiprintf_r+0x5c>
 800cf64:	4629      	mov	r1, r5
 800cf66:	4630      	mov	r0, r6
 800cf68:	f000 faca 	bl	800d500 <__swsetup_r>
 800cf6c:	b170      	cbz	r0, 800cf8c <_vfiprintf_r+0x5c>
 800cf6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf70:	07dc      	lsls	r4, r3, #31
 800cf72:	d504      	bpl.n	800cf7e <_vfiprintf_r+0x4e>
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	b01d      	add	sp, #116	; 0x74
 800cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7e:	89ab      	ldrh	r3, [r5, #12]
 800cf80:	0598      	lsls	r0, r3, #22
 800cf82:	d4f7      	bmi.n	800cf74 <_vfiprintf_r+0x44>
 800cf84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf86:	f7fe fd63 	bl	800ba50 <__retarget_lock_release_recursive>
 800cf8a:	e7f3      	b.n	800cf74 <_vfiprintf_r+0x44>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf90:	2320      	movs	r3, #32
 800cf92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf96:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf9a:	2330      	movs	r3, #48	; 0x30
 800cf9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d150 <_vfiprintf_r+0x220>
 800cfa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa4:	f04f 0901 	mov.w	r9, #1
 800cfa8:	4623      	mov	r3, r4
 800cfaa:	469a      	mov	sl, r3
 800cfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb0:	b10a      	cbz	r2, 800cfb6 <_vfiprintf_r+0x86>
 800cfb2:	2a25      	cmp	r2, #37	; 0x25
 800cfb4:	d1f9      	bne.n	800cfaa <_vfiprintf_r+0x7a>
 800cfb6:	ebba 0b04 	subs.w	fp, sl, r4
 800cfba:	d00b      	beq.n	800cfd4 <_vfiprintf_r+0xa4>
 800cfbc:	465b      	mov	r3, fp
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff ffa2 	bl	800cf0c <__sfputs_r>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	f000 80a9 	beq.w	800d120 <_vfiprintf_r+0x1f0>
 800cfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfd0:	445a      	add	r2, fp
 800cfd2:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80a1 	beq.w	800d120 <_vfiprintf_r+0x1f0>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe8:	f10a 0a01 	add.w	sl, sl, #1
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	9307      	str	r3, [sp, #28]
 800cff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cff4:	931a      	str	r3, [sp, #104]	; 0x68
 800cff6:	4654      	mov	r4, sl
 800cff8:	2205      	movs	r2, #5
 800cffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffe:	4854      	ldr	r0, [pc, #336]	; (800d150 <_vfiprintf_r+0x220>)
 800d000:	f7f3 f906 	bl	8000210 <memchr>
 800d004:	9a04      	ldr	r2, [sp, #16]
 800d006:	b9d8      	cbnz	r0, 800d040 <_vfiprintf_r+0x110>
 800d008:	06d1      	lsls	r1, r2, #27
 800d00a:	bf44      	itt	mi
 800d00c:	2320      	movmi	r3, #32
 800d00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d012:	0713      	lsls	r3, r2, #28
 800d014:	bf44      	itt	mi
 800d016:	232b      	movmi	r3, #43	; 0x2b
 800d018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d01c:	f89a 3000 	ldrb.w	r3, [sl]
 800d020:	2b2a      	cmp	r3, #42	; 0x2a
 800d022:	d015      	beq.n	800d050 <_vfiprintf_r+0x120>
 800d024:	9a07      	ldr	r2, [sp, #28]
 800d026:	4654      	mov	r4, sl
 800d028:	2000      	movs	r0, #0
 800d02a:	f04f 0c0a 	mov.w	ip, #10
 800d02e:	4621      	mov	r1, r4
 800d030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d034:	3b30      	subs	r3, #48	; 0x30
 800d036:	2b09      	cmp	r3, #9
 800d038:	d94d      	bls.n	800d0d6 <_vfiprintf_r+0x1a6>
 800d03a:	b1b0      	cbz	r0, 800d06a <_vfiprintf_r+0x13a>
 800d03c:	9207      	str	r2, [sp, #28]
 800d03e:	e014      	b.n	800d06a <_vfiprintf_r+0x13a>
 800d040:	eba0 0308 	sub.w	r3, r0, r8
 800d044:	fa09 f303 	lsl.w	r3, r9, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	46a2      	mov	sl, r4
 800d04e:	e7d2      	b.n	800cff6 <_vfiprintf_r+0xc6>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	1d19      	adds	r1, r3, #4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	9103      	str	r1, [sp, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bfbb      	ittet	lt
 800d05c:	425b      	neglt	r3, r3
 800d05e:	f042 0202 	orrlt.w	r2, r2, #2
 800d062:	9307      	strge	r3, [sp, #28]
 800d064:	9307      	strlt	r3, [sp, #28]
 800d066:	bfb8      	it	lt
 800d068:	9204      	strlt	r2, [sp, #16]
 800d06a:	7823      	ldrb	r3, [r4, #0]
 800d06c:	2b2e      	cmp	r3, #46	; 0x2e
 800d06e:	d10c      	bne.n	800d08a <_vfiprintf_r+0x15a>
 800d070:	7863      	ldrb	r3, [r4, #1]
 800d072:	2b2a      	cmp	r3, #42	; 0x2a
 800d074:	d134      	bne.n	800d0e0 <_vfiprintf_r+0x1b0>
 800d076:	9b03      	ldr	r3, [sp, #12]
 800d078:	1d1a      	adds	r2, r3, #4
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	9203      	str	r2, [sp, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	bfb8      	it	lt
 800d082:	f04f 33ff 	movlt.w	r3, #4294967295
 800d086:	3402      	adds	r4, #2
 800d088:	9305      	str	r3, [sp, #20]
 800d08a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d160 <_vfiprintf_r+0x230>
 800d08e:	7821      	ldrb	r1, [r4, #0]
 800d090:	2203      	movs	r2, #3
 800d092:	4650      	mov	r0, sl
 800d094:	f7f3 f8bc 	bl	8000210 <memchr>
 800d098:	b138      	cbz	r0, 800d0aa <_vfiprintf_r+0x17a>
 800d09a:	9b04      	ldr	r3, [sp, #16]
 800d09c:	eba0 000a 	sub.w	r0, r0, sl
 800d0a0:	2240      	movs	r2, #64	; 0x40
 800d0a2:	4082      	lsls	r2, r0
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	3401      	adds	r4, #1
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ae:	4829      	ldr	r0, [pc, #164]	; (800d154 <_vfiprintf_r+0x224>)
 800d0b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0b4:	2206      	movs	r2, #6
 800d0b6:	f7f3 f8ab 	bl	8000210 <memchr>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d03f      	beq.n	800d13e <_vfiprintf_r+0x20e>
 800d0be:	4b26      	ldr	r3, [pc, #152]	; (800d158 <_vfiprintf_r+0x228>)
 800d0c0:	bb1b      	cbnz	r3, 800d10a <_vfiprintf_r+0x1da>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	3307      	adds	r3, #7
 800d0c6:	f023 0307 	bic.w	r3, r3, #7
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	9303      	str	r3, [sp, #12]
 800d0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d0:	443b      	add	r3, r7
 800d0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d4:	e768      	b.n	800cfa8 <_vfiprintf_r+0x78>
 800d0d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0da:	460c      	mov	r4, r1
 800d0dc:	2001      	movs	r0, #1
 800d0de:	e7a6      	b.n	800d02e <_vfiprintf_r+0xfe>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	3401      	adds	r4, #1
 800d0e4:	9305      	str	r3, [sp, #20]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	f04f 0c0a 	mov.w	ip, #10
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f2:	3a30      	subs	r2, #48	; 0x30
 800d0f4:	2a09      	cmp	r2, #9
 800d0f6:	d903      	bls.n	800d100 <_vfiprintf_r+0x1d0>
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0c6      	beq.n	800d08a <_vfiprintf_r+0x15a>
 800d0fc:	9105      	str	r1, [sp, #20]
 800d0fe:	e7c4      	b.n	800d08a <_vfiprintf_r+0x15a>
 800d100:	fb0c 2101 	mla	r1, ip, r1, r2
 800d104:	4604      	mov	r4, r0
 800d106:	2301      	movs	r3, #1
 800d108:	e7f0      	b.n	800d0ec <_vfiprintf_r+0x1bc>
 800d10a:	ab03      	add	r3, sp, #12
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	462a      	mov	r2, r5
 800d110:	4b12      	ldr	r3, [pc, #72]	; (800d15c <_vfiprintf_r+0x22c>)
 800d112:	a904      	add	r1, sp, #16
 800d114:	4630      	mov	r0, r6
 800d116:	f3af 8000 	nop.w
 800d11a:	4607      	mov	r7, r0
 800d11c:	1c78      	adds	r0, r7, #1
 800d11e:	d1d6      	bne.n	800d0ce <_vfiprintf_r+0x19e>
 800d120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d122:	07d9      	lsls	r1, r3, #31
 800d124:	d405      	bmi.n	800d132 <_vfiprintf_r+0x202>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	059a      	lsls	r2, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_vfiprintf_r+0x202>
 800d12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12e:	f7fe fc8f 	bl	800ba50 <__retarget_lock_release_recursive>
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	065b      	lsls	r3, r3, #25
 800d136:	f53f af1d 	bmi.w	800cf74 <_vfiprintf_r+0x44>
 800d13a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d13c:	e71c      	b.n	800cf78 <_vfiprintf_r+0x48>
 800d13e:	ab03      	add	r3, sp, #12
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	462a      	mov	r2, r5
 800d144:	4b05      	ldr	r3, [pc, #20]	; (800d15c <_vfiprintf_r+0x22c>)
 800d146:	a904      	add	r1, sp, #16
 800d148:	4630      	mov	r0, r6
 800d14a:	f000 f879 	bl	800d240 <_printf_i>
 800d14e:	e7e4      	b.n	800d11a <_vfiprintf_r+0x1ea>
 800d150:	0800efa1 	.word	0x0800efa1
 800d154:	0800efab 	.word	0x0800efab
 800d158:	00000000 	.word	0x00000000
 800d15c:	0800cf0d 	.word	0x0800cf0d
 800d160:	0800efa7 	.word	0x0800efa7

0800d164 <_printf_common>:
 800d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d168:	4616      	mov	r6, r2
 800d16a:	4699      	mov	r9, r3
 800d16c:	688a      	ldr	r2, [r1, #8]
 800d16e:	690b      	ldr	r3, [r1, #16]
 800d170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d174:	4293      	cmp	r3, r2
 800d176:	bfb8      	it	lt
 800d178:	4613      	movlt	r3, r2
 800d17a:	6033      	str	r3, [r6, #0]
 800d17c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d180:	4607      	mov	r7, r0
 800d182:	460c      	mov	r4, r1
 800d184:	b10a      	cbz	r2, 800d18a <_printf_common+0x26>
 800d186:	3301      	adds	r3, #1
 800d188:	6033      	str	r3, [r6, #0]
 800d18a:	6823      	ldr	r3, [r4, #0]
 800d18c:	0699      	lsls	r1, r3, #26
 800d18e:	bf42      	ittt	mi
 800d190:	6833      	ldrmi	r3, [r6, #0]
 800d192:	3302      	addmi	r3, #2
 800d194:	6033      	strmi	r3, [r6, #0]
 800d196:	6825      	ldr	r5, [r4, #0]
 800d198:	f015 0506 	ands.w	r5, r5, #6
 800d19c:	d106      	bne.n	800d1ac <_printf_common+0x48>
 800d19e:	f104 0a19 	add.w	sl, r4, #25
 800d1a2:	68e3      	ldr	r3, [r4, #12]
 800d1a4:	6832      	ldr	r2, [r6, #0]
 800d1a6:	1a9b      	subs	r3, r3, r2
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	dc26      	bgt.n	800d1fa <_printf_common+0x96>
 800d1ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1b0:	1e13      	subs	r3, r2, #0
 800d1b2:	6822      	ldr	r2, [r4, #0]
 800d1b4:	bf18      	it	ne
 800d1b6:	2301      	movne	r3, #1
 800d1b8:	0692      	lsls	r2, r2, #26
 800d1ba:	d42b      	bmi.n	800d214 <_printf_common+0xb0>
 800d1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	47c0      	blx	r8
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	d01e      	beq.n	800d208 <_printf_common+0xa4>
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	6922      	ldr	r2, [r4, #16]
 800d1ce:	f003 0306 	and.w	r3, r3, #6
 800d1d2:	2b04      	cmp	r3, #4
 800d1d4:	bf02      	ittt	eq
 800d1d6:	68e5      	ldreq	r5, [r4, #12]
 800d1d8:	6833      	ldreq	r3, [r6, #0]
 800d1da:	1aed      	subeq	r5, r5, r3
 800d1dc:	68a3      	ldr	r3, [r4, #8]
 800d1de:	bf0c      	ite	eq
 800d1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1e4:	2500      	movne	r5, #0
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	bfc4      	itt	gt
 800d1ea:	1a9b      	subgt	r3, r3, r2
 800d1ec:	18ed      	addgt	r5, r5, r3
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	341a      	adds	r4, #26
 800d1f2:	42b5      	cmp	r5, r6
 800d1f4:	d11a      	bne.n	800d22c <_printf_common+0xc8>
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	e008      	b.n	800d20c <_printf_common+0xa8>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4652      	mov	r2, sl
 800d1fe:	4649      	mov	r1, r9
 800d200:	4638      	mov	r0, r7
 800d202:	47c0      	blx	r8
 800d204:	3001      	adds	r0, #1
 800d206:	d103      	bne.n	800d210 <_printf_common+0xac>
 800d208:	f04f 30ff 	mov.w	r0, #4294967295
 800d20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d210:	3501      	adds	r5, #1
 800d212:	e7c6      	b.n	800d1a2 <_printf_common+0x3e>
 800d214:	18e1      	adds	r1, r4, r3
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	2030      	movs	r0, #48	; 0x30
 800d21a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d21e:	4422      	add	r2, r4
 800d220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d228:	3302      	adds	r3, #2
 800d22a:	e7c7      	b.n	800d1bc <_printf_common+0x58>
 800d22c:	2301      	movs	r3, #1
 800d22e:	4622      	mov	r2, r4
 800d230:	4649      	mov	r1, r9
 800d232:	4638      	mov	r0, r7
 800d234:	47c0      	blx	r8
 800d236:	3001      	adds	r0, #1
 800d238:	d0e6      	beq.n	800d208 <_printf_common+0xa4>
 800d23a:	3601      	adds	r6, #1
 800d23c:	e7d9      	b.n	800d1f2 <_printf_common+0x8e>
	...

0800d240 <_printf_i>:
 800d240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d244:	7e0f      	ldrb	r7, [r1, #24]
 800d246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d248:	2f78      	cmp	r7, #120	; 0x78
 800d24a:	4691      	mov	r9, r2
 800d24c:	4680      	mov	r8, r0
 800d24e:	460c      	mov	r4, r1
 800d250:	469a      	mov	sl, r3
 800d252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d256:	d807      	bhi.n	800d268 <_printf_i+0x28>
 800d258:	2f62      	cmp	r7, #98	; 0x62
 800d25a:	d80a      	bhi.n	800d272 <_printf_i+0x32>
 800d25c:	2f00      	cmp	r7, #0
 800d25e:	f000 80d4 	beq.w	800d40a <_printf_i+0x1ca>
 800d262:	2f58      	cmp	r7, #88	; 0x58
 800d264:	f000 80c0 	beq.w	800d3e8 <_printf_i+0x1a8>
 800d268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d270:	e03a      	b.n	800d2e8 <_printf_i+0xa8>
 800d272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d276:	2b15      	cmp	r3, #21
 800d278:	d8f6      	bhi.n	800d268 <_printf_i+0x28>
 800d27a:	a101      	add	r1, pc, #4	; (adr r1, 800d280 <_printf_i+0x40>)
 800d27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d280:	0800d2d9 	.word	0x0800d2d9
 800d284:	0800d2ed 	.word	0x0800d2ed
 800d288:	0800d269 	.word	0x0800d269
 800d28c:	0800d269 	.word	0x0800d269
 800d290:	0800d269 	.word	0x0800d269
 800d294:	0800d269 	.word	0x0800d269
 800d298:	0800d2ed 	.word	0x0800d2ed
 800d29c:	0800d269 	.word	0x0800d269
 800d2a0:	0800d269 	.word	0x0800d269
 800d2a4:	0800d269 	.word	0x0800d269
 800d2a8:	0800d269 	.word	0x0800d269
 800d2ac:	0800d3f1 	.word	0x0800d3f1
 800d2b0:	0800d319 	.word	0x0800d319
 800d2b4:	0800d3ab 	.word	0x0800d3ab
 800d2b8:	0800d269 	.word	0x0800d269
 800d2bc:	0800d269 	.word	0x0800d269
 800d2c0:	0800d413 	.word	0x0800d413
 800d2c4:	0800d269 	.word	0x0800d269
 800d2c8:	0800d319 	.word	0x0800d319
 800d2cc:	0800d269 	.word	0x0800d269
 800d2d0:	0800d269 	.word	0x0800d269
 800d2d4:	0800d3b3 	.word	0x0800d3b3
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	1d1a      	adds	r2, r3, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	602a      	str	r2, [r5, #0]
 800d2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e09f      	b.n	800d42c <_printf_i+0x1ec>
 800d2ec:	6820      	ldr	r0, [r4, #0]
 800d2ee:	682b      	ldr	r3, [r5, #0]
 800d2f0:	0607      	lsls	r7, r0, #24
 800d2f2:	f103 0104 	add.w	r1, r3, #4
 800d2f6:	6029      	str	r1, [r5, #0]
 800d2f8:	d501      	bpl.n	800d2fe <_printf_i+0xbe>
 800d2fa:	681e      	ldr	r6, [r3, #0]
 800d2fc:	e003      	b.n	800d306 <_printf_i+0xc6>
 800d2fe:	0646      	lsls	r6, r0, #25
 800d300:	d5fb      	bpl.n	800d2fa <_printf_i+0xba>
 800d302:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d306:	2e00      	cmp	r6, #0
 800d308:	da03      	bge.n	800d312 <_printf_i+0xd2>
 800d30a:	232d      	movs	r3, #45	; 0x2d
 800d30c:	4276      	negs	r6, r6
 800d30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d312:	485a      	ldr	r0, [pc, #360]	; (800d47c <_printf_i+0x23c>)
 800d314:	230a      	movs	r3, #10
 800d316:	e012      	b.n	800d33e <_printf_i+0xfe>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	6820      	ldr	r0, [r4, #0]
 800d31c:	1d19      	adds	r1, r3, #4
 800d31e:	6029      	str	r1, [r5, #0]
 800d320:	0605      	lsls	r5, r0, #24
 800d322:	d501      	bpl.n	800d328 <_printf_i+0xe8>
 800d324:	681e      	ldr	r6, [r3, #0]
 800d326:	e002      	b.n	800d32e <_printf_i+0xee>
 800d328:	0641      	lsls	r1, r0, #25
 800d32a:	d5fb      	bpl.n	800d324 <_printf_i+0xe4>
 800d32c:	881e      	ldrh	r6, [r3, #0]
 800d32e:	4853      	ldr	r0, [pc, #332]	; (800d47c <_printf_i+0x23c>)
 800d330:	2f6f      	cmp	r7, #111	; 0x6f
 800d332:	bf0c      	ite	eq
 800d334:	2308      	moveq	r3, #8
 800d336:	230a      	movne	r3, #10
 800d338:	2100      	movs	r1, #0
 800d33a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d33e:	6865      	ldr	r5, [r4, #4]
 800d340:	60a5      	str	r5, [r4, #8]
 800d342:	2d00      	cmp	r5, #0
 800d344:	bfa2      	ittt	ge
 800d346:	6821      	ldrge	r1, [r4, #0]
 800d348:	f021 0104 	bicge.w	r1, r1, #4
 800d34c:	6021      	strge	r1, [r4, #0]
 800d34e:	b90e      	cbnz	r6, 800d354 <_printf_i+0x114>
 800d350:	2d00      	cmp	r5, #0
 800d352:	d04b      	beq.n	800d3ec <_printf_i+0x1ac>
 800d354:	4615      	mov	r5, r2
 800d356:	fbb6 f1f3 	udiv	r1, r6, r3
 800d35a:	fb03 6711 	mls	r7, r3, r1, r6
 800d35e:	5dc7      	ldrb	r7, [r0, r7]
 800d360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d364:	4637      	mov	r7, r6
 800d366:	42bb      	cmp	r3, r7
 800d368:	460e      	mov	r6, r1
 800d36a:	d9f4      	bls.n	800d356 <_printf_i+0x116>
 800d36c:	2b08      	cmp	r3, #8
 800d36e:	d10b      	bne.n	800d388 <_printf_i+0x148>
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	07de      	lsls	r6, r3, #31
 800d374:	d508      	bpl.n	800d388 <_printf_i+0x148>
 800d376:	6923      	ldr	r3, [r4, #16]
 800d378:	6861      	ldr	r1, [r4, #4]
 800d37a:	4299      	cmp	r1, r3
 800d37c:	bfde      	ittt	le
 800d37e:	2330      	movle	r3, #48	; 0x30
 800d380:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d384:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d388:	1b52      	subs	r2, r2, r5
 800d38a:	6122      	str	r2, [r4, #16]
 800d38c:	f8cd a000 	str.w	sl, [sp]
 800d390:	464b      	mov	r3, r9
 800d392:	aa03      	add	r2, sp, #12
 800d394:	4621      	mov	r1, r4
 800d396:	4640      	mov	r0, r8
 800d398:	f7ff fee4 	bl	800d164 <_printf_common>
 800d39c:	3001      	adds	r0, #1
 800d39e:	d14a      	bne.n	800d436 <_printf_i+0x1f6>
 800d3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a4:	b004      	add	sp, #16
 800d3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	f043 0320 	orr.w	r3, r3, #32
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	4833      	ldr	r0, [pc, #204]	; (800d480 <_printf_i+0x240>)
 800d3b4:	2778      	movs	r7, #120	; 0x78
 800d3b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	6829      	ldr	r1, [r5, #0]
 800d3be:	061f      	lsls	r7, r3, #24
 800d3c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3c4:	d402      	bmi.n	800d3cc <_printf_i+0x18c>
 800d3c6:	065f      	lsls	r7, r3, #25
 800d3c8:	bf48      	it	mi
 800d3ca:	b2b6      	uxthmi	r6, r6
 800d3cc:	07df      	lsls	r7, r3, #31
 800d3ce:	bf48      	it	mi
 800d3d0:	f043 0320 	orrmi.w	r3, r3, #32
 800d3d4:	6029      	str	r1, [r5, #0]
 800d3d6:	bf48      	it	mi
 800d3d8:	6023      	strmi	r3, [r4, #0]
 800d3da:	b91e      	cbnz	r6, 800d3e4 <_printf_i+0x1a4>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	f023 0320 	bic.w	r3, r3, #32
 800d3e2:	6023      	str	r3, [r4, #0]
 800d3e4:	2310      	movs	r3, #16
 800d3e6:	e7a7      	b.n	800d338 <_printf_i+0xf8>
 800d3e8:	4824      	ldr	r0, [pc, #144]	; (800d47c <_printf_i+0x23c>)
 800d3ea:	e7e4      	b.n	800d3b6 <_printf_i+0x176>
 800d3ec:	4615      	mov	r5, r2
 800d3ee:	e7bd      	b.n	800d36c <_printf_i+0x12c>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	6826      	ldr	r6, [r4, #0]
 800d3f4:	6961      	ldr	r1, [r4, #20]
 800d3f6:	1d18      	adds	r0, r3, #4
 800d3f8:	6028      	str	r0, [r5, #0]
 800d3fa:	0635      	lsls	r5, r6, #24
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	d501      	bpl.n	800d404 <_printf_i+0x1c4>
 800d400:	6019      	str	r1, [r3, #0]
 800d402:	e002      	b.n	800d40a <_printf_i+0x1ca>
 800d404:	0670      	lsls	r0, r6, #25
 800d406:	d5fb      	bpl.n	800d400 <_printf_i+0x1c0>
 800d408:	8019      	strh	r1, [r3, #0]
 800d40a:	2300      	movs	r3, #0
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	4615      	mov	r5, r2
 800d410:	e7bc      	b.n	800d38c <_printf_i+0x14c>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	1d1a      	adds	r2, r3, #4
 800d416:	602a      	str	r2, [r5, #0]
 800d418:	681d      	ldr	r5, [r3, #0]
 800d41a:	6862      	ldr	r2, [r4, #4]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4628      	mov	r0, r5
 800d420:	f7f2 fef6 	bl	8000210 <memchr>
 800d424:	b108      	cbz	r0, 800d42a <_printf_i+0x1ea>
 800d426:	1b40      	subs	r0, r0, r5
 800d428:	6060      	str	r0, [r4, #4]
 800d42a:	6863      	ldr	r3, [r4, #4]
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	2300      	movs	r3, #0
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d434:	e7aa      	b.n	800d38c <_printf_i+0x14c>
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	462a      	mov	r2, r5
 800d43a:	4649      	mov	r1, r9
 800d43c:	4640      	mov	r0, r8
 800d43e:	47d0      	blx	sl
 800d440:	3001      	adds	r0, #1
 800d442:	d0ad      	beq.n	800d3a0 <_printf_i+0x160>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	079b      	lsls	r3, r3, #30
 800d448:	d413      	bmi.n	800d472 <_printf_i+0x232>
 800d44a:	68e0      	ldr	r0, [r4, #12]
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	4298      	cmp	r0, r3
 800d450:	bfb8      	it	lt
 800d452:	4618      	movlt	r0, r3
 800d454:	e7a6      	b.n	800d3a4 <_printf_i+0x164>
 800d456:	2301      	movs	r3, #1
 800d458:	4632      	mov	r2, r6
 800d45a:	4649      	mov	r1, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	47d0      	blx	sl
 800d460:	3001      	adds	r0, #1
 800d462:	d09d      	beq.n	800d3a0 <_printf_i+0x160>
 800d464:	3501      	adds	r5, #1
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	9903      	ldr	r1, [sp, #12]
 800d46a:	1a5b      	subs	r3, r3, r1
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	dcf2      	bgt.n	800d456 <_printf_i+0x216>
 800d470:	e7eb      	b.n	800d44a <_printf_i+0x20a>
 800d472:	2500      	movs	r5, #0
 800d474:	f104 0619 	add.w	r6, r4, #25
 800d478:	e7f5      	b.n	800d466 <_printf_i+0x226>
 800d47a:	bf00      	nop
 800d47c:	0800efb2 	.word	0x0800efb2
 800d480:	0800efc3 	.word	0x0800efc3

0800d484 <__swbuf_r>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	460e      	mov	r6, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	4605      	mov	r5, r0
 800d48c:	b118      	cbz	r0, 800d496 <__swbuf_r+0x12>
 800d48e:	6a03      	ldr	r3, [r0, #32]
 800d490:	b90b      	cbnz	r3, 800d496 <__swbuf_r+0x12>
 800d492:	f7fe f981 	bl	800b798 <__sinit>
 800d496:	69a3      	ldr	r3, [r4, #24]
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	071a      	lsls	r2, r3, #28
 800d49e:	d525      	bpl.n	800d4ec <__swbuf_r+0x68>
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b31b      	cbz	r3, 800d4ec <__swbuf_r+0x68>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	6922      	ldr	r2, [r4, #16]
 800d4a8:	1a98      	subs	r0, r3, r2
 800d4aa:	6963      	ldr	r3, [r4, #20]
 800d4ac:	b2f6      	uxtb	r6, r6
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	4637      	mov	r7, r6
 800d4b2:	dc04      	bgt.n	800d4be <__swbuf_r+0x3a>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f7ff fc84 	bl	800cdc4 <_fflush_r>
 800d4bc:	b9e0      	cbnz	r0, 800d4f8 <__swbuf_r+0x74>
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6022      	str	r2, [r4, #0]
 800d4ca:	701e      	strb	r6, [r3, #0]
 800d4cc:	6962      	ldr	r2, [r4, #20]
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d004      	beq.n	800d4de <__swbuf_r+0x5a>
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	07db      	lsls	r3, r3, #31
 800d4d8:	d506      	bpl.n	800d4e8 <__swbuf_r+0x64>
 800d4da:	2e0a      	cmp	r6, #10
 800d4dc:	d104      	bne.n	800d4e8 <__swbuf_r+0x64>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	f7ff fc6f 	bl	800cdc4 <_fflush_r>
 800d4e6:	b938      	cbnz	r0, 800d4f8 <__swbuf_r+0x74>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f806 	bl	800d500 <__swsetup_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d0d5      	beq.n	800d4a4 <__swbuf_r+0x20>
 800d4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4fc:	e7f4      	b.n	800d4e8 <__swbuf_r+0x64>
	...

0800d500 <__swsetup_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <__swsetup_r+0xac>)
 800d504:	4605      	mov	r5, r0
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	460c      	mov	r4, r1
 800d50a:	b118      	cbz	r0, 800d514 <__swsetup_r+0x14>
 800d50c:	6a03      	ldr	r3, [r0, #32]
 800d50e:	b90b      	cbnz	r3, 800d514 <__swsetup_r+0x14>
 800d510:	f7fe f942 	bl	800b798 <__sinit>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d51a:	0718      	lsls	r0, r3, #28
 800d51c:	d422      	bmi.n	800d564 <__swsetup_r+0x64>
 800d51e:	06d9      	lsls	r1, r3, #27
 800d520:	d407      	bmi.n	800d532 <__swsetup_r+0x32>
 800d522:	2309      	movs	r3, #9
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295
 800d530:	e034      	b.n	800d59c <__swsetup_r+0x9c>
 800d532:	0758      	lsls	r0, r3, #29
 800d534:	d512      	bpl.n	800d55c <__swsetup_r+0x5c>
 800d536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d538:	b141      	cbz	r1, 800d54c <__swsetup_r+0x4c>
 800d53a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d53e:	4299      	cmp	r1, r3
 800d540:	d002      	beq.n	800d548 <__swsetup_r+0x48>
 800d542:	4628      	mov	r0, r5
 800d544:	f7fe fa9c 	bl	800ba80 <_free_r>
 800d548:	2300      	movs	r3, #0
 800d54a:	6363      	str	r3, [r4, #52]	; 0x34
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	2300      	movs	r3, #0
 800d556:	6063      	str	r3, [r4, #4]
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0308 	orr.w	r3, r3, #8
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	b94b      	cbnz	r3, 800d57c <__swsetup_r+0x7c>
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d572:	d003      	beq.n	800d57c <__swsetup_r+0x7c>
 800d574:	4621      	mov	r1, r4
 800d576:	4628      	mov	r0, r5
 800d578:	f000 f884 	bl	800d684 <__smakebuf_r>
 800d57c:	89a0      	ldrh	r0, [r4, #12]
 800d57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d582:	f010 0301 	ands.w	r3, r0, #1
 800d586:	d00a      	beq.n	800d59e <__swsetup_r+0x9e>
 800d588:	2300      	movs	r3, #0
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	6963      	ldr	r3, [r4, #20]
 800d58e:	425b      	negs	r3, r3
 800d590:	61a3      	str	r3, [r4, #24]
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	b943      	cbnz	r3, 800d5a8 <__swsetup_r+0xa8>
 800d596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d59a:	d1c4      	bne.n	800d526 <__swsetup_r+0x26>
 800d59c:	bd38      	pop	{r3, r4, r5, pc}
 800d59e:	0781      	lsls	r1, r0, #30
 800d5a0:	bf58      	it	pl
 800d5a2:	6963      	ldrpl	r3, [r4, #20]
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	e7f4      	b.n	800d592 <__swsetup_r+0x92>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e7f7      	b.n	800d59c <__swsetup_r+0x9c>
 800d5ac:	20000240 	.word	0x20000240

0800d5b0 <_raise_r>:
 800d5b0:	291f      	cmp	r1, #31
 800d5b2:	b538      	push	{r3, r4, r5, lr}
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	d904      	bls.n	800d5c4 <_raise_r+0x14>
 800d5ba:	2316      	movs	r3, #22
 800d5bc:	6003      	str	r3, [r0, #0]
 800d5be:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5c6:	b112      	cbz	r2, 800d5ce <_raise_r+0x1e>
 800d5c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5cc:	b94b      	cbnz	r3, 800d5e2 <_raise_r+0x32>
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 f830 	bl	800d634 <_getpid_r>
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	4620      	mov	r0, r4
 800d5da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5de:	f000 b817 	b.w	800d610 <_kill_r>
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d00a      	beq.n	800d5fc <_raise_r+0x4c>
 800d5e6:	1c59      	adds	r1, r3, #1
 800d5e8:	d103      	bne.n	800d5f2 <_raise_r+0x42>
 800d5ea:	2316      	movs	r3, #22
 800d5ec:	6003      	str	r3, [r0, #0]
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	e7e7      	b.n	800d5c2 <_raise_r+0x12>
 800d5f2:	2400      	movs	r4, #0
 800d5f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	4798      	blx	r3
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e7e0      	b.n	800d5c2 <_raise_r+0x12>

0800d600 <raise>:
 800d600:	4b02      	ldr	r3, [pc, #8]	; (800d60c <raise+0xc>)
 800d602:	4601      	mov	r1, r0
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	f7ff bfd3 	b.w	800d5b0 <_raise_r>
 800d60a:	bf00      	nop
 800d60c:	20000240 	.word	0x20000240

0800d610 <_kill_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d07      	ldr	r5, [pc, #28]	; (800d630 <_kill_r+0x20>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	4611      	mov	r1, r2
 800d61c:	602b      	str	r3, [r5, #0]
 800d61e:	f7f6 ff85 	bl	800452c <_kill>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	d102      	bne.n	800d62c <_kill_r+0x1c>
 800d626:	682b      	ldr	r3, [r5, #0]
 800d628:	b103      	cbz	r3, 800d62c <_kill_r+0x1c>
 800d62a:	6023      	str	r3, [r4, #0]
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	bf00      	nop
 800d630:	20004898 	.word	0x20004898

0800d634 <_getpid_r>:
 800d634:	f7f6 bf72 	b.w	800451c <_getpid>

0800d638 <__swhatbuf_r>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	460c      	mov	r4, r1
 800d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d640:	2900      	cmp	r1, #0
 800d642:	b096      	sub	sp, #88	; 0x58
 800d644:	4615      	mov	r5, r2
 800d646:	461e      	mov	r6, r3
 800d648:	da0d      	bge.n	800d666 <__swhatbuf_r+0x2e>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d650:	f04f 0100 	mov.w	r1, #0
 800d654:	bf0c      	ite	eq
 800d656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d65a:	2340      	movne	r3, #64	; 0x40
 800d65c:	2000      	movs	r0, #0
 800d65e:	6031      	str	r1, [r6, #0]
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	b016      	add	sp, #88	; 0x58
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	466a      	mov	r2, sp
 800d668:	f000 f848 	bl	800d6fc <_fstat_r>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	dbec      	blt.n	800d64a <__swhatbuf_r+0x12>
 800d670:	9901      	ldr	r1, [sp, #4]
 800d672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d67a:	4259      	negs	r1, r3
 800d67c:	4159      	adcs	r1, r3
 800d67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d682:	e7eb      	b.n	800d65c <__swhatbuf_r+0x24>

0800d684 <__smakebuf_r>:
 800d684:	898b      	ldrh	r3, [r1, #12]
 800d686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d688:	079d      	lsls	r5, r3, #30
 800d68a:	4606      	mov	r6, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	d507      	bpl.n	800d6a0 <__smakebuf_r+0x1c>
 800d690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	2301      	movs	r3, #1
 800d69a:	6163      	str	r3, [r4, #20]
 800d69c:	b002      	add	sp, #8
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	ab01      	add	r3, sp, #4
 800d6a2:	466a      	mov	r2, sp
 800d6a4:	f7ff ffc8 	bl	800d638 <__swhatbuf_r>
 800d6a8:	9900      	ldr	r1, [sp, #0]
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f7fe fdab 	bl	800c208 <_malloc_r>
 800d6b2:	b948      	cbnz	r0, 800d6c8 <__smakebuf_r+0x44>
 800d6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b8:	059a      	lsls	r2, r3, #22
 800d6ba:	d4ef      	bmi.n	800d69c <__smakebuf_r+0x18>
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	f043 0302 	orr.w	r3, r3, #2
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	e7e3      	b.n	800d690 <__smakebuf_r+0xc>
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	6020      	str	r0, [r4, #0]
 800d6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	9b00      	ldr	r3, [sp, #0]
 800d6d4:	6163      	str	r3, [r4, #20]
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	6120      	str	r0, [r4, #16]
 800d6da:	b15b      	cbz	r3, 800d6f4 <__smakebuf_r+0x70>
 800d6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f000 f81d 	bl	800d720 <_isatty_r>
 800d6e6:	b128      	cbz	r0, 800d6f4 <__smakebuf_r+0x70>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	f023 0303 	bic.w	r3, r3, #3
 800d6ee:	f043 0301 	orr.w	r3, r3, #1
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	431d      	orrs	r5, r3
 800d6f8:	81a5      	strh	r5, [r4, #12]
 800d6fa:	e7cf      	b.n	800d69c <__smakebuf_r+0x18>

0800d6fc <_fstat_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_fstat_r+0x20>)
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f7f6 ff6e 	bl	80045ea <_fstat>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d102      	bne.n	800d718 <_fstat_r+0x1c>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	b103      	cbz	r3, 800d718 <_fstat_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd38      	pop	{r3, r4, r5, pc}
 800d71a:	bf00      	nop
 800d71c:	20004898 	.word	0x20004898

0800d720 <_isatty_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d06      	ldr	r5, [pc, #24]	; (800d73c <_isatty_r+0x1c>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f6 ff6d 	bl	800460a <_isatty>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_isatty_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_isatty_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	20004898 	.word	0x20004898

0800d740 <atan2>:
 800d740:	f000 b956 	b.w	800d9f0 <__ieee754_atan2>

0800d744 <pow>:
 800d744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d746:	ed2d 8b02 	vpush	{d8}
 800d74a:	eeb0 8a40 	vmov.f32	s16, s0
 800d74e:	eef0 8a60 	vmov.f32	s17, s1
 800d752:	ec55 4b11 	vmov	r4, r5, d1
 800d756:	f000 fa13 	bl	800db80 <__ieee754_pow>
 800d75a:	4622      	mov	r2, r4
 800d75c:	462b      	mov	r3, r5
 800d75e:	4620      	mov	r0, r4
 800d760:	4629      	mov	r1, r5
 800d762:	ec57 6b10 	vmov	r6, r7, d0
 800d766:	f7f3 f9f9 	bl	8000b5c <__aeabi_dcmpun>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d13b      	bne.n	800d7e6 <pow+0xa2>
 800d76e:	ec51 0b18 	vmov	r0, r1, d8
 800d772:	2200      	movs	r2, #0
 800d774:	2300      	movs	r3, #0
 800d776:	f7f3 f9bf 	bl	8000af8 <__aeabi_dcmpeq>
 800d77a:	b1b8      	cbz	r0, 800d7ac <pow+0x68>
 800d77c:	2200      	movs	r2, #0
 800d77e:	2300      	movs	r3, #0
 800d780:	4620      	mov	r0, r4
 800d782:	4629      	mov	r1, r5
 800d784:	f7f3 f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d146      	bne.n	800d81a <pow+0xd6>
 800d78c:	ec45 4b10 	vmov	d0, r4, r5
 800d790:	f000 f848 	bl	800d824 <finite>
 800d794:	b338      	cbz	r0, 800d7e6 <pow+0xa2>
 800d796:	2200      	movs	r2, #0
 800d798:	2300      	movs	r3, #0
 800d79a:	4620      	mov	r0, r4
 800d79c:	4629      	mov	r1, r5
 800d79e:	f7f3 f9b5 	bl	8000b0c <__aeabi_dcmplt>
 800d7a2:	b300      	cbz	r0, 800d7e6 <pow+0xa2>
 800d7a4:	f7fe f928 	bl	800b9f8 <__errno>
 800d7a8:	2322      	movs	r3, #34	; 0x22
 800d7aa:	e01b      	b.n	800d7e4 <pow+0xa0>
 800d7ac:	ec47 6b10 	vmov	d0, r6, r7
 800d7b0:	f000 f838 	bl	800d824 <finite>
 800d7b4:	b9e0      	cbnz	r0, 800d7f0 <pow+0xac>
 800d7b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d7ba:	eef0 0a68 	vmov.f32	s1, s17
 800d7be:	f000 f831 	bl	800d824 <finite>
 800d7c2:	b1a8      	cbz	r0, 800d7f0 <pow+0xac>
 800d7c4:	ec45 4b10 	vmov	d0, r4, r5
 800d7c8:	f000 f82c 	bl	800d824 <finite>
 800d7cc:	b180      	cbz	r0, 800d7f0 <pow+0xac>
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	463b      	mov	r3, r7
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f3 f9c1 	bl	8000b5c <__aeabi_dcmpun>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d0e2      	beq.n	800d7a4 <pow+0x60>
 800d7de:	f7fe f90b 	bl	800b9f8 <__errno>
 800d7e2:	2321      	movs	r3, #33	; 0x21
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	ecbd 8b02 	vpop	{d8}
 800d7ea:	ec47 6b10 	vmov	d0, r6, r7
 800d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	f7f3 f97e 	bl	8000af8 <__aeabi_dcmpeq>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d0f2      	beq.n	800d7e6 <pow+0xa2>
 800d800:	eeb0 0a48 	vmov.f32	s0, s16
 800d804:	eef0 0a68 	vmov.f32	s1, s17
 800d808:	f000 f80c 	bl	800d824 <finite>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0ea      	beq.n	800d7e6 <pow+0xa2>
 800d810:	ec45 4b10 	vmov	d0, r4, r5
 800d814:	f000 f806 	bl	800d824 <finite>
 800d818:	e7c3      	b.n	800d7a2 <pow+0x5e>
 800d81a:	4f01      	ldr	r7, [pc, #4]	; (800d820 <pow+0xdc>)
 800d81c:	2600      	movs	r6, #0
 800d81e:	e7e2      	b.n	800d7e6 <pow+0xa2>
 800d820:	3ff00000 	.word	0x3ff00000

0800d824 <finite>:
 800d824:	b082      	sub	sp, #8
 800d826:	ed8d 0b00 	vstr	d0, [sp]
 800d82a:	9801      	ldr	r0, [sp, #4]
 800d82c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d830:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d834:	0fc0      	lsrs	r0, r0, #31
 800d836:	b002      	add	sp, #8
 800d838:	4770      	bx	lr
	...

0800d83c <__ieee754_sqrt>:
 800d83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d840:	ec55 4b10 	vmov	r4, r5, d0
 800d844:	4e67      	ldr	r6, [pc, #412]	; (800d9e4 <__ieee754_sqrt+0x1a8>)
 800d846:	43ae      	bics	r6, r5
 800d848:	ee10 0a10 	vmov	r0, s0
 800d84c:	ee10 2a10 	vmov	r2, s0
 800d850:	4629      	mov	r1, r5
 800d852:	462b      	mov	r3, r5
 800d854:	d10d      	bne.n	800d872 <__ieee754_sqrt+0x36>
 800d856:	f7f2 fee7 	bl	8000628 <__aeabi_dmul>
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
 800d85e:	4620      	mov	r0, r4
 800d860:	4629      	mov	r1, r5
 800d862:	f7f2 fd2b 	bl	80002bc <__adddf3>
 800d866:	4604      	mov	r4, r0
 800d868:	460d      	mov	r5, r1
 800d86a:	ec45 4b10 	vmov	d0, r4, r5
 800d86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d872:	2d00      	cmp	r5, #0
 800d874:	dc0b      	bgt.n	800d88e <__ieee754_sqrt+0x52>
 800d876:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d87a:	4326      	orrs	r6, r4
 800d87c:	d0f5      	beq.n	800d86a <__ieee754_sqrt+0x2e>
 800d87e:	b135      	cbz	r5, 800d88e <__ieee754_sqrt+0x52>
 800d880:	f7f2 fd1a 	bl	80002b8 <__aeabi_dsub>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	f7f2 fff8 	bl	800087c <__aeabi_ddiv>
 800d88c:	e7eb      	b.n	800d866 <__ieee754_sqrt+0x2a>
 800d88e:	1509      	asrs	r1, r1, #20
 800d890:	f000 808d 	beq.w	800d9ae <__ieee754_sqrt+0x172>
 800d894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d898:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d89c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8a0:	07c9      	lsls	r1, r1, #31
 800d8a2:	bf5c      	itt	pl
 800d8a4:	005b      	lslpl	r3, r3, #1
 800d8a6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d8aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d8ae:	bf58      	it	pl
 800d8b0:	0052      	lslpl	r2, r2, #1
 800d8b2:	2500      	movs	r5, #0
 800d8b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8b8:	1076      	asrs	r6, r6, #1
 800d8ba:	0052      	lsls	r2, r2, #1
 800d8bc:	f04f 0e16 	mov.w	lr, #22
 800d8c0:	46ac      	mov	ip, r5
 800d8c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d8c6:	eb0c 0001 	add.w	r0, ip, r1
 800d8ca:	4298      	cmp	r0, r3
 800d8cc:	bfde      	ittt	le
 800d8ce:	1a1b      	suble	r3, r3, r0
 800d8d0:	eb00 0c01 	addle.w	ip, r0, r1
 800d8d4:	186d      	addle	r5, r5, r1
 800d8d6:	005b      	lsls	r3, r3, #1
 800d8d8:	f1be 0e01 	subs.w	lr, lr, #1
 800d8dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d8e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8e8:	d1ed      	bne.n	800d8c6 <__ieee754_sqrt+0x8a>
 800d8ea:	4674      	mov	r4, lr
 800d8ec:	2720      	movs	r7, #32
 800d8ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d8f2:	4563      	cmp	r3, ip
 800d8f4:	eb01 000e 	add.w	r0, r1, lr
 800d8f8:	dc02      	bgt.n	800d900 <__ieee754_sqrt+0xc4>
 800d8fa:	d113      	bne.n	800d924 <__ieee754_sqrt+0xe8>
 800d8fc:	4290      	cmp	r0, r2
 800d8fe:	d811      	bhi.n	800d924 <__ieee754_sqrt+0xe8>
 800d900:	2800      	cmp	r0, #0
 800d902:	eb00 0e01 	add.w	lr, r0, r1
 800d906:	da57      	bge.n	800d9b8 <__ieee754_sqrt+0x17c>
 800d908:	f1be 0f00 	cmp.w	lr, #0
 800d90c:	db54      	blt.n	800d9b8 <__ieee754_sqrt+0x17c>
 800d90e:	f10c 0801 	add.w	r8, ip, #1
 800d912:	eba3 030c 	sub.w	r3, r3, ip
 800d916:	4290      	cmp	r0, r2
 800d918:	bf88      	it	hi
 800d91a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d91e:	1a12      	subs	r2, r2, r0
 800d920:	440c      	add	r4, r1
 800d922:	46c4      	mov	ip, r8
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	3f01      	subs	r7, #1
 800d928:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d92c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d930:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d934:	d1dd      	bne.n	800d8f2 <__ieee754_sqrt+0xb6>
 800d936:	4313      	orrs	r3, r2
 800d938:	d01b      	beq.n	800d972 <__ieee754_sqrt+0x136>
 800d93a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d9e8 <__ieee754_sqrt+0x1ac>
 800d93e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d9ec <__ieee754_sqrt+0x1b0>
 800d942:	e9da 0100 	ldrd	r0, r1, [sl]
 800d946:	e9db 2300 	ldrd	r2, r3, [fp]
 800d94a:	f7f2 fcb5 	bl	80002b8 <__aeabi_dsub>
 800d94e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	4640      	mov	r0, r8
 800d958:	4649      	mov	r1, r9
 800d95a:	f7f3 f8e1 	bl	8000b20 <__aeabi_dcmple>
 800d95e:	b140      	cbz	r0, 800d972 <__ieee754_sqrt+0x136>
 800d960:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d964:	e9da 0100 	ldrd	r0, r1, [sl]
 800d968:	e9db 2300 	ldrd	r2, r3, [fp]
 800d96c:	d126      	bne.n	800d9bc <__ieee754_sqrt+0x180>
 800d96e:	3501      	adds	r5, #1
 800d970:	463c      	mov	r4, r7
 800d972:	106a      	asrs	r2, r5, #1
 800d974:	0863      	lsrs	r3, r4, #1
 800d976:	07e9      	lsls	r1, r5, #31
 800d978:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d97c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d980:	bf48      	it	mi
 800d982:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d986:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d98a:	461c      	mov	r4, r3
 800d98c:	e76d      	b.n	800d86a <__ieee754_sqrt+0x2e>
 800d98e:	0ad3      	lsrs	r3, r2, #11
 800d990:	3815      	subs	r0, #21
 800d992:	0552      	lsls	r2, r2, #21
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0fa      	beq.n	800d98e <__ieee754_sqrt+0x152>
 800d998:	02dc      	lsls	r4, r3, #11
 800d99a:	d50a      	bpl.n	800d9b2 <__ieee754_sqrt+0x176>
 800d99c:	f1c1 0420 	rsb	r4, r1, #32
 800d9a0:	fa22 f404 	lsr.w	r4, r2, r4
 800d9a4:	1e4d      	subs	r5, r1, #1
 800d9a6:	408a      	lsls	r2, r1
 800d9a8:	4323      	orrs	r3, r4
 800d9aa:	1b41      	subs	r1, r0, r5
 800d9ac:	e772      	b.n	800d894 <__ieee754_sqrt+0x58>
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	e7f0      	b.n	800d994 <__ieee754_sqrt+0x158>
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	e7ef      	b.n	800d998 <__ieee754_sqrt+0x15c>
 800d9b8:	46e0      	mov	r8, ip
 800d9ba:	e7aa      	b.n	800d912 <__ieee754_sqrt+0xd6>
 800d9bc:	f7f2 fc7e 	bl	80002bc <__adddf3>
 800d9c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4640      	mov	r0, r8
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	f7f3 f89e 	bl	8000b0c <__aeabi_dcmplt>
 800d9d0:	b120      	cbz	r0, 800d9dc <__ieee754_sqrt+0x1a0>
 800d9d2:	1ca0      	adds	r0, r4, #2
 800d9d4:	bf08      	it	eq
 800d9d6:	3501      	addeq	r5, #1
 800d9d8:	3402      	adds	r4, #2
 800d9da:	e7ca      	b.n	800d972 <__ieee754_sqrt+0x136>
 800d9dc:	3401      	adds	r4, #1
 800d9de:	f024 0401 	bic.w	r4, r4, #1
 800d9e2:	e7c6      	b.n	800d972 <__ieee754_sqrt+0x136>
 800d9e4:	7ff00000 	.word	0x7ff00000
 800d9e8:	20000248 	.word	0x20000248
 800d9ec:	20000250 	.word	0x20000250

0800d9f0 <__ieee754_atan2>:
 800d9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f4:	ec57 6b11 	vmov	r6, r7, d1
 800d9f8:	4273      	negs	r3, r6
 800d9fa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800db78 <__ieee754_atan2+0x188>
 800d9fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800da02:	4333      	orrs	r3, r6
 800da04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800da08:	4543      	cmp	r3, r8
 800da0a:	ec51 0b10 	vmov	r0, r1, d0
 800da0e:	ee11 5a10 	vmov	r5, s2
 800da12:	d80a      	bhi.n	800da2a <__ieee754_atan2+0x3a>
 800da14:	4244      	negs	r4, r0
 800da16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da1a:	4304      	orrs	r4, r0
 800da1c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800da20:	4544      	cmp	r4, r8
 800da22:	ee10 9a10 	vmov	r9, s0
 800da26:	468e      	mov	lr, r1
 800da28:	d907      	bls.n	800da3a <__ieee754_atan2+0x4a>
 800da2a:	4632      	mov	r2, r6
 800da2c:	463b      	mov	r3, r7
 800da2e:	f7f2 fc45 	bl	80002bc <__adddf3>
 800da32:	ec41 0b10 	vmov	d0, r0, r1
 800da36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800da3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800da42:	4334      	orrs	r4, r6
 800da44:	d103      	bne.n	800da4e <__ieee754_atan2+0x5e>
 800da46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da4a:	f000 bdc5 	b.w	800e5d8 <atan>
 800da4e:	17bc      	asrs	r4, r7, #30
 800da50:	f004 0402 	and.w	r4, r4, #2
 800da54:	ea53 0909 	orrs.w	r9, r3, r9
 800da58:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800da5c:	d107      	bne.n	800da6e <__ieee754_atan2+0x7e>
 800da5e:	2c02      	cmp	r4, #2
 800da60:	d05f      	beq.n	800db22 <__ieee754_atan2+0x132>
 800da62:	2c03      	cmp	r4, #3
 800da64:	d1e5      	bne.n	800da32 <__ieee754_atan2+0x42>
 800da66:	a140      	add	r1, pc, #256	; (adr r1, 800db68 <__ieee754_atan2+0x178>)
 800da68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da6c:	e7e1      	b.n	800da32 <__ieee754_atan2+0x42>
 800da6e:	4315      	orrs	r5, r2
 800da70:	d106      	bne.n	800da80 <__ieee754_atan2+0x90>
 800da72:	f1be 0f00 	cmp.w	lr, #0
 800da76:	da5f      	bge.n	800db38 <__ieee754_atan2+0x148>
 800da78:	a13d      	add	r1, pc, #244	; (adr r1, 800db70 <__ieee754_atan2+0x180>)
 800da7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da7e:	e7d8      	b.n	800da32 <__ieee754_atan2+0x42>
 800da80:	4542      	cmp	r2, r8
 800da82:	d10f      	bne.n	800daa4 <__ieee754_atan2+0xb4>
 800da84:	4293      	cmp	r3, r2
 800da86:	f104 34ff 	add.w	r4, r4, #4294967295
 800da8a:	d107      	bne.n	800da9c <__ieee754_atan2+0xac>
 800da8c:	2c02      	cmp	r4, #2
 800da8e:	d84c      	bhi.n	800db2a <__ieee754_atan2+0x13a>
 800da90:	4b33      	ldr	r3, [pc, #204]	; (800db60 <__ieee754_atan2+0x170>)
 800da92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da9a:	e7ca      	b.n	800da32 <__ieee754_atan2+0x42>
 800da9c:	2c02      	cmp	r4, #2
 800da9e:	d848      	bhi.n	800db32 <__ieee754_atan2+0x142>
 800daa0:	4b30      	ldr	r3, [pc, #192]	; (800db64 <__ieee754_atan2+0x174>)
 800daa2:	e7f6      	b.n	800da92 <__ieee754_atan2+0xa2>
 800daa4:	4543      	cmp	r3, r8
 800daa6:	d0e4      	beq.n	800da72 <__ieee754_atan2+0x82>
 800daa8:	1a9b      	subs	r3, r3, r2
 800daaa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800daae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dab2:	da1e      	bge.n	800daf2 <__ieee754_atan2+0x102>
 800dab4:	2f00      	cmp	r7, #0
 800dab6:	da01      	bge.n	800dabc <__ieee754_atan2+0xcc>
 800dab8:	323c      	adds	r2, #60	; 0x3c
 800daba:	db1e      	blt.n	800dafa <__ieee754_atan2+0x10a>
 800dabc:	4632      	mov	r2, r6
 800dabe:	463b      	mov	r3, r7
 800dac0:	f7f2 fedc 	bl	800087c <__aeabi_ddiv>
 800dac4:	ec41 0b10 	vmov	d0, r0, r1
 800dac8:	f000 ff26 	bl	800e918 <fabs>
 800dacc:	f000 fd84 	bl	800e5d8 <atan>
 800dad0:	ec51 0b10 	vmov	r0, r1, d0
 800dad4:	2c01      	cmp	r4, #1
 800dad6:	d013      	beq.n	800db00 <__ieee754_atan2+0x110>
 800dad8:	2c02      	cmp	r4, #2
 800dada:	d015      	beq.n	800db08 <__ieee754_atan2+0x118>
 800dadc:	2c00      	cmp	r4, #0
 800dade:	d0a8      	beq.n	800da32 <__ieee754_atan2+0x42>
 800dae0:	a317      	add	r3, pc, #92	; (adr r3, 800db40 <__ieee754_atan2+0x150>)
 800dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae6:	f7f2 fbe7 	bl	80002b8 <__aeabi_dsub>
 800daea:	a317      	add	r3, pc, #92	; (adr r3, 800db48 <__ieee754_atan2+0x158>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	e014      	b.n	800db1c <__ieee754_atan2+0x12c>
 800daf2:	a117      	add	r1, pc, #92	; (adr r1, 800db50 <__ieee754_atan2+0x160>)
 800daf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daf8:	e7ec      	b.n	800dad4 <__ieee754_atan2+0xe4>
 800dafa:	2000      	movs	r0, #0
 800dafc:	2100      	movs	r1, #0
 800dafe:	e7e9      	b.n	800dad4 <__ieee754_atan2+0xe4>
 800db00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db04:	4619      	mov	r1, r3
 800db06:	e794      	b.n	800da32 <__ieee754_atan2+0x42>
 800db08:	a30d      	add	r3, pc, #52	; (adr r3, 800db40 <__ieee754_atan2+0x150>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f7f2 fbd3 	bl	80002b8 <__aeabi_dsub>
 800db12:	4602      	mov	r2, r0
 800db14:	460b      	mov	r3, r1
 800db16:	a10c      	add	r1, pc, #48	; (adr r1, 800db48 <__ieee754_atan2+0x158>)
 800db18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db1c:	f7f2 fbcc 	bl	80002b8 <__aeabi_dsub>
 800db20:	e787      	b.n	800da32 <__ieee754_atan2+0x42>
 800db22:	a109      	add	r1, pc, #36	; (adr r1, 800db48 <__ieee754_atan2+0x158>)
 800db24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db28:	e783      	b.n	800da32 <__ieee754_atan2+0x42>
 800db2a:	a10b      	add	r1, pc, #44	; (adr r1, 800db58 <__ieee754_atan2+0x168>)
 800db2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db30:	e77f      	b.n	800da32 <__ieee754_atan2+0x42>
 800db32:	2000      	movs	r0, #0
 800db34:	2100      	movs	r1, #0
 800db36:	e77c      	b.n	800da32 <__ieee754_atan2+0x42>
 800db38:	a105      	add	r1, pc, #20	; (adr r1, 800db50 <__ieee754_atan2+0x160>)
 800db3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3e:	e778      	b.n	800da32 <__ieee754_atan2+0x42>
 800db40:	33145c07 	.word	0x33145c07
 800db44:	3ca1a626 	.word	0x3ca1a626
 800db48:	54442d18 	.word	0x54442d18
 800db4c:	400921fb 	.word	0x400921fb
 800db50:	54442d18 	.word	0x54442d18
 800db54:	3ff921fb 	.word	0x3ff921fb
 800db58:	54442d18 	.word	0x54442d18
 800db5c:	3fe921fb 	.word	0x3fe921fb
 800db60:	0800efd8 	.word	0x0800efd8
 800db64:	0800eff0 	.word	0x0800eff0
 800db68:	54442d18 	.word	0x54442d18
 800db6c:	c00921fb 	.word	0xc00921fb
 800db70:	54442d18 	.word	0x54442d18
 800db74:	bff921fb 	.word	0xbff921fb
 800db78:	7ff00000 	.word	0x7ff00000
 800db7c:	00000000 	.word	0x00000000

0800db80 <__ieee754_pow>:
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	ed2d 8b06 	vpush	{d8-d10}
 800db88:	b089      	sub	sp, #36	; 0x24
 800db8a:	ed8d 1b00 	vstr	d1, [sp]
 800db8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800db92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800db96:	ea58 0102 	orrs.w	r1, r8, r2
 800db9a:	ec57 6b10 	vmov	r6, r7, d0
 800db9e:	d115      	bne.n	800dbcc <__ieee754_pow+0x4c>
 800dba0:	19b3      	adds	r3, r6, r6
 800dba2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dba6:	4152      	adcs	r2, r2
 800dba8:	4299      	cmp	r1, r3
 800dbaa:	4b89      	ldr	r3, [pc, #548]	; (800ddd0 <__ieee754_pow+0x250>)
 800dbac:	4193      	sbcs	r3, r2
 800dbae:	f080 84d1 	bcs.w	800e554 <__ieee754_pow+0x9d4>
 800dbb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	4639      	mov	r1, r7
 800dbba:	f7f2 fb7f 	bl	80002bc <__adddf3>
 800dbbe:	ec41 0b10 	vmov	d0, r0, r1
 800dbc2:	b009      	add	sp, #36	; 0x24
 800dbc4:	ecbd 8b06 	vpop	{d8-d10}
 800dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbcc:	4b81      	ldr	r3, [pc, #516]	; (800ddd4 <__ieee754_pow+0x254>)
 800dbce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dbd2:	429c      	cmp	r4, r3
 800dbd4:	ee10 aa10 	vmov	sl, s0
 800dbd8:	463d      	mov	r5, r7
 800dbda:	dc06      	bgt.n	800dbea <__ieee754_pow+0x6a>
 800dbdc:	d101      	bne.n	800dbe2 <__ieee754_pow+0x62>
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	d1e7      	bne.n	800dbb2 <__ieee754_pow+0x32>
 800dbe2:	4598      	cmp	r8, r3
 800dbe4:	dc01      	bgt.n	800dbea <__ieee754_pow+0x6a>
 800dbe6:	d10f      	bne.n	800dc08 <__ieee754_pow+0x88>
 800dbe8:	b172      	cbz	r2, 800dc08 <__ieee754_pow+0x88>
 800dbea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dbee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dbf2:	ea55 050a 	orrs.w	r5, r5, sl
 800dbf6:	d1dc      	bne.n	800dbb2 <__ieee754_pow+0x32>
 800dbf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbfc:	18db      	adds	r3, r3, r3
 800dbfe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dc02:	4152      	adcs	r2, r2
 800dc04:	429d      	cmp	r5, r3
 800dc06:	e7d0      	b.n	800dbaa <__ieee754_pow+0x2a>
 800dc08:	2d00      	cmp	r5, #0
 800dc0a:	da3b      	bge.n	800dc84 <__ieee754_pow+0x104>
 800dc0c:	4b72      	ldr	r3, [pc, #456]	; (800ddd8 <__ieee754_pow+0x258>)
 800dc0e:	4598      	cmp	r8, r3
 800dc10:	dc51      	bgt.n	800dcb6 <__ieee754_pow+0x136>
 800dc12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dc16:	4598      	cmp	r8, r3
 800dc18:	f340 84ab 	ble.w	800e572 <__ieee754_pow+0x9f2>
 800dc1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc24:	2b14      	cmp	r3, #20
 800dc26:	dd0f      	ble.n	800dc48 <__ieee754_pow+0xc8>
 800dc28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dc2c:	fa22 f103 	lsr.w	r1, r2, r3
 800dc30:	fa01 f303 	lsl.w	r3, r1, r3
 800dc34:	4293      	cmp	r3, r2
 800dc36:	f040 849c 	bne.w	800e572 <__ieee754_pow+0x9f2>
 800dc3a:	f001 0101 	and.w	r1, r1, #1
 800dc3e:	f1c1 0302 	rsb	r3, r1, #2
 800dc42:	9304      	str	r3, [sp, #16]
 800dc44:	b182      	cbz	r2, 800dc68 <__ieee754_pow+0xe8>
 800dc46:	e05f      	b.n	800dd08 <__ieee754_pow+0x188>
 800dc48:	2a00      	cmp	r2, #0
 800dc4a:	d15b      	bne.n	800dd04 <__ieee754_pow+0x184>
 800dc4c:	f1c3 0314 	rsb	r3, r3, #20
 800dc50:	fa48 f103 	asr.w	r1, r8, r3
 800dc54:	fa01 f303 	lsl.w	r3, r1, r3
 800dc58:	4543      	cmp	r3, r8
 800dc5a:	f040 8487 	bne.w	800e56c <__ieee754_pow+0x9ec>
 800dc5e:	f001 0101 	and.w	r1, r1, #1
 800dc62:	f1c1 0302 	rsb	r3, r1, #2
 800dc66:	9304      	str	r3, [sp, #16]
 800dc68:	4b5c      	ldr	r3, [pc, #368]	; (800dddc <__ieee754_pow+0x25c>)
 800dc6a:	4598      	cmp	r8, r3
 800dc6c:	d132      	bne.n	800dcd4 <__ieee754_pow+0x154>
 800dc6e:	f1b9 0f00 	cmp.w	r9, #0
 800dc72:	f280 8477 	bge.w	800e564 <__ieee754_pow+0x9e4>
 800dc76:	4959      	ldr	r1, [pc, #356]	; (800dddc <__ieee754_pow+0x25c>)
 800dc78:	4632      	mov	r2, r6
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f7f2 fdfd 	bl	800087c <__aeabi_ddiv>
 800dc82:	e79c      	b.n	800dbbe <__ieee754_pow+0x3e>
 800dc84:	2300      	movs	r3, #0
 800dc86:	9304      	str	r3, [sp, #16]
 800dc88:	2a00      	cmp	r2, #0
 800dc8a:	d13d      	bne.n	800dd08 <__ieee754_pow+0x188>
 800dc8c:	4b51      	ldr	r3, [pc, #324]	; (800ddd4 <__ieee754_pow+0x254>)
 800dc8e:	4598      	cmp	r8, r3
 800dc90:	d1ea      	bne.n	800dc68 <__ieee754_pow+0xe8>
 800dc92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dc96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dc9a:	ea53 030a 	orrs.w	r3, r3, sl
 800dc9e:	f000 8459 	beq.w	800e554 <__ieee754_pow+0x9d4>
 800dca2:	4b4f      	ldr	r3, [pc, #316]	; (800dde0 <__ieee754_pow+0x260>)
 800dca4:	429c      	cmp	r4, r3
 800dca6:	dd08      	ble.n	800dcba <__ieee754_pow+0x13a>
 800dca8:	f1b9 0f00 	cmp.w	r9, #0
 800dcac:	f2c0 8456 	blt.w	800e55c <__ieee754_pow+0x9dc>
 800dcb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcb4:	e783      	b.n	800dbbe <__ieee754_pow+0x3e>
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	e7e5      	b.n	800dc86 <__ieee754_pow+0x106>
 800dcba:	f1b9 0f00 	cmp.w	r9, #0
 800dcbe:	f04f 0000 	mov.w	r0, #0
 800dcc2:	f04f 0100 	mov.w	r1, #0
 800dcc6:	f6bf af7a 	bge.w	800dbbe <__ieee754_pow+0x3e>
 800dcca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dcce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dcd2:	e774      	b.n	800dbbe <__ieee754_pow+0x3e>
 800dcd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dcd8:	d106      	bne.n	800dce8 <__ieee754_pow+0x168>
 800dcda:	4632      	mov	r2, r6
 800dcdc:	463b      	mov	r3, r7
 800dcde:	4630      	mov	r0, r6
 800dce0:	4639      	mov	r1, r7
 800dce2:	f7f2 fca1 	bl	8000628 <__aeabi_dmul>
 800dce6:	e76a      	b.n	800dbbe <__ieee754_pow+0x3e>
 800dce8:	4b3e      	ldr	r3, [pc, #248]	; (800dde4 <__ieee754_pow+0x264>)
 800dcea:	4599      	cmp	r9, r3
 800dcec:	d10c      	bne.n	800dd08 <__ieee754_pow+0x188>
 800dcee:	2d00      	cmp	r5, #0
 800dcf0:	db0a      	blt.n	800dd08 <__ieee754_pow+0x188>
 800dcf2:	ec47 6b10 	vmov	d0, r6, r7
 800dcf6:	b009      	add	sp, #36	; 0x24
 800dcf8:	ecbd 8b06 	vpop	{d8-d10}
 800dcfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	f7ff bd9c 	b.w	800d83c <__ieee754_sqrt>
 800dd04:	2300      	movs	r3, #0
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	ec47 6b10 	vmov	d0, r6, r7
 800dd0c:	f000 fe04 	bl	800e918 <fabs>
 800dd10:	ec51 0b10 	vmov	r0, r1, d0
 800dd14:	f1ba 0f00 	cmp.w	sl, #0
 800dd18:	d129      	bne.n	800dd6e <__ieee754_pow+0x1ee>
 800dd1a:	b124      	cbz	r4, 800dd26 <__ieee754_pow+0x1a6>
 800dd1c:	4b2f      	ldr	r3, [pc, #188]	; (800dddc <__ieee754_pow+0x25c>)
 800dd1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d123      	bne.n	800dd6e <__ieee754_pow+0x1ee>
 800dd26:	f1b9 0f00 	cmp.w	r9, #0
 800dd2a:	da05      	bge.n	800dd38 <__ieee754_pow+0x1b8>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	460b      	mov	r3, r1
 800dd30:	2000      	movs	r0, #0
 800dd32:	492a      	ldr	r1, [pc, #168]	; (800dddc <__ieee754_pow+0x25c>)
 800dd34:	f7f2 fda2 	bl	800087c <__aeabi_ddiv>
 800dd38:	2d00      	cmp	r5, #0
 800dd3a:	f6bf af40 	bge.w	800dbbe <__ieee754_pow+0x3e>
 800dd3e:	9b04      	ldr	r3, [sp, #16]
 800dd40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dd44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dd48:	431c      	orrs	r4, r3
 800dd4a:	d108      	bne.n	800dd5e <__ieee754_pow+0x1de>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4610      	mov	r0, r2
 800dd52:	4619      	mov	r1, r3
 800dd54:	f7f2 fab0 	bl	80002b8 <__aeabi_dsub>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	e78f      	b.n	800dc7e <__ieee754_pow+0xfe>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	f47f af2c 	bne.w	800dbbe <__ieee754_pow+0x3e>
 800dd66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	e727      	b.n	800dbbe <__ieee754_pow+0x3e>
 800dd6e:	0feb      	lsrs	r3, r5, #31
 800dd70:	3b01      	subs	r3, #1
 800dd72:	9306      	str	r3, [sp, #24]
 800dd74:	9a06      	ldr	r2, [sp, #24]
 800dd76:	9b04      	ldr	r3, [sp, #16]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	d102      	bne.n	800dd82 <__ieee754_pow+0x202>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	463b      	mov	r3, r7
 800dd80:	e7e6      	b.n	800dd50 <__ieee754_pow+0x1d0>
 800dd82:	4b19      	ldr	r3, [pc, #100]	; (800dde8 <__ieee754_pow+0x268>)
 800dd84:	4598      	cmp	r8, r3
 800dd86:	f340 80fb 	ble.w	800df80 <__ieee754_pow+0x400>
 800dd8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dd8e:	4598      	cmp	r8, r3
 800dd90:	4b13      	ldr	r3, [pc, #76]	; (800dde0 <__ieee754_pow+0x260>)
 800dd92:	dd0c      	ble.n	800ddae <__ieee754_pow+0x22e>
 800dd94:	429c      	cmp	r4, r3
 800dd96:	dc0f      	bgt.n	800ddb8 <__ieee754_pow+0x238>
 800dd98:	f1b9 0f00 	cmp.w	r9, #0
 800dd9c:	da0f      	bge.n	800ddbe <__ieee754_pow+0x23e>
 800dd9e:	2000      	movs	r0, #0
 800dda0:	b009      	add	sp, #36	; 0x24
 800dda2:	ecbd 8b06 	vpop	{d8-d10}
 800dda6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	f000 be66 	b.w	800ea7a <__math_oflow>
 800ddae:	429c      	cmp	r4, r3
 800ddb0:	dbf2      	blt.n	800dd98 <__ieee754_pow+0x218>
 800ddb2:	4b0a      	ldr	r3, [pc, #40]	; (800dddc <__ieee754_pow+0x25c>)
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	dd19      	ble.n	800ddec <__ieee754_pow+0x26c>
 800ddb8:	f1b9 0f00 	cmp.w	r9, #0
 800ddbc:	dcef      	bgt.n	800dd9e <__ieee754_pow+0x21e>
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	b009      	add	sp, #36	; 0x24
 800ddc2:	ecbd 8b06 	vpop	{d8-d10}
 800ddc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddca:	f000 be4d 	b.w	800ea68 <__math_uflow>
 800ddce:	bf00      	nop
 800ddd0:	fff00000 	.word	0xfff00000
 800ddd4:	7ff00000 	.word	0x7ff00000
 800ddd8:	433fffff 	.word	0x433fffff
 800dddc:	3ff00000 	.word	0x3ff00000
 800dde0:	3fefffff 	.word	0x3fefffff
 800dde4:	3fe00000 	.word	0x3fe00000
 800dde8:	41e00000 	.word	0x41e00000
 800ddec:	4b60      	ldr	r3, [pc, #384]	; (800df70 <__ieee754_pow+0x3f0>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f7f2 fa62 	bl	80002b8 <__aeabi_dsub>
 800ddf4:	a354      	add	r3, pc, #336	; (adr r3, 800df48 <__ieee754_pow+0x3c8>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	f7f2 fc13 	bl	8000628 <__aeabi_dmul>
 800de02:	a353      	add	r3, pc, #332	; (adr r3, 800df50 <__ieee754_pow+0x3d0>)
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	4606      	mov	r6, r0
 800de0a:	460f      	mov	r7, r1
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fc0a 	bl	8000628 <__aeabi_dmul>
 800de14:	4b57      	ldr	r3, [pc, #348]	; (800df74 <__ieee754_pow+0x3f4>)
 800de16:	4682      	mov	sl, r0
 800de18:	468b      	mov	fp, r1
 800de1a:	2200      	movs	r2, #0
 800de1c:	4620      	mov	r0, r4
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 fc02 	bl	8000628 <__aeabi_dmul>
 800de24:	4602      	mov	r2, r0
 800de26:	460b      	mov	r3, r1
 800de28:	a14b      	add	r1, pc, #300	; (adr r1, 800df58 <__ieee754_pow+0x3d8>)
 800de2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de2e:	f7f2 fa43 	bl	80002b8 <__aeabi_dsub>
 800de32:	4622      	mov	r2, r4
 800de34:	462b      	mov	r3, r5
 800de36:	f7f2 fbf7 	bl	8000628 <__aeabi_dmul>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	2000      	movs	r0, #0
 800de40:	494d      	ldr	r1, [pc, #308]	; (800df78 <__ieee754_pow+0x3f8>)
 800de42:	f7f2 fa39 	bl	80002b8 <__aeabi_dsub>
 800de46:	4622      	mov	r2, r4
 800de48:	4680      	mov	r8, r0
 800de4a:	4689      	mov	r9, r1
 800de4c:	462b      	mov	r3, r5
 800de4e:	4620      	mov	r0, r4
 800de50:	4629      	mov	r1, r5
 800de52:	f7f2 fbe9 	bl	8000628 <__aeabi_dmul>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	4640      	mov	r0, r8
 800de5c:	4649      	mov	r1, r9
 800de5e:	f7f2 fbe3 	bl	8000628 <__aeabi_dmul>
 800de62:	a33f      	add	r3, pc, #252	; (adr r3, 800df60 <__ieee754_pow+0x3e0>)
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	f7f2 fbde 	bl	8000628 <__aeabi_dmul>
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	4650      	mov	r0, sl
 800de72:	4659      	mov	r1, fp
 800de74:	f7f2 fa20 	bl	80002b8 <__aeabi_dsub>
 800de78:	4602      	mov	r2, r0
 800de7a:	460b      	mov	r3, r1
 800de7c:	4680      	mov	r8, r0
 800de7e:	4689      	mov	r9, r1
 800de80:	4630      	mov	r0, r6
 800de82:	4639      	mov	r1, r7
 800de84:	f7f2 fa1a 	bl	80002bc <__adddf3>
 800de88:	2000      	movs	r0, #0
 800de8a:	4632      	mov	r2, r6
 800de8c:	463b      	mov	r3, r7
 800de8e:	4604      	mov	r4, r0
 800de90:	460d      	mov	r5, r1
 800de92:	f7f2 fa11 	bl	80002b8 <__aeabi_dsub>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4640      	mov	r0, r8
 800de9c:	4649      	mov	r1, r9
 800de9e:	f7f2 fa0b 	bl	80002b8 <__aeabi_dsub>
 800dea2:	9b04      	ldr	r3, [sp, #16]
 800dea4:	9a06      	ldr	r2, [sp, #24]
 800dea6:	3b01      	subs	r3, #1
 800dea8:	4313      	orrs	r3, r2
 800deaa:	4682      	mov	sl, r0
 800deac:	468b      	mov	fp, r1
 800deae:	f040 81e7 	bne.w	800e280 <__ieee754_pow+0x700>
 800deb2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800df68 <__ieee754_pow+0x3e8>
 800deb6:	eeb0 8a47 	vmov.f32	s16, s14
 800deba:	eef0 8a67 	vmov.f32	s17, s15
 800debe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dec2:	2600      	movs	r6, #0
 800dec4:	4632      	mov	r2, r6
 800dec6:	463b      	mov	r3, r7
 800dec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800decc:	f7f2 f9f4 	bl	80002b8 <__aeabi_dsub>
 800ded0:	4622      	mov	r2, r4
 800ded2:	462b      	mov	r3, r5
 800ded4:	f7f2 fba8 	bl	8000628 <__aeabi_dmul>
 800ded8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dedc:	4680      	mov	r8, r0
 800dede:	4689      	mov	r9, r1
 800dee0:	4650      	mov	r0, sl
 800dee2:	4659      	mov	r1, fp
 800dee4:	f7f2 fba0 	bl	8000628 <__aeabi_dmul>
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	4640      	mov	r0, r8
 800deee:	4649      	mov	r1, r9
 800def0:	f7f2 f9e4 	bl	80002bc <__adddf3>
 800def4:	4632      	mov	r2, r6
 800def6:	463b      	mov	r3, r7
 800def8:	4680      	mov	r8, r0
 800defa:	4689      	mov	r9, r1
 800defc:	4620      	mov	r0, r4
 800defe:	4629      	mov	r1, r5
 800df00:	f7f2 fb92 	bl	8000628 <__aeabi_dmul>
 800df04:	460b      	mov	r3, r1
 800df06:	4604      	mov	r4, r0
 800df08:	460d      	mov	r5, r1
 800df0a:	4602      	mov	r2, r0
 800df0c:	4649      	mov	r1, r9
 800df0e:	4640      	mov	r0, r8
 800df10:	f7f2 f9d4 	bl	80002bc <__adddf3>
 800df14:	4b19      	ldr	r3, [pc, #100]	; (800df7c <__ieee754_pow+0x3fc>)
 800df16:	4299      	cmp	r1, r3
 800df18:	ec45 4b19 	vmov	d9, r4, r5
 800df1c:	4606      	mov	r6, r0
 800df1e:	460f      	mov	r7, r1
 800df20:	468b      	mov	fp, r1
 800df22:	f340 82f0 	ble.w	800e506 <__ieee754_pow+0x986>
 800df26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800df2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800df2e:	4303      	orrs	r3, r0
 800df30:	f000 81e4 	beq.w	800e2fc <__ieee754_pow+0x77c>
 800df34:	ec51 0b18 	vmov	r0, r1, d8
 800df38:	2200      	movs	r2, #0
 800df3a:	2300      	movs	r3, #0
 800df3c:	f7f2 fde6 	bl	8000b0c <__aeabi_dcmplt>
 800df40:	3800      	subs	r0, #0
 800df42:	bf18      	it	ne
 800df44:	2001      	movne	r0, #1
 800df46:	e72b      	b.n	800dda0 <__ieee754_pow+0x220>
 800df48:	60000000 	.word	0x60000000
 800df4c:	3ff71547 	.word	0x3ff71547
 800df50:	f85ddf44 	.word	0xf85ddf44
 800df54:	3e54ae0b 	.word	0x3e54ae0b
 800df58:	55555555 	.word	0x55555555
 800df5c:	3fd55555 	.word	0x3fd55555
 800df60:	652b82fe 	.word	0x652b82fe
 800df64:	3ff71547 	.word	0x3ff71547
 800df68:	00000000 	.word	0x00000000
 800df6c:	bff00000 	.word	0xbff00000
 800df70:	3ff00000 	.word	0x3ff00000
 800df74:	3fd00000 	.word	0x3fd00000
 800df78:	3fe00000 	.word	0x3fe00000
 800df7c:	408fffff 	.word	0x408fffff
 800df80:	4bd5      	ldr	r3, [pc, #852]	; (800e2d8 <__ieee754_pow+0x758>)
 800df82:	402b      	ands	r3, r5
 800df84:	2200      	movs	r2, #0
 800df86:	b92b      	cbnz	r3, 800df94 <__ieee754_pow+0x414>
 800df88:	4bd4      	ldr	r3, [pc, #848]	; (800e2dc <__ieee754_pow+0x75c>)
 800df8a:	f7f2 fb4d 	bl	8000628 <__aeabi_dmul>
 800df8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800df92:	460c      	mov	r4, r1
 800df94:	1523      	asrs	r3, r4, #20
 800df96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800df9a:	4413      	add	r3, r2
 800df9c:	9305      	str	r3, [sp, #20]
 800df9e:	4bd0      	ldr	r3, [pc, #832]	; (800e2e0 <__ieee754_pow+0x760>)
 800dfa0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dfa4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dfa8:	429c      	cmp	r4, r3
 800dfaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dfae:	dd08      	ble.n	800dfc2 <__ieee754_pow+0x442>
 800dfb0:	4bcc      	ldr	r3, [pc, #816]	; (800e2e4 <__ieee754_pow+0x764>)
 800dfb2:	429c      	cmp	r4, r3
 800dfb4:	f340 8162 	ble.w	800e27c <__ieee754_pow+0x6fc>
 800dfb8:	9b05      	ldr	r3, [sp, #20]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	9305      	str	r3, [sp, #20]
 800dfbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dfc2:	2400      	movs	r4, #0
 800dfc4:	00e3      	lsls	r3, r4, #3
 800dfc6:	9307      	str	r3, [sp, #28]
 800dfc8:	4bc7      	ldr	r3, [pc, #796]	; (800e2e8 <__ieee754_pow+0x768>)
 800dfca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfce:	ed93 7b00 	vldr	d7, [r3]
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	ec53 2b17 	vmov	r2, r3, d7
 800dfd8:	eeb0 9a47 	vmov.f32	s18, s14
 800dfdc:	eef0 9a67 	vmov.f32	s19, s15
 800dfe0:	4682      	mov	sl, r0
 800dfe2:	f7f2 f969 	bl	80002b8 <__aeabi_dsub>
 800dfe6:	4652      	mov	r2, sl
 800dfe8:	4606      	mov	r6, r0
 800dfea:	460f      	mov	r7, r1
 800dfec:	462b      	mov	r3, r5
 800dfee:	ec51 0b19 	vmov	r0, r1, d9
 800dff2:	f7f2 f963 	bl	80002bc <__adddf3>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	2000      	movs	r0, #0
 800dffc:	49bb      	ldr	r1, [pc, #748]	; (800e2ec <__ieee754_pow+0x76c>)
 800dffe:	f7f2 fc3d 	bl	800087c <__aeabi_ddiv>
 800e002:	ec41 0b1a 	vmov	d10, r0, r1
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4630      	mov	r0, r6
 800e00c:	4639      	mov	r1, r7
 800e00e:	f7f2 fb0b 	bl	8000628 <__aeabi_dmul>
 800e012:	2300      	movs	r3, #0
 800e014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e018:	9302      	str	r3, [sp, #8]
 800e01a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e01e:	46ab      	mov	fp, r5
 800e020:	106d      	asrs	r5, r5, #1
 800e022:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e026:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e02a:	ec41 0b18 	vmov	d8, r0, r1
 800e02e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e032:	2200      	movs	r2, #0
 800e034:	4640      	mov	r0, r8
 800e036:	4649      	mov	r1, r9
 800e038:	4614      	mov	r4, r2
 800e03a:	461d      	mov	r5, r3
 800e03c:	f7f2 faf4 	bl	8000628 <__aeabi_dmul>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4630      	mov	r0, r6
 800e046:	4639      	mov	r1, r7
 800e048:	f7f2 f936 	bl	80002b8 <__aeabi_dsub>
 800e04c:	ec53 2b19 	vmov	r2, r3, d9
 800e050:	4606      	mov	r6, r0
 800e052:	460f      	mov	r7, r1
 800e054:	4620      	mov	r0, r4
 800e056:	4629      	mov	r1, r5
 800e058:	f7f2 f92e 	bl	80002b8 <__aeabi_dsub>
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	4650      	mov	r0, sl
 800e062:	4659      	mov	r1, fp
 800e064:	f7f2 f928 	bl	80002b8 <__aeabi_dsub>
 800e068:	4642      	mov	r2, r8
 800e06a:	464b      	mov	r3, r9
 800e06c:	f7f2 fadc 	bl	8000628 <__aeabi_dmul>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4630      	mov	r0, r6
 800e076:	4639      	mov	r1, r7
 800e078:	f7f2 f91e 	bl	80002b8 <__aeabi_dsub>
 800e07c:	ec53 2b1a 	vmov	r2, r3, d10
 800e080:	f7f2 fad2 	bl	8000628 <__aeabi_dmul>
 800e084:	ec53 2b18 	vmov	r2, r3, d8
 800e088:	ec41 0b19 	vmov	d9, r0, r1
 800e08c:	ec51 0b18 	vmov	r0, r1, d8
 800e090:	f7f2 faca 	bl	8000628 <__aeabi_dmul>
 800e094:	a37c      	add	r3, pc, #496	; (adr r3, 800e288 <__ieee754_pow+0x708>)
 800e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09a:	4604      	mov	r4, r0
 800e09c:	460d      	mov	r5, r1
 800e09e:	f7f2 fac3 	bl	8000628 <__aeabi_dmul>
 800e0a2:	a37b      	add	r3, pc, #492	; (adr r3, 800e290 <__ieee754_pow+0x710>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f7f2 f908 	bl	80002bc <__adddf3>
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	462b      	mov	r3, r5
 800e0b0:	f7f2 faba 	bl	8000628 <__aeabi_dmul>
 800e0b4:	a378      	add	r3, pc, #480	; (adr r3, 800e298 <__ieee754_pow+0x718>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	f7f2 f8ff 	bl	80002bc <__adddf3>
 800e0be:	4622      	mov	r2, r4
 800e0c0:	462b      	mov	r3, r5
 800e0c2:	f7f2 fab1 	bl	8000628 <__aeabi_dmul>
 800e0c6:	a376      	add	r3, pc, #472	; (adr r3, 800e2a0 <__ieee754_pow+0x720>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f7f2 f8f6 	bl	80002bc <__adddf3>
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	f7f2 faa8 	bl	8000628 <__aeabi_dmul>
 800e0d8:	a373      	add	r3, pc, #460	; (adr r3, 800e2a8 <__ieee754_pow+0x728>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f7f2 f8ed 	bl	80002bc <__adddf3>
 800e0e2:	4622      	mov	r2, r4
 800e0e4:	462b      	mov	r3, r5
 800e0e6:	f7f2 fa9f 	bl	8000628 <__aeabi_dmul>
 800e0ea:	a371      	add	r3, pc, #452	; (adr r3, 800e2b0 <__ieee754_pow+0x730>)
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f7f2 f8e4 	bl	80002bc <__adddf3>
 800e0f4:	4622      	mov	r2, r4
 800e0f6:	4606      	mov	r6, r0
 800e0f8:	460f      	mov	r7, r1
 800e0fa:	462b      	mov	r3, r5
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7f2 fa92 	bl	8000628 <__aeabi_dmul>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4630      	mov	r0, r6
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 fa8c 	bl	8000628 <__aeabi_dmul>
 800e110:	4642      	mov	r2, r8
 800e112:	4604      	mov	r4, r0
 800e114:	460d      	mov	r5, r1
 800e116:	464b      	mov	r3, r9
 800e118:	ec51 0b18 	vmov	r0, r1, d8
 800e11c:	f7f2 f8ce 	bl	80002bc <__adddf3>
 800e120:	ec53 2b19 	vmov	r2, r3, d9
 800e124:	f7f2 fa80 	bl	8000628 <__aeabi_dmul>
 800e128:	4622      	mov	r2, r4
 800e12a:	462b      	mov	r3, r5
 800e12c:	f7f2 f8c6 	bl	80002bc <__adddf3>
 800e130:	4642      	mov	r2, r8
 800e132:	4682      	mov	sl, r0
 800e134:	468b      	mov	fp, r1
 800e136:	464b      	mov	r3, r9
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	f7f2 fa74 	bl	8000628 <__aeabi_dmul>
 800e140:	4b6b      	ldr	r3, [pc, #428]	; (800e2f0 <__ieee754_pow+0x770>)
 800e142:	2200      	movs	r2, #0
 800e144:	4606      	mov	r6, r0
 800e146:	460f      	mov	r7, r1
 800e148:	f7f2 f8b8 	bl	80002bc <__adddf3>
 800e14c:	4652      	mov	r2, sl
 800e14e:	465b      	mov	r3, fp
 800e150:	f7f2 f8b4 	bl	80002bc <__adddf3>
 800e154:	2000      	movs	r0, #0
 800e156:	4604      	mov	r4, r0
 800e158:	460d      	mov	r5, r1
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4640      	mov	r0, r8
 800e160:	4649      	mov	r1, r9
 800e162:	f7f2 fa61 	bl	8000628 <__aeabi_dmul>
 800e166:	4b62      	ldr	r3, [pc, #392]	; (800e2f0 <__ieee754_pow+0x770>)
 800e168:	4680      	mov	r8, r0
 800e16a:	4689      	mov	r9, r1
 800e16c:	2200      	movs	r2, #0
 800e16e:	4620      	mov	r0, r4
 800e170:	4629      	mov	r1, r5
 800e172:	f7f2 f8a1 	bl	80002b8 <__aeabi_dsub>
 800e176:	4632      	mov	r2, r6
 800e178:	463b      	mov	r3, r7
 800e17a:	f7f2 f89d 	bl	80002b8 <__aeabi_dsub>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	4650      	mov	r0, sl
 800e184:	4659      	mov	r1, fp
 800e186:	f7f2 f897 	bl	80002b8 <__aeabi_dsub>
 800e18a:	ec53 2b18 	vmov	r2, r3, d8
 800e18e:	f7f2 fa4b 	bl	8000628 <__aeabi_dmul>
 800e192:	4622      	mov	r2, r4
 800e194:	4606      	mov	r6, r0
 800e196:	460f      	mov	r7, r1
 800e198:	462b      	mov	r3, r5
 800e19a:	ec51 0b19 	vmov	r0, r1, d9
 800e19e:	f7f2 fa43 	bl	8000628 <__aeabi_dmul>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	4639      	mov	r1, r7
 800e1aa:	f7f2 f887 	bl	80002bc <__adddf3>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	460f      	mov	r7, r1
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4640      	mov	r0, r8
 800e1b8:	4649      	mov	r1, r9
 800e1ba:	f7f2 f87f 	bl	80002bc <__adddf3>
 800e1be:	a33e      	add	r3, pc, #248	; (adr r3, 800e2b8 <__ieee754_pow+0x738>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	f7f2 fa2d 	bl	8000628 <__aeabi_dmul>
 800e1ce:	4642      	mov	r2, r8
 800e1d0:	ec41 0b18 	vmov	d8, r0, r1
 800e1d4:	464b      	mov	r3, r9
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	4629      	mov	r1, r5
 800e1da:	f7f2 f86d 	bl	80002b8 <__aeabi_dsub>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	4639      	mov	r1, r7
 800e1e6:	f7f2 f867 	bl	80002b8 <__aeabi_dsub>
 800e1ea:	a335      	add	r3, pc, #212	; (adr r3, 800e2c0 <__ieee754_pow+0x740>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	a334      	add	r3, pc, #208	; (adr r3, 800e2c8 <__ieee754_pow+0x748>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	460f      	mov	r7, r1
 800e1fe:	4620      	mov	r0, r4
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 fa11 	bl	8000628 <__aeabi_dmul>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
 800e20a:	4630      	mov	r0, r6
 800e20c:	4639      	mov	r1, r7
 800e20e:	f7f2 f855 	bl	80002bc <__adddf3>
 800e212:	9a07      	ldr	r2, [sp, #28]
 800e214:	4b37      	ldr	r3, [pc, #220]	; (800e2f4 <__ieee754_pow+0x774>)
 800e216:	4413      	add	r3, r2
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	f7f2 f84e 	bl	80002bc <__adddf3>
 800e220:	4682      	mov	sl, r0
 800e222:	9805      	ldr	r0, [sp, #20]
 800e224:	468b      	mov	fp, r1
 800e226:	f7f2 f995 	bl	8000554 <__aeabi_i2d>
 800e22a:	9a07      	ldr	r2, [sp, #28]
 800e22c:	4b32      	ldr	r3, [pc, #200]	; (800e2f8 <__ieee754_pow+0x778>)
 800e22e:	4413      	add	r3, r2
 800e230:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e234:	4606      	mov	r6, r0
 800e236:	460f      	mov	r7, r1
 800e238:	4652      	mov	r2, sl
 800e23a:	465b      	mov	r3, fp
 800e23c:	ec51 0b18 	vmov	r0, r1, d8
 800e240:	f7f2 f83c 	bl	80002bc <__adddf3>
 800e244:	4642      	mov	r2, r8
 800e246:	464b      	mov	r3, r9
 800e248:	f7f2 f838 	bl	80002bc <__adddf3>
 800e24c:	4632      	mov	r2, r6
 800e24e:	463b      	mov	r3, r7
 800e250:	f7f2 f834 	bl	80002bc <__adddf3>
 800e254:	2000      	movs	r0, #0
 800e256:	4632      	mov	r2, r6
 800e258:	463b      	mov	r3, r7
 800e25a:	4604      	mov	r4, r0
 800e25c:	460d      	mov	r5, r1
 800e25e:	f7f2 f82b 	bl	80002b8 <__aeabi_dsub>
 800e262:	4642      	mov	r2, r8
 800e264:	464b      	mov	r3, r9
 800e266:	f7f2 f827 	bl	80002b8 <__aeabi_dsub>
 800e26a:	ec53 2b18 	vmov	r2, r3, d8
 800e26e:	f7f2 f823 	bl	80002b8 <__aeabi_dsub>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4650      	mov	r0, sl
 800e278:	4659      	mov	r1, fp
 800e27a:	e610      	b.n	800de9e <__ieee754_pow+0x31e>
 800e27c:	2401      	movs	r4, #1
 800e27e:	e6a1      	b.n	800dfc4 <__ieee754_pow+0x444>
 800e280:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e2d0 <__ieee754_pow+0x750>
 800e284:	e617      	b.n	800deb6 <__ieee754_pow+0x336>
 800e286:	bf00      	nop
 800e288:	4a454eef 	.word	0x4a454eef
 800e28c:	3fca7e28 	.word	0x3fca7e28
 800e290:	93c9db65 	.word	0x93c9db65
 800e294:	3fcd864a 	.word	0x3fcd864a
 800e298:	a91d4101 	.word	0xa91d4101
 800e29c:	3fd17460 	.word	0x3fd17460
 800e2a0:	518f264d 	.word	0x518f264d
 800e2a4:	3fd55555 	.word	0x3fd55555
 800e2a8:	db6fabff 	.word	0xdb6fabff
 800e2ac:	3fdb6db6 	.word	0x3fdb6db6
 800e2b0:	33333303 	.word	0x33333303
 800e2b4:	3fe33333 	.word	0x3fe33333
 800e2b8:	e0000000 	.word	0xe0000000
 800e2bc:	3feec709 	.word	0x3feec709
 800e2c0:	dc3a03fd 	.word	0xdc3a03fd
 800e2c4:	3feec709 	.word	0x3feec709
 800e2c8:	145b01f5 	.word	0x145b01f5
 800e2cc:	be3e2fe0 	.word	0xbe3e2fe0
 800e2d0:	00000000 	.word	0x00000000
 800e2d4:	3ff00000 	.word	0x3ff00000
 800e2d8:	7ff00000 	.word	0x7ff00000
 800e2dc:	43400000 	.word	0x43400000
 800e2e0:	0003988e 	.word	0x0003988e
 800e2e4:	000bb679 	.word	0x000bb679
 800e2e8:	0800f008 	.word	0x0800f008
 800e2ec:	3ff00000 	.word	0x3ff00000
 800e2f0:	40080000 	.word	0x40080000
 800e2f4:	0800f028 	.word	0x0800f028
 800e2f8:	0800f018 	.word	0x0800f018
 800e2fc:	a3b3      	add	r3, pc, #716	; (adr r3, 800e5cc <__ieee754_pow+0xa4c>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	4640      	mov	r0, r8
 800e304:	4649      	mov	r1, r9
 800e306:	f7f1 ffd9 	bl	80002bc <__adddf3>
 800e30a:	4622      	mov	r2, r4
 800e30c:	ec41 0b1a 	vmov	d10, r0, r1
 800e310:	462b      	mov	r3, r5
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f7f1 ffcf 	bl	80002b8 <__aeabi_dsub>
 800e31a:	4602      	mov	r2, r0
 800e31c:	460b      	mov	r3, r1
 800e31e:	ec51 0b1a 	vmov	r0, r1, d10
 800e322:	f7f2 fc11 	bl	8000b48 <__aeabi_dcmpgt>
 800e326:	2800      	cmp	r0, #0
 800e328:	f47f ae04 	bne.w	800df34 <__ieee754_pow+0x3b4>
 800e32c:	4aa2      	ldr	r2, [pc, #648]	; (800e5b8 <__ieee754_pow+0xa38>)
 800e32e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e332:	4293      	cmp	r3, r2
 800e334:	f340 8107 	ble.w	800e546 <__ieee754_pow+0x9c6>
 800e338:	151b      	asrs	r3, r3, #20
 800e33a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e33e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e342:	fa4a fa03 	asr.w	sl, sl, r3
 800e346:	44da      	add	sl, fp
 800e348:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e34c:	489b      	ldr	r0, [pc, #620]	; (800e5bc <__ieee754_pow+0xa3c>)
 800e34e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e352:	4108      	asrs	r0, r1
 800e354:	ea00 030a 	and.w	r3, r0, sl
 800e358:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e35c:	f1c1 0114 	rsb	r1, r1, #20
 800e360:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e364:	fa4a fa01 	asr.w	sl, sl, r1
 800e368:	f1bb 0f00 	cmp.w	fp, #0
 800e36c:	f04f 0200 	mov.w	r2, #0
 800e370:	4620      	mov	r0, r4
 800e372:	4629      	mov	r1, r5
 800e374:	bfb8      	it	lt
 800e376:	f1ca 0a00 	rsblt	sl, sl, #0
 800e37a:	f7f1 ff9d 	bl	80002b8 <__aeabi_dsub>
 800e37e:	ec41 0b19 	vmov	d9, r0, r1
 800e382:	4642      	mov	r2, r8
 800e384:	464b      	mov	r3, r9
 800e386:	ec51 0b19 	vmov	r0, r1, d9
 800e38a:	f7f1 ff97 	bl	80002bc <__adddf3>
 800e38e:	a37a      	add	r3, pc, #488	; (adr r3, 800e578 <__ieee754_pow+0x9f8>)
 800e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e394:	2000      	movs	r0, #0
 800e396:	4604      	mov	r4, r0
 800e398:	460d      	mov	r5, r1
 800e39a:	f7f2 f945 	bl	8000628 <__aeabi_dmul>
 800e39e:	ec53 2b19 	vmov	r2, r3, d9
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	460f      	mov	r7, r1
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	f7f1 ff85 	bl	80002b8 <__aeabi_dsub>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	f7f1 ff7f 	bl	80002b8 <__aeabi_dsub>
 800e3ba:	a371      	add	r3, pc, #452	; (adr r3, 800e580 <__ieee754_pow+0xa00>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	f7f2 f932 	bl	8000628 <__aeabi_dmul>
 800e3c4:	a370      	add	r3, pc, #448	; (adr r3, 800e588 <__ieee754_pow+0xa08>)
 800e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ca:	4680      	mov	r8, r0
 800e3cc:	4689      	mov	r9, r1
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	f7f2 f929 	bl	8000628 <__aeabi_dmul>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	4640      	mov	r0, r8
 800e3dc:	4649      	mov	r1, r9
 800e3de:	f7f1 ff6d 	bl	80002bc <__adddf3>
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	460d      	mov	r5, r1
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	4639      	mov	r1, r7
 800e3ee:	f7f1 ff65 	bl	80002bc <__adddf3>
 800e3f2:	4632      	mov	r2, r6
 800e3f4:	463b      	mov	r3, r7
 800e3f6:	4680      	mov	r8, r0
 800e3f8:	4689      	mov	r9, r1
 800e3fa:	f7f1 ff5d 	bl	80002b8 <__aeabi_dsub>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	4620      	mov	r0, r4
 800e404:	4629      	mov	r1, r5
 800e406:	f7f1 ff57 	bl	80002b8 <__aeabi_dsub>
 800e40a:	4642      	mov	r2, r8
 800e40c:	4606      	mov	r6, r0
 800e40e:	460f      	mov	r7, r1
 800e410:	464b      	mov	r3, r9
 800e412:	4640      	mov	r0, r8
 800e414:	4649      	mov	r1, r9
 800e416:	f7f2 f907 	bl	8000628 <__aeabi_dmul>
 800e41a:	a35d      	add	r3, pc, #372	; (adr r3, 800e590 <__ieee754_pow+0xa10>)
 800e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e420:	4604      	mov	r4, r0
 800e422:	460d      	mov	r5, r1
 800e424:	f7f2 f900 	bl	8000628 <__aeabi_dmul>
 800e428:	a35b      	add	r3, pc, #364	; (adr r3, 800e598 <__ieee754_pow+0xa18>)
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	f7f1 ff43 	bl	80002b8 <__aeabi_dsub>
 800e432:	4622      	mov	r2, r4
 800e434:	462b      	mov	r3, r5
 800e436:	f7f2 f8f7 	bl	8000628 <__aeabi_dmul>
 800e43a:	a359      	add	r3, pc, #356	; (adr r3, 800e5a0 <__ieee754_pow+0xa20>)
 800e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e440:	f7f1 ff3c 	bl	80002bc <__adddf3>
 800e444:	4622      	mov	r2, r4
 800e446:	462b      	mov	r3, r5
 800e448:	f7f2 f8ee 	bl	8000628 <__aeabi_dmul>
 800e44c:	a356      	add	r3, pc, #344	; (adr r3, 800e5a8 <__ieee754_pow+0xa28>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f7f1 ff31 	bl	80002b8 <__aeabi_dsub>
 800e456:	4622      	mov	r2, r4
 800e458:	462b      	mov	r3, r5
 800e45a:	f7f2 f8e5 	bl	8000628 <__aeabi_dmul>
 800e45e:	a354      	add	r3, pc, #336	; (adr r3, 800e5b0 <__ieee754_pow+0xa30>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	f7f1 ff2a 	bl	80002bc <__adddf3>
 800e468:	4622      	mov	r2, r4
 800e46a:	462b      	mov	r3, r5
 800e46c:	f7f2 f8dc 	bl	8000628 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f1 ff1e 	bl	80002b8 <__aeabi_dsub>
 800e47c:	4604      	mov	r4, r0
 800e47e:	460d      	mov	r5, r1
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4640      	mov	r0, r8
 800e486:	4649      	mov	r1, r9
 800e488:	f7f2 f8ce 	bl	8000628 <__aeabi_dmul>
 800e48c:	2200      	movs	r2, #0
 800e48e:	ec41 0b19 	vmov	d9, r0, r1
 800e492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e496:	4620      	mov	r0, r4
 800e498:	4629      	mov	r1, r5
 800e49a:	f7f1 ff0d 	bl	80002b8 <__aeabi_dsub>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	ec51 0b19 	vmov	r0, r1, d9
 800e4a6:	f7f2 f9e9 	bl	800087c <__aeabi_ddiv>
 800e4aa:	4632      	mov	r2, r6
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	460d      	mov	r5, r1
 800e4b0:	463b      	mov	r3, r7
 800e4b2:	4640      	mov	r0, r8
 800e4b4:	4649      	mov	r1, r9
 800e4b6:	f7f2 f8b7 	bl	8000628 <__aeabi_dmul>
 800e4ba:	4632      	mov	r2, r6
 800e4bc:	463b      	mov	r3, r7
 800e4be:	f7f1 fefd 	bl	80002bc <__adddf3>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	f7f1 fef5 	bl	80002b8 <__aeabi_dsub>
 800e4ce:	4642      	mov	r2, r8
 800e4d0:	464b      	mov	r3, r9
 800e4d2:	f7f1 fef1 	bl	80002b8 <__aeabi_dsub>
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4602      	mov	r2, r0
 800e4da:	4939      	ldr	r1, [pc, #228]	; (800e5c0 <__ieee754_pow+0xa40>)
 800e4dc:	2000      	movs	r0, #0
 800e4de:	f7f1 feeb 	bl	80002b8 <__aeabi_dsub>
 800e4e2:	ec41 0b10 	vmov	d0, r0, r1
 800e4e6:	ee10 3a90 	vmov	r3, s1
 800e4ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e4ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4f2:	da2b      	bge.n	800e54c <__ieee754_pow+0x9cc>
 800e4f4:	4650      	mov	r0, sl
 800e4f6:	f000 fa1b 	bl	800e930 <scalbn>
 800e4fa:	ec51 0b10 	vmov	r0, r1, d0
 800e4fe:	ec53 2b18 	vmov	r2, r3, d8
 800e502:	f7ff bbee 	b.w	800dce2 <__ieee754_pow+0x162>
 800e506:	4b2f      	ldr	r3, [pc, #188]	; (800e5c4 <__ieee754_pow+0xa44>)
 800e508:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e50c:	429e      	cmp	r6, r3
 800e50e:	f77f af0d 	ble.w	800e32c <__ieee754_pow+0x7ac>
 800e512:	4b2d      	ldr	r3, [pc, #180]	; (800e5c8 <__ieee754_pow+0xa48>)
 800e514:	440b      	add	r3, r1
 800e516:	4303      	orrs	r3, r0
 800e518:	d009      	beq.n	800e52e <__ieee754_pow+0x9ae>
 800e51a:	ec51 0b18 	vmov	r0, r1, d8
 800e51e:	2200      	movs	r2, #0
 800e520:	2300      	movs	r3, #0
 800e522:	f7f2 faf3 	bl	8000b0c <__aeabi_dcmplt>
 800e526:	3800      	subs	r0, #0
 800e528:	bf18      	it	ne
 800e52a:	2001      	movne	r0, #1
 800e52c:	e448      	b.n	800ddc0 <__ieee754_pow+0x240>
 800e52e:	4622      	mov	r2, r4
 800e530:	462b      	mov	r3, r5
 800e532:	f7f1 fec1 	bl	80002b8 <__aeabi_dsub>
 800e536:	4642      	mov	r2, r8
 800e538:	464b      	mov	r3, r9
 800e53a:	f7f2 fafb 	bl	8000b34 <__aeabi_dcmpge>
 800e53e:	2800      	cmp	r0, #0
 800e540:	f43f aef4 	beq.w	800e32c <__ieee754_pow+0x7ac>
 800e544:	e7e9      	b.n	800e51a <__ieee754_pow+0x99a>
 800e546:	f04f 0a00 	mov.w	sl, #0
 800e54a:	e71a      	b.n	800e382 <__ieee754_pow+0x802>
 800e54c:	ec51 0b10 	vmov	r0, r1, d0
 800e550:	4619      	mov	r1, r3
 800e552:	e7d4      	b.n	800e4fe <__ieee754_pow+0x97e>
 800e554:	491a      	ldr	r1, [pc, #104]	; (800e5c0 <__ieee754_pow+0xa40>)
 800e556:	2000      	movs	r0, #0
 800e558:	f7ff bb31 	b.w	800dbbe <__ieee754_pow+0x3e>
 800e55c:	2000      	movs	r0, #0
 800e55e:	2100      	movs	r1, #0
 800e560:	f7ff bb2d 	b.w	800dbbe <__ieee754_pow+0x3e>
 800e564:	4630      	mov	r0, r6
 800e566:	4639      	mov	r1, r7
 800e568:	f7ff bb29 	b.w	800dbbe <__ieee754_pow+0x3e>
 800e56c:	9204      	str	r2, [sp, #16]
 800e56e:	f7ff bb7b 	b.w	800dc68 <__ieee754_pow+0xe8>
 800e572:	2300      	movs	r3, #0
 800e574:	f7ff bb65 	b.w	800dc42 <__ieee754_pow+0xc2>
 800e578:	00000000 	.word	0x00000000
 800e57c:	3fe62e43 	.word	0x3fe62e43
 800e580:	fefa39ef 	.word	0xfefa39ef
 800e584:	3fe62e42 	.word	0x3fe62e42
 800e588:	0ca86c39 	.word	0x0ca86c39
 800e58c:	be205c61 	.word	0xbe205c61
 800e590:	72bea4d0 	.word	0x72bea4d0
 800e594:	3e663769 	.word	0x3e663769
 800e598:	c5d26bf1 	.word	0xc5d26bf1
 800e59c:	3ebbbd41 	.word	0x3ebbbd41
 800e5a0:	af25de2c 	.word	0xaf25de2c
 800e5a4:	3f11566a 	.word	0x3f11566a
 800e5a8:	16bebd93 	.word	0x16bebd93
 800e5ac:	3f66c16c 	.word	0x3f66c16c
 800e5b0:	5555553e 	.word	0x5555553e
 800e5b4:	3fc55555 	.word	0x3fc55555
 800e5b8:	3fe00000 	.word	0x3fe00000
 800e5bc:	fff00000 	.word	0xfff00000
 800e5c0:	3ff00000 	.word	0x3ff00000
 800e5c4:	4090cbff 	.word	0x4090cbff
 800e5c8:	3f6f3400 	.word	0x3f6f3400
 800e5cc:	652b82fe 	.word	0x652b82fe
 800e5d0:	3c971547 	.word	0x3c971547
 800e5d4:	00000000 	.word	0x00000000

0800e5d8 <atan>:
 800e5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5dc:	ec55 4b10 	vmov	r4, r5, d0
 800e5e0:	4bc3      	ldr	r3, [pc, #780]	; (800e8f0 <atan+0x318>)
 800e5e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e5e6:	429e      	cmp	r6, r3
 800e5e8:	46ab      	mov	fp, r5
 800e5ea:	dd18      	ble.n	800e61e <atan+0x46>
 800e5ec:	4bc1      	ldr	r3, [pc, #772]	; (800e8f4 <atan+0x31c>)
 800e5ee:	429e      	cmp	r6, r3
 800e5f0:	dc01      	bgt.n	800e5f6 <atan+0x1e>
 800e5f2:	d109      	bne.n	800e608 <atan+0x30>
 800e5f4:	b144      	cbz	r4, 800e608 <atan+0x30>
 800e5f6:	4622      	mov	r2, r4
 800e5f8:	462b      	mov	r3, r5
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	f7f1 fe5d 	bl	80002bc <__adddf3>
 800e602:	4604      	mov	r4, r0
 800e604:	460d      	mov	r5, r1
 800e606:	e006      	b.n	800e616 <atan+0x3e>
 800e608:	f1bb 0f00 	cmp.w	fp, #0
 800e60c:	f300 8131 	bgt.w	800e872 <atan+0x29a>
 800e610:	a59b      	add	r5, pc, #620	; (adr r5, 800e880 <atan+0x2a8>)
 800e612:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e616:	ec45 4b10 	vmov	d0, r4, r5
 800e61a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61e:	4bb6      	ldr	r3, [pc, #728]	; (800e8f8 <atan+0x320>)
 800e620:	429e      	cmp	r6, r3
 800e622:	dc14      	bgt.n	800e64e <atan+0x76>
 800e624:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e628:	429e      	cmp	r6, r3
 800e62a:	dc0d      	bgt.n	800e648 <atan+0x70>
 800e62c:	a396      	add	r3, pc, #600	; (adr r3, 800e888 <atan+0x2b0>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	ee10 0a10 	vmov	r0, s0
 800e636:	4629      	mov	r1, r5
 800e638:	f7f1 fe40 	bl	80002bc <__adddf3>
 800e63c:	4baf      	ldr	r3, [pc, #700]	; (800e8fc <atan+0x324>)
 800e63e:	2200      	movs	r2, #0
 800e640:	f7f2 fa82 	bl	8000b48 <__aeabi_dcmpgt>
 800e644:	2800      	cmp	r0, #0
 800e646:	d1e6      	bne.n	800e616 <atan+0x3e>
 800e648:	f04f 3aff 	mov.w	sl, #4294967295
 800e64c:	e02b      	b.n	800e6a6 <atan+0xce>
 800e64e:	f000 f963 	bl	800e918 <fabs>
 800e652:	4bab      	ldr	r3, [pc, #684]	; (800e900 <atan+0x328>)
 800e654:	429e      	cmp	r6, r3
 800e656:	ec55 4b10 	vmov	r4, r5, d0
 800e65a:	f300 80bf 	bgt.w	800e7dc <atan+0x204>
 800e65e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e662:	429e      	cmp	r6, r3
 800e664:	f300 80a0 	bgt.w	800e7a8 <atan+0x1d0>
 800e668:	ee10 2a10 	vmov	r2, s0
 800e66c:	ee10 0a10 	vmov	r0, s0
 800e670:	462b      	mov	r3, r5
 800e672:	4629      	mov	r1, r5
 800e674:	f7f1 fe22 	bl	80002bc <__adddf3>
 800e678:	4ba0      	ldr	r3, [pc, #640]	; (800e8fc <atan+0x324>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	f7f1 fe1c 	bl	80002b8 <__aeabi_dsub>
 800e680:	2200      	movs	r2, #0
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e68a:	4620      	mov	r0, r4
 800e68c:	4629      	mov	r1, r5
 800e68e:	f7f1 fe15 	bl	80002bc <__adddf3>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4630      	mov	r0, r6
 800e698:	4639      	mov	r1, r7
 800e69a:	f7f2 f8ef 	bl	800087c <__aeabi_ddiv>
 800e69e:	f04f 0a00 	mov.w	sl, #0
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	460d      	mov	r5, r1
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	f7f1 ffbb 	bl	8000628 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4680      	mov	r8, r0
 800e6b8:	4689      	mov	r9, r1
 800e6ba:	f7f1 ffb5 	bl	8000628 <__aeabi_dmul>
 800e6be:	a374      	add	r3, pc, #464	; (adr r3, 800e890 <atan+0x2b8>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	460f      	mov	r7, r1
 800e6c8:	f7f1 ffae 	bl	8000628 <__aeabi_dmul>
 800e6cc:	a372      	add	r3, pc, #456	; (adr r3, 800e898 <atan+0x2c0>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	f7f1 fdf3 	bl	80002bc <__adddf3>
 800e6d6:	4632      	mov	r2, r6
 800e6d8:	463b      	mov	r3, r7
 800e6da:	f7f1 ffa5 	bl	8000628 <__aeabi_dmul>
 800e6de:	a370      	add	r3, pc, #448	; (adr r3, 800e8a0 <atan+0x2c8>)
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	f7f1 fdea 	bl	80002bc <__adddf3>
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	463b      	mov	r3, r7
 800e6ec:	f7f1 ff9c 	bl	8000628 <__aeabi_dmul>
 800e6f0:	a36d      	add	r3, pc, #436	; (adr r3, 800e8a8 <atan+0x2d0>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	f7f1 fde1 	bl	80002bc <__adddf3>
 800e6fa:	4632      	mov	r2, r6
 800e6fc:	463b      	mov	r3, r7
 800e6fe:	f7f1 ff93 	bl	8000628 <__aeabi_dmul>
 800e702:	a36b      	add	r3, pc, #428	; (adr r3, 800e8b0 <atan+0x2d8>)
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	f7f1 fdd8 	bl	80002bc <__adddf3>
 800e70c:	4632      	mov	r2, r6
 800e70e:	463b      	mov	r3, r7
 800e710:	f7f1 ff8a 	bl	8000628 <__aeabi_dmul>
 800e714:	a368      	add	r3, pc, #416	; (adr r3, 800e8b8 <atan+0x2e0>)
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	f7f1 fdcf 	bl	80002bc <__adddf3>
 800e71e:	4642      	mov	r2, r8
 800e720:	464b      	mov	r3, r9
 800e722:	f7f1 ff81 	bl	8000628 <__aeabi_dmul>
 800e726:	a366      	add	r3, pc, #408	; (adr r3, 800e8c0 <atan+0x2e8>)
 800e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72c:	4680      	mov	r8, r0
 800e72e:	4689      	mov	r9, r1
 800e730:	4630      	mov	r0, r6
 800e732:	4639      	mov	r1, r7
 800e734:	f7f1 ff78 	bl	8000628 <__aeabi_dmul>
 800e738:	a363      	add	r3, pc, #396	; (adr r3, 800e8c8 <atan+0x2f0>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f1 fdbb 	bl	80002b8 <__aeabi_dsub>
 800e742:	4632      	mov	r2, r6
 800e744:	463b      	mov	r3, r7
 800e746:	f7f1 ff6f 	bl	8000628 <__aeabi_dmul>
 800e74a:	a361      	add	r3, pc, #388	; (adr r3, 800e8d0 <atan+0x2f8>)
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	f7f1 fdb2 	bl	80002b8 <__aeabi_dsub>
 800e754:	4632      	mov	r2, r6
 800e756:	463b      	mov	r3, r7
 800e758:	f7f1 ff66 	bl	8000628 <__aeabi_dmul>
 800e75c:	a35e      	add	r3, pc, #376	; (adr r3, 800e8d8 <atan+0x300>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f7f1 fda9 	bl	80002b8 <__aeabi_dsub>
 800e766:	4632      	mov	r2, r6
 800e768:	463b      	mov	r3, r7
 800e76a:	f7f1 ff5d 	bl	8000628 <__aeabi_dmul>
 800e76e:	a35c      	add	r3, pc, #368	; (adr r3, 800e8e0 <atan+0x308>)
 800e770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e774:	f7f1 fda0 	bl	80002b8 <__aeabi_dsub>
 800e778:	4632      	mov	r2, r6
 800e77a:	463b      	mov	r3, r7
 800e77c:	f7f1 ff54 	bl	8000628 <__aeabi_dmul>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	4640      	mov	r0, r8
 800e786:	4649      	mov	r1, r9
 800e788:	f7f1 fd98 	bl	80002bc <__adddf3>
 800e78c:	4622      	mov	r2, r4
 800e78e:	462b      	mov	r3, r5
 800e790:	f7f1 ff4a 	bl	8000628 <__aeabi_dmul>
 800e794:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e798:	4602      	mov	r2, r0
 800e79a:	460b      	mov	r3, r1
 800e79c:	d14b      	bne.n	800e836 <atan+0x25e>
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7f1 fd89 	bl	80002b8 <__aeabi_dsub>
 800e7a6:	e72c      	b.n	800e602 <atan+0x2a>
 800e7a8:	ee10 0a10 	vmov	r0, s0
 800e7ac:	4b53      	ldr	r3, [pc, #332]	; (800e8fc <atan+0x324>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f1 fd81 	bl	80002b8 <__aeabi_dsub>
 800e7b6:	4b51      	ldr	r3, [pc, #324]	; (800e8fc <atan+0x324>)
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	460f      	mov	r7, r1
 800e7bc:	2200      	movs	r2, #0
 800e7be:	4620      	mov	r0, r4
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	f7f1 fd7b 	bl	80002bc <__adddf3>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	f7f2 f855 	bl	800087c <__aeabi_ddiv>
 800e7d2:	f04f 0a01 	mov.w	sl, #1
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	460d      	mov	r5, r1
 800e7da:	e764      	b.n	800e6a6 <atan+0xce>
 800e7dc:	4b49      	ldr	r3, [pc, #292]	; (800e904 <atan+0x32c>)
 800e7de:	429e      	cmp	r6, r3
 800e7e0:	da1d      	bge.n	800e81e <atan+0x246>
 800e7e2:	ee10 0a10 	vmov	r0, s0
 800e7e6:	4b48      	ldr	r3, [pc, #288]	; (800e908 <atan+0x330>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	f7f1 fd64 	bl	80002b8 <__aeabi_dsub>
 800e7f0:	4b45      	ldr	r3, [pc, #276]	; (800e908 <atan+0x330>)
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	460f      	mov	r7, r1
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	f7f1 ff14 	bl	8000628 <__aeabi_dmul>
 800e800:	4b3e      	ldr	r3, [pc, #248]	; (800e8fc <atan+0x324>)
 800e802:	2200      	movs	r2, #0
 800e804:	f7f1 fd5a 	bl	80002bc <__adddf3>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4630      	mov	r0, r6
 800e80e:	4639      	mov	r1, r7
 800e810:	f7f2 f834 	bl	800087c <__aeabi_ddiv>
 800e814:	f04f 0a02 	mov.w	sl, #2
 800e818:	4604      	mov	r4, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	e743      	b.n	800e6a6 <atan+0xce>
 800e81e:	462b      	mov	r3, r5
 800e820:	ee10 2a10 	vmov	r2, s0
 800e824:	4939      	ldr	r1, [pc, #228]	; (800e90c <atan+0x334>)
 800e826:	2000      	movs	r0, #0
 800e828:	f7f2 f828 	bl	800087c <__aeabi_ddiv>
 800e82c:	f04f 0a03 	mov.w	sl, #3
 800e830:	4604      	mov	r4, r0
 800e832:	460d      	mov	r5, r1
 800e834:	e737      	b.n	800e6a6 <atan+0xce>
 800e836:	4b36      	ldr	r3, [pc, #216]	; (800e910 <atan+0x338>)
 800e838:	4e36      	ldr	r6, [pc, #216]	; (800e914 <atan+0x33c>)
 800e83a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e842:	f7f1 fd39 	bl	80002b8 <__aeabi_dsub>
 800e846:	4622      	mov	r2, r4
 800e848:	462b      	mov	r3, r5
 800e84a:	f7f1 fd35 	bl	80002b8 <__aeabi_dsub>
 800e84e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e85a:	f7f1 fd2d 	bl	80002b8 <__aeabi_dsub>
 800e85e:	f1bb 0f00 	cmp.w	fp, #0
 800e862:	4604      	mov	r4, r0
 800e864:	460d      	mov	r5, r1
 800e866:	f6bf aed6 	bge.w	800e616 <atan+0x3e>
 800e86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e86e:	461d      	mov	r5, r3
 800e870:	e6d1      	b.n	800e616 <atan+0x3e>
 800e872:	a51d      	add	r5, pc, #116	; (adr r5, 800e8e8 <atan+0x310>)
 800e874:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e878:	e6cd      	b.n	800e616 <atan+0x3e>
 800e87a:	bf00      	nop
 800e87c:	f3af 8000 	nop.w
 800e880:	54442d18 	.word	0x54442d18
 800e884:	bff921fb 	.word	0xbff921fb
 800e888:	8800759c 	.word	0x8800759c
 800e88c:	7e37e43c 	.word	0x7e37e43c
 800e890:	e322da11 	.word	0xe322da11
 800e894:	3f90ad3a 	.word	0x3f90ad3a
 800e898:	24760deb 	.word	0x24760deb
 800e89c:	3fa97b4b 	.word	0x3fa97b4b
 800e8a0:	a0d03d51 	.word	0xa0d03d51
 800e8a4:	3fb10d66 	.word	0x3fb10d66
 800e8a8:	c54c206e 	.word	0xc54c206e
 800e8ac:	3fb745cd 	.word	0x3fb745cd
 800e8b0:	920083ff 	.word	0x920083ff
 800e8b4:	3fc24924 	.word	0x3fc24924
 800e8b8:	5555550d 	.word	0x5555550d
 800e8bc:	3fd55555 	.word	0x3fd55555
 800e8c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800e8c4:	bfa2b444 	.word	0xbfa2b444
 800e8c8:	52defd9a 	.word	0x52defd9a
 800e8cc:	3fadde2d 	.word	0x3fadde2d
 800e8d0:	af749a6d 	.word	0xaf749a6d
 800e8d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800e8d8:	fe231671 	.word	0xfe231671
 800e8dc:	3fbc71c6 	.word	0x3fbc71c6
 800e8e0:	9998ebc4 	.word	0x9998ebc4
 800e8e4:	3fc99999 	.word	0x3fc99999
 800e8e8:	54442d18 	.word	0x54442d18
 800e8ec:	3ff921fb 	.word	0x3ff921fb
 800e8f0:	440fffff 	.word	0x440fffff
 800e8f4:	7ff00000 	.word	0x7ff00000
 800e8f8:	3fdbffff 	.word	0x3fdbffff
 800e8fc:	3ff00000 	.word	0x3ff00000
 800e900:	3ff2ffff 	.word	0x3ff2ffff
 800e904:	40038000 	.word	0x40038000
 800e908:	3ff80000 	.word	0x3ff80000
 800e90c:	bff00000 	.word	0xbff00000
 800e910:	0800f058 	.word	0x0800f058
 800e914:	0800f038 	.word	0x0800f038

0800e918 <fabs>:
 800e918:	ec51 0b10 	vmov	r0, r1, d0
 800e91c:	ee10 2a10 	vmov	r2, s0
 800e920:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e924:	ec43 2b10 	vmov	d0, r2, r3
 800e928:	4770      	bx	lr
 800e92a:	0000      	movs	r0, r0
 800e92c:	0000      	movs	r0, r0
	...

0800e930 <scalbn>:
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	ec55 4b10 	vmov	r4, r5, d0
 800e936:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e93a:	4606      	mov	r6, r0
 800e93c:	462b      	mov	r3, r5
 800e93e:	b999      	cbnz	r1, 800e968 <scalbn+0x38>
 800e940:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e944:	4323      	orrs	r3, r4
 800e946:	d03f      	beq.n	800e9c8 <scalbn+0x98>
 800e948:	4b35      	ldr	r3, [pc, #212]	; (800ea20 <scalbn+0xf0>)
 800e94a:	4629      	mov	r1, r5
 800e94c:	ee10 0a10 	vmov	r0, s0
 800e950:	2200      	movs	r2, #0
 800e952:	f7f1 fe69 	bl	8000628 <__aeabi_dmul>
 800e956:	4b33      	ldr	r3, [pc, #204]	; (800ea24 <scalbn+0xf4>)
 800e958:	429e      	cmp	r6, r3
 800e95a:	4604      	mov	r4, r0
 800e95c:	460d      	mov	r5, r1
 800e95e:	da10      	bge.n	800e982 <scalbn+0x52>
 800e960:	a327      	add	r3, pc, #156	; (adr r3, 800ea00 <scalbn+0xd0>)
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	e01f      	b.n	800e9a8 <scalbn+0x78>
 800e968:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e96c:	4291      	cmp	r1, r2
 800e96e:	d10c      	bne.n	800e98a <scalbn+0x5a>
 800e970:	ee10 2a10 	vmov	r2, s0
 800e974:	4620      	mov	r0, r4
 800e976:	4629      	mov	r1, r5
 800e978:	f7f1 fca0 	bl	80002bc <__adddf3>
 800e97c:	4604      	mov	r4, r0
 800e97e:	460d      	mov	r5, r1
 800e980:	e022      	b.n	800e9c8 <scalbn+0x98>
 800e982:	460b      	mov	r3, r1
 800e984:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e988:	3936      	subs	r1, #54	; 0x36
 800e98a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e98e:	4296      	cmp	r6, r2
 800e990:	dd0d      	ble.n	800e9ae <scalbn+0x7e>
 800e992:	2d00      	cmp	r5, #0
 800e994:	a11c      	add	r1, pc, #112	; (adr r1, 800ea08 <scalbn+0xd8>)
 800e996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e99a:	da02      	bge.n	800e9a2 <scalbn+0x72>
 800e99c:	a11c      	add	r1, pc, #112	; (adr r1, 800ea10 <scalbn+0xe0>)
 800e99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9a2:	a319      	add	r3, pc, #100	; (adr r3, 800ea08 <scalbn+0xd8>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f7f1 fe3e 	bl	8000628 <__aeabi_dmul>
 800e9ac:	e7e6      	b.n	800e97c <scalbn+0x4c>
 800e9ae:	1872      	adds	r2, r6, r1
 800e9b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e9b4:	428a      	cmp	r2, r1
 800e9b6:	dcec      	bgt.n	800e992 <scalbn+0x62>
 800e9b8:	2a00      	cmp	r2, #0
 800e9ba:	dd08      	ble.n	800e9ce <scalbn+0x9e>
 800e9bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9c8:	ec45 4b10 	vmov	d0, r4, r5
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
 800e9ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e9d2:	da08      	bge.n	800e9e6 <scalbn+0xb6>
 800e9d4:	2d00      	cmp	r5, #0
 800e9d6:	a10a      	add	r1, pc, #40	; (adr r1, 800ea00 <scalbn+0xd0>)
 800e9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9dc:	dac0      	bge.n	800e960 <scalbn+0x30>
 800e9de:	a10e      	add	r1, pc, #56	; (adr r1, 800ea18 <scalbn+0xe8>)
 800e9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9e4:	e7bc      	b.n	800e960 <scalbn+0x30>
 800e9e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9ea:	3236      	adds	r2, #54	; 0x36
 800e9ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <scalbn+0xf8>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	e7d5      	b.n	800e9a8 <scalbn+0x78>
 800e9fc:	f3af 8000 	nop.w
 800ea00:	c2f8f359 	.word	0xc2f8f359
 800ea04:	01a56e1f 	.word	0x01a56e1f
 800ea08:	8800759c 	.word	0x8800759c
 800ea0c:	7e37e43c 	.word	0x7e37e43c
 800ea10:	8800759c 	.word	0x8800759c
 800ea14:	fe37e43c 	.word	0xfe37e43c
 800ea18:	c2f8f359 	.word	0xc2f8f359
 800ea1c:	81a56e1f 	.word	0x81a56e1f
 800ea20:	43500000 	.word	0x43500000
 800ea24:	ffff3cb0 	.word	0xffff3cb0
 800ea28:	3c900000 	.word	0x3c900000

0800ea2c <with_errno>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	4604      	mov	r4, r0
 800ea30:	460d      	mov	r5, r1
 800ea32:	4616      	mov	r6, r2
 800ea34:	f7fc ffe0 	bl	800b9f8 <__errno>
 800ea38:	4629      	mov	r1, r5
 800ea3a:	6006      	str	r6, [r0, #0]
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	bd70      	pop	{r4, r5, r6, pc}

0800ea40 <xflow>:
 800ea40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea42:	4614      	mov	r4, r2
 800ea44:	461d      	mov	r5, r3
 800ea46:	b108      	cbz	r0, 800ea4c <xflow+0xc>
 800ea48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea4c:	e9cd 2300 	strd	r2, r3, [sp]
 800ea50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea54:	4620      	mov	r0, r4
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f1 fde6 	bl	8000628 <__aeabi_dmul>
 800ea5c:	2222      	movs	r2, #34	; 0x22
 800ea5e:	b003      	add	sp, #12
 800ea60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea64:	f7ff bfe2 	b.w	800ea2c <with_errno>

0800ea68 <__math_uflow>:
 800ea68:	b508      	push	{r3, lr}
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea70:	f7ff ffe6 	bl	800ea40 <xflow>
 800ea74:	ec41 0b10 	vmov	d0, r0, r1
 800ea78:	bd08      	pop	{r3, pc}

0800ea7a <__math_oflow>:
 800ea7a:	b508      	push	{r3, lr}
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ea82:	f7ff ffdd 	bl	800ea40 <xflow>
 800ea86:	ec41 0b10 	vmov	d0, r0, r1
 800ea8a:	bd08      	pop	{r3, pc}

0800ea8c <_init>:
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	bf00      	nop
 800ea90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea92:	bc08      	pop	{r3}
 800ea94:	469e      	mov	lr, r3
 800ea96:	4770      	bx	lr

0800ea98 <_fini>:
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9a:	bf00      	nop
 800ea9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9e:	bc08      	pop	{r3}
 800eaa0:	469e      	mov	lr, r3
 800eaa2:	4770      	bx	lr
