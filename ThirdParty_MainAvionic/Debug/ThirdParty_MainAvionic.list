
ThirdParty_MainAvionic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eca4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800ee78  0800ee78  0001ee78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f448  0800f448  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800f448  0800f448  0001f448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f450  0800f450  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f454  0800f454  0001f454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800f458  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004650  20000258  0800f6b0  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200048a8  0800f6b0  000248a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c287  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f97  00000000  00000000  0003c552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  000404f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012be  00000000  00000000  00041cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260a6  00000000  00000000  00042f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dbd4  00000000  00000000  0006903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd3b  00000000  00000000  00086c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079b0  00000000  00000000  0016694c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000258 	.word	0x20000258
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ee5c 	.word	0x0800ee5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000025c 	.word	0x2000025c
 800020c:	0800ee5c 	.word	0x0800ee5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <TrimRead+0x1b8>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4868      	ldr	r0, [pc, #416]	; (800127c <TrimRead+0x1bc>)
 80010dc:	f004 fa6c 	bl	80055b8 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <TrimRead+0x1c0>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2207      	movs	r2, #7
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <TrimRead+0x1bc>)
 80010f6:	f004 fa5f 	bl	80055b8 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <TrimRead+0x1b8>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TrimRead+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <TrimRead+0x1c4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TrimRead+0x1b8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <TrimRead+0x1b8>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <TrimRead+0x1c8>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <TrimRead+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <TrimRead+0x1b8>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <TrimRead+0x1cc>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <TrimRead+0x1b8>)
 8001140:	79db      	ldrb	r3, [r3, #7]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <TrimRead+0x1b8>)
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <TrimRead+0x1d0>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <TrimRead+0x1b8>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TrimRead+0x1b8>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <TrimRead+0x1d4>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <TrimRead+0x1b8>)
 800116e:	7adb      	ldrb	r3, [r3, #11]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <TrimRead+0x1b8>)
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <TrimRead+0x1d8>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <TrimRead+0x1b8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <TrimRead+0x1b8>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <TrimRead+0x1dc>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <TrimRead+0x1b8>)
 800119a:	7bdb      	ldrb	r3, [r3, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <TrimRead+0x1b8>)
 80011a2:	7b9b      	ldrb	r3, [r3, #14]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <TrimRead+0x1e0>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <TrimRead+0x1b8>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <TrimRead+0x1b8>)
 80011b8:	7c1b      	ldrb	r3, [r3, #16]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <TrimRead+0x1e4>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <TrimRead+0x1b8>)
 80011c6:	7cdb      	ldrb	r3, [r3, #19]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <TrimRead+0x1b8>)
 80011ce:	7c9b      	ldrb	r3, [r3, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <TrimRead+0x1e8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <TrimRead+0x1b8>)
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <TrimRead+0x1b8>)
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TrimRead+0x1ec>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <TrimRead+0x1b8>)
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <TrimRead+0x1b8>)
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TrimRead+0x1f0>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <TrimRead+0x1b8>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <TrimRead+0x1f4>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <TrimRead+0x1b8>)
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <TrimRead+0x1b8>)
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <TrimRead+0x1f8>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <TrimRead+0x1b8>)
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <TrimRead+0x1fc>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <TrimRead+0x1b8>)
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <TrimRead+0x1b8>)
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	b21b      	sxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <TrimRead+0x200>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <TrimRead+0x1b8>)
 800124e:	7f9b      	ldrb	r3, [r3, #30]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TrimRead+0x1b8>)
 8001256:	7f5b      	ldrb	r3, [r3, #29]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <TrimRead+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TrimRead+0x1b8>)
 8001268:	7fdb      	ldrb	r3, [r3, #31]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <TrimRead+0x208>)
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000278 	.word	0x20000278
 800127c:	200005c0 	.word	0x200005c0
 8001280:	20000291 	.word	0x20000291
 8001284:	20000298 	.word	0x20000298
 8001288:	200002a0 	.word	0x200002a0
 800128c:	200002a2 	.word	0x200002a2
 8001290:	2000029a 	.word	0x2000029a
 8001294:	200002a4 	.word	0x200002a4
 8001298:	200002a6 	.word	0x200002a6
 800129c:	200002a8 	.word	0x200002a8
 80012a0:	200002aa 	.word	0x200002aa
 80012a4:	200002ac 	.word	0x200002ac
 80012a8:	200002ae 	.word	0x200002ae
 80012ac:	200002b0 	.word	0x200002b0
 80012b0:	200002b2 	.word	0x200002b2
 80012b4:	2000029c 	.word	0x2000029c
 80012b8:	200002b4 	.word	0x200002b4
 80012bc:	2000029e 	.word	0x2000029e
 80012c0:	200002b6 	.word	0x200002b6
 80012c4:	200002b8 	.word	0x200002b8
 80012c8:	200002ba 	.word	0x200002ba

080012cc <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ea:	f7ff fee9 	bl	80010c0 <TrimRead>

	uint8_t datatowrite = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012f6:	23b6      	movs	r3, #182	; 0xb6
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4858      	ldr	r0, [pc, #352]	; (8001474 <BME280_Config+0x1a8>)
 8001312:	f004 f857 	bl	80053c4 <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x56>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a3      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f003 fbc4 	bl	8004ab0 <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f2      	movs	r2, #242	; 0xf2
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <BME280_Config+0x1a8>)
 8001344:	f004 f83e 	bl	80053c4 <HAL_I2C_Mem_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BME280_Config+0x88>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e08a      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f003 fbab 	bl	8004ab0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	22f2      	movs	r2, #242	; 0xf2
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	4840      	ldr	r0, [pc, #256]	; (8001474 <BME280_Config+0x1a8>)
 8001372:	f004 f921 	bl	80055b8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	429a      	cmp	r2, r3
 800137c:	d002      	beq.n	8001384 <BME280_Config+0xb8>
	{
		return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e072      	b.n	800146a <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f5      	movs	r2, #245	; 0xf5
 80013b0:	21ec      	movs	r1, #236	; 0xec
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <BME280_Config+0x1a8>)
 80013b4:	f004 f806 	bl	80053c4 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0xf8>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e052      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f003 fb73 	bl	8004ab0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f5      	movs	r2, #245	; 0xf5
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <BME280_Config+0x1a8>)
 80013e2:	f004 f8e9 	bl	80055b8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x128>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e03a      	b.n	800146a <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ec      	movs	r1, #236	; 0xec
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <BME280_Config+0x1a8>)
 8001428:	f003 ffcc 	bl	80053c4 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x16c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e018      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f003 fb39 	bl	8004ab0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f4      	movs	r2, #244	; 0xf4
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <BME280_Config+0x1a8>)
 8001456:	f004 f8af 	bl	80055b8 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0x19c>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e000      	b.n	800146a <BME280_Config+0x19e>
	}
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	200005c0 	.word	0x200005c0

08001478 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <BMEReadRaw+0x8c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	22d0      	movs	r2, #208	; 0xd0
 8001490:	21ec      	movs	r1, #236	; 0xec
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <BMEReadRaw+0x90>)
 8001494:	f004 f890 	bl	80055b8 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BMEReadRaw+0x8c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d12a      	bne.n	80014f6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2308      	movs	r3, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	463b      	mov	r3, r7
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	22f7      	movs	r2, #247	; 0xf7
 80014b2:	21ec      	movs	r1, #236	; 0xec
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <BMEReadRaw+0x90>)
 80014b6:	f004 f87f 	bl	80055b8 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	0912      	lsrs	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BMEReadRaw+0x94>)
 80014ce:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	031a      	lsls	r2, r3, #12
 80014d4:	793b      	ldrb	r3, [r7, #4]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4313      	orrs	r3, r2
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	0912      	lsrs	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BMEReadRaw+0x98>)
 80014e4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <BMEReadRaw+0x9c>)
 80014f0:	6013      	str	r3, [r2, #0]

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <BMEReadRaw+0x82>
	}
	else return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000274 	.word	0x20000274
 8001508:	200005c0 	.word	0x200005c0
 800150c:	200002c0 	.word	0x200002c0
 8001510:	200002bc 	.word	0x200002bc
 8001514:	200002c4 	.word	0x200002c4

08001518 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <BME280_compensate_T_int32+0x78>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <BME280_compensate_T_int32+0x74>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <BME280_compensate_T_int32+0x7c>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
	return T;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000298 	.word	0x20000298
 8001590:	200002a0 	.word	0x200002a0
 8001594:	200002a2 	.word	0x200002a2
 8001598:	200002d0 	.word	0x200002d0

0800159c <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b0ca      	sub	sp, #296	; 0x128
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <BME280_compensate_P_int64+0x2cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	461c      	mov	r4, r3
 80015b0:	4615      	mov	r5, r2
 80015b2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015b6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015ba:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015dc:	fba3 8903 	umull	r8, r9, r3, r3
 80015e0:	eb02 0309 	add.w	r3, r2, r9
 80015e4:	4699      	mov	r9, r3
 80015e6:	4ba1      	ldr	r3, [pc, #644]	; (800186c <BME280_compensate_P_int64+0x2d0>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015fc:	4603      	mov	r3, r0
 80015fe:	fb03 f209 	mul.w	r2, r3, r9
 8001602:	460b      	mov	r3, r1
 8001604:	fb08 f303 	mul.w	r3, r8, r3
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	fba8 1202 	umull	r1, r2, r8, r2
 8001610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800161a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001624:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001628:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <BME280_compensate_P_int64+0x2d4>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800163e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800164a:	462a      	mov	r2, r5
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001654:	4621      	mov	r1, r4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001660:	4621      	mov	r1, r4
 8001662:	fba3 1301 	umull	r1, r3, r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	460b      	mov	r3, r1
 800166c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001686:	462b      	mov	r3, r5
 8001688:	0459      	lsls	r1, r3, #17
 800168a:	4623      	mov	r3, r4
 800168c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001690:	4623      	mov	r3, r4
 8001692:	0458      	lsls	r0, r3, #17
 8001694:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001698:	1814      	adds	r4, r2, r0
 800169a:	643c      	str	r4, [r7, #64]	; 0x40
 800169c:	414b      	adcs	r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <BME280_compensate_P_int64+0x2d8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	2000      	movs	r0, #0
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	1814      	adds	r4, r2, r0
 80016d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80016d2:	414b      	adcs	r3, r1
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e6:	fb03 f102 	mul.w	r1, r3, r2
 80016ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	18ca      	adds	r2, r1, r3
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001704:	460b      	mov	r3, r1
 8001706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <BME280_compensate_P_int64+0x2dc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	462b      	mov	r3, r5
 800172c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001730:	4642      	mov	r2, r8
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	464b      	mov	r3, r9
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	4641      	mov	r1, r8
 8001744:	fba2 1201 	umull	r1, r2, r2, r1
 8001748:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800174c:	460a      	mov	r2, r1
 800174e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001752:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001768:	4623      	mov	r3, r4
 800176a:	0a18      	lsrs	r0, r3, #8
 800176c:	462b      	mov	r3, r5
 800176e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001772:	462b      	mov	r3, r5
 8001774:	1219      	asrs	r1, r3, #8
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <BME280_compensate_P_int64+0x2e0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001784:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001790:	464a      	mov	r2, r9
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179a:	4644      	mov	r4, r8
 800179c:	fb04 f303 	mul.w	r3, r4, r3
 80017a0:	441a      	add	r2, r3
 80017a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a6:	4644      	mov	r4, r8
 80017a8:	fba3 4304 	umull	r4, r3, r3, r4
 80017ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b0:	4623      	mov	r3, r4
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017cc:	464c      	mov	r4, r9
 80017ce:	0323      	lsls	r3, r4, #12
 80017d0:	4644      	mov	r4, r8
 80017d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017d6:	4644      	mov	r4, r8
 80017d8:	0322      	lsls	r2, r4, #12
 80017da:	1884      	adds	r4, r0, r2
 80017dc:	633c      	str	r4, [r7, #48]	; 0x30
 80017de:	eb41 0303 	adc.w	r3, r1, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BME280_compensate_P_int64+0x2e4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800180c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001810:	462b      	mov	r3, r5
 8001812:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001816:	4642      	mov	r2, r8
 8001818:	fb02 f203 	mul.w	r2, r2, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	4641      	mov	r1, r8
 800182a:	fba2 1201 	umull	r1, r2, r2, r1
 800182e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001832:	460a      	mov	r2, r1
 8001834:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001838:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800184e:	4629      	mov	r1, r5
 8001850:	104a      	asrs	r2, r1, #1
 8001852:	4629      	mov	r1, r5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800185a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185e:	4313      	orrs	r3, r2
 8001860:	d110      	bne.n	8001884 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001862:	2300      	movs	r3, #0
 8001864:	e154      	b.n	8001b10 <BME280_compensate_P_int64+0x574>
 8001866:	bf00      	nop
 8001868:	200002d0 	.word	0x200002d0
 800186c:	200002ac 	.word	0x200002ac
 8001870:	200002aa 	.word	0x200002aa
 8001874:	200002a8 	.word	0x200002a8
 8001878:	200002a6 	.word	0x200002a6
 800187c:	200002a4 	.word	0x200002a4
 8001880:	2000029a 	.word	0x2000029a
	}
	p = 1048576-adc_P;
 8001884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001888:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001892:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a89      	subs	r1, r1, r2
 80018ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80018bc:	4629      	mov	r1, r5
 80018be:	eb61 0303 	sbc.w	r3, r1, r3
 80018c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018c8:	4622      	mov	r2, r4
 80018ca:	462b      	mov	r3, r5
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6239      	str	r1, [r7, #32]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d8:	4621      	mov	r1, r4
 80018da:	1851      	adds	r1, r2, r1
 80018dc:	61b9      	str	r1, [r7, #24]
 80018de:	4629      	mov	r1, r5
 80018e0:	414b      	adcs	r3, r1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1889      	adds	r1, r1, r2
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4649      	mov	r1, r9
 8001906:	eb43 0101 	adc.w	r1, r3, r1
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	008b      	lsls	r3, r1, #2
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001922:	4641      	mov	r1, r8
 8001924:	008a      	lsls	r2, r1, #2
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	460b      	mov	r3, r1
 8001934:	462a      	mov	r2, r5
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	4603      	mov	r3, r0
 800195c:	4622      	mov	r2, r4
 800195e:	189b      	adds	r3, r3, r2
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
 8001962:	462b      	mov	r3, r5
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001970:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001974:	f7ff f9a0 	bl	8000cb8 <__aeabi_ldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <BME280_compensate_P_int64+0x580>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	17da      	asrs	r2, r3, #31
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
 800198c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0b50      	lsrs	r0, r2, #13
 80019dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e0:	1359      	asrs	r1, r3, #13
 80019e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e6:	462b      	mov	r3, r5
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	4622      	mov	r2, r4
 80019f6:	fba2 1200 	umull	r1, r2, r2, r0
 80019fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	0e4a      	lsrs	r2, r1, #25
 8001a1e:	4629      	mov	r1, r5
 8001a20:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a24:	4629      	mov	r1, r5
 8001a26:	164b      	asrs	r3, r1, #25
 8001a28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <BME280_compensate_P_int64+0x584>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	667a      	str	r2, [r7, #100]	; 0x64
 8001a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a7e:	4621      	mov	r1, r4
 8001a80:	0cca      	lsrs	r2, r1, #19
 8001a82:	4629      	mov	r1, r5
 8001a84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a88:	4629      	mov	r1, r5
 8001a8a:	14cb      	asrs	r3, r1, #19
 8001a8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a90:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a98:	1884      	adds	r4, r0, r2
 8001a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a9c:	eb41 0303 	adc.w	r3, r1, r3
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1889      	adds	r1, r1, r2
 8001aae:	6539      	str	r1, [r7, #80]	; 0x50
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0101 	adc.w	r1, r3, r1
 8001ab6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	0a18      	lsrs	r0, r3, #8
 8001ac8:	462b      	mov	r3, r5
 8001aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ace:	462b      	mov	r3, r5
 8001ad0:	1219      	asrs	r1, r3, #8
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <BME280_compensate_P_int64+0x588>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	17da      	asrs	r2, r3, #31
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aec:	464c      	mov	r4, r9
 8001aee:	0123      	lsls	r3, r4, #4
 8001af0:	4644      	mov	r4, r8
 8001af2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001af6:	4644      	mov	r4, r8
 8001af8:	0122      	lsls	r2, r4, #4
 8001afa:	1884      	adds	r4, r0, r2
 8001afc:	603c      	str	r4, [r7, #0]
 8001afe:	eb41 0303 	adc.w	r3, r1, r3
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	200002b2 	.word	0x200002b2
 8001b20:	200002b0 	.word	0x200002b0
 8001b24:	200002ae 	.word	0x200002ae

08001b28 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <bme280_compensate_H_int32+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	039a      	lsls	r2, r3, #14
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <bme280_compensate_H_int32+0xc0>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <bme280_compensate_H_int32+0xc4>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b5c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <bme280_compensate_H_int32+0xc8>)
 8001b60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b64:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b6c:	1292      	asrs	r2, r2, #10
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <bme280_compensate_H_int32+0xcc>)
 8001b70:	8809      	ldrh	r1, [r1, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	fb00 f101 	mul.w	r1, r0, r1
 8001b7a:	12c9      	asrs	r1, r1, #11
 8001b7c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b84:	1292      	asrs	r2, r2, #10
 8001b86:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <bme280_compensate_H_int32+0xd0>)
 8001b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	13db      	asrs	r3, r3, #15
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	13d2      	asrs	r2, r2, #15
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <bme280_compensate_H_int32+0xd4>)
 8001bb0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bb6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bcc:	bfa8      	it	ge
 8001bce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	131b      	asrs	r3, r3, #12
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200002d0 	.word	0x200002d0
 8001be8:	200002b6 	.word	0x200002b6
 8001bec:	200002b8 	.word	0x200002b8
 8001bf0:	200002ba 	.word	0x200002ba
 8001bf4:	2000029e 	.word	0x2000029e
 8001bf8:	200002b4 	.word	0x200002b4
 8001bfc:	2000029c 	.word	0x2000029c

08001c00 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c04:	f7ff fc38 	bl	8001478 <BMEReadRaw>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BME280_Pressure+0x78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c16:	d104      	bne.n	8001c22 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e01b      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BME280_Pressure+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcb8 	bl	800159c <BME280_compensate_P_int64>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc80 	bl	8000534 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <BME280_Pressure+0x80>)
 8001c3a:	f7fe fe1f 	bl	800087c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e003      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc8a 	bl	8000578 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002c0 	.word	0x200002c0
 8001c7c:	20000770 	.word	0x20000770
 8001c80:	40700000 	.word	0x40700000

08001c84 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c88:	f7ff fbf6 	bl	8001478 <BMEReadRaw>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BME280_Humidity+0x78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d104      	bne.n	8001ca6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <BME280_Humidity+0x7c>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <BME280_Humidity+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <bme280_compensate_H_int32>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc3e 	bl	8000534 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <BME280_Humidity+0x80>)
 8001cbe:	f7fe fddd 	bl	800087c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e003      	b.n	8001cde <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BME280_Humidity+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc48 	bl	8000578 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002c4 	.word	0x200002c4
 8001d00:	20000774 	.word	0x20000774
 8001d04:	40900000 	.word	0x40900000

08001d08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001d0c:	f7ff fbb4 	bl	8001478 <BMEReadRaw>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BME280_Temperature+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1e:	d104      	bne.n	8001d2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01b      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BME280_Temperature+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fbf2 	bl	8001518 <BME280_compensate_T_int32>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <BME280_Temperature+0x80>)
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e003      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002bc 	.word	0x200002bc
 8001d84:	2000076c 	.word	0x2000076c
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001d94:	f7ff ff34 	bl	8001c00 <BME280_Pressure>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <BME280_Altitude+0xa8>)
 8001da8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e3c <BME280_Altitude+0xac>
 8001db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <BME280_Altitude+0xb0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e28 <BME280_Altitude+0x98>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f00b fe97 	bl	800db14 <pow>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	4915      	ldr	r1, [pc, #84]	; (8001e44 <BME280_Altitude+0xb4>)
 8001df0:	f7fe fa62 	bl	80002b8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8001e30 <BME280_Altitude+0xa0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff03 	bl	8000c18 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e16:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
}
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ccd745e4 	.word	0xccd745e4
 8001e2c:	3fc85b95 	.word	0x3fc85b95
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40e5a540 	.word	0x40e5a540
 8001e38:	200002cc 	.word	0x200002cc
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	200002c8 	.word	0x200002c8

08001e4c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001e56:	f7ff ff9b 	bl	8001d90 <BME280_Altitude>
 8001e5a:	ee10 3a10 	vmov	r3, s0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbc1 	bl	8000628 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <BME280_Kalman_Alt+0x140>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fa02 	bl	80002bc <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fba5 	bl	8000628 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9d7 	bl	80002bc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4920      	ldr	r1, [pc, #128]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fb80 	bl	8000628 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <BME280_Kalman_Alt+0x14c>)
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb70 	bl	8000628 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <BME280_Kalman_Alt+0x150>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002d8 	.word	0x200002d8
 8001f88:	0800ef90 	.word	0x0800ef90
 8001f8c:	0800ef98 	.word	0x0800ef98
 8001f90:	200002e0 	.word	0x200002e0
 8001f94:	200002e8 	.word	0x200002e8
 8001f98:	3ff00000 	.word	0x3ff00000
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001faa:	f7ff fe29 	bl	8001c00 <BME280_Pressure>
 8001fae:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb27 	bl	8000628 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <BME280_Kalman_Press+0x12c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fc39 	bl	800087c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f7fe f944 	bl	80002b8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <BME280_Kalman_Press+0x130>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe f934 	bl	80002bc <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fadd 	bl	8000628 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <BME280_Kalman_Press+0x138>)
 8002078:	f7fe f91e 	bl	80002b8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe facd 	bl	8000628 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <BME280_Kalman_Press+0x13c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f90e 	bl	80002bc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <BME280_Kalman_Press+0x124>)
 80020a6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BME280_Kalman_Press+0x134>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002f0 	.word	0x200002f0
 80020c8:	0800efa0 	.word	0x0800efa0
 80020cc:	0800efa8 	.word	0x0800efa8
 80020d0:	200002f8 	.word	0x200002f8
 80020d4:	20000010 	.word	0x20000010
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	20000018 	.word	0x20000018

080020e0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80020ea:	f7ff fdcb 	bl	8001c84 <BME280_Humidity>
 80020ee:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <BME280_Kalman_Hum+0x128>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <BME280_Kalman_Hum+0x124>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa87 	bl	8000628 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <BME280_Kalman_Hum+0x12c>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe fb99 	bl	800087c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <BME280_Kalman_Hum+0x130>)
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa62 	bl	8000628 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	f7fe f8a4 	bl	80002b8 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BME280_Kalman_Hum+0x130>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa53 	bl	8000628 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	491e      	ldr	r1, [pc, #120]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BME280_Kalman_Hum+0x130>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <BME280_Kalman_Hum+0x138>)
 80021b8:	f7fe f87e 	bl	80002b8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <BME280_Kalman_Hum+0x13c>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BME280_Kalman_Hum+0x134>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	20000300 	.word	0x20000300
 8002208:	0800efb0 	.word	0x0800efb0
 800220c:	0800efb8 	.word	0x0800efb8
 8002210:	20000308 	.word	0x20000308
 8002214:	20000020 	.word	0x20000020
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	20000028 	.word	0x20000028

08002220 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800222a:	f7ff fd6d 	bl	8001d08 <BME280_Temperature>
 800222e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9de 	bl	8000628 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <BME280_Kalman_Temp+0x12c>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f81f 	bl	80002bc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe faf9 	bl	800087c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <BME280_Kalman_Temp+0x130>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe f804 	bl	80002b8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9b3 	bl	8000628 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022da:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BME280_Kalman_Temp+0x128>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f99d 	bl	8000628 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BME280_Kalman_Temp+0x138>)
 80022f8:	f7fd ffde 	bl	80002b8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <BME280_Kalman_Temp+0x13c>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	ec43 2b17 	vmov	d7, r2, r3
}
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	20000310 	.word	0x20000310
 8002348:	0800efc0 	.word	0x0800efc0
 800234c:	0800efc8 	.word	0x0800efc8
 8002350:	20000318 	.word	0x20000318
 8002354:	20000030 	.word	0x20000030
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	20000038 	.word	0x20000038

08002360 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <vApplicationGetIdleTaskMemory+0x2c>)
 8002370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <vApplicationGetIdleTaskMemory+0x30>)
 8002376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000320 	.word	0x20000320
 8002390:	200003c0 	.word	0x200003c0

08002394 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3371      	adds	r3, #113	; 0x71
 80023ac:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80023ae:	e002      	b.n	80023b6 <prv_parse_number+0x22>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <prv_parse_number+0x30>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d0f5      	beq.n	80023b0 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b2d      	cmp	r3, #45	; 0x2d
 80023ca:	d104      	bne.n	80023d6 <prv_parse_number+0x42>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <prv_parse_number+0x44>
 80023d6:	2300      	movs	r3, #0
 80023d8:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80023da:	e00d      	b.n	80023f8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	461a      	mov	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3b30      	subs	r3, #48	; 0x30
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <prv_parse_number+0x7a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b2f      	cmp	r3, #47	; 0x2f
 8002404:	d903      	bls.n	800240e <prv_parse_number+0x7a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b39      	cmp	r3, #57	; 0x39
 800240c:	d9e6      	bls.n	80023dc <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <prv_parse_number+0x86>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	425b      	negs	r3, r3
 8002418:	e000      	b.n	800241c <prv_parse_number+0x88>
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3371      	adds	r3, #113	; 0x71
 800243c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800243e:	e002      	b.n	8002446 <prv_parse_float_number+0x1e>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <prv_parse_float_number+0x2c>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b20      	cmp	r3, #32
 8002452:	d0f5      	beq.n	8002440 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002454:	2100      	movs	r1, #0
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f009 faee 	bl	800ba38 <strtod>
 800245c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002464:	ec43 2b17 	vmov	d7, r2, r3
}
 8002468:	eeb0 0a47 	vmov.f32	s0, s14
 800246c:	eef0 0a67 	vmov.f32	s1, s15
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002480:	2100      	movs	r1, #0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffd0 	bl	8002428 <prv_parse_float_number>
 8002488:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800248c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002490:	f7fe fb7a 	bl	8000b88 <__aeabi_d2iz>
 8002494:	4603      	mov	r3, r0
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <prv_parse_lat_long+0x94>)
 8002498:	fb82 1203 	smull	r1, r2, r2, r3
 800249c:	1152      	asrs	r2, r2, #5
 800249e:	17db      	asrs	r3, r3, #31
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f856 	bl	8000554 <__aeabi_i2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <prv_parse_lat_long+0x98>)
 80024b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ba:	f7fe f8b5 	bl	8000628 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c6:	f7fd fef7 	bl	80002b8 <__aeabi_dsub>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <prv_parse_lat_long+0x9c>)
 80024d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024dc:	f7fe f9ce 	bl	800087c <__aeabi_ddiv>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024e8:	f7fd fee8 	bl	80002bc <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80024f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80024fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002500:	eef0 0a67 	vmov.f32	s1, s15
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	51eb851f 	.word	0x51eb851f
 8002510:	40590000 	.word	0x40590000
 8002514:	404e0000 	.word	0x404e0000

08002518 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002528:	2900      	cmp	r1, #0
 800252a:	d169      	bne.n	8002600 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3371      	adds	r3, #113	; 0x71
 8002530:	2206      	movs	r2, #6
 8002532:	49ba      	ldr	r1, [pc, #744]	; (800281c <prv_parse_term+0x304>)
 8002534:	4618      	mov	r0, r3
 8002536:	f009 fb98 	bl	800bc6a <strncmp>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <prv_parse_term+0x3c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3371      	adds	r3, #113	; 0x71
 8002544:	2206      	movs	r2, #6
 8002546:	49b6      	ldr	r1, [pc, #728]	; (8002820 <prv_parse_term+0x308>)
 8002548:	4618      	mov	r0, r3
 800254a:	f009 fb8e 	bl	800bc6a <strncmp>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800255c:	e04e      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3371      	adds	r3, #113	; 0x71
 8002562:	2206      	movs	r2, #6
 8002564:	49af      	ldr	r1, [pc, #700]	; (8002824 <prv_parse_term+0x30c>)
 8002566:	4618      	mov	r0, r3
 8002568:	f009 fb7f 	bl	800bc6a <strncmp>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <prv_parse_term+0x6e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3371      	adds	r3, #113	; 0x71
 8002576:	2206      	movs	r2, #6
 8002578:	49ab      	ldr	r1, [pc, #684]	; (8002828 <prv_parse_term+0x310>)
 800257a:	4618      	mov	r0, r3
 800257c:	f009 fb75 	bl	800bc6a <strncmp>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800258e:	e035      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3371      	adds	r3, #113	; 0x71
 8002594:	2206      	movs	r2, #6
 8002596:	49a5      	ldr	r1, [pc, #660]	; (800282c <prv_parse_term+0x314>)
 8002598:	4618      	mov	r0, r3
 800259a:	f009 fb66 	bl	800bc6a <strncmp>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <prv_parse_term+0xa0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3371      	adds	r3, #113	; 0x71
 80025a8:	2206      	movs	r2, #6
 80025aa:	49a1      	ldr	r1, [pc, #644]	; (8002830 <prv_parse_term+0x318>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f009 fb5c 	bl	800bc6a <strncmp>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2203      	movs	r2, #3
 80025bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025c0:	e01c      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3371      	adds	r3, #113	; 0x71
 80025c6:	2206      	movs	r2, #6
 80025c8:	499a      	ldr	r1, [pc, #616]	; (8002834 <prv_parse_term+0x31c>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f009 fb4d 	bl	800bc6a <strncmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <prv_parse_term+0xd2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3371      	adds	r3, #113	; 0x71
 80025da:	2206      	movs	r2, #6
 80025dc:	4996      	ldr	r1, [pc, #600]	; (8002838 <prv_parse_term+0x320>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f009 fb43 	bl	800bc6a <strncmp>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2204      	movs	r2, #4
 80025ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025f2:	e003      	b.n	80025fc <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e231      	b.n	8002a64 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002606:	2900      	cmp	r1, #0
 8002608:	f000 822b 	beq.w	8002a62 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002612:	2901      	cmp	r1, #1
 8002614:	f040 80c9 	bne.w	80027aa <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800261e:	3b01      	subs	r3, #1
 8002620:	2b0a      	cmp	r3, #10
 8002622:	f200 8213 	bhi.w	8002a4c <prv_parse_term+0x534>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <prv_parse_term+0x114>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002659 	.word	0x08002659
 8002630:	080026d3 	.word	0x080026d3
 8002634:	080026e9 	.word	0x080026e9
 8002638:	08002713 	.word	0x08002713
 800263c:	08002729 	.word	0x08002729
 8002640:	08002753 	.word	0x08002753
 8002644:	08002767 	.word	0x08002767
 8002648:	08002a4d 	.word	0x08002a4d
 800264c:	0800277b 	.word	0x0800277b
 8002650:	08002a4d 	.word	0x08002a4d
 8002654:	08002793 	.word	0x08002793
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800265e:	3b30      	subs	r3, #48	; 0x30
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002672:	4413      	add	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3b30      	subs	r3, #48	; 0x30
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002686:	3b30      	subs	r3, #48	; 0x30
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800269a:	4413      	add	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b30      	subs	r3, #48	; 0x30
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80026ae:	3b30      	subs	r3, #48	; 0x30
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80026c2:	4413      	add	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b30      	subs	r3, #48	; 0x30
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80026d0:	e1c7      	b.n	8002a62 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fed0 	bl	8002478 <prv_parse_lat_long>
 80026d8:	eeb0 7a40 	vmov.f32	s14, s0
 80026dc:	eef0 7a60 	vmov.f32	s15, s1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80026e6:	e1bc      	b.n	8002a62 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026ee:	2b53      	cmp	r3, #83	; 0x53
 80026f0:	d005      	beq.n	80026fe <prv_parse_term+0x1e6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026f8:	2b73      	cmp	r3, #115	; 0x73
 80026fa:	f040 81a9 	bne.w	8002a50 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002704:	4690      	mov	r8, r2
 8002706:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8002710:	e19e      	b.n	8002a50 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff feb0 	bl	8002478 <prv_parse_lat_long>
 8002718:	eeb0 7a40 	vmov.f32	s14, s0
 800271c:	eef0 7a60 	vmov.f32	s15, s1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002726:	e19c      	b.n	8002a62 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800272e:	2b57      	cmp	r3, #87	; 0x57
 8002730:	d005      	beq.n	800273e <prv_parse_term+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002738:	2b77      	cmp	r3, #119	; 0x77
 800273a:	f040 818b 	bne.w	8002a54 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002744:	4614      	mov	r4, r2
 8002746:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002750:	e180      	b.n	8002a54 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002752:	2100      	movs	r1, #0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fe1d 	bl	8002394 <prv_parse_number>
 800275a:	4603      	mov	r3, r0
 800275c:	b2da      	uxtb	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002764:	e17d      	b.n	8002a62 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fe13 	bl	8002394 <prv_parse_number>
 800276e:	4603      	mov	r3, r0
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002778:	e173      	b.n	8002a62 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fe53 	bl	8002428 <prv_parse_float_number>
 8002782:	eeb0 7a40 	vmov.f32	s14, s0
 8002786:	eef0 7a60 	vmov.f32	s15, s1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002790:	e167      	b.n	8002a62 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002792:	2100      	movs	r1, #0
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fe47 	bl	8002428 <prv_parse_float_number>
 800279a:	eeb0 7a40 	vmov.f32	s14, s0
 800279e:	eef0 7a60 	vmov.f32	s15, s1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80027a8:	e15b      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80027b0:	2902      	cmp	r1, #2
 80027b2:	f040 8083 	bne.w	80028bc <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80027bc:	3b02      	subs	r3, #2
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d860      	bhi.n	8002884 <prv_parse_term+0x36c>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <prv_parse_term+0x2b0>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002885 	.word	0x08002885
 80027d0:	08002885 	.word	0x08002885
 80027d4:	08002885 	.word	0x08002885
 80027d8:	08002885 	.word	0x08002885
 80027dc:	08002885 	.word	0x08002885
 80027e0:	08002885 	.word	0x08002885
 80027e4:	08002885 	.word	0x08002885
 80027e8:	08002885 	.word	0x08002885
 80027ec:	08002885 	.word	0x08002885
 80027f0:	08002885 	.word	0x08002885
 80027f4:	08002885 	.word	0x08002885
 80027f8:	08002885 	.word	0x08002885
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	08002855 	.word	0x08002855
 8002804:	0800286d 	.word	0x0800286d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fdc2 	bl	8002394 <prv_parse_number>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800281a:	e122      	b.n	8002a62 <prv_parse_term+0x54a>
 800281c:	0800ee78 	.word	0x0800ee78
 8002820:	0800ee80 	.word	0x0800ee80
 8002824:	0800ee88 	.word	0x0800ee88
 8002828:	0800ee90 	.word	0x0800ee90
 800282c:	0800ee98 	.word	0x0800ee98
 8002830:	0800eea0 	.word	0x0800eea0
 8002834:	0800eea8 	.word	0x0800eea8
 8002838:	0800eeb0 	.word	0x0800eeb0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800283c:	2100      	movs	r1, #0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fdf2 	bl	8002428 <prv_parse_float_number>
 8002844:	eeb0 7a40 	vmov.f32	s14, s0
 8002848:	eef0 7a60 	vmov.f32	s15, s1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002852:	e106      	b.n	8002a62 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002854:	2100      	movs	r1, #0
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fde6 	bl	8002428 <prv_parse_float_number>
 800285c:	eeb0 7a40 	vmov.f32	s14, s0
 8002860:	eef0 7a60 	vmov.f32	s15, s1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800286a:	e0fa      	b.n	8002a62 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800286c:	2100      	movs	r1, #0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fdda 	bl	8002428 <prv_parse_float_number>
 8002874:	eeb0 7a40 	vmov.f32	s14, s0
 8002878:	eef0 7a60 	vmov.f32	s15, s1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002882:	e0ee      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800288a:	2b02      	cmp	r3, #2
 800288c:	f240 80e4 	bls.w	8002a58 <prv_parse_term+0x540>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002896:	2b0e      	cmp	r3, #14
 8002898:	f200 80de 	bhi.w	8002a58 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800289c:	2100      	movs	r1, #0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fd78 	bl	8002394 <prv_parse_number>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028ac:	3b03      	subs	r3, #3
 80028ae:	b2d1      	uxtb	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80028ba:	e0cd      	b.n	8002a58 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028c2:	2903      	cmp	r1, #3
 80028c4:	d11b      	bne.n	80028fe <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d002      	beq.n	80028d6 <prv_parse_term+0x3be>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d00a      	beq.n	80028ea <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80028d4:	e0c5      	b.n	8002a62 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80028d6:	2100      	movs	r1, #0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fd5b 	bl	8002394 <prv_parse_number>
 80028de:	4603      	mov	r3, r0
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80028e8:	e0bb      	b.n	8002a62 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80028ea:	2100      	movs	r1, #0
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fd51 	bl	8002394 <prv_parse_number>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80028fc:	e0b1      	b.n	8002a62 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002904:	2904      	cmp	r1, #4
 8002906:	f040 80ac 	bne.w	8002a62 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002910:	3902      	subs	r1, #2
 8002912:	2909      	cmp	r1, #9
 8002914:	f200 80a2 	bhi.w	8002a5c <prv_parse_term+0x544>
 8002918:	a001      	add	r0, pc, #4	; (adr r0, 8002920 <prv_parse_term+0x408>)
 800291a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002949 	.word	0x08002949
 8002924:	08002a5d 	.word	0x08002a5d
 8002928:	08002a5d 	.word	0x08002a5d
 800292c:	08002a5d 	.word	0x08002a5d
 8002930:	08002a5d 	.word	0x08002a5d
 8002934:	08002963 	.word	0x08002963
 8002938:	0800297b 	.word	0x0800297b
 800293c:	08002993 	.word	0x08002993
 8002940:	08002a0d 	.word	0x08002a0d
 8002944:	08002a25 	.word	0x08002a25
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800294e:	2b41      	cmp	r3, #65	; 0x41
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002960:	e07f      	b.n	8002a62 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002962:	2100      	movs	r1, #0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fd5f 	bl	8002428 <prv_parse_float_number>
 800296a:	eeb0 7a40 	vmov.f32	s14, s0
 800296e:	eef0 7a60 	vmov.f32	s15, s1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002978:	e073      	b.n	8002a62 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fd53 	bl	8002428 <prv_parse_float_number>
 8002982:	eeb0 7a40 	vmov.f32	s14, s0
 8002986:	eef0 7a60 	vmov.f32	s15, s1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002990:	e067      	b.n	8002a62 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002998:	3b30      	subs	r3, #48	; 0x30
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80029ac:	4413      	add	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3b30      	subs	r3, #48	; 0x30
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80029c0:	3b30      	subs	r3, #48	; 0x30
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029d4:	4413      	add	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3b30      	subs	r3, #48	; 0x30
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80029e8:	3b30      	subs	r3, #48	; 0x30
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80029fc:	4413      	add	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3b30      	subs	r3, #48	; 0x30
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002a0a:	e02a      	b.n	8002a62 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fd0a 	bl	8002428 <prv_parse_float_number>
 8002a14:	eeb0 7a40 	vmov.f32	s14, s0
 8002a18:	eef0 7a60 	vmov.f32	s15, s1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002a22:	e01e      	b.n	8002a62 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a2a:	2957      	cmp	r1, #87	; 0x57
 8002a2c:	d004      	beq.n	8002a38 <prv_parse_term+0x520>
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a34:	2977      	cmp	r1, #119	; 0x77
 8002a36:	d113      	bne.n	8002a60 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002a4a:	e009      	b.n	8002a60 <prv_parse_term+0x548>
                break;
 8002a4c:	bf00      	nop
 8002a4e:	e008      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a50:	bf00      	nop
 8002a52:	e006      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a54:	bf00      	nop
 8002a56:	e004      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a60:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a6e:	bf00      	nop

08002a70 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a7e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a80:	d90d      	bls.n	8002a9e <prv_check_crc+0x2e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a88:	2b39      	cmp	r3, #57	; 0x39
 8002a8a:	d808      	bhi.n	8002a9e <prv_check_crc+0x2e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a92:	3b30      	subs	r3, #48	; 0x30
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	b25a      	sxtb	r2, r3
 8002a9c:	e026      	b.n	8002aec <prv_check_crc+0x7c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aa4:	2b60      	cmp	r3, #96	; 0x60
 8002aa6:	d90d      	bls.n	8002ac4 <prv_check_crc+0x54>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aae:	2b7a      	cmp	r3, #122	; 0x7a
 8002ab0:	d808      	bhi.n	8002ac4 <prv_check_crc+0x54>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ab8:	3b57      	subs	r3, #87	; 0x57
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	b25a      	sxtb	r2, r3
 8002ac2:	e013      	b.n	8002aec <prv_check_crc+0x7c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d90d      	bls.n	8002aea <prv_check_crc+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ad4:	2b5a      	cmp	r3, #90	; 0x5a
 8002ad6:	d808      	bhi.n	8002aea <prv_check_crc+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ade:	3b37      	subs	r3, #55	; 0x37
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	b25a      	sxtb	r2, r3
 8002ae8:	e000      	b.n	8002aec <prv_check_crc+0x7c>
 8002aea:	2200      	movs	r2, #0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002af2:	2b2f      	cmp	r3, #47	; 0x2f
 8002af4:	d90c      	bls.n	8002b10 <prv_check_crc+0xa0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002afc:	2b39      	cmp	r3, #57	; 0x39
 8002afe:	d807      	bhi.n	8002b10 <prv_check_crc+0xa0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	e028      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b16:	2b60      	cmp	r3, #96	; 0x60
 8002b18:	d90e      	bls.n	8002b38 <prv_check_crc+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b20:	2b7a      	cmp	r3, #122	; 0x7a
 8002b22:	d809      	bhi.n	8002b38 <prv_check_crc+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b2a:	3b57      	subs	r3, #87	; 0x57
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	e014      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d90e      	bls.n	8002b60 <prv_check_crc+0xf0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b48:	2b5a      	cmp	r3, #90	; 0x5a
 8002b4a:	d809      	bhi.n	8002b60 <prv_check_crc+0xf0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b52:	3b37      	subs	r3, #55	; 0x37
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	e000      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b60:	2300      	movs	r3, #0
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d136      	bne.n	8002c06 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c04:	e061      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d121      	bne.n	8002c54 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	33a1      	adds	r3, #161	; 0xa1
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f009 f8e8 	bl	800be22 <memcpy>
 8002c52:	e03a      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d106      	bne.n	8002c6c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002c6a:	e02e      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d129      	bne.n	8002cca <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002cdc:	22b0      	movs	r2, #176	; 0xb0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f008 ffba 	bl	800bc5a <memset>
    return 1;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002d00:	e0ad      	b.n	8002e5e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b24      	cmp	r3, #36	; 0x24
 8002d08:	d128      	bne.n	8002d5c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3370      	adds	r3, #112	; 0x70
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f008 ffa1 	bl	800bc5a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d1e:	2b0b      	cmp	r3, #11
 8002d20:	f200 8097 	bhi.w	8002e52 <lwgps_process+0x162>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d5a:	e07a      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b2c      	cmp	r3, #44	; 0x2c
 8002d62:	d11d      	bne.n	8002da0 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fbd7 	bl	8002518 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4053      	eors	r3, r2
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002d9e:	e058      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b2a      	cmp	r3, #42	; 0x2a
 8002da6:	d117      	bne.n	8002dd8 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fbb5 	bl	8002518 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002dd6:	e03c      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0d      	cmp	r3, #13
 8002dde:	d109      	bne.n	8002df4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fe45 	bl	8002a70 <prv_check_crc>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d032      	beq.n	8002e52 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff feca 	bl	8002b86 <prv_copy_from_tmp_memory>
 8002df2:	e02e      	b.n	8002e52 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4053      	eors	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e18:	2b0b      	cmp	r3, #11
 8002e1a:	d81a      	bhi.n	8002e52 <lwgps_process+0x162>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e22:	4619      	mov	r1, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af4e 	bne.w	8002d02 <lwgps_process+0x12>
        }
    }
    return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_RxCpltCallback>:
typedef union {
	float sayi;
	unsigned char array[4];
} float32toInt8;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_UART_RxCpltCallback+0x68>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d127      	bne.n	8002ed0 <HAL_UART_RxCpltCallback+0x60>
		if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d010      	beq.n	8002eaa <HAL_UART_RxCpltCallback+0x3a>
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	b2d1      	uxtb	r1, r2
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e9c:	7011      	strb	r1, [r2, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002ea2:	7819      	ldrb	r1, [r3, #0]
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002ea6:	5499      	strb	r1, [r3, r2]
 8002ea8:	e00d      	b.n	8002ec6 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index + 1);
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_UART_RxCpltCallback+0x78>)
 8002eb6:	f7ff ff1b 	bl	8002cf0 <lwgps_process>
			rx_index = 0;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <HAL_UART_RxCpltCallback+0x68>)
 8002ecc:	f004 fbeb 	bl	80076a6 <HAL_UART_Receive_IT>
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200006a0 	.word	0x200006a0
 8002edc:	20000921 	.word	0x20000921
 8002ee0:	20000920 	.word	0x20000920
 8002ee4:	200008a0 	.word	0x200008a0
 8002ee8:	200007f0 	.word	0x200007f0

08002eec <initSensorBuffer>:

//roketin aşağı gittiği anlayan verilerin doldurulduğu buffer'i sıfırlayan kod.
void initSensorBuffer() {
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	e009      	b.n	8002f0c <initSensorBuffer+0x20>
		sensorValues[i] = 0.0f;
 8002ef8:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <initSensorBuffer+0x34>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b18      	cmp	r3, #24
 8002f10:	ddf2      	ble.n	8002ef8 <initSensorBuffer+0xc>
	}
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	20000700 	.word	0x20000700

08002f24 <processSensorValues>:

//roketin aşağı indiğini anlayan kod (buffer'a veri atıp karşılaştırma yapıyor)
void processSensorValues() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i += 4) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e023      	b.n	8002f78 <processSensorValues+0x54>
		if (i + 24 < BUFFER_SIZE) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	dc18      	bgt.n	8002f68 <processSensorValues+0x44>
			if (sensorValues[i] >= sensorValues[i + 24]) {
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <processSensorValues+0x64>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3318      	adds	r3, #24
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <processSensorValues+0x64>)
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	db03      	blt.n	8002f62 <processSensorValues+0x3e>
				flagDown = 1;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <processSensorValues+0x68>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e002      	b.n	8002f68 <processSensorValues+0x44>
			} else {
				flagDown = 0;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <processSensorValues+0x68>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
			}
		}

		// Buffer'ı sıfırla
		if (i == BUFFER_SIZE - 4) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b15      	cmp	r3, #21
 8002f6c:	d101      	bne.n	8002f72 <processSensorValues+0x4e>
			initSensorBuffer();
 8002f6e:	f7ff ffbd 	bl	8002eec <initSensorBuffer>
	for (int i = 0; i < BUFFER_SIZE; i += 4) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	ddd8      	ble.n	8002f30 <processSensorValues+0xc>
		}
	}
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000700 	.word	0x20000700
 8002f8c:	200007e8 	.word	0x200007e8

08002f90 <cs>:

unsigned char cs() {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
	int checkSum = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
	for (int i = 4; i < 51; i++) {
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	e00a      	b.n	8002fb6 <cs+0x26>
		checkSum += buff[i];
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <cs+0x48>)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	607b      	str	r3, [r7, #4]
	for (int i = 4; i < 51; i++) {
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b32      	cmp	r3, #50	; 0x32
 8002fba:	ddf1      	ble.n	8002fa0 <cs+0x10>
	}
	return (unsigned char) (checkSum % 256);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	425a      	negs	r2, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	bf58      	it	pl
 8002fc6:	4253      	negpl	r3, r2
 8002fc8:	b2db      	uxtb	r3, r3
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200007b0 	.word	0x200007b0

08002fdc <paket>:

void paket(int sayac) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF; //sabit
 8002fe4:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <paket+0x200>)
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF; //sabit
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <paket+0x200>)
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	705a      	strb	r2, [r3, #1]
	buff[2] = 0x54; //sabit
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <paket+0x200>)
 8002ff2:	2254      	movs	r2, #84	; 0x54
 8002ff4:	709a      	strb	r2, [r3, #2]
	buff[3] = 0x52; //sabit
 8002ff6:	4b79      	ldr	r3, [pc, #484]	; (80031dc <paket+0x200>)
 8002ff8:	2252      	movs	r2, #82	; 0x52
 8002ffa:	70da      	strb	r2, [r3, #3]
	buff[4] = 0x01; //id = 1 kabul ettik
 8002ffc:	4b77      	ldr	r3, [pc, #476]	; (80031dc <paket+0x200>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	711a      	strb	r2, [r3, #4]
	buff[5] = sayac; //paket sayaci
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b75      	ldr	r3, [pc, #468]	; (80031dc <paket+0x200>)
 8003008:	715a      	strb	r2, [r3, #5]

	float32toInt8 alt_donusturme;
	alt_donusturme.sayi = Alt;
 800300a:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <paket+0x204>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
	buff[6] = alt_donusturme.array[0];
 8003010:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003014:	4b71      	ldr	r3, [pc, #452]	; (80031dc <paket+0x200>)
 8003016:	719a      	strb	r2, [r3, #6]
	buff[7] = alt_donusturme.array[1];
 8003018:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800301c:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <paket+0x200>)
 800301e:	71da      	strb	r2, [r3, #7]
	buff[8] = alt_donusturme.array[2];
 8003020:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <paket+0x200>)
 8003026:	721a      	strb	r2, [r3, #8]
	buff[9] = alt_donusturme.array[3];
 8003028:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <paket+0x200>)
 800302e:	725a      	strb	r2, [r3, #9]

	float32toInt8 gpsAltDonusturme;
	gpsAltDonusturme.sayi = gpsAlt;
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <paket+0x208>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
	buff[10] = gpsAltDonusturme.array[0];
 8003036:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800303a:	4b68      	ldr	r3, [pc, #416]	; (80031dc <paket+0x200>)
 800303c:	729a      	strb	r2, [r3, #10]
	buff[11] = gpsAltDonusturme.array[1];
 800303e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8003042:	4b66      	ldr	r3, [pc, #408]	; (80031dc <paket+0x200>)
 8003044:	72da      	strb	r2, [r3, #11]
	buff[12] = gpsAltDonusturme.array[2];
 8003046:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800304a:	4b64      	ldr	r3, [pc, #400]	; (80031dc <paket+0x200>)
 800304c:	731a      	strb	r2, [r3, #12]
	buff[13] = gpsAltDonusturme.array[3];
 800304e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003052:	4b62      	ldr	r3, [pc, #392]	; (80031dc <paket+0x200>)
 8003054:	735a      	strb	r2, [r3, #13]

	float32toInt8 gpsLatDonusturme;
	gpsLatDonusturme.sayi = gpsLat;
 8003056:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <paket+0x20c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
	buff[14] = gpsLatDonusturme.array[0];
 800305c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003060:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <paket+0x200>)
 8003062:	739a      	strb	r2, [r3, #14]
	buff[15] = gpsLatDonusturme.array[1];
 8003064:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003068:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <paket+0x200>)
 800306a:	73da      	strb	r2, [r3, #15]
	buff[16] = gpsLatDonusturme.array[2];
 800306c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003070:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <paket+0x200>)
 8003072:	741a      	strb	r2, [r3, #16]
	buff[17] = gpsLatDonusturme.array[3];
 8003074:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <paket+0x200>)
 800307a:	745a      	strb	r2, [r3, #17]

	float32toInt8 gpsLongDonusturme;
	gpsLongDonusturme.sayi = gpsLong;
 800307c:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <paket+0x210>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
	buff[18] = gpsLongDonusturme.array[0];
 8003082:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003086:	4b55      	ldr	r3, [pc, #340]	; (80031dc <paket+0x200>)
 8003088:	749a      	strb	r2, [r3, #18]
	buff[19] = gpsLongDonusturme.array[1];
 800308a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <paket+0x200>)
 8003090:	74da      	strb	r2, [r3, #19]
	buff[20] = gpsLongDonusturme.array[2];
 8003092:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003096:	4b51      	ldr	r3, [pc, #324]	; (80031dc <paket+0x200>)
 8003098:	751a      	strb	r2, [r3, #20]
	buff[21] = gpsLongDonusturme.array[3];
 800309a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800309e:	4b4f      	ldr	r3, [pc, #316]	; (80031dc <paket+0x200>)
 80030a0:	755a      	strb	r2, [r3, #21]

	float32toInt8 AccX;
	AccX.sayi = acX;
 80030a2:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <paket+0x214>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
	buff[22] = AccX.array[0];
 80030a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <paket+0x200>)
 80030ae:	759a      	strb	r2, [r3, #22]
	buff[23] = AccX.array[1];
 80030b0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80030b4:	4b49      	ldr	r3, [pc, #292]	; (80031dc <paket+0x200>)
 80030b6:	75da      	strb	r2, [r3, #23]
	buff[24] = AccX.array[2];
 80030b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030bc:	4b47      	ldr	r3, [pc, #284]	; (80031dc <paket+0x200>)
 80030be:	761a      	strb	r2, [r3, #24]
	buff[25] = AccX.array[3];
 80030c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030c4:	4b45      	ldr	r3, [pc, #276]	; (80031dc <paket+0x200>)
 80030c6:	765a      	strb	r2, [r3, #25]

	float32toInt8 AccY;
	AccY.sayi = acY;
 80030c8:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <paket+0x218>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	623b      	str	r3, [r7, #32]
	buff[26] = AccY.array[0];
 80030ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <paket+0x200>)
 80030d4:	769a      	strb	r2, [r3, #26]
	buff[27] = AccY.array[1];
 80030d6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80030da:	4b40      	ldr	r3, [pc, #256]	; (80031dc <paket+0x200>)
 80030dc:	76da      	strb	r2, [r3, #27]
	buff[28] = AccY.array[2];
 80030de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <paket+0x200>)
 80030e4:	771a      	strb	r2, [r3, #28]
	buff[29] = AccY.array[3];
 80030e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80030ea:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <paket+0x200>)
 80030ec:	775a      	strb	r2, [r3, #29]

	float32toInt8 AccZ;
	AccZ.sayi = acZ;
 80030ee:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <paket+0x21c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	61fb      	str	r3, [r7, #28]
	buff[30] = AccZ.array[0];
 80030f4:	7f3a      	ldrb	r2, [r7, #28]
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <paket+0x200>)
 80030f8:	779a      	strb	r2, [r3, #30]
	buff[31] = AccZ.array[1];
 80030fa:	7f7a      	ldrb	r2, [r7, #29]
 80030fc:	4b37      	ldr	r3, [pc, #220]	; (80031dc <paket+0x200>)
 80030fe:	77da      	strb	r2, [r3, #31]
	buff[32] = AccZ.array[2];
 8003100:	7fba      	ldrb	r2, [r7, #30]
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <paket+0x200>)
 8003104:	f883 2020 	strb.w	r2, [r3, #32]
	buff[33] = AccZ.array[3];
 8003108:	7ffa      	ldrb	r2, [r7, #31]
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <paket+0x200>)
 800310c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	float32toInt8 GyroX;
	GyroX.sayi = gyX;
 8003110:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <paket+0x220>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61bb      	str	r3, [r7, #24]
	buff[34] = GyroX.array[0];
 8003116:	7e3a      	ldrb	r2, [r7, #24]
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <paket+0x200>)
 800311a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	buff[35] = GyroX.array[1];
 800311e:	7e7a      	ldrb	r2, [r7, #25]
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <paket+0x200>)
 8003122:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	buff[36] = GyroX.array[2];
 8003126:	7eba      	ldrb	r2, [r7, #26]
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <paket+0x200>)
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	buff[37] = GyroX.array[3];
 800312e:	7efa      	ldrb	r2, [r7, #27]
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <paket+0x200>)
 8003132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	float32toInt8 GyroY;
	GyroY.sayi = gyY;
 8003136:	4b32      	ldr	r3, [pc, #200]	; (8003200 <paket+0x224>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	617b      	str	r3, [r7, #20]
	buff[38] = GyroY.array[0];
 800313c:	7d3a      	ldrb	r2, [r7, #20]
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <paket+0x200>)
 8003140:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	buff[39] = GyroY.array[1];
 8003144:	7d7a      	ldrb	r2, [r7, #21]
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <paket+0x200>)
 8003148:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	buff[40] = GyroY.array[2];
 800314c:	7dba      	ldrb	r2, [r7, #22]
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <paket+0x200>)
 8003150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	buff[41] = GyroY.array[3];
 8003154:	7dfa      	ldrb	r2, [r7, #23]
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <paket+0x200>)
 8003158:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	float32toInt8 GyroZ;
	GyroZ.sayi = gyZ;
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <paket+0x228>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	613b      	str	r3, [r7, #16]
	buff[42] = GyroZ.array[0];
 8003162:	7c3a      	ldrb	r2, [r7, #16]
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <paket+0x200>)
 8003166:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	buff[43] = GyroZ.array[1];
 800316a:	7c7a      	ldrb	r2, [r7, #17]
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <paket+0x200>)
 800316e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	buff[44] = GyroZ.array[2];
 8003172:	7cba      	ldrb	r2, [r7, #18]
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <paket+0x200>)
 8003176:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	buff[45] = GyroZ.array[3];
 800317a:	7cfa      	ldrb	r2, [r7, #19]
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <paket+0x200>)
 800317e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	float32toInt8 Aci;
	Aci.sayi = RollAng;
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <paket+0x22c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]
	buff[46] = Aci.array[0];
 8003188:	7b3a      	ldrb	r2, [r7, #12]
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <paket+0x200>)
 800318c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	buff[47] = Aci.array[1];
 8003190:	7b7a      	ldrb	r2, [r7, #13]
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <paket+0x200>)
 8003194:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	buff[48] = Aci.array[2];
 8003198:	7bba      	ldrb	r2, [r7, #14]
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <paket+0x200>)
 800319c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	buff[49] = Aci.array[3];
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <paket+0x200>)
 80031a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	buff[50] = flag; //durum
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <paket+0x230>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <paket+0x200>)
 80031b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	buff[51] = cs(); //check-sum
 80031b4:	f7ff feec 	bl	8002f90 <cs>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <paket+0x200>)
 80031be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	buff[52] = 0x0D; //sabit
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <paket+0x200>)
 80031c4:	220d      	movs	r2, #13
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	buff[53] = 0x0A; //sabit
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <paket+0x200>)
 80031cc:	220a      	movs	r2, #10
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80031d2:	bf00      	nop
 80031d4:	3738      	adds	r7, #56	; 0x38
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200007b0 	.word	0x200007b0
 80031e0:	20000790 	.word	0x20000790
 80031e4:	200007a4 	.word	0x200007a4
 80031e8:	200007a8 	.word	0x200007a8
 80031ec:	200007ac 	.word	0x200007ac
 80031f0:	20000778 	.word	0x20000778
 80031f4:	2000077c 	.word	0x2000077c
 80031f8:	20000780 	.word	0x20000780
 80031fc:	20000784 	.word	0x20000784
 8003200:	20000788 	.word	0x20000788
 8003204:	2000078c 	.word	0x2000078c
 8003208:	20000764 	.word	0x20000764
 800320c:	20000040 	.word	0x20000040

08003210 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b0aa      	sub	sp, #168	; 0xa8
 8003214:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003216:	f001 fc09 	bl	8004a2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800321a:	f000 f8bf 	bl	800339c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800321e:	f000 f9ef 	bl	8003600 <MX_GPIO_Init>
	MX_I2C1_Init();
 8003222:	f000 f91b 	bl	800345c <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8003226:	f000 f9c1 	bl	80035ac <MX_USART6_UART_Init>
	MX_USART2_UART_Init();
 800322a:	f000 f995 	bl	8003558 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800322e:	f000 f943 	bl	80034b8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 8003232:	484a      	ldr	r0, [pc, #296]	; (800335c <main+0x14c>)
 8003234:	f003 fcd6 	bl	8006be4 <HAL_TIM_Base_Init>
	MPU6050_Init();
 8003238:	f000 fc68 	bl	8003b0c <MPU6050_Init>
	lwgps_init(&gps);
 800323c:	4848      	ldr	r0, [pc, #288]	; (8003360 <main+0x150>)
 800323e:	f7ff fd49 	bl	8002cd4 <lwgps_init>
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8003242:	2201      	movs	r2, #1
 8003244:	4947      	ldr	r1, [pc, #284]	; (8003364 <main+0x154>)
 8003246:	4848      	ldr	r0, [pc, #288]	; (8003368 <main+0x158>)
 8003248:	f004 fa2d 	bl	80076a6 <HAL_UART_Receive_IT>
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800324c:	2304      	movs	r3, #4
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2303      	movs	r3, #3
 8003256:	2201      	movs	r2, #1
 8003258:	2105      	movs	r1, #5
 800325a:	2002      	movs	r0, #2
 800325c:	f7fe f836 	bl	80012cc <BME280_Config>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of SimpleMutex */
	osMutexDef(SimpleMutex);
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	SimpleMutexHandle = osMutexCreate(osMutex(SimpleMutex));
 800326c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003270:	4618      	mov	r0, r3
 8003272:	f005 fa42 	bl	80086fa <osMutexCreate>
 8003276:	4603      	mov	r3, r0
 8003278:	4a3c      	ldr	r2, [pc, #240]	; (800336c <main+0x15c>)
 800327a:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of BinSemSep */
	osSemaphoreDef(BinSemSep);
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	BinSemSepHandle = osSemaphoreCreate(osSemaphore(BinSemSep), 1);
 8003288:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f005 fa4b 	bl	800872a <osSemaphoreCreate>
 8003294:	4603      	mov	r3, r0
 8003296:	4a36      	ldr	r2, [pc, #216]	; (8003370 <main+0x160>)
 8003298:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <main+0x164>)
 800329c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80032a0:	461d      	mov	r5, r3
 80032a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80032ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f005 f9c0 	bl	800863a <osThreadCreate>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a2e      	ldr	r2, [pc, #184]	; (8003378 <main+0x168>)
 80032be:	6013      	str	r3, [r2, #0]

	/* definition and creation of SeperationTask */
	osThreadDef(SeperationTask, StartSeperationTask, osPriorityAboveNormal, 0,
 80032c0:	4b2e      	ldr	r3, [pc, #184]	; (800337c <main+0x16c>)
 80032c2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80032c6:	461d      	mov	r5, r3
 80032c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			128);
	SeperationTaskHandle = osThreadCreate(osThread(SeperationTask), NULL);
 80032d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f005 f9ad 	bl	800863a <osThreadCreate>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4a27      	ldr	r2, [pc, #156]	; (8003380 <main+0x170>)
 80032e4:	6013      	str	r3, [r2, #0]

	/* definition and creation of SepSensorTask */
	osThreadDef(SepSensorTask, StartSepSensorTask, osPriorityNormal, 0, 128);
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <main+0x174>)
 80032e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80032ec:	461d      	mov	r5, r3
 80032ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SepSensorTaskHandle = osThreadCreate(osThread(SepSensorTask), NULL);
 80032fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f005 f99a 	bl	800863a <osThreadCreate>
 8003306:	4603      	mov	r3, r0
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <main+0x178>)
 800330a:	6013      	str	r3, [r2, #0]

	/* definition and creation of GPSTask */
	osThreadDef(GPSTask, StartGPSTask, osPriorityBelowNormal, 0, 128);
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <main+0x17c>)
 800330e:	f107 0420 	add.w	r4, r7, #32
 8003312:	461d      	mov	r5, r3
 8003314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800331c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 8003320:	f107 0320 	add.w	r3, r7, #32
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f005 f987 	bl	800863a <osThreadCreate>
 800332c:	4603      	mov	r3, r0
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <main+0x180>)
 8003330:	6013      	str	r3, [r2, #0]

	/* definition and creation of CommTask */
	osThreadDef(CommTask, StartCommTask, osPriorityLow, 0, 128);
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <main+0x184>)
 8003334:	1d3c      	adds	r4, r7, #4
 8003336:	461d      	mov	r5, r3
 8003338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800333a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800333c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003340:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommTaskHandle = osThreadCreate(osThread(CommTask), NULL);
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f005 f976 	bl	800863a <osThreadCreate>
 800334e:	4603      	mov	r3, r0
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <main+0x188>)
 8003352:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8003354:	f005 f96a 	bl	800862c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003358:	e7fe      	b.n	8003358 <main+0x148>
 800335a:	bf00      	nop
 800335c:	20000614 	.word	0x20000614
 8003360:	200007f0 	.word	0x200007f0
 8003364:	20000921 	.word	0x20000921
 8003368:	200006a0 	.word	0x200006a0
 800336c:	200006f8 	.word	0x200006f8
 8003370:	200006fc 	.word	0x200006fc
 8003374:	0800eec4 	.word	0x0800eec4
 8003378:	200006e4 	.word	0x200006e4
 800337c:	0800eef0 	.word	0x0800eef0
 8003380:	200006e8 	.word	0x200006e8
 8003384:	0800ef1c 	.word	0x0800ef1c
 8003388:	200006ec 	.word	0x200006ec
 800338c:	0800ef40 	.word	0x0800ef40
 8003390:	200006f0 	.word	0x200006f0
 8003394:	0800ef68 	.word	0x0800ef68
 8003398:	200006f4 	.word	0x200006f4

0800339c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b094      	sub	sp, #80	; 0x50
 80033a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	2234      	movs	r2, #52	; 0x34
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f008 fc55 	bl	800bc5a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80033b0:	f107 0308 	add.w	r3, r7, #8
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	4b23      	ldr	r3, [pc, #140]	; (8003454 <SystemClock_Config+0xb8>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <SystemClock_Config+0xb8>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6413      	str	r3, [r2, #64]	; 0x40
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <SystemClock_Config+0xb8>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033dc:	2300      	movs	r3, #0
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <SystemClock_Config+0xbc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <SystemClock_Config+0xbc>)
 80033ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <SystemClock_Config+0xbc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033fc:	2302      	movs	r3, #2
 80033fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003400:	2301      	movs	r3, #1
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003404:	2310      	movs	r3, #16
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003408:	2300      	movs	r3, #0
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4618      	mov	r0, r3
 8003412:	f003 f949 	bl	80066a8 <HAL_RCC_OscConfig>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <SystemClock_Config+0x84>
		Error_Handler();
 800341c:	f000 fb71 	bl	8003b02 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003420:	230f      	movs	r3, #15
 8003422:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f002 fe3e 	bl	80060bc <HAL_RCC_ClockConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <SystemClock_Config+0xae>
		Error_Handler();
 8003446:	f000 fb5c 	bl	8003b02 <Error_Handler>
	}
}
 800344a:	bf00      	nop
 800344c:	3750      	adds	r7, #80	; 0x50
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40007000 	.word	0x40007000

0800345c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <MX_I2C1_Init+0x50>)
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <MX_I2C1_Init+0x54>)
 8003464:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <MX_I2C1_Init+0x50>)
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <MX_I2C1_Init+0x58>)
 800346a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <MX_I2C1_Init+0x50>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <MX_I2C1_Init+0x50>)
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <MX_I2C1_Init+0x50>)
 800347a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800347e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <MX_I2C1_Init+0x50>)
 8003482:	2200      	movs	r2, #0
 8003484:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <MX_I2C1_Init+0x50>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <MX_I2C1_Init+0x50>)
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <MX_I2C1_Init+0x50>)
 8003494:	2200      	movs	r2, #0
 8003496:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <MX_I2C1_Init+0x50>)
 800349a:	f001 fe4f 	bl	800513c <HAL_I2C_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80034a4:	f000 fb2d 	bl	8003b02 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	200005c0 	.word	0x200005c0
 80034b0:	40005400 	.word	0x40005400
 80034b4:	000186a0 	.word	0x000186a0

080034b8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80034cc:	463b      	mov	r3, r7
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <MX_TIM1_Init+0x98>)
 80034d6:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <MX_TIM1_Init+0x9c>)
 80034d8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 90 - 1;
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <MX_TIM1_Init+0x98>)
 80034dc:	2259      	movs	r2, #89	; 0x59
 80034de:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <MX_TIM1_Init+0x98>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <MX_TIM1_Init+0x98>)
 80034e8:	2263      	movs	r2, #99	; 0x63
 80034ea:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <MX_TIM1_Init+0x98>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <MX_TIM1_Init+0x98>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <MX_TIM1_Init+0x98>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80034fe:	4814      	ldr	r0, [pc, #80]	; (8003550 <MX_TIM1_Init+0x98>)
 8003500:	f003 fb70 	bl	8006be4 <HAL_TIM_Base_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM1_Init+0x56>
		Error_Handler();
 800350a:	f000 fafa 	bl	8003b02 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800350e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003512:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003514:	f107 0308 	add.w	r3, r7, #8
 8003518:	4619      	mov	r1, r3
 800351a:	480d      	ldr	r0, [pc, #52]	; (8003550 <MX_TIM1_Init+0x98>)
 800351c:	f003 fd2a 	bl	8006f74 <HAL_TIM_ConfigClockSource>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_TIM1_Init+0x72>
		Error_Handler();
 8003526:	f000 faec 	bl	8003b02 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003532:	463b      	mov	r3, r7
 8003534:	4619      	mov	r1, r3
 8003536:	4806      	ldr	r0, [pc, #24]	; (8003550 <MX_TIM1_Init+0x98>)
 8003538:	f003 ff46 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8003542:	f000 fade 	bl	8003b02 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000614 	.word	0x20000614
 8003554:	40010000 	.word	0x40010000

08003558 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <MX_USART2_UART_Init+0x50>)
 8003560:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 8003564:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003568:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 800357e:	220c      	movs	r2, #12
 8003580:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <MX_USART2_UART_Init+0x4c>)
 8003590:	f003 ffaa 	bl	80074e8 <HAL_UART_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800359a:	f000 fab2 	bl	8003b02 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000065c 	.word	0x2000065c
 80035a8:	40004400 	.word	0x40004400

080035ac <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <MX_USART6_UART_Init+0x50>)
 80035b4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80035bc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035d2:	220c      	movs	r2, #12
 80035d4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80035e2:	4805      	ldr	r0, [pc, #20]	; (80035f8 <MX_USART6_UART_Init+0x4c>)
 80035e4:	f003 ff80 	bl	80074e8 <HAL_UART_Init>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80035ee:	f000 fa88 	bl	8003b02 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200006a0 	.word	0x200006a0
 80035fc:	40011400 	.word	0x40011400

08003600 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003606:	f107 030c 	add.w	r3, r7, #12
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <MX_GPIO_Init+0x9c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <MX_GPIO_Init+0x9c>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <MX_GPIO_Init+0x9c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	4b19      	ldr	r3, [pc, #100]	; (800369c <MX_GPIO_Init+0x9c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a18      	ldr	r2, [pc, #96]	; (800369c <MX_GPIO_Init+0x9c>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <MX_GPIO_Init+0x9c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <MX_GPIO_Init+0x9c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <MX_GPIO_Init+0x9c>)
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <MX_GPIO_Init+0x9c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SECOND_SEPERATION_Pin | FIRST_SEPERATION_Pin,
 800366a:	2200      	movs	r2, #0
 800366c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <MX_GPIO_Init+0xa0>)
 8003672:	f001 fd49 	bl	8005108 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : SECOND_SEPERATION_Pin FIRST_SEPERATION_Pin */
	GPIO_InitStruct.Pin = SECOND_SEPERATION_Pin | FIRST_SEPERATION_Pin;
 8003676:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800367a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367c:	2301      	movs	r3, #1
 800367e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	4619      	mov	r1, r3
 800368e:	4804      	ldr	r0, [pc, #16]	; (80036a0 <MX_GPIO_Init+0xa0>)
 8003690:	f001 fba6 	bl	8004de0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003694:	bf00      	nop
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	40020000 	.word	0x40020000

080036a4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 80036ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036b0:	f005 f80f 	bl	80086d2 <osDelay>
 80036b4:	e7fa      	b.n	80036ac <StartDefaultTask+0x8>
	...

080036b8 <StartSeperationTask>:
 * @brief Function implementing the SeperationTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSeperationTask */
void StartSeperationTask(void const *argument) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSeperationTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <StartSeperationTask+0xdc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f04f 31ff 	mov.w	r1, #4294967295
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 f861 	bl	8008790 <osSemaphoreWait>
		if (flag == 1) {
 80036ce:	4b32      	ldr	r3, [pc, #200]	; (8003798 <StartSeperationTask+0xe0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <StartSeperationTask+0x2a>
			osSemaphoreRelease(BinSemSepHandle);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <StartSeperationTask+0xdc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 f8a6 	bl	800882c <osSemaphoreRelease>
 80036e0:	e053      	b.n	800378a <StartSeperationTask+0xd2>
		} else {
			if ((RollAng <= 15 || RollAng >= -15) && Alt >= 2400) {
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <StartSeperationTask+0xe4>)
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80036ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f4:	d909      	bls.n	800370a <StartSeperationTask+0x52>
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <StartSeperationTask+0xe4>)
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8003700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003708:	db12      	blt.n	8003730 <StartSeperationTask+0x78>
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <StartSeperationTask+0xe8>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80037a4 <StartSeperationTask+0xec>
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	db08      	blt.n	8003730 <StartSeperationTask+0x78>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003724:	4820      	ldr	r0, [pc, #128]	; (80037a8 <StartSeperationTask+0xf0>)
 8003726:	f001 fcef 	bl	8005108 <HAL_GPIO_WritePin>
				flag = 2;
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <StartSeperationTask+0xe0>)
 800372c:	2202      	movs	r2, #2
 800372e:	601a      	str	r2, [r3, #0]
			}
			if ((Alt <= 600 && flag == 1) && flagDown == 1) {
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <StartSeperationTask+0xe8>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80037ac <StartSeperationTask+0xf4>
 800373a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	d80b      	bhi.n	800375c <StartSeperationTask+0xa4>
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <StartSeperationTask+0xe0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <StartSeperationTask+0xa4>
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <StartSeperationTask+0xf8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d103      	bne.n	800375c <StartSeperationTask+0xa4>
				flag = 3;
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <StartSeperationTask+0xe0>)
 8003756:	2203      	movs	r2, #3
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e016      	b.n	800378a <StartSeperationTask+0xd2>
			} else if (Alt <= 600 && flag == 2) {
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <StartSeperationTask+0xe8>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80037ac <StartSeperationTask+0xf4>
 8003766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	d80c      	bhi.n	800378a <StartSeperationTask+0xd2>
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <StartSeperationTask+0xe0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d108      	bne.n	800378a <StartSeperationTask+0xd2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8003778:	2201      	movs	r2, #1
 800377a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800377e:	480a      	ldr	r0, [pc, #40]	; (80037a8 <StartSeperationTask+0xf0>)
 8003780:	f001 fcc2 	bl	8005108 <HAL_GPIO_WritePin>
				flag = 4;
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <StartSeperationTask+0xe0>)
 8003786:	2204      	movs	r2, #4
 8003788:	601a      	str	r2, [r3, #0]
			}
		}

		osDelay(500);
 800378a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800378e:	f004 ffa0 	bl	80086d2 <osDelay>
		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 8003792:	e795      	b.n	80036c0 <StartSeperationTask+0x8>
 8003794:	200006fc 	.word	0x200006fc
 8003798:	20000040 	.word	0x20000040
 800379c:	20000764 	.word	0x20000764
 80037a0:	20000790 	.word	0x20000790
 80037a4:	45160000 	.word	0x45160000
 80037a8:	40020000 	.word	0x40020000
 80037ac:	44160000 	.word	0x44160000
 80037b0:	200007e8 	.word	0x200007e8

080037b4 <StartSepSensorTask>:
 * @brief Function implementing the SepSensorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSepSensorTask */
void StartSepSensorTask(void const *argument) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSepSensorTask */
	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(SimpleMutexHandle, portMAX_DELAY);
 80037bc:	4b7e      	ldr	r3, [pc, #504]	; (80039b8 <StartSepSensorTask+0x204>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	4618      	mov	r0, r3
 80037c6:	f005 fc2d 	bl	8009024 <xQueueSemaphoreTake>

		acX = MPU6050_Kalman_Accel_X();
 80037ca:	f000 fbd3 	bl	8003f74 <MPU6050_Kalman_Accel_X>
 80037ce:	ec53 2b10 	vmov	r2, r3, d0
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	f7fd fa1f 	bl	8000c18 <__aeabi_d2f>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a77      	ldr	r2, [pc, #476]	; (80039bc <StartSepSensorTask+0x208>)
 80037de:	6013      	str	r3, [r2, #0]
		acY = MPU6050_Kalman_Accel_Y();
 80037e0:	f000 fc6a 	bl	80040b8 <MPU6050_Kalman_Accel_Y>
 80037e4:	ec53 2b10 	vmov	r2, r3, d0
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd fa14 	bl	8000c18 <__aeabi_d2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4a73      	ldr	r2, [pc, #460]	; (80039c0 <StartSepSensorTask+0x20c>)
 80037f4:	6013      	str	r3, [r2, #0]
		acZ = MPU6050_Kalman_Accel_Z();
 80037f6:	f000 fd01 	bl	80041fc <MPU6050_Kalman_Accel_Z>
 80037fa:	ec53 2b10 	vmov	r2, r3, d0
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd fa09 	bl	8000c18 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	4a6e      	ldr	r2, [pc, #440]	; (80039c4 <StartSepSensorTask+0x210>)
 800380a:	6013      	str	r3, [r2, #0]
		gyX = MPU6050_Kalman_Gyro_X();
 800380c:	f000 fd98 	bl	8004340 <MPU6050_Kalman_Gyro_X>
 8003810:	ec53 2b10 	vmov	r2, r3, d0
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f9fe 	bl	8000c18 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <StartSepSensorTask+0x214>)
 8003820:	6013      	str	r3, [r2, #0]
		gyY = MPU6050_Kalman_Gyro_X();
 8003822:	f000 fd8d 	bl	8004340 <MPU6050_Kalman_Gyro_X>
 8003826:	ec53 2b10 	vmov	r2, r3, d0
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f7fd f9f3 	bl	8000c18 <__aeabi_d2f>
 8003832:	4603      	mov	r3, r0
 8003834:	4a65      	ldr	r2, [pc, #404]	; (80039cc <StartSepSensorTask+0x218>)
 8003836:	6013      	str	r3, [r2, #0]
		gyZ = MPU6050_Kalman_Gyro_X();
 8003838:	f000 fd82 	bl	8004340 <MPU6050_Kalman_Gyro_X>
 800383c:	ec53 2b10 	vmov	r2, r3, d0
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7fd f9e8 	bl	8000c18 <__aeabi_d2f>
 8003848:	4603      	mov	r3, r0
 800384a:	4a61      	ldr	r2, [pc, #388]	; (80039d0 <StartSepSensorTask+0x21c>)
 800384c:	6013      	str	r3, [r2, #0]
		RollAng = MPU6050_Kalman_Roll_Angle();
 800384e:	f000 faed 	bl	8003e2c <MPU6050_Kalman_Roll_Angle>
 8003852:	eef0 7a40 	vmov.f32	s15, s0
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <StartSepSensorTask+0x220>)
 8003858:	edc3 7a00 	vstr	s15, [r3]
		Temperature = BME280_Temperature();
 800385c:	f7fe fa54 	bl	8001d08 <BME280_Temperature>
 8003860:	ec53 2b10 	vmov	r2, r3, d0
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f9d6 	bl	8000c18 <__aeabi_d2f>
 800386c:	4603      	mov	r3, r0
 800386e:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <StartSepSensorTask+0x224>)
 8003870:	6013      	str	r3, [r2, #0]
		Pressure = BME280_Pressure();
 8003872:	f7fe f9c5 	bl	8001c00 <BME280_Pressure>
 8003876:	ec53 2b10 	vmov	r2, r3, d0
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f9cb 	bl	8000c18 <__aeabi_d2f>
 8003882:	4603      	mov	r3, r0
 8003884:	4a55      	ldr	r2, [pc, #340]	; (80039dc <StartSepSensorTask+0x228>)
 8003886:	6013      	str	r3, [r2, #0]
		Humidity = BME280_Humidity();
 8003888:	f7fe f9fc 	bl	8001c84 <BME280_Humidity>
 800388c:	ec53 2b10 	vmov	r2, r3, d0
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	f7fd f9c0 	bl	8000c18 <__aeabi_d2f>
 8003898:	4603      	mov	r3, r0
 800389a:	4a51      	ldr	r2, [pc, #324]	; (80039e0 <StartSepSensorTask+0x22c>)
 800389c:	6013      	str	r3, [r2, #0]
		T = BME280_Kalman_Temp(Temperature);
 800389e:	4b4e      	ldr	r3, [pc, #312]	; (80039d8 <StartSepSensorTask+0x224>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe68 	bl	8000578 <__aeabi_f2d>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	ec43 2b10 	vmov	d0, r2, r3
 80038b0:	f7fe fcb6 	bl	8002220 <BME280_Kalman_Temp>
 80038b4:	ec53 2b10 	vmov	r2, r3, d0
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fd f9ac 	bl	8000c18 <__aeabi_d2f>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4a48      	ldr	r2, [pc, #288]	; (80039e4 <StartSepSensorTask+0x230>)
 80038c4:	6013      	str	r3, [r2, #0]
		P = BME280_Kalman_Press(Pressure);
 80038c6:	4b45      	ldr	r3, [pc, #276]	; (80039dc <StartSepSensorTask+0x228>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fe54 	bl	8000578 <__aeabi_f2d>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	ec43 2b10 	vmov	d0, r2, r3
 80038d8:	f7fe fb62 	bl	8001fa0 <BME280_Kalman_Press>
 80038dc:	ec53 2b10 	vmov	r2, r3, d0
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f998 	bl	8000c18 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <StartSepSensorTask+0x234>)
 80038ec:	6013      	str	r3, [r2, #0]
		H = BME280_Kalman_Hum(Humidity);
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <StartSepSensorTask+0x22c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fe40 	bl	8000578 <__aeabi_f2d>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	ec43 2b10 	vmov	d0, r2, r3
 8003900:	f7fe fbee 	bl	80020e0 <BME280_Kalman_Hum>
 8003904:	ec53 2b10 	vmov	r2, r3, d0
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f7fd f984 	bl	8000c18 <__aeabi_d2f>
 8003910:	4603      	mov	r3, r0
 8003912:	4a36      	ldr	r2, [pc, #216]	; (80039ec <StartSepSensorTask+0x238>)
 8003914:	6013      	str	r3, [r2, #0]
		Altitude1 = BME280_Altitude();
 8003916:	f7fe fa3b 	bl	8001d90 <BME280_Altitude>
 800391a:	eef0 7a40 	vmov.f32	s15, s0
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <StartSepSensorTask+0x23c>)
 8003920:	edc3 7a00 	vstr	s15, [r3]
		Alt = BME280_Kalman_Alt(Altitude1);
 8003924:	4b32      	ldr	r3, [pc, #200]	; (80039f0 <StartSepSensorTask+0x23c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fe25 	bl	8000578 <__aeabi_f2d>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	ec43 2b10 	vmov	d0, r2, r3
 8003936:	f7fe fa89 	bl	8001e4c <BME280_Kalman_Alt>
 800393a:	eef0 7a40 	vmov.f32	s15, s0
 800393e:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <StartSepSensorTask+0x240>)
 8003940:	edc3 7a00 	vstr	s15, [r3]

		xSemaphoreGive(SimpleMutexHandle);
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <StartSepSensorTask+0x204>)
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	f005 f9dd 	bl	8008d0c <xQueueGenericSend>

		osSemaphoreWait(BinSemSepHandle, osWaitForever);
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <StartSepSensorTask+0x244>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f04f 31ff 	mov.w	r1, #4294967295
 800395a:	4618      	mov	r0, r3
 800395c:	f004 ff18 	bl	8008790 <osSemaphoreWait>

		for (int i = 0; i < BUFFER_SIZE; i++) {
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e019      	b.n	800399a <StartSepSensorTask+0x1e6>
			AltCompare = BME280_Kalman_Alt(Altitude1);
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <StartSepSensorTask+0x23c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fe04 	bl	8000578 <__aeabi_f2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	ec43 2b10 	vmov	d0, r2, r3
 8003978:	f7fe fa68 	bl	8001e4c <BME280_Kalman_Alt>
 800397c:	eef0 7a40 	vmov.f32	s15, s0
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <StartSepSensorTask+0x248>)
 8003982:	edc3 7a00 	vstr	s15, [r3]
			sensorValues[i] = AltCompare;
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <StartSepSensorTask+0x248>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	491d      	ldr	r1, [pc, #116]	; (8003a00 <StartSepSensorTask+0x24c>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3301      	adds	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b18      	cmp	r3, #24
 800399e:	dde2      	ble.n	8003966 <StartSepSensorTask+0x1b2>
		}

		// Sensör değerlerini işle
		processSensorValues();
 80039a0:	f7ff fac0 	bl	8002f24 <processSensorValues>

		osSemaphoreRelease(BinSemSepHandle);
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <StartSepSensorTask+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f004 ff3f 	bl	800882c <osSemaphoreRelease>

		osDelay(500);
 80039ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039b2:	f004 fe8e 	bl	80086d2 <osDelay>
		xSemaphoreTake(SimpleMutexHandle, portMAX_DELAY);
 80039b6:	e701      	b.n	80037bc <StartSepSensorTask+0x8>
 80039b8:	200006f8 	.word	0x200006f8
 80039bc:	20000778 	.word	0x20000778
 80039c0:	2000077c 	.word	0x2000077c
 80039c4:	20000780 	.word	0x20000780
 80039c8:	20000784 	.word	0x20000784
 80039cc:	20000788 	.word	0x20000788
 80039d0:	2000078c 	.word	0x2000078c
 80039d4:	20000764 	.word	0x20000764
 80039d8:	2000076c 	.word	0x2000076c
 80039dc:	20000770 	.word	0x20000770
 80039e0:	20000774 	.word	0x20000774
 80039e4:	20000794 	.word	0x20000794
 80039e8:	20000798 	.word	0x20000798
 80039ec:	2000079c 	.word	0x2000079c
 80039f0:	20000768 	.word	0x20000768
 80039f4:	20000790 	.word	0x20000790
 80039f8:	200006fc 	.word	0x200006fc
 80039fc:	200007a0 	.word	0x200007a0
 8003a00:	20000700 	.word	0x20000700

08003a04 <StartGPSTask>:
 * @brief Function implementing the GPSTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const *argument) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGPSTask */
	/* Infinite loop */
	for (;;) {
		xSemaphoreTake(SimpleMutexHandle, portMAX_DELAY);
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <StartGPSTask+0x6c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295
 8003a14:	4618      	mov	r0, r3
 8003a16:	f005 fb05 	bl	8009024 <xQueueSemaphoreTake>
		gpsAlt = gps.altitude;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <StartGPSTask+0x70>)
 8003a1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f7fd f8f8 	bl	8000c18 <__aeabi_d2f>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <StartGPSTask+0x74>)
 8003a2c:	6013      	str	r3, [r2, #0]
		gpsLat = gps.latitude;
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <StartGPSTask+0x70>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7fd f8ee 	bl	8000c18 <__aeabi_d2f>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <StartGPSTask+0x78>)
 8003a40:	6013      	str	r3, [r2, #0]
		gpsLong = gps.longitude;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <StartGPSTask+0x70>)
 8003a44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f7fd f8e4 	bl	8000c18 <__aeabi_d2f>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <StartGPSTask+0x7c>)
 8003a54:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(SimpleMutexHandle);
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <StartGPSTask+0x6c>)
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f005 f954 	bl	8008d0c <xQueueGenericSend>
		osDelay(500);
 8003a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a68:	f004 fe33 	bl	80086d2 <osDelay>
		xSemaphoreTake(SimpleMutexHandle, portMAX_DELAY);
 8003a6c:	e7ce      	b.n	8003a0c <StartGPSTask+0x8>
 8003a6e:	bf00      	nop
 8003a70:	200006f8 	.word	0x200006f8
 8003a74:	200007f0 	.word	0x200007f0
 8003a78:	200007a4 	.word	0x200007a4
 8003a7c:	200007a8 	.word	0x200007a8
 8003a80:	200007ac 	.word	0x200007ac

08003a84 <StartCommTask>:
 * @brief Function implementing the CommTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommTask */
void StartCommTask(void const *argument) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommTask */
	/* Infinite loop */
	for (;;) {
		xSemaphoreTake(SimpleMutexHandle, portMAX_DELAY);
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <StartCommTask+0x50>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	4618      	mov	r0, r3
 8003a96:	f005 fac5 	bl	8009024 <xQueueSemaphoreTake>
		paket(sayac);
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <StartCommTask+0x54>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fa9c 	bl	8002fdc <paket>
		sayac = sayac + 1;
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <StartCommTask+0x54>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <StartCommTask+0x54>)
 8003aac:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, buff, 54, 500);
 8003aae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ab2:	2236      	movs	r2, #54	; 0x36
 8003ab4:	4909      	ldr	r1, [pc, #36]	; (8003adc <StartCommTask+0x58>)
 8003ab6:	480a      	ldr	r0, [pc, #40]	; (8003ae0 <StartCommTask+0x5c>)
 8003ab8:	f003 fd63 	bl	8007582 <HAL_UART_Transmit>
		xSemaphoreGive(SimpleMutexHandle);
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <StartCommTask+0x50>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	f005 f921 	bl	8008d0c <xQueueGenericSend>
		osDelay(500);
 8003aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ace:	f004 fe00 	bl	80086d2 <osDelay>
		xSemaphoreTake(SimpleMutexHandle, portMAX_DELAY);
 8003ad2:	e7db      	b.n	8003a8c <StartCommTask+0x8>
 8003ad4:	200006f8 	.word	0x200006f8
 8003ad8:	200007ec 	.word	0x200007ec
 8003adc:	200007b0 	.word	0x200007b0
 8003ae0:	2000065c 	.word	0x2000065c

08003ae4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003af6:	f000 ffbb 	bl	8004a70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b06:	b672      	cpsid	i
}
 8003b08:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003b0a:	e7fe      	b.n	8003b0a <Error_Handler+0x8>

08003b0c <MPU6050_Init>:
static double Q7 = 10; //initial estimated covariance
static double P7 = 0; //initial error covariance (it must be 0)
static double K7 = 0; //initial kalman gain

void MPU6050_Init (void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8003b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b16:	9302      	str	r3, [sp, #8]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	1dfb      	adds	r3, r7, #7
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2301      	movs	r3, #1
 8003b22:	2275      	movs	r2, #117	; 0x75
 8003b24:	21d0      	movs	r1, #208	; 0xd0
 8003b26:	4823      	ldr	r0, [pc, #140]	; (8003bb4 <MPU6050_Init+0xa8>)
 8003b28:	f001 fd46 	bl	80055b8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b68      	cmp	r3, #104	; 0x68
 8003b30:	d13b      	bne.n	8003baa <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3a:	9302      	str	r3, [sp, #8]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2301      	movs	r3, #1
 8003b46:	226b      	movs	r2, #107	; 0x6b
 8003b48:	21d0      	movs	r1, #208	; 0xd0
 8003b4a:	481a      	ldr	r0, [pc, #104]	; (8003bb4 <MPU6050_Init+0xa8>)
 8003b4c:	f001 fc3a 	bl	80053c4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8003b50:	2307      	movs	r3, #7
 8003b52:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b58:	9302      	str	r3, [sp, #8]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	1dbb      	adds	r3, r7, #6
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2301      	movs	r3, #1
 8003b64:	2219      	movs	r2, #25
 8003b66:	21d0      	movs	r1, #208	; 0xd0
 8003b68:	4812      	ldr	r0, [pc, #72]	; (8003bb4 <MPU6050_Init+0xa8>)
 8003b6a:	f001 fc2b 	bl	80053c4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Â± 2g
		Data = 0x00;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8003b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b76:	9302      	str	r3, [sp, #8]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	1dbb      	adds	r3, r7, #6
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2301      	movs	r3, #1
 8003b82:	221c      	movs	r2, #28
 8003b84:	21d0      	movs	r1, #208	; 0xd0
 8003b86:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <MPU6050_Init+0xa8>)
 8003b88:	f001 fc1c 	bl	80053c4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> Â± 250 Â°/s
		Data = 0x00;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8003b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	2301      	movs	r3, #1
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	221b      	movs	r2, #27
 8003ba2:	21d0      	movs	r1, #208	; 0xd0
 8003ba4:	4803      	ldr	r0, [pc, #12]	; (8003bb4 <MPU6050_Init+0xa8>)
 8003ba6:	f001 fc0d 	bl	80053c4 <HAL_I2C_Mem_Write>
	}

}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200005c0 	.word	0x200005c0

08003bb8 <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 8003bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	2306      	movs	r3, #6
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	463b      	mov	r3, r7
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	223b      	movs	r2, #59	; 0x3b
 8003bd0:	21d0      	movs	r1, #208	; 0xd0
 8003bd2:	4811      	ldr	r0, [pc, #68]	; (8003c18 <MPU6050_Accel_Config+0x60>)
 8003bd4:	f001 fcf0 	bl	80055b8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 8003bd8:	783b      	ldrb	r3, [r7, #0]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	b21a      	sxth	r2, r3
 8003bde:	787b      	ldrb	r3, [r7, #1]
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b21a      	sxth	r2, r3
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <MPU6050_Accel_Config+0x64>)
 8003be8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 8003bea:	78bb      	ldrb	r3, [r7, #2]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <MPU6050_Accel_Config+0x68>)
 8003bfa:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 8003bfc:	793b      	ldrb	r3, [r7, #4]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	797b      	ldrb	r3, [r7, #5]
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <MPU6050_Accel_Config+0x6c>)
 8003c0c:	801a      	strh	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200005c0 	.word	0x200005c0
 8003c1c:	20000934 	.word	0x20000934
 8003c20:	20000936 	.word	0x20000936
 8003c24:	20000938 	.word	0x20000938

08003c28 <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003c2c:	f7ff ffc4 	bl	8003bb8 <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <MPU6050_Read_Accel_X+0x40>)
 8003c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fc8c 	bl	8000554 <__aeabi_i2d>
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <MPU6050_Read_Accel_X+0x44>)
 8003c42:	f7fc fe1b 	bl	800087c <__aeabi_ddiv>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc ffe3 	bl	8000c18 <__aeabi_d2f>
 8003c52:	4603      	mov	r3, r0
 8003c54:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <MPU6050_Read_Accel_X+0x48>)
 8003c56:	6013      	str	r3, [r2, #0]
	return Ax;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <MPU6050_Read_Accel_X+0x48>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	ee07 3a90 	vmov	s15, r3
}
 8003c60:	eeb0 0a67 	vmov.f32	s0, s15
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000934 	.word	0x20000934
 8003c6c:	40d00000 	.word	0x40d00000
 8003c70:	20000924 	.word	0x20000924

08003c74 <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003c78:	f7ff ff9e 	bl	8003bb8 <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <MPU6050_Read_Accel_Y+0x40>)
 8003c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fc66 	bl	8000554 <__aeabi_i2d>
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <MPU6050_Read_Accel_Y+0x44>)
 8003c8e:	f7fc fdf5 	bl	800087c <__aeabi_ddiv>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f7fc ffbd 	bl	8000c18 <__aeabi_d2f>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <MPU6050_Read_Accel_Y+0x48>)
 8003ca2:	6013      	str	r3, [r2, #0]
	return Ay;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <MPU6050_Read_Accel_Y+0x48>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	ee07 3a90 	vmov	s15, r3
}
 8003cac:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000936 	.word	0x20000936
 8003cb8:	40d00000 	.word	0x40d00000
 8003cbc:	20000928 	.word	0x20000928

08003cc0 <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003cc4:	f7ff ff78 	bl	8003bb8 <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <MPU6050_Read_Accel_Z+0x40>)
 8003cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fc40 	bl	8000554 <__aeabi_i2d>
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <MPU6050_Read_Accel_Z+0x44>)
 8003cda:	f7fc fdcf 	bl	800087c <__aeabi_ddiv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc ff97 	bl	8000c18 <__aeabi_d2f>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <MPU6050_Read_Accel_Z+0x48>)
 8003cee:	6013      	str	r3, [r2, #0]
	return Az;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <MPU6050_Read_Accel_Z+0x48>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	ee07 3a90 	vmov	s15, r3
}
 8003cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000938 	.word	0x20000938
 8003d04:	40d00000 	.word	0x40d00000
 8003d08:	2000092c 	.word	0x2000092c

08003d0c <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 8003d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	2306      	movs	r3, #6
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2301      	movs	r3, #1
 8003d22:	2243      	movs	r2, #67	; 0x43
 8003d24:	21d0      	movs	r1, #208	; 0xd0
 8003d26:	4811      	ldr	r0, [pc, #68]	; (8003d6c <MPU6050_Gyro_Config+0x60>)
 8003d28:	f001 fc46 	bl	80055b8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 8003d2c:	783b      	ldrb	r3, [r7, #0]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	787b      	ldrb	r3, [r7, #1]
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <MPU6050_Gyro_Config+0x64>)
 8003d3c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 8003d3e:	78bb      	ldrb	r3, [r7, #2]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b21a      	sxth	r2, r3
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <MPU6050_Gyro_Config+0x68>)
 8003d4e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8003d50:	793b      	ldrb	r3, [r7, #4]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	b21a      	sxth	r2, r3
 8003d56:	797b      	ldrb	r3, [r7, #5]
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MPU6050_Gyro_Config+0x6c>)
 8003d60:	801a      	strh	r2, [r3, #0]

}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200005c0 	.word	0x200005c0
 8003d70:	2000093a 	.word	0x2000093a
 8003d74:	2000093c 	.word	0x2000093c
 8003d78:	2000093e 	.word	0x2000093e
 8003d7c:	00000000 	.word	0x00000000

08003d80 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 8003d84:	f7ff ffc2 	bl	8003d0c <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <MPU6050_Read_Gyro_X+0x48>)
 8003d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fbe0 	bl	8000554 <__aeabi_i2d>
 8003d94:	a30a      	add	r3, pc, #40	; (adr r3, 8003dc0 <MPU6050_Read_Gyro_X+0x40>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc fd6f 	bl	800087c <__aeabi_ddiv>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fc ff37 	bl	8000c18 <__aeabi_d2f>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <MPU6050_Read_Gyro_X+0x4c>)
 8003dae:	6013      	str	r3, [r2, #0]
	return Gx;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <MPU6050_Read_Gyro_X+0x4c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	ee07 3a90 	vmov	s15, r3
}
 8003db8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	40606000 	.word	0x40606000
 8003dc8:	2000093a 	.word	0x2000093a
 8003dcc:	20000930 	.word	0x20000930

08003dd0 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 8003dd6:	f000 f96f 	bl	80040b8 <MPU6050_Kalman_Accel_Y>
 8003dda:	ed87 0b04 	vstr	d0, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 8003dde:	f000 fa0d 	bl	80041fc <MPU6050_Kalman_Accel_Z>
 8003de2:	ed87 0b02 	vstr	d0, [r7, #8]
	float Roll = 0;
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 8003dec:	ed97 1b02 	vldr	d1, [r7, #8]
 8003df0:	ed97 0b04 	vldr	d0, [r7, #16]
 8003df4:	f009 fe8c 	bl	800db10 <atan2>
 8003df8:	ec51 0b10 	vmov	r0, r1, d0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <MPU6050_Roll_Angle+0x58>)
 8003e02:	f7fc fc11 	bl	8000628 <__aeabi_dmul>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7fc ff03 	bl	8000c18 <__aeabi_d2f>
 8003e12:	4603      	mov	r3, r0
 8003e14:	607b      	str	r3, [r7, #4]
	return Roll;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	ee07 3a90 	vmov	s15, r3
}
 8003e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40668000 	.word	0x40668000

08003e2c <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 8003e2c:	b5b0      	push	{r4, r5, r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 8003e32:	f7ff ffcd 	bl	8003dd0 <MPU6050_Roll_Angle>
 8003e36:	ed87 0a01 	vstr	s0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8003e3a:	4b48      	ldr	r3, [pc, #288]	; (8003f5c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003e3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003e46:	f7fc fbef 	bl	8000628 <__aeabi_dmul>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4614      	mov	r4, r2
 8003e50:	461d      	mov	r5, r3
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	4942      	ldr	r1, [pc, #264]	; (8003f60 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f7fc fbe3 	bl	8000628 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003e70:	f7fc fbda 	bl	8000628 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <MPU6050_Kalman_Roll_Angle+0x138>)
 8003e82:	f7fc fa1b 	bl	80002bc <__adddf3>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f7fc fcf5 	bl	800087c <__aeabi_ddiv>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003e98:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fc fb6b 	bl	8000578 <__aeabi_f2d>
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	460d      	mov	r5, r1
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	492d      	ldr	r1, [pc, #180]	; (8003f60 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc fbb9 	bl	8000628 <__aeabi_dmul>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4620      	mov	r0, r4
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	f7fc f9fb 	bl	80002b8 <__aeabi_dsub>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc fbaa 	bl	8000628 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f7fc f9eb 	bl	80002bc <__adddf3>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4920      	ldr	r1, [pc, #128]	; (8003f6c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003eec:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003efc:	f7fc fb94 	bl	8000628 <__aeabi_dmul>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	4915      	ldr	r1, [pc, #84]	; (8003f60 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003f0a:	f7fc f9d5 	bl	80002b8 <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc fb84 	bl	8000628 <__aeabi_dmul>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <MPU6050_Kalman_Roll_Angle+0x144>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc f9c5 	bl	80002bc <__adddf3>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4909      	ldr	r1, [pc, #36]	; (8003f5c <MPU6050_Kalman_Roll_Angle+0x130>)
 8003f38:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <MPU6050_Kalman_Roll_Angle+0x140>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fc fe67 	bl	8000c18 <__aeabi_d2f>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	ee07 3a90 	vmov	s15, r3
}
 8003f50:	eeb0 0a67 	vmov.f32	s0, s15
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bdb0      	pop	{r4, r5, r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000940 	.word	0x20000940
 8003f60:	3ff00000 	.word	0x3ff00000
 8003f64:	40440000 	.word	0x40440000
 8003f68:	20000948 	.word	0x20000948
 8003f6c:	20000990 	.word	0x20000990
 8003f70:	20000048 	.word	0x20000048

08003f74 <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 8003f74:	b5b0      	push	{r4, r5, r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 8003f7a:	f7ff fe55 	bl	8003c28 <MPU6050_Read_Accel_X>
 8003f7e:	ee10 3a10 	vmov	r3, s0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc faf8 	bl	8000578 <__aeabi_f2d>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <MPU6050_Kalman_Accel_X+0x12c>)
 8003f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <MPU6050_Kalman_Accel_X+0x130>)
 8003f9c:	f7fc fb44 	bl	8000628 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	f04f 0000 	mov.w	r0, #0
 8003fac:	493d      	ldr	r1, [pc, #244]	; (80040a4 <MPU6050_Kalman_Accel_X+0x130>)
 8003fae:	4b3c      	ldr	r3, [pc, #240]	; (80040a0 <MPU6050_Kalman_Accel_X+0x12c>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc fb38 	bl	8000628 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <MPU6050_Kalman_Accel_X+0x130>)
 8003fc6:	f7fc fb2f 	bl	8000628 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <MPU6050_Kalman_Accel_X+0x134>)
 8003fd8:	f7fc f970 	bl	80002bc <__adddf3>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f7fc fc4a 	bl	800087c <__aeabi_ddiv>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	492f      	ldr	r1, [pc, #188]	; (80040ac <MPU6050_Kalman_Accel_X+0x138>)
 8003fee:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	492b      	ldr	r1, [pc, #172]	; (80040a4 <MPU6050_Kalman_Accel_X+0x130>)
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <MPU6050_Kalman_Accel_X+0x13c>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fb13 	bl	8000628 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800400a:	f7fc f955 	bl	80002b8 <__aeabi_dsub>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	4b25      	ldr	r3, [pc, #148]	; (80040ac <MPU6050_Kalman_Accel_X+0x138>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc fb04 	bl	8000628 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <MPU6050_Kalman_Accel_X+0x13c>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc f945 	bl	80002bc <__adddf3>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	491e      	ldr	r1, [pc, #120]	; (80040b0 <MPU6050_Kalman_Accel_X+0x13c>)
 8004038:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <MPU6050_Kalman_Accel_X+0x138>)
 800403e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <MPU6050_Kalman_Accel_X+0x130>)
 8004048:	f7fc faee 	bl	8000628 <__aeabi_dmul>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	f04f 0000 	mov.w	r0, #0
 8004054:	4913      	ldr	r1, [pc, #76]	; (80040a4 <MPU6050_Kalman_Accel_X+0x130>)
 8004056:	f7fc f92f 	bl	80002b8 <__aeabi_dsub>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <MPU6050_Kalman_Accel_X+0x12c>)
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f7fc fade 	bl	8000628 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <MPU6050_Kalman_Accel_X+0x140>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc f91f 	bl	80002bc <__adddf3>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4907      	ldr	r1, [pc, #28]	; (80040a0 <MPU6050_Kalman_Accel_X+0x12c>)
 8004084:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <MPU6050_Kalman_Accel_X+0x13c>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004092:	eeb0 0a47 	vmov.f32	s0, s14
 8004096:	eef0 0a67 	vmov.f32	s1, s15
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bdb0      	pop	{r4, r5, r7, pc}
 80040a0:	20000950 	.word	0x20000950
 80040a4:	3ff00000 	.word	0x3ff00000
 80040a8:	40440000 	.word	0x40440000
 80040ac:	20000958 	.word	0x20000958
 80040b0:	20000998 	.word	0x20000998
 80040b4:	20000050 	.word	0x20000050

080040b8 <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 80040be:	f7ff fdd9 	bl	8003c74 <MPU6050_Read_Accel_Y>
 80040c2:	ee10 3a10 	vmov	r3, s0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc fa56 	bl	8000578 <__aeabi_f2d>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80040d4:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <MPU6050_Kalman_Accel_Y+0x12c>)
 80040d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <MPU6050_Kalman_Accel_Y+0x130>)
 80040e0:	f7fc faa2 	bl	8000628 <__aeabi_dmul>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	493d      	ldr	r1, [pc, #244]	; (80041e8 <MPU6050_Kalman_Accel_Y+0x130>)
 80040f2:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <MPU6050_Kalman_Accel_Y+0x12c>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc fa96 	bl	8000628 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <MPU6050_Kalman_Accel_Y+0x130>)
 800410a:	f7fc fa8d 	bl	8000628 <__aeabi_dmul>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <MPU6050_Kalman_Accel_Y+0x134>)
 800411c:	f7fc f8ce 	bl	80002bc <__adddf3>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4620      	mov	r0, r4
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc fba8 	bl	800087c <__aeabi_ddiv>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	492f      	ldr	r1, [pc, #188]	; (80041f0 <MPU6050_Kalman_Accel_Y+0x138>)
 8004132:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	492b      	ldr	r1, [pc, #172]	; (80041e8 <MPU6050_Kalman_Accel_Y+0x130>)
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <MPU6050_Kalman_Accel_Y+0x13c>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f7fc fa71 	bl	8000628 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800414e:	f7fc f8b3 	bl	80002b8 <__aeabi_dsub>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <MPU6050_Kalman_Accel_Y+0x138>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc fa62 	bl	8000628 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <MPU6050_Kalman_Accel_Y+0x13c>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc f8a3 	bl	80002bc <__adddf3>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	491e      	ldr	r1, [pc, #120]	; (80041f4 <MPU6050_Kalman_Accel_Y+0x13c>)
 800417c:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <MPU6050_Kalman_Accel_Y+0x138>)
 8004182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <MPU6050_Kalman_Accel_Y+0x130>)
 800418c:	f7fc fa4c 	bl	8000628 <__aeabi_dmul>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	4913      	ldr	r1, [pc, #76]	; (80041e8 <MPU6050_Kalman_Accel_Y+0x130>)
 800419a:	f7fc f88d 	bl	80002b8 <__aeabi_dsub>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <MPU6050_Kalman_Accel_Y+0x12c>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc fa3c 	bl	8000628 <__aeabi_dmul>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <MPU6050_Kalman_Accel_Y+0x140>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fc f87d 	bl	80002bc <__adddf3>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4907      	ldr	r1, [pc, #28]	; (80041e4 <MPU6050_Kalman_Accel_Y+0x12c>)
 80041c8:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <MPU6050_Kalman_Accel_Y+0x13c>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80041d6:	eeb0 0a47 	vmov.f32	s0, s14
 80041da:	eef0 0a67 	vmov.f32	s1, s15
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bdb0      	pop	{r4, r5, r7, pc}
 80041e4:	20000960 	.word	0x20000960
 80041e8:	3ff00000 	.word	0x3ff00000
 80041ec:	40440000 	.word	0x40440000
 80041f0:	20000968 	.word	0x20000968
 80041f4:	200009a0 	.word	0x200009a0
 80041f8:	20000058 	.word	0x20000058

080041fc <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 80041fc:	b5b0      	push	{r4, r5, r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8004202:	f7ff fd5d 	bl	8003cc0 <MPU6050_Read_Accel_Z>
 8004206:	ee10 3a10 	vmov	r3, s0
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f9b4 	bl	8000578 <__aeabi_f2d>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <MPU6050_Kalman_Accel_Z+0x12c>)
 800421a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	4b42      	ldr	r3, [pc, #264]	; (800432c <MPU6050_Kalman_Accel_Z+0x130>)
 8004224:	f7fc fa00 	bl	8000628 <__aeabi_dmul>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4614      	mov	r4, r2
 800422e:	461d      	mov	r5, r3
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	493d      	ldr	r1, [pc, #244]	; (800432c <MPU6050_Kalman_Accel_Z+0x130>)
 8004236:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <MPU6050_Kalman_Accel_Z+0x12c>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fc f9f4 	bl	8000628 <__aeabi_dmul>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	4b37      	ldr	r3, [pc, #220]	; (800432c <MPU6050_Kalman_Accel_Z+0x130>)
 800424e:	f7fc f9eb 	bl	8000628 <__aeabi_dmul>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	4b34      	ldr	r3, [pc, #208]	; (8004330 <MPU6050_Kalman_Accel_Z+0x134>)
 8004260:	f7fc f82c 	bl	80002bc <__adddf3>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4620      	mov	r0, r4
 800426a:	4629      	mov	r1, r5
 800426c:	f7fc fb06 	bl	800087c <__aeabi_ddiv>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	492f      	ldr	r1, [pc, #188]	; (8004334 <MPU6050_Kalman_Accel_Z+0x138>)
 8004276:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	492b      	ldr	r1, [pc, #172]	; (800432c <MPU6050_Kalman_Accel_Z+0x130>)
 8004280:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <MPU6050_Kalman_Accel_Z+0x13c>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc f9cf 	bl	8000628 <__aeabi_dmul>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004292:	f7fc f811 	bl	80002b8 <__aeabi_dsub>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <MPU6050_Kalman_Accel_Z+0x138>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fc f9c0 	bl	8000628 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <MPU6050_Kalman_Accel_Z+0x13c>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc f801 	bl	80002bc <__adddf3>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	491e      	ldr	r1, [pc, #120]	; (8004338 <MPU6050_Kalman_Accel_Z+0x13c>)
 80042c0:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <MPU6050_Kalman_Accel_Z+0x138>)
 80042c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <MPU6050_Kalman_Accel_Z+0x130>)
 80042d0:	f7fc f9aa 	bl	8000628 <__aeabi_dmul>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	4913      	ldr	r1, [pc, #76]	; (800432c <MPU6050_Kalman_Accel_Z+0x130>)
 80042de:	f7fb ffeb 	bl	80002b8 <__aeabi_dsub>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <MPU6050_Kalman_Accel_Z+0x12c>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fc f99a 	bl	8000628 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <MPU6050_Kalman_Accel_Z+0x140>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fb ffdb 	bl	80002bc <__adddf3>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4907      	ldr	r1, [pc, #28]	; (8004328 <MPU6050_Kalman_Accel_Z+0x12c>)
 800430c:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <MPU6050_Kalman_Accel_Z+0x13c>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	ec43 2b17 	vmov	d7, r2, r3
}
 800431a:	eeb0 0a47 	vmov.f32	s0, s14
 800431e:	eef0 0a67 	vmov.f32	s1, s15
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bdb0      	pop	{r4, r5, r7, pc}
 8004328:	20000970 	.word	0x20000970
 800432c:	3ff00000 	.word	0x3ff00000
 8004330:	40440000 	.word	0x40440000
 8004334:	20000978 	.word	0x20000978
 8004338:	200009a8 	.word	0x200009a8
 800433c:	20000060 	.word	0x20000060

08004340 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8004346:	f7ff fd1b 	bl	8003d80 <MPU6050_Read_Gyro_X>
 800434a:	ee10 3a10 	vmov	r3, s0
 800434e:	4618      	mov	r0, r3
 8004350:	f7fc f912 	bl	8000578 <__aeabi_f2d>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <MPU6050_Kalman_Gyro_X+0x12c>)
 800435e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	4b42      	ldr	r3, [pc, #264]	; (8004470 <MPU6050_Kalman_Gyro_X+0x130>)
 8004368:	f7fc f95e 	bl	8000628 <__aeabi_dmul>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4614      	mov	r4, r2
 8004372:	461d      	mov	r5, r3
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	493d      	ldr	r1, [pc, #244]	; (8004470 <MPU6050_Kalman_Gyro_X+0x130>)
 800437a:	4b3c      	ldr	r3, [pc, #240]	; (800446c <MPU6050_Kalman_Gyro_X+0x12c>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc f952 	bl	8000628 <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	4b37      	ldr	r3, [pc, #220]	; (8004470 <MPU6050_Kalman_Gyro_X+0x130>)
 8004392:	f7fc f949 	bl	8000628 <__aeabi_dmul>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	4b34      	ldr	r3, [pc, #208]	; (8004474 <MPU6050_Kalman_Gyro_X+0x134>)
 80043a4:	f7fb ff8a 	bl	80002bc <__adddf3>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7fc fa64 	bl	800087c <__aeabi_ddiv>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	492f      	ldr	r1, [pc, #188]	; (8004478 <MPU6050_Kalman_Gyro_X+0x138>)
 80043ba:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 80043be:	f04f 0000 	mov.w	r0, #0
 80043c2:	492b      	ldr	r1, [pc, #172]	; (8004470 <MPU6050_Kalman_Gyro_X+0x130>)
 80043c4:	4b2d      	ldr	r3, [pc, #180]	; (800447c <MPU6050_Kalman_Gyro_X+0x13c>)
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f7fc f92d 	bl	8000628 <__aeabi_dmul>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043d6:	f7fb ff6f 	bl	80002b8 <__aeabi_dsub>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4b25      	ldr	r3, [pc, #148]	; (8004478 <MPU6050_Kalman_Gyro_X+0x138>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc f91e 	bl	8000628 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <MPU6050_Kalman_Gyro_X+0x13c>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f7fb ff5f 	bl	80002bc <__adddf3>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	491e      	ldr	r1, [pc, #120]	; (800447c <MPU6050_Kalman_Gyro_X+0x13c>)
 8004404:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <MPU6050_Kalman_Gyro_X+0x138>)
 800440a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <MPU6050_Kalman_Gyro_X+0x130>)
 8004414:	f7fc f908 	bl	8000628 <__aeabi_dmul>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	4913      	ldr	r1, [pc, #76]	; (8004470 <MPU6050_Kalman_Gyro_X+0x130>)
 8004422:	f7fb ff49 	bl	80002b8 <__aeabi_dsub>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <MPU6050_Kalman_Gyro_X+0x12c>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fc f8f8 	bl	8000628 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <MPU6050_Kalman_Gyro_X+0x140>)
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f7fb ff39 	bl	80002bc <__adddf3>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4907      	ldr	r1, [pc, #28]	; (800446c <MPU6050_Kalman_Gyro_X+0x12c>)
 8004450:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <MPU6050_Kalman_Gyro_X+0x13c>)
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	ec43 2b17 	vmov	d7, r2, r3
}
 800445e:	eeb0 0a47 	vmov.f32	s0, s14
 8004462:	eef0 0a67 	vmov.f32	s1, s15
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bdb0      	pop	{r4, r5, r7, pc}
 800446c:	20000980 	.word	0x20000980
 8004470:	3ff00000 	.word	0x3ff00000
 8004474:	40440000 	.word	0x40440000
 8004478:	20000988 	.word	0x20000988
 800447c:	200009b0 	.word	0x200009b0
 8004480:	20000068 	.word	0x20000068

08004484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_MspInit+0x54>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <HAL_MspInit+0x54>)
 8004494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_MspInit+0x54>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_MspInit+0x54>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <HAL_MspInit+0x54>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_MspInit+0x54>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	210f      	movs	r1, #15
 80044c6:	f06f 0001 	mvn.w	r0, #1
 80044ca:	f000 fbcd 	bl	8004c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_I2C_MspInit+0x84>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d12b      	bne.n	8004556 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <HAL_I2C_MspInit+0x88>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_I2C_MspInit+0x88>)
 8004508:	f043 0302 	orr.w	r3, r3, #2
 800450c:	6313      	str	r3, [r2, #48]	; 0x30
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_I2C_MspInit+0x88>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800451a:	23c0      	movs	r3, #192	; 0xc0
 800451c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800451e:	2312      	movs	r3, #18
 8004520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004526:	2303      	movs	r3, #3
 8004528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800452a:	2304      	movs	r3, #4
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	4619      	mov	r1, r3
 8004534:	480c      	ldr	r0, [pc, #48]	; (8004568 <HAL_I2C_MspInit+0x8c>)
 8004536:	f000 fc53 	bl	8004de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b09      	ldr	r3, [pc, #36]	; (8004564 <HAL_I2C_MspInit+0x88>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_I2C_MspInit+0x88>)
 8004544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_I2C_MspInit+0x88>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004556:	bf00      	nop
 8004558:	3728      	adds	r7, #40	; 0x28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40005400 	.word	0x40005400
 8004564:	40023800 	.word	0x40023800
 8004568:	40020400 	.word	0x40020400

0800456c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <HAL_TIM_Base_MspInit+0x48>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d115      	bne.n	80045aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_TIM_Base_MspInit+0x4c>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_TIM_Base_MspInit+0x4c>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6453      	str	r3, [r2, #68]	; 0x44
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_TIM_Base_MspInit+0x4c>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2105      	movs	r1, #5
 800459e:	2019      	movs	r0, #25
 80045a0:	f000 fb62 	bl	8004c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045a4:	2019      	movs	r0, #25
 80045a6:	f000 fb7b 	bl	8004ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40023800 	.word	0x40023800

080045bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08c      	sub	sp, #48	; 0x30
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 031c 	add.w	r3, r7, #28
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a36      	ldr	r2, [pc, #216]	; (80046b4 <HAL_UART_MspInit+0xf8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d12c      	bne.n	8004638 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 80045e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ec:	6413      	str	r3, [r2, #64]	; 0x40
 80045ee:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004616:	230c      	movs	r3, #12
 8004618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461a:	2302      	movs	r3, #2
 800461c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004622:	2303      	movs	r3, #3
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004626:	2307      	movs	r3, #7
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462a:	f107 031c 	add.w	r3, r7, #28
 800462e:	4619      	mov	r1, r3
 8004630:	4822      	ldr	r0, [pc, #136]	; (80046bc <HAL_UART_MspInit+0x100>)
 8004632:	f000 fbd5 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004636:	e038      	b.n	80046aa <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_UART_MspInit+0x104>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d133      	bne.n	80046aa <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 800464c:	f043 0320 	orr.w	r3, r3, #32
 8004650:	6453      	str	r3, [r2, #68]	; 0x44
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6313      	str	r3, [r2, #48]	; 0x30
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_UART_MspInit+0xfc>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800467a:	23c0      	movs	r3, #192	; 0xc0
 800467c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	2302      	movs	r3, #2
 8004680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004686:	2303      	movs	r3, #3
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800468a:	2308      	movs	r3, #8
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468e:	f107 031c 	add.w	r3, r7, #28
 8004692:	4619      	mov	r1, r3
 8004694:	480b      	ldr	r0, [pc, #44]	; (80046c4 <HAL_UART_MspInit+0x108>)
 8004696:	f000 fba3 	bl	8004de0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800469a:	2200      	movs	r2, #0
 800469c:	2105      	movs	r1, #5
 800469e:	2047      	movs	r0, #71	; 0x47
 80046a0:	f000 fae2 	bl	8004c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80046a4:	2047      	movs	r0, #71	; 0x47
 80046a6:	f000 fafb 	bl	8004ca0 <HAL_NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3730      	adds	r7, #48	; 0x30
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40004400 	.word	0x40004400
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40020000 	.word	0x40020000
 80046c0:	40011400 	.word	0x40011400
 80046c4:	40020800 	.word	0x40020800

080046c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08e      	sub	sp, #56	; 0x38
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_InitTick+0xe8>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	4a33      	ldr	r2, [pc, #204]	; (80047b0 <HAL_InitTick+0xe8>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6413      	str	r3, [r2, #64]	; 0x40
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_InitTick+0xe8>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046f4:	f107 0210 	add.w	r2, r7, #16
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 fdf6 	bl	80062f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800470e:	f001 fdc7 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 8004712:	6378      	str	r0, [r7, #52]	; 0x34
 8004714:	e004      	b.n	8004720 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004716:	f001 fdc3 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 800471a:	4603      	mov	r3, r0
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004722:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <HAL_InitTick+0xec>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	0c9b      	lsrs	r3, r3, #18
 800472a:	3b01      	subs	r3, #1
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <HAL_InitTick+0xf0>)
 8004730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004734:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_InitTick+0xf0>)
 8004738:	f240 32e7 	movw	r2, #999	; 0x3e7
 800473c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_InitTick+0xf0>)
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <HAL_InitTick+0xf0>)
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <HAL_InitTick+0xf0>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_InitTick+0xf0>)
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004756:	4818      	ldr	r0, [pc, #96]	; (80047b8 <HAL_InitTick+0xf0>)
 8004758:	f002 fa44 	bl	8006be4 <HAL_TIM_Base_Init>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11b      	bne.n	80047a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800476a:	4813      	ldr	r0, [pc, #76]	; (80047b8 <HAL_InitTick+0xf0>)
 800476c:	f002 fa8a 	bl	8006c84 <HAL_TIM_Base_Start_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800477a:	2b00      	cmp	r3, #0
 800477c:	d111      	bne.n	80047a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800477e:	201c      	movs	r0, #28
 8004780:	f000 fa8e 	bl	8004ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d808      	bhi.n	800479c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800478a:	2200      	movs	r2, #0
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	201c      	movs	r0, #28
 8004790:	f000 fa6a 	bl	8004c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <HAL_InitTick+0xf4>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e002      	b.n	80047a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80047a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3738      	adds	r7, #56	; 0x38
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	200009b8 	.word	0x200009b8
 80047bc:	20000074 	.word	0x20000074

080047c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047c4:	e7fe      	b.n	80047c4 <NMI_Handler+0x4>

080047c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ca:	e7fe      	b.n	80047ca <HardFault_Handler+0x4>

080047cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d0:	e7fe      	b.n	80047d0 <MemManage_Handler+0x4>

080047d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047d2:	b480      	push	{r7}
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047d6:	e7fe      	b.n	80047d6 <BusFault_Handler+0x4>

080047d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047dc:	e7fe      	b.n	80047dc <UsageFault_Handler+0x4>

080047de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80047f2:	f002 fab7 	bl	8006d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000614 	.word	0x20000614

08004800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <TIM2_IRQHandler+0x10>)
 8004806:	f002 faad 	bl	8006d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200009b8 	.word	0x200009b8

08004814 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <USART6_IRQHandler+0x10>)
 800481a:	f002 ff75 	bl	8007708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200006a0 	.word	0x200006a0

08004828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return 1;
 800482c:	2301      	movs	r3, #1
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_kill>:

int _kill(int pid, int sig)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004842:	f007 fac1 	bl	800bdc8 <__errno>
 8004846:	4603      	mov	r3, r0
 8004848:	2216      	movs	r2, #22
 800484a:	601a      	str	r2, [r3, #0]
  return -1;
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_exit>:

void _exit (int status)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ffe7 	bl	8004838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800486a:	e7fe      	b.n	800486a <_exit+0x12>

0800486c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e00a      	b.n	8004894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800487e:	f3af 8000 	nop.w
 8004882:	4601      	mov	r1, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	60ba      	str	r2, [r7, #8]
 800488a:	b2ca      	uxtb	r2, r1
 800488c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	3301      	adds	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	dbf0      	blt.n	800487e <_read+0x12>
  }

  return len;
 800489c:	687b      	ldr	r3, [r7, #4]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e009      	b.n	80048cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	60ba      	str	r2, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	3301      	adds	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	dbf1      	blt.n	80048b8 <_write+0x12>
  }
  return len;
 80048d4:	687b      	ldr	r3, [r7, #4]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_close>:

int _close(int file)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004906:	605a      	str	r2, [r3, #4]
  return 0;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <_isatty>:

int _isatty(int file)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <_sbrk+0x5c>)
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <_sbrk+0x60>)
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <_sbrk+0x64>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <_sbrk+0x64>)
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <_sbrk+0x68>)
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <_sbrk+0x64>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	429a      	cmp	r2, r3
 8004976:	d207      	bcs.n	8004988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004978:	f007 fa26 	bl	800bdc8 <__errno>
 800497c:	4603      	mov	r3, r0
 800497e:	220c      	movs	r2, #12
 8004980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e009      	b.n	800499c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <_sbrk+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <_sbrk+0x64>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <_sbrk+0x64>)
 8004998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800499a:	68fb      	ldr	r3, [r7, #12]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20020000 	.word	0x20020000
 80049a8:	00000400 	.word	0x00000400
 80049ac:	20000a00 	.word	0x20000a00
 80049b0:	200048a8 	.word	0x200048a8

080049b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <SystemInit+0x20>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	4a05      	ldr	r2, [pc, #20]	; (80049d4 <SystemInit+0x20>)
 80049c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049dc:	480d      	ldr	r0, [pc, #52]	; (8004a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049de:	490e      	ldr	r1, [pc, #56]	; (8004a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049e0:	4a0e      	ldr	r2, [pc, #56]	; (8004a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049e4:	e002      	b.n	80049ec <LoopCopyDataInit>

080049e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ea:	3304      	adds	r3, #4

080049ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049f0:	d3f9      	bcc.n	80049e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049f2:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049f4:	4c0b      	ldr	r4, [pc, #44]	; (8004a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049f8:	e001      	b.n	80049fe <LoopFillZerobss>

080049fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049fc:	3204      	adds	r2, #4

080049fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a00:	d3fb      	bcc.n	80049fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a02:	f7ff ffd7 	bl	80049b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a06:	f007 f9e5 	bl	800bdd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a0a:	f7fe fc01 	bl	8003210 <main>
  bx  lr    
 8004a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a18:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8004a1c:	0800f458 	.word	0x0800f458
  ldr r2, =_sbss
 8004a20:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004a24:	200048a8 	.word	0x200048a8

08004a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a28:	e7fe      	b.n	8004a28 <ADC_IRQHandler>
	...

08004a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_Init+0x40>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_Init+0x40>)
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_Init+0x40>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_Init+0x40>)
 8004a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_Init+0x40>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_Init+0x40>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a54:	2003      	movs	r0, #3
 8004a56:	f000 f8fc 	bl	8004c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a5a:	200f      	movs	r0, #15
 8004a5c:	f7ff fe34 	bl	80046c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a60:	f7ff fd10 	bl	8004484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_IncTick+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_IncTick+0x24>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_IncTick+0x24>)
 8004a82:	6013      	str	r3, [r2, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000078 	.word	0x20000078
 8004a94:	20000a04 	.word	0x20000a04

08004a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_GetTick+0x14>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000a04 	.word	0x20000a04

08004ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab8:	f7ff ffee 	bl	8004a98 <HAL_GetTick>
 8004abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d005      	beq.n	8004ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_Delay+0x44>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ad6:	bf00      	nop
 8004ad8:	f7ff ffde 	bl	8004a98 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d8f7      	bhi.n	8004ad8 <HAL_Delay+0x28>
  {
  }
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000078 	.word	0x20000078

08004af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <__NVIC_SetPriorityGrouping+0x44>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b14:	4013      	ands	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b2a:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <__NVIC_SetPriorityGrouping+0x44>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	60d3      	str	r3, [r2, #12]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <__NVIC_GetPriorityGrouping+0x18>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 0307 	and.w	r3, r3, #7
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db0b      	blt.n	8004b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	4907      	ldr	r1, [pc, #28]	; (8004b94 <__NVIC_EnableIRQ+0x38>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000e100 	.word	0xe000e100

08004b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db0a      	blt.n	8004bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	490c      	ldr	r1, [pc, #48]	; (8004be4 <__NVIC_SetPriority+0x4c>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	0112      	lsls	r2, r2, #4
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	440b      	add	r3, r1
 8004bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bc0:	e00a      	b.n	8004bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4908      	ldr	r1, [pc, #32]	; (8004be8 <__NVIC_SetPriority+0x50>)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	3b04      	subs	r3, #4
 8004bd0:	0112      	lsls	r2, r2, #4
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	761a      	strb	r2, [r3, #24]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000e100 	.word	0xe000e100
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f1c3 0307 	rsb	r3, r3, #7
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	bf28      	it	cs
 8004c0a:	2304      	movcs	r3, #4
 8004c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3304      	adds	r3, #4
 8004c12:	2b06      	cmp	r3, #6
 8004c14:	d902      	bls.n	8004c1c <NVIC_EncodePriority+0x30>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3b03      	subs	r3, #3
 8004c1a:	e000      	b.n	8004c1e <NVIC_EncodePriority+0x32>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	401a      	ands	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c34:	f04f 31ff 	mov.w	r1, #4294967295
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	43d9      	mvns	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	4313      	orrs	r3, r2
         );
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff4c 	bl	8004af8 <__NVIC_SetPriorityGrouping>
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c7a:	f7ff ff61 	bl	8004b40 <__NVIC_GetPriorityGrouping>
 8004c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7ff ffb1 	bl	8004bec <NVIC_EncodePriority>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ff80 	bl	8004b98 <__NVIC_SetPriority>
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ff54 	bl	8004b5c <__NVIC_EnableIRQ>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cca:	f7ff fee5 	bl	8004a98 <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d008      	beq.n	8004cee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e052      	b.n	8004d94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0216 	bic.w	r2, r2, #22
 8004cfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <HAL_DMA_Abort+0x62>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0208 	bic.w	r2, r2, #8
 8004d2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d3e:	e013      	b.n	8004d68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d40:	f7ff feaa 	bl	8004a98 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d90c      	bls.n	8004d68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2203      	movs	r2, #3
 8004d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e015      	b.n	8004d94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e4      	bne.n	8004d40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	223f      	movs	r2, #63	; 0x3f
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d004      	beq.n	8004dba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2280      	movs	r2, #128	; 0x80
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00c      	b.n	8004dd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2205      	movs	r2, #5
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e165      	b.n	80050c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	f040 8154 	bne.w	80050c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d005      	beq.n	8004e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d130      	bne.n	8004e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 0201 	and.w	r2, r3, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d017      	beq.n	8004ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d123      	bne.n	8004f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3208      	adds	r2, #8
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80ae 	beq.w	80050c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4a5c      	ldr	r2, [pc, #368]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f74:	6453      	str	r3, [r2, #68]	; 0x44
 8004f76:	4b5a      	ldr	r3, [pc, #360]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f82:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	3302      	adds	r3, #2
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	220f      	movs	r2, #15
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a4f      	ldr	r2, [pc, #316]	; (80050e8 <HAL_GPIO_Init+0x308>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d025      	beq.n	8004ffa <HAL_GPIO_Init+0x21a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a4e      	ldr	r2, [pc, #312]	; (80050ec <HAL_GPIO_Init+0x30c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01f      	beq.n	8004ff6 <HAL_GPIO_Init+0x216>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a4d      	ldr	r2, [pc, #308]	; (80050f0 <HAL_GPIO_Init+0x310>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d019      	beq.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4c      	ldr	r2, [pc, #304]	; (80050f4 <HAL_GPIO_Init+0x314>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_GPIO_Init+0x20e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_GPIO_Init+0x318>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00d      	beq.n	8004fea <HAL_GPIO_Init+0x20a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4a      	ldr	r2, [pc, #296]	; (80050fc <HAL_GPIO_Init+0x31c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <HAL_GPIO_Init+0x206>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a49      	ldr	r2, [pc, #292]	; (8005100 <HAL_GPIO_Init+0x320>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d101      	bne.n	8004fe2 <HAL_GPIO_Init+0x202>
 8004fde:	2306      	movs	r3, #6
 8004fe0:	e00c      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e00a      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fe6:	2305      	movs	r3, #5
 8004fe8:	e008      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fea:	2304      	movs	r3, #4
 8004fec:	e006      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e004      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e002      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_GPIO_Init+0x21c>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f002 0203 	and.w	r2, r2, #3
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	4093      	lsls	r3, r2
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500c:	4935      	ldr	r1, [pc, #212]	; (80050e4 <HAL_GPIO_Init+0x304>)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	3302      	adds	r3, #2
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800501a:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <HAL_GPIO_Init+0x324>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800503e:	4a31      	ldr	r2, [pc, #196]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005044:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005068:	4a26      	ldr	r2, [pc, #152]	; (8005104 <HAL_GPIO_Init+0x324>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800506e:	4b25      	ldr	r3, [pc, #148]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <HAL_GPIO_Init+0x324>)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <HAL_GPIO_Init+0x324>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050bc:	4a11      	ldr	r2, [pc, #68]	; (8005104 <HAL_GPIO_Init+0x324>)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	f67f ae96 	bls.w	8004dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	3724      	adds	r7, #36	; 0x24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40020000 	.word	0x40020000
 80050ec:	40020400 	.word	0x40020400
 80050f0:	40020800 	.word	0x40020800
 80050f4:	40020c00 	.word	0x40020c00
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40021400 	.word	0x40021400
 8005100:	40021800 	.word	0x40021800
 8005104:	40013c00 	.word	0x40013c00

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005124:	e003      	b.n	800512e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e12b      	b.n	80053a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff f9ba 	bl	80044dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	; 0x24
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800518e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051a0:	f001 f87e 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 80051a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4a81      	ldr	r2, [pc, #516]	; (80053b0 <HAL_I2C_Init+0x274>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d807      	bhi.n	80051c0 <HAL_I2C_Init+0x84>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a80      	ldr	r2, [pc, #512]	; (80053b4 <HAL_I2C_Init+0x278>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	bf94      	ite	ls
 80051b8:	2301      	movls	r3, #1
 80051ba:	2300      	movhi	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e006      	b.n	80051ce <HAL_I2C_Init+0x92>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a7d      	ldr	r2, [pc, #500]	; (80053b8 <HAL_I2C_Init+0x27c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bf94      	ite	ls
 80051c8:	2301      	movls	r3, #1
 80051ca:	2300      	movhi	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0e7      	b.n	80053a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a78      	ldr	r2, [pc, #480]	; (80053bc <HAL_I2C_Init+0x280>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0c9b      	lsrs	r3, r3, #18
 80051e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a6a      	ldr	r2, [pc, #424]	; (80053b0 <HAL_I2C_Init+0x274>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d802      	bhi.n	8005210 <HAL_I2C_Init+0xd4>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3301      	adds	r3, #1
 800520e:	e009      	b.n	8005224 <HAL_I2C_Init+0xe8>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	4a69      	ldr	r2, [pc, #420]	; (80053c0 <HAL_I2C_Init+0x284>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	099b      	lsrs	r3, r3, #6
 8005222:	3301      	adds	r3, #1
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	430b      	orrs	r3, r1
 800522a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	495c      	ldr	r1, [pc, #368]	; (80053b0 <HAL_I2C_Init+0x274>)
 8005240:	428b      	cmp	r3, r1
 8005242:	d819      	bhi.n	8005278 <HAL_I2C_Init+0x13c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1e59      	subs	r1, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005252:	1c59      	adds	r1, r3, #1
 8005254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005258:	400b      	ands	r3, r1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_I2C_Init+0x138>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1e59      	subs	r1, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fbb1 f3f3 	udiv	r3, r1, r3
 800526c:	3301      	adds	r3, #1
 800526e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005272:	e051      	b.n	8005318 <HAL_I2C_Init+0x1dc>
 8005274:	2304      	movs	r3, #4
 8005276:	e04f      	b.n	8005318 <HAL_I2C_Init+0x1dc>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d111      	bne.n	80052a4 <HAL_I2C_Init+0x168>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1e58      	subs	r0, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	440b      	add	r3, r1
 800528e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005292:	3301      	adds	r3, #1
 8005294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e012      	b.n	80052ca <HAL_I2C_Init+0x18e>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1e58      	subs	r0, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	0099      	lsls	r1, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ba:	3301      	adds	r3, #1
 80052bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_Init+0x196>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e022      	b.n	8005318 <HAL_I2C_Init+0x1dc>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10e      	bne.n	80052f8 <HAL_I2C_Init+0x1bc>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1e58      	subs	r0, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6859      	ldr	r1, [r3, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	440b      	add	r3, r1
 80052e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ec:	3301      	adds	r3, #1
 80052ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	e00f      	b.n	8005318 <HAL_I2C_Init+0x1dc>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1e58      	subs	r0, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	0099      	lsls	r1, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	fbb0 f3f3 	udiv	r3, r0, r3
 800530e:	3301      	adds	r3, #1
 8005310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	6809      	ldr	r1, [r1, #0]
 800531c:	4313      	orrs	r3, r2
 800531e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6911      	ldr	r1, [r2, #16]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	4311      	orrs	r1, r2
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695a      	ldr	r2, [r3, #20]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	000186a0 	.word	0x000186a0
 80053b4:	001e847f 	.word	0x001e847f
 80053b8:	003d08ff 	.word	0x003d08ff
 80053bc:	431bde83 	.word	0x431bde83
 80053c0:	10624dd3 	.word	0x10624dd3

080053c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	817b      	strh	r3, [r7, #10]
 80053d6:	460b      	mov	r3, r1
 80053d8:	813b      	strh	r3, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053de:	f7ff fb5b 	bl	8004a98 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	f040 80d9 	bne.w	80055a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2319      	movs	r3, #25
 80053f8:	2201      	movs	r2, #1
 80053fa:	496d      	ldr	r1, [pc, #436]	; (80055b0 <HAL_I2C_Mem_Write+0x1ec>)
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fc7f 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
 800540a:	e0cc      	b.n	80055a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_I2C_Mem_Write+0x56>
 8005416:	2302      	movs	r3, #2
 8005418:	e0c5      	b.n	80055a6 <HAL_I2C_Mem_Write+0x1e2>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d007      	beq.n	8005440 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2221      	movs	r2, #33	; 0x21
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a4d      	ldr	r2, [pc, #308]	; (80055b4 <HAL_I2C_Mem_Write+0x1f0>)
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005482:	88f8      	ldrh	r0, [r7, #6]
 8005484:	893a      	ldrh	r2, [r7, #8]
 8005486:	8979      	ldrh	r1, [r7, #10]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	4603      	mov	r3, r0
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fab6 	bl	8005a04 <I2C_RequestMemoryWrite>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d052      	beq.n	8005544 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e081      	b.n	80055a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fd00 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d107      	bne.n	80054ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e06b      	b.n	80055a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	781a      	ldrb	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b04      	cmp	r3, #4
 800550a:	d11b      	bne.n	8005544 <HAL_I2C_Mem_Write+0x180>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d017      	beq.n	8005544 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1aa      	bne.n	80054a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fcec 	bl	8005f2e <I2C_WaitOnBTFFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b04      	cmp	r3, #4
 8005562:	d107      	bne.n	8005574 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005572:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e016      	b.n	80055a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e000      	b.n	80055a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	00100002 	.word	0x00100002
 80055b4:	ffff0000 	.word	0xffff0000

080055b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	; 0x30
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	817b      	strh	r3, [r7, #10]
 80055ca:	460b      	mov	r3, r1
 80055cc:	813b      	strh	r3, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055d2:	f7ff fa61 	bl	8004a98 <HAL_GetTick>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	f040 8208 	bne.w	80059f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2319      	movs	r3, #25
 80055ec:	2201      	movs	r2, #1
 80055ee:	497b      	ldr	r1, [pc, #492]	; (80057dc <HAL_I2C_Mem_Read+0x224>)
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fb85 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
 80055fe:	e1fb      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_I2C_Mem_Read+0x56>
 800560a:	2302      	movs	r3, #2
 800560c:	e1f4      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d007      	beq.n	8005634 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2222      	movs	r2, #34	; 0x22
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a5b      	ldr	r2, [pc, #364]	; (80057e0 <HAL_I2C_Mem_Read+0x228>)
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005676:	88f8      	ldrh	r0, [r7, #6]
 8005678:	893a      	ldrh	r2, [r7, #8]
 800567a:	8979      	ldrh	r1, [r7, #10]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	4603      	mov	r3, r0
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fa52 	bl	8005b30 <I2C_RequestMemoryRead>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e1b0      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d113      	bne.n	80056c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	623b      	str	r3, [r7, #32]
 80056b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e184      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d11b      	bne.n	8005706 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e164      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	2b02      	cmp	r3, #2
 800570c:	d11b      	bne.n	8005746 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	e144      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800575c:	e138      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	2b03      	cmp	r3, #3
 8005764:	f200 80f1 	bhi.w	800594a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	2b01      	cmp	r3, #1
 800576e:	d123      	bne.n	80057b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fc1b 	bl	8005fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e139      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057b6:	e10b      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d14e      	bne.n	800585e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2200      	movs	r2, #0
 80057c8:	4906      	ldr	r1, [pc, #24]	; (80057e4 <HAL_I2C_Mem_Read+0x22c>)
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fa98 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e10e      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
 80057da:	bf00      	nop
 80057dc:	00100002 	.word	0x00100002
 80057e0:	ffff0000 	.word	0xffff0000
 80057e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800585c:	e0b8      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	2200      	movs	r2, #0
 8005866:	4966      	ldr	r1, [pc, #408]	; (8005a00 <HAL_I2C_Mem_Read+0x448>)
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa49 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0bf      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2200      	movs	r2, #0
 80058c2:	494f      	ldr	r1, [pc, #316]	; (8005a00 <HAL_I2C_Mem_Read+0x448>)
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fa1b 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e091      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005948:	e042      	b.n	80059d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fb2e 	bl	8005fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e04c      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d118      	bne.n	80059d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f47f aec2 	bne.w	800575e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3728      	adds	r7, #40	; 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	00010004 	.word	0x00010004

08005a04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	817b      	strh	r3, [r7, #10]
 8005a16:	460b      	mov	r3, r1
 8005a18:	813b      	strh	r3, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f960 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a54:	d103      	bne.n	8005a5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e05f      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	492d      	ldr	r1, [pc, #180]	; (8005b2c <I2C_RequestMemoryWrite+0x128>)
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f998 	bl	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e04c      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa0:	6a39      	ldr	r1, [r7, #32]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa02 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d107      	bne.n	8005ac6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e02b      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d105      	bne.n	8005adc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad0:	893b      	ldrh	r3, [r7, #8]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	e021      	b.n	8005b20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f9dc 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d107      	bne.n	8005b12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e005      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	00010002 	.word	0x00010002

08005b30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	817b      	strh	r3, [r7, #10]
 8005b42:	460b      	mov	r3, r1
 8005b44:	813b      	strh	r3, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f8c2 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b90:	d103      	bne.n	8005b9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0aa      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b9e:	897b      	ldrh	r3, [r7, #10]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	6a3a      	ldr	r2, [r7, #32]
 8005bb2:	4952      	ldr	r1, [pc, #328]	; (8005cfc <I2C_RequestMemoryRead+0x1cc>)
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f8fa 	bl	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e097      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	6a39      	ldr	r1, [r7, #32]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f964 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00d      	beq.n	8005c06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d107      	bne.n	8005c02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e076      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d105      	bne.n	8005c18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c0c:	893b      	ldrh	r3, [r7, #8]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	611a      	str	r2, [r3, #16]
 8005c16:	e021      	b.n	8005c5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c18:	893b      	ldrh	r3, [r7, #8]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	6a39      	ldr	r1, [r7, #32]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f93e 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d107      	bne.n	8005c4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e050      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	6a39      	ldr	r1, [r7, #32]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f923 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d107      	bne.n	8005c84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e035      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f82b 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbe:	d103      	bne.n	8005cc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e013      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ccc:	897b      	ldrh	r3, [r7, #10]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	4906      	ldr	r1, [pc, #24]	; (8005cfc <I2C_RequestMemoryRead+0x1cc>)
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f863 	bl	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	00010002 	.word	0x00010002

08005d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d10:	e025      	b.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d021      	beq.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe febd 	bl	8004a98 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e023      	b.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10d      	bne.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	e00c      	b.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d0b6      	beq.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dbc:	e051      	b.n	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dcc:	d123      	bne.n	8005e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005de6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f043 0204 	orr.w	r2, r3, #4
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e046      	b.n	8005ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d021      	beq.n	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fe fe3b 	bl	8004a98 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d116      	bne.n	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f043 0220 	orr.w	r2, r3, #32
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e020      	b.n	8005ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d10c      	bne.n	8005e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	43da      	mvns	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e00b      	b.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	43da      	mvns	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d18d      	bne.n	8005dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb8:	e02d      	b.n	8005f16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f8ce 	bl	800605c <I2C_IsAcknowledgeFailed>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e02d      	b.n	8005f26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d021      	beq.n	8005f16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	f7fe fde1 	bl	8004a98 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d116      	bne.n	8005f16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e007      	b.n	8005f26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d1ca      	bne.n	8005eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f3a:	e02d      	b.n	8005f98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f88d 	bl	800605c <I2C_IsAcknowledgeFailed>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e02d      	b.n	8005fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f52:	d021      	beq.n	8005f98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f54:	f7fe fda0 	bl	8004a98 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f043 0220 	orr.w	r2, r3, #32
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e007      	b.n	8005fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d1ca      	bne.n	8005f3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fbc:	e042      	b.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d119      	bne.n	8006000 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0210 	mvn.w	r2, #16
 8005fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e029      	b.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006000:	f7fe fd4a 	bl	8004a98 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	d302      	bcc.n	8006016 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d116      	bne.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e007      	b.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d1b5      	bne.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006072:	d11b      	bne.n	80060ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800607c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f043 0204 	orr.w	r2, r3, #4
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0cc      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d0:	4b68      	ldr	r3, [pc, #416]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d90c      	bls.n	80060f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b65      	ldr	r3, [pc, #404]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e6:	4b63      	ldr	r3, [pc, #396]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0b8      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006110:	4b59      	ldr	r3, [pc, #356]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4a58      	ldr	r2, [pc, #352]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800611a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006128:	4b53      	ldr	r3, [pc, #332]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4a52      	ldr	r2, [pc, #328]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006134:	4b50      	ldr	r3, [pc, #320]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	494d      	ldr	r1, [pc, #308]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d044      	beq.n	80061dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615a:	4b47      	ldr	r3, [pc, #284]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d119      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e07f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d003      	beq.n	800617a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006176:	2b03      	cmp	r3, #3
 8006178:	d107      	bne.n	800618a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617a:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e06f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618a:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e067      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800619a:	4b37      	ldr	r3, [pc, #220]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4934      	ldr	r1, [pc, #208]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061ac:	f7fe fc74 	bl	8004a98 <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b4:	f7fe fc70 	bl	8004a98 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e04f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ca:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 020c 	and.w	r2, r3, #12
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	429a      	cmp	r2, r3
 80061da:	d1eb      	bne.n	80061b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061dc:	4b25      	ldr	r3, [pc, #148]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d20c      	bcs.n	8006204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ea:	4b22      	ldr	r3, [pc, #136]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e032      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006210:	4b19      	ldr	r3, [pc, #100]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4916      	ldr	r1, [pc, #88]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	490e      	ldr	r1, [pc, #56]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006242:	f000 f887 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 8006246:	4602      	mov	r2, r0
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	490a      	ldr	r1, [pc, #40]	; (800627c <HAL_RCC_ClockConfig+0x1c0>)
 8006254:	5ccb      	ldrb	r3, [r1, r3]
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1c4>)
 800625c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_RCC_ClockConfig+0x1c8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fa30 	bl	80046c8 <HAL_InitTick>

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40023c00 	.word	0x40023c00
 8006278:	40023800 	.word	0x40023800
 800627c:	0800efd0 	.word	0x0800efd0
 8006280:	20000070 	.word	0x20000070
 8006284:	20000074 	.word	0x20000074

08006288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800628c:	4b03      	ldr	r3, [pc, #12]	; (800629c <HAL_RCC_GetHCLKFreq+0x14>)
 800628e:	681b      	ldr	r3, [r3, #0]
}
 8006290:	4618      	mov	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000070 	.word	0x20000070

080062a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062a4:	f7ff fff0 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	0a9b      	lsrs	r3, r3, #10
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	4903      	ldr	r1, [pc, #12]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b6:	5ccb      	ldrb	r3, [r1, r3]
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40023800 	.word	0x40023800
 80062c4:	0800efe0 	.word	0x0800efe0

080062c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062cc:	f7ff ffdc 	bl	8006288 <HAL_RCC_GetHCLKFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	0b5b      	lsrs	r3, r3, #13
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4903      	ldr	r1, [pc, #12]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	0800efe0 	.word	0x0800efe0

080062f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	220f      	movs	r2, #15
 80062fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006300:	4b12      	ldr	r3, [pc, #72]	; (800634c <HAL_RCC_GetClockConfig+0x5c>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0203 	and.w	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <HAL_RCC_GetClockConfig+0x5c>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <HAL_RCC_GetClockConfig+0x5c>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_RCC_GetClockConfig+0x5c>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	08db      	lsrs	r3, r3, #3
 800632a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006332:	4b07      	ldr	r3, [pc, #28]	; (8006350 <HAL_RCC_GetClockConfig+0x60>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 020f 	and.w	r2, r3, #15
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	601a      	str	r2, [r3, #0]
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40023800 	.word	0x40023800
 8006350:	40023c00 	.word	0x40023c00

08006354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b0a6      	sub	sp, #152	; 0x98
 800635a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800637a:	4bc8      	ldr	r3, [pc, #800]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
 8006382:	2b0c      	cmp	r3, #12
 8006384:	f200 817e 	bhi.w	8006684 <HAL_RCC_GetSysClockFreq+0x330>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <HAL_RCC_GetSysClockFreq+0x3c>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063c5 	.word	0x080063c5
 8006394:	08006685 	.word	0x08006685
 8006398:	08006685 	.word	0x08006685
 800639c:	08006685 	.word	0x08006685
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	08006685 	.word	0x08006685
 80063a8:	08006685 	.word	0x08006685
 80063ac:	08006685 	.word	0x08006685
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	08006685 	.word	0x08006685
 80063b8:	08006685 	.word	0x08006685
 80063bc:	08006685 	.word	0x08006685
 80063c0:	0800653f 	.word	0x0800653f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063c4:	4bb6      	ldr	r3, [pc, #728]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80063c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80063ca:	e15f      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063cc:	4bb5      	ldr	r3, [pc, #724]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80063ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80063d2:	e15b      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063d4:	4bb1      	ldr	r3, [pc, #708]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063e0:	4bae      	ldr	r3, [pc, #696]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d031      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ec:	4bab      	ldr	r3, [pc, #684]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	099b      	lsrs	r3, r3, #6
 80063f2:	2200      	movs	r2, #0
 80063f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006400:	2300      	movs	r3, #0
 8006402:	667b      	str	r3, [r7, #100]	; 0x64
 8006404:	4ba7      	ldr	r3, [pc, #668]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8006406:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800640a:	462a      	mov	r2, r5
 800640c:	fb03 f202 	mul.w	r2, r3, r2
 8006410:	2300      	movs	r3, #0
 8006412:	4621      	mov	r1, r4
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	4aa2      	ldr	r2, [pc, #648]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800641c:	4621      	mov	r1, r4
 800641e:	fba1 1202 	umull	r1, r2, r1, r2
 8006422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006424:	460a      	mov	r2, r1
 8006426:	67ba      	str	r2, [r7, #120]	; 0x78
 8006428:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800642a:	4413      	add	r3, r2
 800642c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800642e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006432:	2200      	movs	r2, #0
 8006434:	65bb      	str	r3, [r7, #88]	; 0x58
 8006436:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800643c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006440:	f7fa fc8a 	bl	8000d58 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4613      	mov	r3, r2
 800644a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800644e:	e064      	b.n	800651a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006450:	4b92      	ldr	r3, [pc, #584]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	099b      	lsrs	r3, r3, #6
 8006456:	2200      	movs	r2, #0
 8006458:	653b      	str	r3, [r7, #80]	; 0x50
 800645a:	657a      	str	r2, [r7, #84]	; 0x54
 800645c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	64bb      	str	r3, [r7, #72]	; 0x48
 8006464:	2300      	movs	r3, #0
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006468:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800646c:	4622      	mov	r2, r4
 800646e:	462b      	mov	r3, r5
 8006470:	f04f 0000 	mov.w	r0, #0
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	0159      	lsls	r1, r3, #5
 800647a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647e:	0150      	lsls	r0, r2, #5
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4621      	mov	r1, r4
 8006486:	1a51      	subs	r1, r2, r1
 8006488:	6139      	str	r1, [r7, #16]
 800648a:	4629      	mov	r1, r5
 800648c:	eb63 0301 	sbc.w	r3, r3, r1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800649e:	4659      	mov	r1, fp
 80064a0:	018b      	lsls	r3, r1, #6
 80064a2:	4651      	mov	r1, sl
 80064a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064a8:	4651      	mov	r1, sl
 80064aa:	018a      	lsls	r2, r1, #6
 80064ac:	4651      	mov	r1, sl
 80064ae:	ebb2 0801 	subs.w	r8, r2, r1
 80064b2:	4659      	mov	r1, fp
 80064b4:	eb63 0901 	sbc.w	r9, r3, r1
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064cc:	4690      	mov	r8, r2
 80064ce:	4699      	mov	r9, r3
 80064d0:	4623      	mov	r3, r4
 80064d2:	eb18 0303 	adds.w	r3, r8, r3
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	462b      	mov	r3, r5
 80064da:	eb49 0303 	adc.w	r3, r9, r3
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ec:	4629      	mov	r1, r5
 80064ee:	028b      	lsls	r3, r1, #10
 80064f0:	4621      	mov	r1, r4
 80064f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064f6:	4621      	mov	r1, r4
 80064f8:	028a      	lsls	r2, r1, #10
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006502:	2200      	movs	r2, #0
 8006504:	643b      	str	r3, [r7, #64]	; 0x40
 8006506:	647a      	str	r2, [r7, #68]	; 0x44
 8006508:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800650c:	f7fa fc24 	bl	8000d58 <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4613      	mov	r3, r2
 8006516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800651a:	4b60      	ldr	r3, [pc, #384]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	3301      	adds	r3, #1
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800652c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800653c:	e0a6      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800653e:	4b57      	ldr	r3, [pc, #348]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800654a:	4b54      	ldr	r3, [pc, #336]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d02a      	beq.n	80065ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006556:	4b51      	ldr	r3, [pc, #324]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	2200      	movs	r2, #0
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006568:	2100      	movs	r1, #0
 800656a:	4b4e      	ldr	r3, [pc, #312]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800656c:	fb03 f201 	mul.w	r2, r3, r1
 8006570:	2300      	movs	r3, #0
 8006572:	fb00 f303 	mul.w	r3, r0, r3
 8006576:	4413      	add	r3, r2
 8006578:	4a4a      	ldr	r2, [pc, #296]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800657a:	fba0 1202 	umull	r1, r2, r0, r2
 800657e:	677a      	str	r2, [r7, #116]	; 0x74
 8006580:	460a      	mov	r2, r1
 8006582:	673a      	str	r2, [r7, #112]	; 0x70
 8006584:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006586:	4413      	add	r3, r2
 8006588:	677b      	str	r3, [r7, #116]	; 0x74
 800658a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800658e:	2200      	movs	r2, #0
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
 8006592:	637a      	str	r2, [r7, #52]	; 0x34
 8006594:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006598:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800659c:	f7fa fbdc 	bl	8000d58 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4613      	mov	r3, r2
 80065a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065aa:	e05b      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ac:	4b3b      	ldr	r3, [pc, #236]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	099b      	lsrs	r3, r3, #6
 80065b2:	2200      	movs	r2, #0
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
 80065c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	f04f 0000 	mov.w	r0, #0
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	0159      	lsls	r1, r3, #5
 80065d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065da:	0150      	lsls	r0, r2, #5
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4641      	mov	r1, r8
 80065e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80065e6:	4649      	mov	r1, r9
 80065e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006600:	ebb2 040a 	subs.w	r4, r2, sl
 8006604:	eb63 050b 	sbc.w	r5, r3, fp
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	00eb      	lsls	r3, r5, #3
 8006612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006616:	00e2      	lsls	r2, r4, #3
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	4643      	mov	r3, r8
 800661e:	18e3      	adds	r3, r4, r3
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	464b      	mov	r3, r9
 8006624:	eb45 0303 	adc.w	r3, r5, r3
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006636:	4629      	mov	r1, r5
 8006638:	028b      	lsls	r3, r1, #10
 800663a:	4621      	mov	r1, r4
 800663c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006640:	4621      	mov	r1, r4
 8006642:	028a      	lsls	r2, r1, #10
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800664c:	2200      	movs	r2, #0
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	61fa      	str	r2, [r7, #28]
 8006652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006656:	f7fa fb7f 	bl	8000d58 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4613      	mov	r3, r2
 8006660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <HAL_RCC_GetSysClockFreq+0x348>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	0f1b      	lsrs	r3, r3, #28
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006682:	e003      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006684:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800668a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006690:	4618      	mov	r0, r3
 8006692:	3798      	adds	r7, #152	; 0x98
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669a:	bf00      	nop
 800669c:	40023800 	.word	0x40023800
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	017d7840 	.word	0x017d7840

080066a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e28d      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8083 	beq.w	80067ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80066c8:	4b94      	ldr	r3, [pc, #592]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d019      	beq.n	8006708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066d4:	4b91      	ldr	r3, [pc, #580]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d106      	bne.n	80066ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066e0:	4b8e      	ldr	r3, [pc, #568]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ec:	d00c      	beq.n	8006708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ee:	4b8b      	ldr	r3, [pc, #556]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066f6:	2b0c      	cmp	r3, #12
 80066f8:	d112      	bne.n	8006720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fa:	4b88      	ldr	r3, [pc, #544]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006706:	d10b      	bne.n	8006720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006708:	4b84      	ldr	r3, [pc, #528]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d05b      	beq.n	80067cc <HAL_RCC_OscConfig+0x124>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d157      	bne.n	80067cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e25a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006728:	d106      	bne.n	8006738 <HAL_RCC_OscConfig+0x90>
 800672a:	4b7c      	ldr	r3, [pc, #496]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a7b      	ldr	r2, [pc, #492]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	e01d      	b.n	8006774 <HAL_RCC_OscConfig+0xcc>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006740:	d10c      	bne.n	800675c <HAL_RCC_OscConfig+0xb4>
 8006742:	4b76      	ldr	r3, [pc, #472]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a75      	ldr	r2, [pc, #468]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	4b73      	ldr	r3, [pc, #460]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a72      	ldr	r2, [pc, #456]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e00b      	b.n	8006774 <HAL_RCC_OscConfig+0xcc>
 800675c:	4b6f      	ldr	r3, [pc, #444]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a6e      	ldr	r2, [pc, #440]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	4b6c      	ldr	r3, [pc, #432]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a6b      	ldr	r2, [pc, #428]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800676e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d013      	beq.n	80067a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fe f98c 	bl	8004a98 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006784:	f7fe f988 	bl	8004a98 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b64      	cmp	r3, #100	; 0x64
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e21f      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	4b61      	ldr	r3, [pc, #388]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0xdc>
 80067a2:	e014      	b.n	80067ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fe f978 	bl	8004a98 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ac:	f7fe f974 	bl	8004a98 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b64      	cmp	r3, #100	; 0x64
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e20b      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067be:	4b57      	ldr	r3, [pc, #348]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x104>
 80067ca:	e000      	b.n	80067ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d06f      	beq.n	80068ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80067da:	4b50      	ldr	r3, [pc, #320]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d017      	beq.n	8006816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80067e6:	4b4d      	ldr	r3, [pc, #308]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d105      	bne.n	80067fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80067f2:	4b4a      	ldr	r3, [pc, #296]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067fe:	4b47      	ldr	r3, [pc, #284]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d11c      	bne.n	8006844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800680a:	4b44      	ldr	r3, [pc, #272]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d116      	bne.n	8006844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006816:	4b41      	ldr	r3, [pc, #260]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_RCC_OscConfig+0x186>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d001      	beq.n	800682e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e1d3      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682e:	4b3b      	ldr	r3, [pc, #236]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4937      	ldr	r1, [pc, #220]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800683e:	4313      	orrs	r3, r2
 8006840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006842:	e03a      	b.n	80068ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d020      	beq.n	800688e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800684c:	4b34      	ldr	r3, [pc, #208]	; (8006920 <HAL_RCC_OscConfig+0x278>)
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006852:	f7fe f921 	bl	8004a98 <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800685a:	f7fe f91d 	bl	8004a98 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e1b4      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686c:	4b2b      	ldr	r3, [pc, #172]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCC_OscConfig+0x274>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4925      	ldr	r1, [pc, #148]	; (800691c <HAL_RCC_OscConfig+0x274>)
 8006888:	4313      	orrs	r3, r2
 800688a:	600b      	str	r3, [r1, #0]
 800688c:	e015      	b.n	80068ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_RCC_OscConfig+0x278>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7fe f900 	bl	8004a98 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689c:	f7fe f8fc 	bl	8004a98 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e193      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ae:	4b1b      	ldr	r3, [pc, #108]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d036      	beq.n	8006934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <HAL_RCC_OscConfig+0x27c>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fe f8e0 	bl	8004a98 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068dc:	f7fe f8dc 	bl	8004a98 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e173      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <HAL_RCC_OscConfig+0x274>)
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0x234>
 80068fa:	e01b      	b.n	8006934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_RCC_OscConfig+0x27c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006902:	f7fe f8c9 	bl	8004a98 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006908:	e00e      	b.n	8006928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690a:	f7fe f8c5 	bl	8004a98 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d907      	bls.n	8006928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e15c      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
 800691c:	40023800 	.word	0x40023800
 8006920:	42470000 	.word	0x42470000
 8006924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006928:	4b8a      	ldr	r3, [pc, #552]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 800692a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ea      	bne.n	800690a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8097 	beq.w	8006a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006946:	4b83      	ldr	r3, [pc, #524]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10f      	bne.n	8006972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006952:	2300      	movs	r3, #0
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	4b7f      	ldr	r3, [pc, #508]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	4a7e      	ldr	r2, [pc, #504]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006960:	6413      	str	r3, [r2, #64]	; 0x40
 8006962:	4b7c      	ldr	r3, [pc, #496]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696a:	60bb      	str	r3, [r7, #8]
 800696c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006972:	4b79      	ldr	r3, [pc, #484]	; (8006b58 <HAL_RCC_OscConfig+0x4b0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d118      	bne.n	80069b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800697e:	4b76      	ldr	r3, [pc, #472]	; (8006b58 <HAL_RCC_OscConfig+0x4b0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a75      	ldr	r2, [pc, #468]	; (8006b58 <HAL_RCC_OscConfig+0x4b0>)
 8006984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800698a:	f7fe f885 	bl	8004a98 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006992:	f7fe f881 	bl	8004a98 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e118      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a4:	4b6c      	ldr	r3, [pc, #432]	; (8006b58 <HAL_RCC_OscConfig+0x4b0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d106      	bne.n	80069c6 <HAL_RCC_OscConfig+0x31e>
 80069b8:	4b66      	ldr	r3, [pc, #408]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	4a65      	ldr	r2, [pc, #404]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	; 0x70
 80069c4:	e01c      	b.n	8006a00 <HAL_RCC_OscConfig+0x358>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCC_OscConfig+0x340>
 80069ce:	4b61      	ldr	r3, [pc, #388]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a60      	ldr	r2, [pc, #384]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069d4:	f043 0304 	orr.w	r3, r3, #4
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
 80069da:	4b5e      	ldr	r3, [pc, #376]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	4a5d      	ldr	r2, [pc, #372]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6713      	str	r3, [r2, #112]	; 0x70
 80069e6:	e00b      	b.n	8006a00 <HAL_RCC_OscConfig+0x358>
 80069e8:	4b5a      	ldr	r3, [pc, #360]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	4a59      	ldr	r2, [pc, #356]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	6713      	str	r3, [r2, #112]	; 0x70
 80069f4:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	4a56      	ldr	r2, [pc, #344]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 80069fa:	f023 0304 	bic.w	r3, r3, #4
 80069fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d015      	beq.n	8006a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a08:	f7fe f846 	bl	8004a98 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0e:	e00a      	b.n	8006a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a10:	f7fe f842 	bl	8004a98 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e0d7      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a26:	4b4b      	ldr	r3, [pc, #300]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ee      	beq.n	8006a10 <HAL_RCC_OscConfig+0x368>
 8006a32:	e014      	b.n	8006a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fe f830 	bl	8004a98 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a3c:	f7fe f82c 	bl	8004a98 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e0c1      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a52:	4b40      	ldr	r3, [pc, #256]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ee      	bne.n	8006a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a64:	4b3b      	ldr	r3, [pc, #236]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	4a3a      	ldr	r2, [pc, #232]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80ad 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a7a:	4b36      	ldr	r3, [pc, #216]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d060      	beq.n	8006b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d145      	bne.n	8006b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b33      	ldr	r3, [pc, #204]	; (8006b5c <HAL_RCC_OscConfig+0x4b4>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fe f800 	bl	8004a98 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a9c:	f7fd fffc 	bl	8004a98 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e093      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aae:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69da      	ldr	r2, [r3, #28]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	019b      	lsls	r3, r3, #6
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	041b      	lsls	r3, r3, #16
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	061b      	lsls	r3, r3, #24
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	071b      	lsls	r3, r3, #28
 8006ae6:	491b      	ldr	r1, [pc, #108]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aec:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <HAL_RCC_OscConfig+0x4b4>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af2:	f7fd ffd1 	bl	8004a98 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006afa:	f7fd ffcd 	bl	8004a98 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e064      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b0c:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0f0      	beq.n	8006afa <HAL_RCC_OscConfig+0x452>
 8006b18:	e05c      	b.n	8006bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1a:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <HAL_RCC_OscConfig+0x4b4>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fd ffba 	bl	8004a98 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b28:	f7fd ffb6 	bl	8004a98 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e04d      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCC_OscConfig+0x4ac>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x480>
 8006b46:	e045      	b.n	8006bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e040      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b60:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <HAL_RCC_OscConfig+0x538>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d030      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d129      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d122      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d119      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d10f      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d107      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40023800 	.word	0x40023800

08006be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e041      	b.n	8006c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fd fcae 	bl	800456c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f000 fa96 	bl	8007154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04e      	b.n	8006d3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d022      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d01d      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0x80>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d111      	bne.n	8006d28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b06      	cmp	r3, #6
 8006d14:	d010      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d26:	e007      	b.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40010400 	.word	0x40010400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40001800 	.word	0x40001800

08006d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d122      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d11b      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0202 	mvn.w	r2, #2
 8006d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9b5 	bl	8007116 <HAL_TIM_IC_CaptureCallback>
 8006dac:	e005      	b.n	8006dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f9a7 	bl	8007102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f9b8 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d122      	bne.n	8006e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d11b      	bne.n	8006e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0204 	mvn.w	r2, #4
 8006de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f98b 	bl	8007116 <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f97d 	bl	8007102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f98e 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d122      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d11b      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0208 	mvn.w	r2, #8
 8006e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f961 	bl	8007116 <HAL_TIM_IC_CaptureCallback>
 8006e54:	e005      	b.n	8006e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f953 	bl	8007102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f964 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d122      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d11b      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0210 	mvn.w	r2, #16
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2208      	movs	r2, #8
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f937 	bl	8007116 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f929 	bl	8007102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f93a 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0201 	mvn.w	r2, #1
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fc fdfe 	bl	8003ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f00:	2b80      	cmp	r3, #128	; 0x80
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fae0 	bl	80074d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f8ff 	bl	800713e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0220 	mvn.w	r2, #32
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 faaa 	bl	80074c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIM_ConfigClockSource+0x1c>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e0b4      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x186>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc8:	d03e      	beq.n	8007048 <HAL_TIM_ConfigClockSource+0xd4>
 8006fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fce:	f200 8087 	bhi.w	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd6:	f000 8086 	beq.w	80070e6 <HAL_TIM_ConfigClockSource+0x172>
 8006fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fde:	d87f      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe0:	2b70      	cmp	r3, #112	; 0x70
 8006fe2:	d01a      	beq.n	800701a <HAL_TIM_ConfigClockSource+0xa6>
 8006fe4:	2b70      	cmp	r3, #112	; 0x70
 8006fe6:	d87b      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe8:	2b60      	cmp	r3, #96	; 0x60
 8006fea:	d050      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x11a>
 8006fec:	2b60      	cmp	r3, #96	; 0x60
 8006fee:	d877      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff0:	2b50      	cmp	r3, #80	; 0x50
 8006ff2:	d03c      	beq.n	800706e <HAL_TIM_ConfigClockSource+0xfa>
 8006ff4:	2b50      	cmp	r3, #80	; 0x50
 8006ff6:	d873      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	d058      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x13a>
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d86f      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007000:	2b30      	cmp	r3, #48	; 0x30
 8007002:	d064      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	d86b      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b20      	cmp	r3, #32
 800700a:	d060      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d867      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d05c      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 8007014:	2b10      	cmp	r3, #16
 8007016:	d05a      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 8007018:	e062      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6899      	ldr	r1, [r3, #8]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f000 f9ad 	bl	8007388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800703c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	609a      	str	r2, [r3, #8]
      break;
 8007046:	e04f      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6899      	ldr	r1, [r3, #8]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f000 f996 	bl	8007388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800706a:	609a      	str	r2, [r3, #8]
      break;
 800706c:	e03c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	461a      	mov	r2, r3
 800707c:	f000 f90a 	bl	8007294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2150      	movs	r1, #80	; 0x50
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f963 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 800708c:	e02c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	461a      	mov	r2, r3
 800709c:	f000 f929 	bl	80072f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2160      	movs	r1, #96	; 0x60
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f953 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 80070ac:	e01c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 f8ea 	bl	8007294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2140      	movs	r1, #64	; 0x40
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f943 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 80070cc:	e00c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f000 f93a 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 80070de:	e003      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
      break;
 80070e4:	e000      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a40      	ldr	r2, [pc, #256]	; (8007268 <TIM_Base_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007172:	d00f      	beq.n	8007194 <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a3d      	ldr	r2, [pc, #244]	; (800726c <TIM_Base_SetConfig+0x118>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00b      	beq.n	8007194 <TIM_Base_SetConfig+0x40>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a3c      	ldr	r2, [pc, #240]	; (8007270 <TIM_Base_SetConfig+0x11c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_Base_SetConfig+0x40>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a3b      	ldr	r2, [pc, #236]	; (8007274 <TIM_Base_SetConfig+0x120>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_Base_SetConfig+0x40>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a3a      	ldr	r2, [pc, #232]	; (8007278 <TIM_Base_SetConfig+0x124>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d108      	bne.n	80071a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <TIM_Base_SetConfig+0x114>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d02b      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b4:	d027      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2c      	ldr	r2, [pc, #176]	; (800726c <TIM_Base_SetConfig+0x118>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d023      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a2b      	ldr	r2, [pc, #172]	; (8007270 <TIM_Base_SetConfig+0x11c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01f      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <TIM_Base_SetConfig+0x120>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01b      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a29      	ldr	r2, [pc, #164]	; (8007278 <TIM_Base_SetConfig+0x124>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d017      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a28      	ldr	r2, [pc, #160]	; (800727c <TIM_Base_SetConfig+0x128>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a27      	ldr	r2, [pc, #156]	; (8007280 <TIM_Base_SetConfig+0x12c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00f      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a26      	ldr	r2, [pc, #152]	; (8007284 <TIM_Base_SetConfig+0x130>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00b      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a25      	ldr	r2, [pc, #148]	; (8007288 <TIM_Base_SetConfig+0x134>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a24      	ldr	r2, [pc, #144]	; (800728c <TIM_Base_SetConfig+0x138>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a23      	ldr	r2, [pc, #140]	; (8007290 <TIM_Base_SetConfig+0x13c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d108      	bne.n	8007218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <TIM_Base_SetConfig+0x114>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_Base_SetConfig+0xf8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a0c      	ldr	r2, [pc, #48]	; (8007278 <TIM_Base_SetConfig+0x124>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d103      	bne.n	8007254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	615a      	str	r2, [r3, #20]
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40010000 	.word	0x40010000
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40000c00 	.word	0x40000c00
 8007278:	40010400 	.word	0x40010400
 800727c:	40014000 	.word	0x40014000
 8007280:	40014400 	.word	0x40014400
 8007284:	40014800 	.word	0x40014800
 8007288:	40001800 	.word	0x40001800
 800728c:	40001c00 	.word	0x40001c00
 8007290:	40002000 	.word	0x40002000

08007294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0201 	bic.w	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f023 030a 	bic.w	r3, r3, #10
 80072d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b087      	sub	sp, #28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f023 0210 	bic.w	r2, r3, #16
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800731c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	031b      	lsls	r3, r3, #12
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800732e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	f043 0307 	orr.w	r3, r3, #7
 8007374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	021a      	lsls	r2, r3, #8
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e05a      	b.n	8007496 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d022      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d01d      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d018      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1b      	ldr	r2, [pc, #108]	; (80074ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1a      	ldr	r2, [pc, #104]	; (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00e      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a18      	ldr	r2, [pc, #96]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d009      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d004      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a15      	ldr	r2, [pc, #84]	; (80074bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d10c      	bne.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4313      	orrs	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40010000 	.word	0x40010000
 80074a8:	40000400 	.word	0x40000400
 80074ac:	40000800 	.word	0x40000800
 80074b0:	40000c00 	.word	0x40000c00
 80074b4:	40010400 	.word	0x40010400
 80074b8:	40014000 	.word	0x40014000
 80074bc:	40001800 	.word	0x40001800

080074c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e03f      	b.n	800757a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fd f854 	bl	80045bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2224      	movs	r2, #36	; 0x24
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800752a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fddf 	bl	80080f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b08a      	sub	sp, #40	; 0x28
 8007586:	af02      	add	r7, sp, #8
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d17c      	bne.n	800769c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_UART_Transmit+0x2c>
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e075      	b.n	800769e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_UART_Transmit+0x3e>
 80075bc:	2302      	movs	r3, #2
 80075be:	e06e      	b.n	800769e <HAL_UART_Transmit+0x11c>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2221      	movs	r2, #33	; 0x21
 80075d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075d6:	f7fd fa5f 	bl	8004a98 <HAL_GetTick>
 80075da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	88fa      	ldrh	r2, [r7, #6]
 80075e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f0:	d108      	bne.n	8007604 <HAL_UART_Transmit+0x82>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d104      	bne.n	8007604 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	e003      	b.n	800760c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007614:	e02a      	b.n	800766c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2200      	movs	r2, #0
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fb1f 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e036      	b.n	800769e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10b      	bne.n	800764e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	3302      	adds	r3, #2
 800764a:	61bb      	str	r3, [r7, #24]
 800764c:	e007      	b.n	800765e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	3301      	adds	r3, #1
 800765c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1cf      	bne.n	8007616 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2200      	movs	r2, #0
 800767e:	2140      	movs	r1, #64	; 0x40
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 faef 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e006      	b.n	800769e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	e000      	b.n	800769e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800769c:	2302      	movs	r3, #2
  }
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d11d      	bne.n	80076fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_UART_Receive_IT+0x26>
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e016      	b.n	80076fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_UART_Receive_IT+0x38>
 80076da:	2302      	movs	r3, #2
 80076dc:	e00f      	b.n	80076fe <HAL_UART_Receive_IT+0x58>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	461a      	mov	r2, r3
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fb24 	bl	8007d40 <UART_Start_Receive_IT>
 80076f8:	4603      	mov	r3, r0
 80076fa:	e000      	b.n	80076fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076fc:	2302      	movs	r3, #2
  }
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b0ba      	sub	sp, #232	; 0xe8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800772e:	2300      	movs	r3, #0
 8007730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800773a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10f      	bne.n	800776e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_UART_IRQHandler+0x66>
 800775a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc07 	bl	8007f7a <UART_Receive_IT>
      return;
 800776c:	e256      	b.n	8007c1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800776e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80de 	beq.w	8007934 <HAL_UART_IRQHandler+0x22c>
 8007778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80d1 	beq.w	8007934 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <HAL_UART_IRQHandler+0xae>
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <HAL_UART_IRQHandler+0xd2>
 80077c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f043 0202 	orr.w	r2, r3, #2
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <HAL_UART_IRQHandler+0xf6>
 80077e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f043 0204 	orr.w	r2, r3, #4
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d011      	beq.n	800782e <HAL_UART_IRQHandler+0x126>
 800780a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d105      	bne.n	8007822 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f043 0208 	orr.w	r2, r3, #8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 81ed 	beq.w	8007c12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_UART_IRQHandler+0x14e>
 8007844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fb92 	bl	8007f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007860:	2b40      	cmp	r3, #64	; 0x40
 8007862:	bf0c      	ite	eq
 8007864:	2301      	moveq	r3, #1
 8007866:	2300      	movne	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <HAL_UART_IRQHandler+0x17a>
 800787a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d04f      	beq.n	8007922 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa9a 	bl	8007dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d141      	bne.n	800791a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3314      	adds	r3, #20
 800789c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3314      	adds	r3, #20
 80078be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1d9      	bne.n	8007896 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d013      	beq.n	8007912 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	4a7d      	ldr	r2, [pc, #500]	; (8007ae4 <HAL_UART_IRQHandler+0x3dc>)
 80078f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fd fa50 	bl	8004d9c <HAL_DMA_Abort_IT>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007910:	e00e      	b.n	8007930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f990 	bl	8007c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	e00a      	b.n	8007930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f98c 	bl	8007c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007920:	e006      	b.n	8007930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f988 	bl	8007c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800792e:	e170      	b.n	8007c12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	bf00      	nop
    return;
 8007932:	e16e      	b.n	8007c12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	2b01      	cmp	r3, #1
 800793a:	f040 814a 	bne.w	8007bd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0310 	and.w	r3, r3, #16
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 8143 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800794c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007950:	f003 0310 	and.w	r3, r3, #16
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 813c 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	f040 80b4 	bne.w	8007ae8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800798c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8140 	beq.w	8007c16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800799a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800799e:	429a      	cmp	r2, r3
 80079a0:	f080 8139 	bcs.w	8007c16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b6:	f000 8088 	beq.w	8007aca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1d9      	bne.n	80079ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3314      	adds	r3, #20
 8007a0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3314      	adds	r3, #20
 8007a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e1      	bne.n	8007a06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3314      	adds	r3, #20
 8007a48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3314      	adds	r3, #20
 8007a62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e3      	bne.n	8007a42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a9a:	f023 0310 	bic.w	r3, r3, #16
 8007a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aac:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e3      	bne.n	8007a88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd f8f9 	bl	8004cbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8b6 	bl	8007c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ae0:	e099      	b.n	8007c16 <HAL_UART_IRQHandler+0x50e>
 8007ae2:	bf00      	nop
 8007ae4:	08007e83 	.word	0x08007e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 808b 	beq.w	8007c1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8086 	beq.w	8007c1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	330c      	adds	r3, #12
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b32:	647a      	str	r2, [r7, #68]	; 0x44
 8007b34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e3      	bne.n	8007b0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	623b      	str	r3, [r7, #32]
   return(result);
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b6a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e3      	bne.n	8007b46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0310 	bic.w	r3, r3, #16
 8007ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bb0:	61fa      	str	r2, [r7, #28]
 8007bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	69b9      	ldr	r1, [r7, #24]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e3      	bne.n	8007b8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f83e 	bl	8007c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bd0:	e023      	b.n	8007c1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x4ea>
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f95d 	bl	8007eaa <UART_Transmit_IT>
    return;
 8007bf0:	e014      	b.n	8007c1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <HAL_UART_IRQHandler+0x514>
 8007bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d008      	beq.n	8007c1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f99d 	bl	8007f4a <UART_EndTransmit_IT>
    return;
 8007c10:	e004      	b.n	8007c1c <HAL_UART_IRQHandler+0x514>
    return;
 8007c12:	bf00      	nop
 8007c14:	e002      	b.n	8007c1c <HAL_UART_IRQHandler+0x514>
      return;
 8007c16:	bf00      	nop
 8007c18:	e000      	b.n	8007c1c <HAL_UART_IRQHandler+0x514>
      return;
 8007c1a:	bf00      	nop
  }
}
 8007c1c:	37e8      	adds	r7, #232	; 0xe8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop

08007c24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b090      	sub	sp, #64	; 0x40
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c74:	e050      	b.n	8007d18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d04c      	beq.n	8007d18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d007      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c84:	f7fc ff08 	bl	8004a98 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d241      	bcs.n	8007d18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cb4:	637a      	str	r2, [r7, #52]	; 0x34
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e5      	bne.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce8:	623a      	str	r2, [r7, #32]
 8007cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	69f9      	ldr	r1, [r7, #28]
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e00f      	b.n	8007d38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4013      	ands	r3, r2
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d09f      	beq.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3740      	adds	r7, #64	; 0x40
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2222      	movs	r2, #34	; 0x22
 8007d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	695a      	ldr	r2, [r3, #20]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0201 	orr.w	r2, r2, #1
 8007d9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0220 	orr.w	r2, r2, #32
 8007dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b095      	sub	sp, #84	; 0x54
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de4:	643a      	str	r2, [r7, #64]	; 0x40
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e5      	bne.n	8007dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d119      	bne.n	8007e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e54:	61ba      	str	r2, [r7, #24]
 8007e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	613b      	str	r3, [r7, #16]
   return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e5      	bne.n	8007e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e76:	bf00      	nop
 8007e78:	3754      	adds	r7, #84	; 0x54
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff fecb 	bl	8007c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b21      	cmp	r3, #33	; 0x21
 8007ebc:	d13e      	bne.n	8007f3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	d114      	bne.n	8007ef2 <UART_Transmit_IT+0x48>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	621a      	str	r2, [r3, #32]
 8007ef0:	e008      	b.n	8007f04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	1c59      	adds	r1, r3, #1
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6211      	str	r1, [r2, #32]
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	4619      	mov	r1, r3
 8007f12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e000      	b.n	8007f3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
  }
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fe5a 	bl	8007c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b08c      	sub	sp, #48	; 0x30
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b22      	cmp	r3, #34	; 0x22
 8007f8c:	f040 80ab 	bne.w	80080e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f98:	d117      	bne.n	8007fca <UART_Receive_IT+0x50>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d113      	bne.n	8007fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc8:	e026      	b.n	8008018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fdc:	d007      	beq.n	8007fee <UART_Receive_IT+0x74>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <UART_Receive_IT+0x82>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	e008      	b.n	800800e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008008:	b2da      	uxtb	r2, r3
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	4619      	mov	r1, r3
 8008026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008028:	2b00      	cmp	r3, #0
 800802a:	d15a      	bne.n	80080e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0220 	bic.w	r2, r2, #32
 800803a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800804a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	2b01      	cmp	r3, #1
 800806a:	d135      	bne.n	80080d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	613b      	str	r3, [r7, #16]
   return(result);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f023 0310 	bic.w	r3, r3, #16
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	330c      	adds	r3, #12
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	623a      	str	r2, [r7, #32]
 8008094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	61bb      	str	r3, [r7, #24]
   return(result);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d10a      	bne.n	80080ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fdbb 	bl	8007c4c <HAL_UARTEx_RxEventCallback>
 80080d6:	e002      	b.n	80080de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fa fec9 	bl	8002e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e002      	b.n	80080e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3730      	adds	r7, #48	; 0x30
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f4:	b0c0      	sub	sp, #256	; 0x100
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	68d9      	ldr	r1, [r3, #12]
 800810e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	ea40 0301 	orr.w	r3, r0, r1
 8008118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	431a      	orrs	r2, r3
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	431a      	orrs	r2, r3
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	4313      	orrs	r3, r2
 8008138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008148:	f021 010c 	bic.w	r1, r1, #12
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008156:	430b      	orrs	r3, r1
 8008158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816a:	6999      	ldr	r1, [r3, #24]
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	ea40 0301 	orr.w	r3, r0, r1
 8008176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b8f      	ldr	r3, [pc, #572]	; (80083bc <UART_SetConfig+0x2cc>)
 8008180:	429a      	cmp	r2, r3
 8008182:	d005      	beq.n	8008190 <UART_SetConfig+0xa0>
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b8d      	ldr	r3, [pc, #564]	; (80083c0 <UART_SetConfig+0x2d0>)
 800818c:	429a      	cmp	r2, r3
 800818e:	d104      	bne.n	800819a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008190:	f7fe f89a 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 8008194:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008198:	e003      	b.n	80081a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800819a:	f7fe f881 	bl	80062a0 <HAL_RCC_GetPCLK1Freq>
 800819e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ac:	f040 810c 	bne.w	80083c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081c2:	4622      	mov	r2, r4
 80081c4:	462b      	mov	r3, r5
 80081c6:	1891      	adds	r1, r2, r2
 80081c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80081ca:	415b      	adcs	r3, r3
 80081cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081d2:	4621      	mov	r1, r4
 80081d4:	eb12 0801 	adds.w	r8, r2, r1
 80081d8:	4629      	mov	r1, r5
 80081da:	eb43 0901 	adc.w	r9, r3, r1
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081f2:	4690      	mov	r8, r2
 80081f4:	4699      	mov	r9, r3
 80081f6:	4623      	mov	r3, r4
 80081f8:	eb18 0303 	adds.w	r3, r8, r3
 80081fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008200:	462b      	mov	r3, r5
 8008202:	eb49 0303 	adc.w	r3, r9, r3
 8008206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800820a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800821a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800821e:	460b      	mov	r3, r1
 8008220:	18db      	adds	r3, r3, r3
 8008222:	653b      	str	r3, [r7, #80]	; 0x50
 8008224:	4613      	mov	r3, r2
 8008226:	eb42 0303 	adc.w	r3, r2, r3
 800822a:	657b      	str	r3, [r7, #84]	; 0x54
 800822c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008234:	f7f8 fd90 	bl	8000d58 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4b61      	ldr	r3, [pc, #388]	; (80083c4 <UART_SetConfig+0x2d4>)
 800823e:	fba3 2302 	umull	r2, r3, r3, r2
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	011c      	lsls	r4, r3, #4
 8008246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008250:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	1891      	adds	r1, r2, r2
 800825e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008260:	415b      	adcs	r3, r3
 8008262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008268:	4641      	mov	r1, r8
 800826a:	eb12 0a01 	adds.w	sl, r2, r1
 800826e:	4649      	mov	r1, r9
 8008270:	eb43 0b01 	adc.w	fp, r3, r1
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008288:	4692      	mov	sl, r2
 800828a:	469b      	mov	fp, r3
 800828c:	4643      	mov	r3, r8
 800828e:	eb1a 0303 	adds.w	r3, sl, r3
 8008292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008296:	464b      	mov	r3, r9
 8008298:	eb4b 0303 	adc.w	r3, fp, r3
 800829c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082b4:	460b      	mov	r3, r1
 80082b6:	18db      	adds	r3, r3, r3
 80082b8:	643b      	str	r3, [r7, #64]	; 0x40
 80082ba:	4613      	mov	r3, r2
 80082bc:	eb42 0303 	adc.w	r3, r2, r3
 80082c0:	647b      	str	r3, [r7, #68]	; 0x44
 80082c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082ca:	f7f8 fd45 	bl	8000d58 <__aeabi_uldivmod>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4611      	mov	r1, r2
 80082d4:	4b3b      	ldr	r3, [pc, #236]	; (80083c4 <UART_SetConfig+0x2d4>)
 80082d6:	fba3 2301 	umull	r2, r3, r3, r1
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	2264      	movs	r2, #100	; 0x64
 80082de:	fb02 f303 	mul.w	r3, r2, r3
 80082e2:	1acb      	subs	r3, r1, r3
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082ea:	4b36      	ldr	r3, [pc, #216]	; (80083c4 <UART_SetConfig+0x2d4>)
 80082ec:	fba3 2302 	umull	r2, r3, r3, r2
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082f8:	441c      	add	r4, r3
 80082fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008304:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	1891      	adds	r1, r2, r2
 8008312:	63b9      	str	r1, [r7, #56]	; 0x38
 8008314:	415b      	adcs	r3, r3
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800831c:	4641      	mov	r1, r8
 800831e:	1851      	adds	r1, r2, r1
 8008320:	6339      	str	r1, [r7, #48]	; 0x30
 8008322:	4649      	mov	r1, r9
 8008324:	414b      	adcs	r3, r1
 8008326:	637b      	str	r3, [r7, #52]	; 0x34
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008334:	4659      	mov	r1, fp
 8008336:	00cb      	lsls	r3, r1, #3
 8008338:	4651      	mov	r1, sl
 800833a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833e:	4651      	mov	r1, sl
 8008340:	00ca      	lsls	r2, r1, #3
 8008342:	4610      	mov	r0, r2
 8008344:	4619      	mov	r1, r3
 8008346:	4603      	mov	r3, r0
 8008348:	4642      	mov	r2, r8
 800834a:	189b      	adds	r3, r3, r2
 800834c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008350:	464b      	mov	r3, r9
 8008352:	460a      	mov	r2, r1
 8008354:	eb42 0303 	adc.w	r3, r2, r3
 8008358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008368:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800836c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008370:	460b      	mov	r3, r1
 8008372:	18db      	adds	r3, r3, r3
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28
 8008376:	4613      	mov	r3, r2
 8008378:	eb42 0303 	adc.w	r3, r2, r3
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800837e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008386:	f7f8 fce7 	bl	8000d58 <__aeabi_uldivmod>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <UART_SetConfig+0x2d4>)
 8008390:	fba3 1302 	umull	r1, r3, r3, r2
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	2164      	movs	r1, #100	; 0x64
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	3332      	adds	r3, #50	; 0x32
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <UART_SetConfig+0x2d4>)
 80083a4:	fba2 2303 	umull	r2, r3, r2, r3
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	f003 0207 	and.w	r2, r3, #7
 80083ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4422      	add	r2, r4
 80083b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b8:	e106      	b.n	80085c8 <UART_SetConfig+0x4d8>
 80083ba:	bf00      	nop
 80083bc:	40011000 	.word	0x40011000
 80083c0:	40011400 	.word	0x40011400
 80083c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083da:	4642      	mov	r2, r8
 80083dc:	464b      	mov	r3, r9
 80083de:	1891      	adds	r1, r2, r2
 80083e0:	6239      	str	r1, [r7, #32]
 80083e2:	415b      	adcs	r3, r3
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
 80083e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ea:	4641      	mov	r1, r8
 80083ec:	1854      	adds	r4, r2, r1
 80083ee:	4649      	mov	r1, r9
 80083f0:	eb43 0501 	adc.w	r5, r3, r1
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	00eb      	lsls	r3, r5, #3
 80083fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008402:	00e2      	lsls	r2, r4, #3
 8008404:	4614      	mov	r4, r2
 8008406:	461d      	mov	r5, r3
 8008408:	4643      	mov	r3, r8
 800840a:	18e3      	adds	r3, r4, r3
 800840c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008410:	464b      	mov	r3, r9
 8008412:	eb45 0303 	adc.w	r3, r5, r3
 8008416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800841a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008436:	4629      	mov	r1, r5
 8008438:	008b      	lsls	r3, r1, #2
 800843a:	4621      	mov	r1, r4
 800843c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008440:	4621      	mov	r1, r4
 8008442:	008a      	lsls	r2, r1, #2
 8008444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008448:	f7f8 fc86 	bl	8000d58 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4b60      	ldr	r3, [pc, #384]	; (80085d4 <UART_SetConfig+0x4e4>)
 8008452:	fba3 2302 	umull	r2, r3, r3, r2
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	011c      	lsls	r4, r3, #4
 800845a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845e:	2200      	movs	r2, #0
 8008460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	1891      	adds	r1, r2, r2
 8008472:	61b9      	str	r1, [r7, #24]
 8008474:	415b      	adcs	r3, r3
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800847c:	4641      	mov	r1, r8
 800847e:	1851      	adds	r1, r2, r1
 8008480:	6139      	str	r1, [r7, #16]
 8008482:	4649      	mov	r1, r9
 8008484:	414b      	adcs	r3, r1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008494:	4659      	mov	r1, fp
 8008496:	00cb      	lsls	r3, r1, #3
 8008498:	4651      	mov	r1, sl
 800849a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849e:	4651      	mov	r1, sl
 80084a0:	00ca      	lsls	r2, r1, #3
 80084a2:	4610      	mov	r0, r2
 80084a4:	4619      	mov	r1, r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	4642      	mov	r2, r8
 80084aa:	189b      	adds	r3, r3, r2
 80084ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084b0:	464b      	mov	r3, r9
 80084b2:	460a      	mov	r2, r1
 80084b4:	eb42 0303 	adc.w	r3, r2, r3
 80084b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80084c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084d4:	4649      	mov	r1, r9
 80084d6:	008b      	lsls	r3, r1, #2
 80084d8:	4641      	mov	r1, r8
 80084da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084de:	4641      	mov	r1, r8
 80084e0:	008a      	lsls	r2, r1, #2
 80084e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084e6:	f7f8 fc37 	bl	8000d58 <__aeabi_uldivmod>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	4b38      	ldr	r3, [pc, #224]	; (80085d4 <UART_SetConfig+0x4e4>)
 80084f2:	fba3 2301 	umull	r2, r3, r3, r1
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	2264      	movs	r2, #100	; 0x64
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	1acb      	subs	r3, r1, r3
 8008500:	011b      	lsls	r3, r3, #4
 8008502:	3332      	adds	r3, #50	; 0x32
 8008504:	4a33      	ldr	r2, [pc, #204]	; (80085d4 <UART_SetConfig+0x4e4>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008510:	441c      	add	r4, r3
 8008512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008516:	2200      	movs	r2, #0
 8008518:	673b      	str	r3, [r7, #112]	; 0x70
 800851a:	677a      	str	r2, [r7, #116]	; 0x74
 800851c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	1891      	adds	r1, r2, r2
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	415b      	adcs	r3, r3
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008530:	4641      	mov	r1, r8
 8008532:	1851      	adds	r1, r2, r1
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	4649      	mov	r1, r9
 8008538:	414b      	adcs	r3, r1
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008548:	4659      	mov	r1, fp
 800854a:	00cb      	lsls	r3, r1, #3
 800854c:	4651      	mov	r1, sl
 800854e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008552:	4651      	mov	r1, sl
 8008554:	00ca      	lsls	r2, r1, #3
 8008556:	4610      	mov	r0, r2
 8008558:	4619      	mov	r1, r3
 800855a:	4603      	mov	r3, r0
 800855c:	4642      	mov	r2, r8
 800855e:	189b      	adds	r3, r3, r2
 8008560:	66bb      	str	r3, [r7, #104]	; 0x68
 8008562:	464b      	mov	r3, r9
 8008564:	460a      	mov	r2, r1
 8008566:	eb42 0303 	adc.w	r3, r2, r3
 800856a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800856c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	663b      	str	r3, [r7, #96]	; 0x60
 8008576:	667a      	str	r2, [r7, #100]	; 0x64
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008584:	4649      	mov	r1, r9
 8008586:	008b      	lsls	r3, r1, #2
 8008588:	4641      	mov	r1, r8
 800858a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800858e:	4641      	mov	r1, r8
 8008590:	008a      	lsls	r2, r1, #2
 8008592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008596:	f7f8 fbdf 	bl	8000d58 <__aeabi_uldivmod>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <UART_SetConfig+0x4e4>)
 80085a0:	fba3 1302 	umull	r1, r3, r3, r2
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	2164      	movs	r1, #100	; 0x64
 80085a8:	fb01 f303 	mul.w	r3, r1, r3
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	3332      	adds	r3, #50	; 0x32
 80085b2:	4a08      	ldr	r2, [pc, #32]	; (80085d4 <UART_SetConfig+0x4e4>)
 80085b4:	fba2 2303 	umull	r2, r3, r2, r3
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	f003 020f 	and.w	r2, r3, #15
 80085be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4422      	add	r2, r4
 80085c6:	609a      	str	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085ce:	46bd      	mov	sp, r7
 80085d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085d4:	51eb851f 	.word	0x51eb851f

080085d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085ea:	2b84      	cmp	r3, #132	; 0x84
 80085ec:	d005      	beq.n	80085fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	3303      	adds	r3, #3
 80085f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800860e:	f3ef 8305 	mrs	r3, IPSR
 8008612:	607b      	str	r3, [r7, #4]
  return(result);
 8008614:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2db      	uxtb	r3, r3
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008630:	f001 f98a 	bl	8009948 <vTaskStartScheduler>
  
  return osOK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	bd80      	pop	{r7, pc}

0800863a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800863a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863c:	b089      	sub	sp, #36	; 0x24
 800863e:	af04      	add	r7, sp, #16
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d020      	beq.n	800868e <osThreadCreate+0x54>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01c      	beq.n	800868e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685c      	ldr	r4, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691e      	ldr	r6, [r3, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff ffb6 	bl	80085d8 <makeFreeRtosPriority>
 800866c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008676:	9202      	str	r2, [sp, #8]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	9100      	str	r1, [sp, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4632      	mov	r2, r6
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 ff82 	bl	800958c <xTaskCreateStatic>
 8008688:	4603      	mov	r3, r0
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	e01c      	b.n	80086c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685c      	ldr	r4, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800869a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff ff98 	bl	80085d8 <makeFreeRtosPriority>
 80086a8:	4602      	mov	r2, r0
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	9200      	str	r2, [sp, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	4632      	mov	r2, r6
 80086b6:	4629      	mov	r1, r5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 ffc4 	bl	8009646 <xTaskCreate>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d001      	beq.n	80086c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e000      	b.n	80086ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80086c8:	68fb      	ldr	r3, [r7, #12]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <osDelay+0x16>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	e000      	b.n	80086ea <osDelay+0x18>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 f8f8 	bl	80098e0 <vTaskDelay>
  
  return osOK;
 80086f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	4619      	mov	r1, r3
 8008710:	2001      	movs	r0, #1
 8008712:	f000 fae0 	bl	8008cd6 <xQueueCreateMutexStatic>
 8008716:	4603      	mov	r3, r0
 8008718:	e003      	b.n	8008722 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800871a:	2001      	movs	r0, #1
 800871c:	f000 fac3 	bl	8008ca6 <xQueueCreateMutex>
 8008720:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800872a:	b580      	push	{r7, lr}
 800872c:	b086      	sub	sp, #24
 800872e:	af02      	add	r7, sp, #8
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00f      	beq.n	800875c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10a      	bne.n	8008758 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2203      	movs	r2, #3
 8008748:	9200      	str	r2, [sp, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	2100      	movs	r1, #0
 800874e:	2001      	movs	r0, #1
 8008750:	f000 f9be 	bl	8008ad0 <xQueueGenericCreateStatic>
 8008754:	4603      	mov	r3, r0
 8008756:	e016      	b.n	8008786 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	e014      	b.n	8008786 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d110      	bne.n	8008784 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008762:	2203      	movs	r2, #3
 8008764:	2100      	movs	r1, #0
 8008766:	2001      	movs	r0, #1
 8008768:	f000 fa2a 	bl	8008bc0 <xQueueGenericCreate>
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <osSemaphoreCreate+0x56>
 8008774:	2300      	movs	r3, #0
 8008776:	2200      	movs	r2, #0
 8008778:	2100      	movs	r1, #0
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 fac6 	bl	8008d0c <xQueueGenericSend>
      return sema;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	e000      	b.n	8008786 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008784:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80087a4:	2380      	movs	r3, #128	; 0x80
 80087a6:	e03a      	b.n	800881e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d103      	bne.n	80087bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80087b4:	f04f 33ff 	mov.w	r3, #4294967295
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e009      	b.n	80087d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d006      	beq.n	80087d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80087cc:	2301      	movs	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80087d0:	f7ff ff1a 	bl	8008608 <inHandlerMode>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d017      	beq.n	800880a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	461a      	mov	r2, r3
 80087e0:	2100      	movs	r1, #0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fd2a 	bl	800923c <xQueueReceiveFromISR>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d001      	beq.n	80087f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80087ee:	23ff      	movs	r3, #255	; 0xff
 80087f0:	e015      	b.n	800881e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d011      	beq.n	800881c <osSemaphoreWait+0x8c>
 80087f8:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <osSemaphoreWait+0x98>)
 80087fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	e008      	b.n	800881c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fc09 	bl	8009024 <xQueueSemaphoreTake>
 8008812:	4603      	mov	r3, r0
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008818:	23ff      	movs	r3, #255	; 0xff
 800881a:	e000      	b.n	800881e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008838:	2300      	movs	r3, #0
 800883a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800883c:	f7ff fee4 	bl	8008608 <inHandlerMode>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d016      	beq.n	8008874 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008846:	f107 0308 	add.w	r3, r7, #8
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fb5b 	bl	8008f08 <xQueueGiveFromISR>
 8008852:	4603      	mov	r3, r0
 8008854:	2b01      	cmp	r3, #1
 8008856:	d001      	beq.n	800885c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008858:	23ff      	movs	r3, #255	; 0xff
 800885a:	e017      	b.n	800888c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d013      	beq.n	800888a <osSemaphoreRelease+0x5e>
 8008862:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <osSemaphoreRelease+0x68>)
 8008864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	e00a      	b.n	800888a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa46 	bl	8008d0c <xQueueGenericSend>
 8008880:	4603      	mov	r3, r0
 8008882:	2b01      	cmp	r3, #1
 8008884:	d001      	beq.n	800888a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008886:	23ff      	movs	r3, #255	; 0xff
 8008888:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800888a:	68fb      	ldr	r3, [r7, #12]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f103 0208 	add.w	r2, r3, #8
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f103 0208 	add.w	r2, r3, #8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f103 0208 	add.w	r2, r3, #8
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088f2:	b480      	push	{r7}
 80088f4:	b085      	sub	sp, #20
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d103      	bne.n	800895a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e00c      	b.n	8008974 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3308      	adds	r3, #8
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e002      	b.n	8008968 <vListInsert+0x2e>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	429a      	cmp	r2, r3
 8008972:	d2f6      	bcs.n	8008962 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6892      	ldr	r2, [r2, #8]
 80089c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6852      	ldr	r2, [r2, #4]
 80089cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d103      	bne.n	80089e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	1e5a      	subs	r2, r3, #1
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a2a:	f001 feeb 	bl	800a804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a3a:	fb01 f303 	mul.w	r3, r1, r3
 8008a3e:	441a      	add	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	68f9      	ldr	r1, [r7, #12]
 8008a5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a60:	fb01 f303 	mul.w	r3, r1, r3
 8008a64:	441a      	add	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d114      	bne.n	8008aaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01a      	beq.n	8008abe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3310      	adds	r3, #16
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 f9ad 	bl	8009dec <xTaskRemoveFromEventList>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <xQueueGenericReset+0xcc>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	e009      	b.n	8008abe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3310      	adds	r3, #16
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff fef2 	bl	8008898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3324      	adds	r3, #36	; 0x24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff feed 	bl	8008898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008abe:	f001 fed1 	bl	800a864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ac2:	2301      	movs	r3, #1
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	e000ed04 	.word	0xe000ed04

08008ad0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08e      	sub	sp, #56	; 0x38
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <xQueueGenericCreateStatic+0x52>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <xQueueGenericCreateStatic+0x56>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <xQueueGenericCreateStatic+0x58>
 8008b26:	2300      	movs	r3, #0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	623b      	str	r3, [r7, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueueGenericCreateStatic+0x7e>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueueGenericCreateStatic+0x82>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueGenericCreateStatic+0x84>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	61fb      	str	r3, [r7, #28]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b6e:	2348      	movs	r3, #72	; 0x48
 8008b70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b48      	cmp	r3, #72	; 0x48
 8008b76:	d00a      	beq.n	8008b8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	61bb      	str	r3, [r7, #24]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00d      	beq.n	8008bb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ba2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4613      	mov	r3, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f83f 	bl	8008c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3730      	adds	r7, #48	; 0x30
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xQueueGenericCreate+0x2a>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	613b      	str	r3, [r7, #16]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	fb02 f303 	mul.w	r3, r2, r3
 8008bf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	3348      	adds	r3, #72	; 0x48
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 ff25 	bl	800aa48 <pvPortMalloc>
 8008bfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d011      	beq.n	8008c2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	3348      	adds	r3, #72	; 0x48
 8008c0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c18:	79fa      	ldrb	r2, [r7, #7]
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f805 	bl	8008c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c62:	2101      	movs	r1, #1
 8008c64:	69b8      	ldr	r0, [r7, #24]
 8008c66:	f7ff fecb 	bl	8008a00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00e      	beq.n	8008c9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c92:	2300      	movs	r3, #0
 8008c94:	2200      	movs	r2, #0
 8008c96:	2100      	movs	r1, #0
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f837 	bl	8008d0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b086      	sub	sp, #24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	4603      	mov	r3, r0
 8008cae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	6939      	ldr	r1, [r7, #16]
 8008cbe:	6978      	ldr	r0, [r7, #20]
 8008cc0:	f7ff ff7e 	bl	8008bc0 <xQueueGenericCreate>
 8008cc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff ffd3 	bl	8008c72 <prvInitialiseMutex>

		return xNewQueue;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
	}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af02      	add	r7, sp, #8
 8008cdc:	4603      	mov	r3, r0
 8008cde:	6039      	str	r1, [r7, #0]
 8008ce0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	6939      	ldr	r1, [r7, #16]
 8008cf4:	6978      	ldr	r0, [r7, #20]
 8008cf6:	f7ff feeb 	bl	8008ad0 <xQueueGenericCreateStatic>
 8008cfa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7ff ffb8 	bl	8008c72 <prvInitialiseMutex>

		return xNewQueue;
 8008d02:	68fb      	ldr	r3, [r7, #12]
	}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08e      	sub	sp, #56	; 0x38
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10a      	bne.n	8008d3e <xQueueGenericSend+0x32>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <xQueueGenericSend+0x40>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <xQueueGenericSend+0x44>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <xQueueGenericSend+0x46>
 8008d50:	2300      	movs	r3, #0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <xQueueGenericSend+0x60>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d103      	bne.n	8008d7a <xQueueGenericSend+0x6e>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <xQueueGenericSend+0x72>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <xQueueGenericSend+0x74>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <xQueueGenericSend+0x8e>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	623b      	str	r3, [r7, #32]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d9a:	f001 f9e7 	bl	800a16c <xTaskGetSchedulerState>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <xQueueGenericSend+0x9e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <xQueueGenericSend+0xa2>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <xQueueGenericSend+0xa4>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xQueueGenericSend+0xbe>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	61fb      	str	r3, [r7, #28]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dca:	f001 fd1b 	bl	800a804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d302      	bcc.n	8008de0 <xQueueGenericSend+0xd4>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d129      	bne.n	8008e34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de6:	f000 fac1 	bl	800936c <prvCopyDataToQueue>
 8008dea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d010      	beq.n	8008e16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	3324      	adds	r3, #36	; 0x24
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fff7 	bl	8009dec <xTaskRemoveFromEventList>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d013      	beq.n	8008e2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e04:	4b3f      	ldr	r3, [pc, #252]	; (8008f04 <xQueueGenericSend+0x1f8>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	e00a      	b.n	8008e2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d007      	beq.n	8008e2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e1c:	4b39      	ldr	r3, [pc, #228]	; (8008f04 <xQueueGenericSend+0x1f8>)
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e2c:	f001 fd1a 	bl	800a864 <vPortExitCritical>
				return pdPASS;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e063      	b.n	8008efc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d103      	bne.n	8008e42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e3a:	f001 fd13 	bl	800a864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e05c      	b.n	8008efc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e48:	f107 0314 	add.w	r3, r7, #20
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f82f 	bl	8009eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e56:	f001 fd05 	bl	800a864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e5a:	f000 fddf 	bl	8009a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e5e:	f001 fcd1 	bl	800a804 <vPortEnterCritical>
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e68:	b25b      	sxtb	r3, r3
 8008e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6e:	d103      	bne.n	8008e78 <xQueueGenericSend+0x16c>
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e7e:	b25b      	sxtb	r3, r3
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d103      	bne.n	8008e8e <xQueueGenericSend+0x182>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e8e:	f001 fce9 	bl	800a864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e92:	1d3a      	adds	r2, r7, #4
 8008e94:	f107 0314 	add.w	r3, r7, #20
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f001 f81e 	bl	8009edc <xTaskCheckForTimeOut>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d124      	bne.n	8008ef0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea8:	f000 fb58 	bl	800955c <prvIsQueueFull>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d018      	beq.n	8008ee4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 ff72 	bl	8009da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ec2:	f000 fae3 	bl	800948c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ec6:	f000 fdb7 	bl	8009a38 <xTaskResumeAll>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f47f af7c 	bne.w	8008dca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <xQueueGenericSend+0x1f8>)
 8008ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	e772      	b.n	8008dca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ee6:	f000 fad1 	bl	800948c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eea:	f000 fda5 	bl	8009a38 <xTaskResumeAll>
 8008eee:	e76c      	b.n	8008dca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ef2:	f000 facb 	bl	800948c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ef6:	f000 fd9f 	bl	8009a38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3738      	adds	r7, #56	; 0x38
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08e      	sub	sp, #56	; 0x38
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	623b      	str	r3, [r7, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	61fb      	str	r3, [r7, #28]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <xQueueGiveFromISR+0x58>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <xQueueGiveFromISR+0x5c>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <xQueueGiveFromISR+0x5e>
 8008f64:	2300      	movs	r3, #0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	61bb      	str	r3, [r7, #24]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f80:	f001 fd22 	bl	800a9c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f84:	f3ef 8211 	mrs	r2, BASEPRI
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	617a      	str	r2, [r7, #20]
 8008f9a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f9c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d22b      	bcs.n	8009008 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	d112      	bne.n	8008ff2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d016      	beq.n	8009002 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	3324      	adds	r3, #36	; 0x24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 ff07 	bl	8009dec <xTaskRemoveFromEventList>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00e      	beq.n	8009002 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2201      	movs	r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e007      	b.n	8009002 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	b25a      	sxtb	r2, r3
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009002:	2301      	movs	r3, #1
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
 8009006:	e001      	b.n	800900c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009008:	2300      	movs	r3, #0
 800900a:	637b      	str	r3, [r7, #52]	; 0x34
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009016:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800901a:	4618      	mov	r0, r3
 800901c:	3738      	adds	r7, #56	; 0x38
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08e      	sub	sp, #56	; 0x38
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800902e:	2300      	movs	r3, #0
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	623b      	str	r3, [r7, #32]
}
 8009052:	bf00      	nop
 8009054:	e7fe      	b.n	8009054 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	61fb      	str	r3, [r7, #28]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009074:	f001 f87a 	bl	800a16c <xTaskGetSchedulerState>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <xQueueSemaphoreTake+0x60>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <xQueueSemaphoreTake+0x64>
 8009084:	2301      	movs	r3, #1
 8009086:	e000      	b.n	800908a <xQueueSemaphoreTake+0x66>
 8009088:	2300      	movs	r3, #0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	61bb      	str	r3, [r7, #24]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a4:	f001 fbae 	bl	800a804 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d024      	beq.n	80090fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	1e5a      	subs	r2, r3, #1
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80090c4:	f001 f9fa 	bl	800a4bc <pvTaskIncrementMutexHeldCount>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00f      	beq.n	80090f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	3310      	adds	r3, #16
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fe86 	bl	8009dec <xTaskRemoveFromEventList>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090e6:	4b54      	ldr	r3, [pc, #336]	; (8009238 <xQueueSemaphoreTake+0x214>)
 80090e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090f6:	f001 fbb5 	bl	800a864 <vPortExitCritical>
				return pdPASS;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e097      	b.n	800922e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d111      	bne.n	8009128 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	617b      	str	r3, [r7, #20]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009120:	f001 fba0 	bl	800a864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009124:	2300      	movs	r3, #0
 8009126:	e082      	b.n	800922e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800912e:	f107 030c 	add.w	r3, r7, #12
 8009132:	4618      	mov	r0, r3
 8009134:	f000 febc 	bl	8009eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800913c:	f001 fb92 	bl	800a864 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009140:	f000 fc6c 	bl	8009a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009144:	f001 fb5e 	bl	800a804 <vPortEnterCritical>
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800914e:	b25b      	sxtb	r3, r3
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d103      	bne.n	800915e <xQueueSemaphoreTake+0x13a>
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009164:	b25b      	sxtb	r3, r3
 8009166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916a:	d103      	bne.n	8009174 <xQueueSemaphoreTake+0x150>
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009174:	f001 fb76 	bl	800a864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009178:	463a      	mov	r2, r7
 800917a:	f107 030c 	add.w	r3, r7, #12
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f000 feab 	bl	8009edc <xTaskCheckForTimeOut>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d132      	bne.n	80091f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800918c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800918e:	f000 f9cf 	bl	8009530 <prvIsQueueEmpty>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d026      	beq.n	80091e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80091a0:	f001 fb30 	bl	800a804 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fffd 	bl	800a1a8 <xTaskPriorityInherit>
 80091ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80091b0:	f001 fb58 	bl	800a864 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	3324      	adds	r3, #36	; 0x24
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fdf1 	bl	8009da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091c4:	f000 f962 	bl	800948c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091c8:	f000 fc36 	bl	8009a38 <xTaskResumeAll>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f47f af68 	bne.w	80090a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80091d4:	4b18      	ldr	r3, [pc, #96]	; (8009238 <xQueueSemaphoreTake+0x214>)
 80091d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	e75e      	b.n	80090a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80091e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091e8:	f000 f950 	bl	800948c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ec:	f000 fc24 	bl	8009a38 <xTaskResumeAll>
 80091f0:	e758      	b.n	80090a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80091f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091f4:	f000 f94a 	bl	800948c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091f8:	f000 fc1e 	bl	8009a38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091fe:	f000 f997 	bl	8009530 <prvIsQueueEmpty>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	f43f af4d 	beq.w	80090a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00d      	beq.n	800922c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009210:	f001 faf8 	bl	800a804 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009216:	f000 f891 	bl	800933c <prvGetDisinheritPriorityAfterTimeout>
 800921a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009222:	4618      	mov	r0, r3
 8009224:	f001 f8bc 	bl	800a3a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009228:	f001 fb1c 	bl	800a864 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800922c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800922e:	4618      	mov	r0, r3
 8009230:	3738      	adds	r7, #56	; 0x38
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08e      	sub	sp, #56	; 0x38
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	623b      	str	r3, [r7, #32]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d103      	bne.n	8009276 <xQueueReceiveFromISR+0x3a>
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <xQueueReceiveFromISR+0x3e>
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <xQueueReceiveFromISR+0x40>
 800927a:	2300      	movs	r3, #0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	61fb      	str	r3, [r7, #28]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009296:	f001 fb97 	bl	800a9c8 <vPortValidateInterruptPriority>
	__asm volatile
 800929a:	f3ef 8211 	mrs	r2, BASEPRI
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	61ba      	str	r2, [r7, #24]
 80092b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80092b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02f      	beq.n	8009322 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092d0:	f000 f8b6 	bl	8009440 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80092dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d112      	bne.n	800930c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d016      	beq.n	800931c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	3310      	adds	r3, #16
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fd7a 	bl	8009dec <xTaskRemoveFromEventList>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00e      	beq.n	800931c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	e007      	b.n	800931c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800930c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009310:	3301      	adds	r3, #1
 8009312:	b2db      	uxtb	r3, r3
 8009314:	b25a      	sxtb	r2, r3
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800931c:	2301      	movs	r3, #1
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
 8009320:	e001      	b.n	8009326 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009322:	2300      	movs	r3, #0
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	613b      	str	r3, [r7, #16]
	__asm volatile
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f383 8811 	msr	BASEPRI, r3
}
 8009330:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009334:	4618      	mov	r0, r3
 8009336:	3738      	adds	r7, #56	; 0x38
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d006      	beq.n	800935a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f1c3 0307 	rsb	r3, r3, #7
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	e001      	b.n	800935e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800935a:	2300      	movs	r3, #0
 800935c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800935e:	68fb      	ldr	r3, [r7, #12]
	}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10d      	bne.n	80093a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d14d      	bne.n	800942e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 ff7c 	bl	800a294 <xTaskPriorityDisinherit>
 800939c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	609a      	str	r2, [r3, #8]
 80093a4:	e043      	b.n	800942e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d119      	bne.n	80093e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6858      	ldr	r0, [r3, #4]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	461a      	mov	r2, r3
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	f002 fd33 	bl	800be22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	441a      	add	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d32b      	bcc.n	800942e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	605a      	str	r2, [r3, #4]
 80093de:	e026      	b.n	800942e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68d8      	ldr	r0, [r3, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	461a      	mov	r2, r3
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	f002 fd19 	bl	800be22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	425b      	negs	r3, r3
 80093fa:	441a      	add	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d207      	bcs.n	800941c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	689a      	ldr	r2, [r3, #8]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	425b      	negs	r3, r3
 8009416:	441a      	add	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d105      	bne.n	800942e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	3b01      	subs	r3, #1
 800942c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009436:	697b      	ldr	r3, [r7, #20]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d018      	beq.n	8009484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	441a      	add	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d303      	bcc.n	8009474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68d9      	ldr	r1, [r3, #12]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	461a      	mov	r2, r3
 800947e:	6838      	ldr	r0, [r7, #0]
 8009480:	f002 fccf 	bl	800be22 <memcpy>
	}
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009494:	f001 f9b6 	bl	800a804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800949e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a0:	e011      	b.n	80094c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d012      	beq.n	80094d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3324      	adds	r3, #36	; 0x24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fc9c 	bl	8009dec <xTaskRemoveFromEventList>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094ba:	f000 fd71 	bl	8009fa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dce9      	bgt.n	80094a2 <prvUnlockQueue+0x16>
 80094ce:	e000      	b.n	80094d2 <prvUnlockQueue+0x46>
					break;
 80094d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	22ff      	movs	r2, #255	; 0xff
 80094d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094da:	f001 f9c3 	bl	800a864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094de:	f001 f991 	bl	800a804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ea:	e011      	b.n	8009510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d012      	beq.n	800951a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3310      	adds	r3, #16
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fc77 	bl	8009dec <xTaskRemoveFromEventList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009504:	f000 fd4c 	bl	8009fa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	3b01      	subs	r3, #1
 800950c:	b2db      	uxtb	r3, r3
 800950e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dce9      	bgt.n	80094ec <prvUnlockQueue+0x60>
 8009518:	e000      	b.n	800951c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800951a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	22ff      	movs	r2, #255	; 0xff
 8009520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009524:	f001 f99e 	bl	800a864 <vPortExitCritical>
}
 8009528:	bf00      	nop
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009538:	f001 f964 	bl	800a804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009544:	2301      	movs	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e001      	b.n	800954e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800954e:	f001 f989 	bl	800a864 <vPortExitCritical>

	return xReturn;
 8009552:	68fb      	ldr	r3, [r7, #12]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009564:	f001 f94e 	bl	800a804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009570:	429a      	cmp	r2, r3
 8009572:	d102      	bne.n	800957a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e001      	b.n	800957e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800957e:	f001 f971 	bl	800a864 <vPortExitCritical>

	return xReturn;
 8009582:	68fb      	ldr	r3, [r7, #12]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af04      	add	r7, sp, #16
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800959a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	623b      	str	r3, [r7, #32]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61fb      	str	r3, [r7, #28]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095d2:	23a0      	movs	r3, #160	; 0xa0
 80095d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	2ba0      	cmp	r3, #160	; 0xa0
 80095da:	d00a      	beq.n	80095f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61bb      	str	r3, [r7, #24]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01e      	beq.n	8009638 <xTaskCreateStatic+0xac>
 80095fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01b      	beq.n	8009638 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009608:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	2202      	movs	r2, #2
 800960e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009612:	2300      	movs	r3, #0
 8009614:	9303      	str	r3, [sp, #12]
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	f107 0314 	add.w	r3, r7, #20
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 f850 	bl	80096d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009632:	f000 f8eb 	bl	800980c <prvAddNewTaskToReadyList>
 8009636:	e001      	b.n	800963c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800963c:	697b      	ldr	r3, [r7, #20]
	}
 800963e:	4618      	mov	r0, r3
 8009640:	3728      	adds	r7, #40	; 0x28
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009646:	b580      	push	{r7, lr}
 8009648:	b08c      	sub	sp, #48	; 0x30
 800964a:	af04      	add	r7, sp, #16
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	603b      	str	r3, [r7, #0]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4618      	mov	r0, r3
 800965c:	f001 f9f4 	bl	800aa48 <pvPortMalloc>
 8009660:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00e      	beq.n	8009686 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009668:	20a0      	movs	r0, #160	; 0xa0
 800966a:	f001 f9ed 	bl	800aa48 <pvPortMalloc>
 800966e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	631a      	str	r2, [r3, #48]	; 0x30
 800967c:	e005      	b.n	800968a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800967e:	6978      	ldr	r0, [r7, #20]
 8009680:	f001 faae 	bl	800abe0 <vPortFree>
 8009684:	e001      	b.n	800968a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d017      	beq.n	80096c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009698:	88fa      	ldrh	r2, [r7, #6]
 800969a:	2300      	movs	r3, #0
 800969c:	9303      	str	r3, [sp, #12]
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 f80e 	bl	80096d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096b4:	69f8      	ldr	r0, [r7, #28]
 80096b6:	f000 f8a9 	bl	800980c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096ba:	2301      	movs	r3, #1
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	e002      	b.n	80096c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096c0:	f04f 33ff 	mov.w	r3, #4294967295
 80096c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096c6:	69bb      	ldr	r3, [r7, #24]
	}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096e8:	3b01      	subs	r3, #1
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f023 0307 	bic.w	r3, r3, #7
 80096f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	617b      	str	r3, [r7, #20]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01f      	beq.n	800975e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800971e:	2300      	movs	r3, #0
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	e012      	b.n	800974a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	4413      	add	r3, r2
 800972a:	7819      	ldrb	r1, [r3, #0]
 800972c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4413      	add	r3, r2
 8009732:	3334      	adds	r3, #52	; 0x34
 8009734:	460a      	mov	r2, r1
 8009736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	4413      	add	r3, r2
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	3301      	adds	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	2b0f      	cmp	r3, #15
 800974e:	d9e9      	bls.n	8009724 <prvInitialiseNewTask+0x54>
 8009750:	e000      	b.n	8009754 <prvInitialiseNewTask+0x84>
			{
				break;
 8009752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800975c:	e003      	b.n	8009766 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	2b06      	cmp	r3, #6
 800976a:	d901      	bls.n	8009770 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800976c:	2306      	movs	r3, #6
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800977a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	3304      	adds	r3, #4
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff f8a6 	bl	80088d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	3318      	adds	r3, #24
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff f8a1 	bl	80088d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	f1c3 0207 	rsb	r2, r3, #7
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	334c      	adds	r3, #76	; 0x4c
 80097c0:	224c      	movs	r2, #76	; 0x4c
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f002 fa48 	bl	800bc5a <memset>
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	4a0c      	ldr	r2, [pc, #48]	; (8009800 <prvInitialiseNewTask+0x130>)
 80097ce:	651a      	str	r2, [r3, #80]	; 0x50
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	4a0c      	ldr	r2, [pc, #48]	; (8009804 <prvInitialiseNewTask+0x134>)
 80097d4:	655a      	str	r2, [r3, #84]	; 0x54
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	4a0b      	ldr	r2, [pc, #44]	; (8009808 <prvInitialiseNewTask+0x138>)
 80097da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	69b8      	ldr	r0, [r7, #24]
 80097e2:	f000 fee5 	bl	800a5b0 <pxPortInitialiseStack>
 80097e6:	4602      	mov	r2, r0
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097f8:	bf00      	nop
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	2000475c 	.word	0x2000475c
 8009804:	200047c4 	.word	0x200047c4
 8009808:	2000482c 	.word	0x2000482c

0800980c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009814:	f000 fff6 	bl	800a804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009818:	4b2a      	ldr	r3, [pc, #168]	; (80098c4 <prvAddNewTaskToReadyList+0xb8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3301      	adds	r3, #1
 800981e:	4a29      	ldr	r2, [pc, #164]	; (80098c4 <prvAddNewTaskToReadyList+0xb8>)
 8009820:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009822:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <prvAddNewTaskToReadyList+0xbc>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d109      	bne.n	800983e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800982a:	4a27      	ldr	r2, [pc, #156]	; (80098c8 <prvAddNewTaskToReadyList+0xbc>)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009830:	4b24      	ldr	r3, [pc, #144]	; (80098c4 <prvAddNewTaskToReadyList+0xb8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d110      	bne.n	800985a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009838:	f000 fbd6 	bl	8009fe8 <prvInitialiseTaskLists>
 800983c:	e00d      	b.n	800985a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <prvAddNewTaskToReadyList+0xc0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009846:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <prvAddNewTaskToReadyList+0xbc>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	429a      	cmp	r2, r3
 8009852:	d802      	bhi.n	800985a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009854:	4a1c      	ldr	r2, [pc, #112]	; (80098c8 <prvAddNewTaskToReadyList+0xbc>)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800985a:	4b1d      	ldr	r3, [pc, #116]	; (80098d0 <prvAddNewTaskToReadyList+0xc4>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3301      	adds	r3, #1
 8009860:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <prvAddNewTaskToReadyList+0xc4>)
 8009862:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	2201      	movs	r2, #1
 800986a:	409a      	lsls	r2, r3
 800986c:	4b19      	ldr	r3, [pc, #100]	; (80098d4 <prvAddNewTaskToReadyList+0xc8>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4313      	orrs	r3, r2
 8009872:	4a18      	ldr	r2, [pc, #96]	; (80098d4 <prvAddNewTaskToReadyList+0xc8>)
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <prvAddNewTaskToReadyList+0xcc>)
 8009884:	441a      	add	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3304      	adds	r3, #4
 800988a:	4619      	mov	r1, r3
 800988c:	4610      	mov	r0, r2
 800988e:	f7ff f830 	bl	80088f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009892:	f000 ffe7 	bl	800a864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <prvAddNewTaskToReadyList+0xc0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800989e:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <prvAddNewTaskToReadyList+0xbc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d207      	bcs.n	80098bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <prvAddNewTaskToReadyList+0xd0>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000b08 	.word	0x20000b08
 80098c8:	20000a08 	.word	0x20000a08
 80098cc:	20000b14 	.word	0x20000b14
 80098d0:	20000b24 	.word	0x20000b24
 80098d4:	20000b10 	.word	0x20000b10
 80098d8:	20000a0c 	.word	0x20000a0c
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d017      	beq.n	8009922 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098f2:	4b13      	ldr	r3, [pc, #76]	; (8009940 <vTaskDelay+0x60>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <vTaskDelay+0x30>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	60bb      	str	r3, [r7, #8]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009910:	f000 f884 	bl	8009a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009914:	2100      	movs	r1, #0
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fde4 	bl	800a4e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800991c:	f000 f88c 	bl	8009a38 <xTaskResumeAll>
 8009920:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d107      	bne.n	8009938 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <vTaskDelay+0x64>)
 800992a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009938:	bf00      	nop
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000b30 	.word	0x20000b30
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009956:	463a      	mov	r2, r7
 8009958:	1d39      	adds	r1, r7, #4
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	4618      	mov	r0, r3
 8009960:	f7f8 fcfe 	bl	8002360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	9202      	str	r2, [sp, #8]
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	2300      	movs	r3, #0
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	2300      	movs	r3, #0
 8009974:	460a      	mov	r2, r1
 8009976:	4921      	ldr	r1, [pc, #132]	; (80099fc <vTaskStartScheduler+0xb4>)
 8009978:	4821      	ldr	r0, [pc, #132]	; (8009a00 <vTaskStartScheduler+0xb8>)
 800997a:	f7ff fe07 	bl	800958c <xTaskCreateStatic>
 800997e:	4603      	mov	r3, r0
 8009980:	4a20      	ldr	r2, [pc, #128]	; (8009a04 <vTaskStartScheduler+0xbc>)
 8009982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009984:	4b1f      	ldr	r3, [pc, #124]	; (8009a04 <vTaskStartScheduler+0xbc>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800998c:	2301      	movs	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e001      	b.n	8009996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009992:	2300      	movs	r3, #0
 8009994:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d11b      	bne.n	80099d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	613b      	str	r3, [r7, #16]
}
 80099ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099b0:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <vTaskStartScheduler+0xc0>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	334c      	adds	r3, #76	; 0x4c
 80099b6:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <vTaskStartScheduler+0xc4>)
 80099b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <vTaskStartScheduler+0xc8>)
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <vTaskStartScheduler+0xcc>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099c8:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <vTaskStartScheduler+0xd0>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099ce:	f000 fe77 	bl	800a6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099d2:	e00e      	b.n	80099f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099da:	d10a      	bne.n	80099f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60fb      	str	r3, [r7, #12]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <vTaskStartScheduler+0xa8>
}
 80099f2:	bf00      	nop
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	0800ef84 	.word	0x0800ef84
 8009a00:	08009fb9 	.word	0x08009fb9
 8009a04:	20000b2c 	.word	0x20000b2c
 8009a08:	20000a08 	.word	0x20000a08
 8009a0c:	20000244 	.word	0x20000244
 8009a10:	20000b28 	.word	0x20000b28
 8009a14:	20000b14 	.word	0x20000b14
 8009a18:	20000b0c 	.word	0x20000b0c

08009a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <vTaskSuspendAll+0x18>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3301      	adds	r3, #1
 8009a26:	4a03      	ldr	r2, [pc, #12]	; (8009a34 <vTaskSuspendAll+0x18>)
 8009a28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a2a:	bf00      	nop
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	20000b30 	.word	0x20000b30

08009a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a46:	4b41      	ldr	r3, [pc, #260]	; (8009b4c <xTaskResumeAll+0x114>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	603b      	str	r3, [r7, #0]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a64:	f000 fece 	bl	800a804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a68:	4b38      	ldr	r3, [pc, #224]	; (8009b4c <xTaskResumeAll+0x114>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4a37      	ldr	r2, [pc, #220]	; (8009b4c <xTaskResumeAll+0x114>)
 8009a70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a72:	4b36      	ldr	r3, [pc, #216]	; (8009b4c <xTaskResumeAll+0x114>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d161      	bne.n	8009b3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a7a:	4b35      	ldr	r3, [pc, #212]	; (8009b50 <xTaskResumeAll+0x118>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d05d      	beq.n	8009b3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a82:	e02e      	b.n	8009ae2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a84:	4b33      	ldr	r3, [pc, #204]	; (8009b54 <xTaskResumeAll+0x11c>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3318      	adds	r3, #24
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe ff8b 	bl	80089ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe ff86 	bl	80089ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	409a      	lsls	r2, r3
 8009aa8:	4b2b      	ldr	r3, [pc, #172]	; (8009b58 <xTaskResumeAll+0x120>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	4a2a      	ldr	r2, [pc, #168]	; (8009b58 <xTaskResumeAll+0x120>)
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4a27      	ldr	r2, [pc, #156]	; (8009b5c <xTaskResumeAll+0x124>)
 8009ac0:	441a      	add	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fe ff12 	bl	80088f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad2:	4b23      	ldr	r3, [pc, #140]	; (8009b60 <xTaskResumeAll+0x128>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d302      	bcc.n	8009ae2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009adc:	4b21      	ldr	r3, [pc, #132]	; (8009b64 <xTaskResumeAll+0x12c>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <xTaskResumeAll+0x11c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1cc      	bne.n	8009a84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009af0:	f000 fb1c 	bl	800a12c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009af4:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <xTaskResumeAll+0x130>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d010      	beq.n	8009b22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b00:	f000 f836 	bl	8009b70 <xTaskIncrementTick>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009b0a:	4b16      	ldr	r3, [pc, #88]	; (8009b64 <xTaskResumeAll+0x12c>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1f1      	bne.n	8009b00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009b1c:	4b12      	ldr	r3, [pc, #72]	; (8009b68 <xTaskResumeAll+0x130>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b22:	4b10      	ldr	r3, [pc, #64]	; (8009b64 <xTaskResumeAll+0x12c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <xTaskResumeAll+0x134>)
 8009b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b3e:	f000 fe91 	bl	800a864 <vPortExitCritical>

	return xAlreadyYielded;
 8009b42:	68bb      	ldr	r3, [r7, #8]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000b30 	.word	0x20000b30
 8009b50:	20000b08 	.word	0x20000b08
 8009b54:	20000ac8 	.word	0x20000ac8
 8009b58:	20000b10 	.word	0x20000b10
 8009b5c:	20000a0c 	.word	0x20000a0c
 8009b60:	20000a08 	.word	0x20000a08
 8009b64:	20000b1c 	.word	0x20000b1c
 8009b68:	20000b18 	.word	0x20000b18
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7a:	4b4e      	ldr	r3, [pc, #312]	; (8009cb4 <xTaskIncrementTick+0x144>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f040 808e 	bne.w	8009ca0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b84:	4b4c      	ldr	r3, [pc, #304]	; (8009cb8 <xTaskIncrementTick+0x148>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b8c:	4a4a      	ldr	r2, [pc, #296]	; (8009cb8 <xTaskIncrementTick+0x148>)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d120      	bne.n	8009bda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b98:	4b48      	ldr	r3, [pc, #288]	; (8009cbc <xTaskIncrementTick+0x14c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	603b      	str	r3, [r7, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xTaskIncrementTick+0x46>
 8009bb8:	4b40      	ldr	r3, [pc, #256]	; (8009cbc <xTaskIncrementTick+0x14c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	4b40      	ldr	r3, [pc, #256]	; (8009cc0 <xTaskIncrementTick+0x150>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a3e      	ldr	r2, [pc, #248]	; (8009cbc <xTaskIncrementTick+0x14c>)
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	4a3e      	ldr	r2, [pc, #248]	; (8009cc0 <xTaskIncrementTick+0x150>)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	4b3d      	ldr	r3, [pc, #244]	; (8009cc4 <xTaskIncrementTick+0x154>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	4a3c      	ldr	r2, [pc, #240]	; (8009cc4 <xTaskIncrementTick+0x154>)
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	f000 faa9 	bl	800a12c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bda:	4b3b      	ldr	r3, [pc, #236]	; (8009cc8 <xTaskIncrementTick+0x158>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d348      	bcc.n	8009c76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be4:	4b35      	ldr	r3, [pc, #212]	; (8009cbc <xTaskIncrementTick+0x14c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bee:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <xTaskIncrementTick+0x158>)
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf4:	601a      	str	r2, [r3, #0]
					break;
 8009bf6:	e03e      	b.n	8009c76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf8:	4b30      	ldr	r3, [pc, #192]	; (8009cbc <xTaskIncrementTick+0x14c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d203      	bcs.n	8009c18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c10:	4a2d      	ldr	r2, [pc, #180]	; (8009cc8 <xTaskIncrementTick+0x158>)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c16:	e02e      	b.n	8009c76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fec5 	bl	80089ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d004      	beq.n	8009c34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3318      	adds	r3, #24
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe febc 	bl	80089ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	2201      	movs	r2, #1
 8009c3a:	409a      	lsls	r2, r3
 8009c3c:	4b23      	ldr	r3, [pc, #140]	; (8009ccc <xTaskIncrementTick+0x15c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	4a22      	ldr	r2, [pc, #136]	; (8009ccc <xTaskIncrementTick+0x15c>)
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4a1f      	ldr	r2, [pc, #124]	; (8009cd0 <xTaskIncrementTick+0x160>)
 8009c54:	441a      	add	r2, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7fe fe48 	bl	80088f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	4b1b      	ldr	r3, [pc, #108]	; (8009cd4 <xTaskIncrementTick+0x164>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d3b9      	bcc.n	8009be4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c74:	e7b6      	b.n	8009be4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c76:	4b17      	ldr	r3, [pc, #92]	; (8009cd4 <xTaskIncrementTick+0x164>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7c:	4914      	ldr	r1, [pc, #80]	; (8009cd0 <xTaskIncrementTick+0x160>)
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d901      	bls.n	8009c92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c92:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <xTaskIncrementTick+0x168>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e004      	b.n	8009caa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <xTaskIncrementTick+0x16c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <xTaskIncrementTick+0x16c>)
 8009ca8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009caa:	697b      	ldr	r3, [r7, #20]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000b30 	.word	0x20000b30
 8009cb8:	20000b0c 	.word	0x20000b0c
 8009cbc:	20000ac0 	.word	0x20000ac0
 8009cc0:	20000ac4 	.word	0x20000ac4
 8009cc4:	20000b20 	.word	0x20000b20
 8009cc8:	20000b28 	.word	0x20000b28
 8009ccc:	20000b10 	.word	0x20000b10
 8009cd0:	20000a0c 	.word	0x20000a0c
 8009cd4:	20000a08 	.word	0x20000a08
 8009cd8:	20000b1c 	.word	0x20000b1c
 8009cdc:	20000b18 	.word	0x20000b18

08009ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ce6:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <vTaskSwitchContext+0xac>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cee:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <vTaskSwitchContext+0xb0>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cf4:	e044      	b.n	8009d80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009cf6:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <vTaskSwitchContext+0xb0>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfc:	4b25      	ldr	r3, [pc, #148]	; (8009d94 <vTaskSwitchContext+0xb4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	fab3 f383 	clz	r3, r3
 8009d08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	f1c3 031f 	rsb	r3, r3, #31
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	4921      	ldr	r1, [pc, #132]	; (8009d98 <vTaskSwitchContext+0xb8>)
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	4613      	mov	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	440b      	add	r3, r1
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10a      	bne.n	8009d3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	607b      	str	r3, [r7, #4]
}
 8009d38:	bf00      	nop
 8009d3a:	e7fe      	b.n	8009d3a <vTaskSwitchContext+0x5a>
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4a14      	ldr	r2, [pc, #80]	; (8009d98 <vTaskSwitchContext+0xb8>)
 8009d48:	4413      	add	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	605a      	str	r2, [r3, #4]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d104      	bne.n	8009d6c <vTaskSwitchContext+0x8c>
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	605a      	str	r2, [r3, #4]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <vTaskSwitchContext+0xbc>)
 8009d74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <vTaskSwitchContext+0xbc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	334c      	adds	r3, #76	; 0x4c
 8009d7c:	4a08      	ldr	r2, [pc, #32]	; (8009da0 <vTaskSwitchContext+0xc0>)
 8009d7e:	6013      	str	r3, [r2, #0]
}
 8009d80:	bf00      	nop
 8009d82:	371c      	adds	r7, #28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20000b30 	.word	0x20000b30
 8009d90:	20000b1c 	.word	0x20000b1c
 8009d94:	20000b10 	.word	0x20000b10
 8009d98:	20000a0c 	.word	0x20000a0c
 8009d9c:	20000a08 	.word	0x20000a08
 8009da0:	20000244 	.word	0x20000244

08009da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	60fb      	str	r3, [r7, #12]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <vTaskPlaceOnEventList+0x44>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3318      	adds	r3, #24
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7fe fdb1 	bl	800893a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dd8:	2101      	movs	r1, #1
 8009dda:	6838      	ldr	r0, [r7, #0]
 8009ddc:	f000 fb82 	bl	800a4e4 <prvAddCurrentTaskToDelayedList>
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000a08 	.word	0x20000a08

08009dec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	60fb      	str	r3, [r7, #12]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3318      	adds	r3, #24
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fdc5 	bl	80089ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e22:	4b1d      	ldr	r3, [pc, #116]	; (8009e98 <xTaskRemoveFromEventList+0xac>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d11c      	bne.n	8009e64 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe fdbc 	bl	80089ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	2201      	movs	r2, #1
 8009e3a:	409a      	lsls	r2, r3
 8009e3c:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <xTaskRemoveFromEventList+0xb0>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <xTaskRemoveFromEventList+0xb0>)
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4a13      	ldr	r2, [pc, #76]	; (8009ea0 <xTaskRemoveFromEventList+0xb4>)
 8009e54:	441a      	add	r2, r3
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7fe fd48 	bl	80088f2 <vListInsertEnd>
 8009e62:	e005      	b.n	8009e70 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	3318      	adds	r3, #24
 8009e68:	4619      	mov	r1, r3
 8009e6a:	480e      	ldr	r0, [pc, #56]	; (8009ea4 <xTaskRemoveFromEventList+0xb8>)
 8009e6c:	f7fe fd41 	bl	80088f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <xTaskRemoveFromEventList+0xbc>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d905      	bls.n	8009e8a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e82:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <xTaskRemoveFromEventList+0xc0>)
 8009e84:	2201      	movs	r2, #1
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	e001      	b.n	8009e8e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e8e:	697b      	ldr	r3, [r7, #20]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000b30 	.word	0x20000b30
 8009e9c:	20000b10 	.word	0x20000b10
 8009ea0:	20000a0c 	.word	0x20000a0c
 8009ea4:	20000ac8 	.word	0x20000ac8
 8009ea8:	20000a08 	.word	0x20000a08
 8009eac:	20000b1c 	.word	0x20000b1c

08009eb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009eb8:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <vTaskInternalSetTimeOutState+0x24>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ec0:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <vTaskInternalSetTimeOutState+0x28>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	605a      	str	r2, [r3, #4]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	20000b20 	.word	0x20000b20
 8009ed8:	20000b0c 	.word	0x20000b0c

08009edc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	613b      	str	r3, [r7, #16]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	60fb      	str	r3, [r7, #12]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f1e:	f000 fc71 	bl	800a804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f22:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <xTaskCheckForTimeOut+0xbc>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d102      	bne.n	8009f42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61fb      	str	r3, [r7, #28]
 8009f40:	e023      	b.n	8009f8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <xTaskCheckForTimeOut+0xc0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d007      	beq.n	8009f5e <xTaskCheckForTimeOut+0x82>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d302      	bcc.n	8009f5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	e015      	b.n	8009f8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d20b      	bcs.n	8009f80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ff9b 	bl	8009eb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61fb      	str	r3, [r7, #28]
 8009f7e:	e004      	b.n	8009f8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f86:	2301      	movs	r3, #1
 8009f88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f8a:	f000 fc6b 	bl	800a864 <vPortExitCritical>

	return xReturn;
 8009f8e:	69fb      	ldr	r3, [r7, #28]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20000b0c 	.word	0x20000b0c
 8009f9c:	20000b20 	.word	0x20000b20

08009fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fa4:	4b03      	ldr	r3, [pc, #12]	; (8009fb4 <vTaskMissedYield+0x14>)
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]
}
 8009faa:	bf00      	nop
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	20000b1c 	.word	0x20000b1c

08009fb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fc0:	f000 f852 	bl	800a068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <prvIdleTask+0x28>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d9f9      	bls.n	8009fc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <prvIdleTask+0x2c>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fdc:	e7f0      	b.n	8009fc0 <prvIdleTask+0x8>
 8009fde:	bf00      	nop
 8009fe0:	20000a0c 	.word	0x20000a0c
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fee:	2300      	movs	r3, #0
 8009ff0:	607b      	str	r3, [r7, #4]
 8009ff2:	e00c      	b.n	800a00e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4a12      	ldr	r2, [pc, #72]	; (800a048 <prvInitialiseTaskLists+0x60>)
 800a000:	4413      	add	r3, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fc48 	bl	8008898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3301      	adds	r3, #1
 800a00c:	607b      	str	r3, [r7, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b06      	cmp	r3, #6
 800a012:	d9ef      	bls.n	8009ff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a014:	480d      	ldr	r0, [pc, #52]	; (800a04c <prvInitialiseTaskLists+0x64>)
 800a016:	f7fe fc3f 	bl	8008898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a01a:	480d      	ldr	r0, [pc, #52]	; (800a050 <prvInitialiseTaskLists+0x68>)
 800a01c:	f7fe fc3c 	bl	8008898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a020:	480c      	ldr	r0, [pc, #48]	; (800a054 <prvInitialiseTaskLists+0x6c>)
 800a022:	f7fe fc39 	bl	8008898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a026:	480c      	ldr	r0, [pc, #48]	; (800a058 <prvInitialiseTaskLists+0x70>)
 800a028:	f7fe fc36 	bl	8008898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a02c:	480b      	ldr	r0, [pc, #44]	; (800a05c <prvInitialiseTaskLists+0x74>)
 800a02e:	f7fe fc33 	bl	8008898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <prvInitialiseTaskLists+0x78>)
 800a034:	4a05      	ldr	r2, [pc, #20]	; (800a04c <prvInitialiseTaskLists+0x64>)
 800a036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <prvInitialiseTaskLists+0x7c>)
 800a03a:	4a05      	ldr	r2, [pc, #20]	; (800a050 <prvInitialiseTaskLists+0x68>)
 800a03c:	601a      	str	r2, [r3, #0]
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20000a0c 	.word	0x20000a0c
 800a04c:	20000a98 	.word	0x20000a98
 800a050:	20000aac 	.word	0x20000aac
 800a054:	20000ac8 	.word	0x20000ac8
 800a058:	20000adc 	.word	0x20000adc
 800a05c:	20000af4 	.word	0x20000af4
 800a060:	20000ac0 	.word	0x20000ac0
 800a064:	20000ac4 	.word	0x20000ac4

0800a068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a06e:	e019      	b.n	800a0a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a070:	f000 fbc8 	bl	800a804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a074:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <prvCheckTasksWaitingTermination+0x50>)
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fc93 	bl	80089ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a086:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <prvCheckTasksWaitingTermination+0x54>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	4a0b      	ldr	r2, [pc, #44]	; (800a0bc <prvCheckTasksWaitingTermination+0x54>)
 800a08e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a090:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <prvCheckTasksWaitingTermination+0x58>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3b01      	subs	r3, #1
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <prvCheckTasksWaitingTermination+0x58>)
 800a098:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a09a:	f000 fbe3 	bl	800a864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f810 	bl	800a0c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0a4:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <prvCheckTasksWaitingTermination+0x58>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e1      	bne.n	800a070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000adc 	.word	0x20000adc
 800a0bc:	20000b08 	.word	0x20000b08
 800a0c0:	20000af0 	.word	0x20000af0

0800a0c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	334c      	adds	r3, #76	; 0x4c
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fded 	bl	800bcb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d108      	bne.n	800a0f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 fd7b 	bl	800abe0 <vPortFree>
				vPortFree( pxTCB );
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fd78 	bl	800abe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0f0:	e018      	b.n	800a124 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d103      	bne.n	800a104 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fd6f 	bl	800abe0 <vPortFree>
	}
 800a102:	e00f      	b.n	800a124 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d00a      	beq.n	800a124 <prvDeleteTCB+0x60>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	60fb      	str	r3, [r7, #12]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <prvDeleteTCB+0x5e>
	}
 800a124:	bf00      	nop
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a132:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <prvResetNextTaskUnblockTime+0x38>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d104      	bne.n	800a146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <prvResetNextTaskUnblockTime+0x3c>)
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a144:	e008      	b.n	800a158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <prvResetNextTaskUnblockTime+0x38>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	4a04      	ldr	r2, [pc, #16]	; (800a168 <prvResetNextTaskUnblockTime+0x3c>)
 800a156:	6013      	str	r3, [r2, #0]
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	20000ac0 	.word	0x20000ac0
 800a168:	20000b28 	.word	0x20000b28

0800a16c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a172:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <xTaskGetSchedulerState+0x34>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a17a:	2301      	movs	r3, #1
 800a17c:	607b      	str	r3, [r7, #4]
 800a17e:	e008      	b.n	800a192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a180:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <xTaskGetSchedulerState+0x38>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a188:	2302      	movs	r3, #2
 800a18a:	607b      	str	r3, [r7, #4]
 800a18c:	e001      	b.n	800a192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a192:	687b      	ldr	r3, [r7, #4]
	}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20000b14 	.word	0x20000b14
 800a1a4:	20000b30 	.word	0x20000b30

0800a1a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d05e      	beq.n	800a27c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c2:	4b31      	ldr	r3, [pc, #196]	; (800a288 <xTaskPriorityInherit+0xe0>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d24e      	bcs.n	800a26a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	db06      	blt.n	800a1e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d4:	4b2c      	ldr	r3, [pc, #176]	; (800a288 <xTaskPriorityInherit+0xe0>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	f1c3 0207 	rsb	r2, r3, #7
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6959      	ldr	r1, [r3, #20]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4a26      	ldr	r2, [pc, #152]	; (800a28c <xTaskPriorityInherit+0xe4>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4299      	cmp	r1, r3
 800a1f8:	d12f      	bne.n	800a25a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fbd4 	bl	80089ac <uxListRemove>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	2201      	movs	r2, #1
 800a210:	fa02 f303 	lsl.w	r3, r2, r3
 800a214:	43da      	mvns	r2, r3
 800a216:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <xTaskPriorityInherit+0xe8>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4013      	ands	r3, r2
 800a21c:	4a1c      	ldr	r2, [pc, #112]	; (800a290 <xTaskPriorityInherit+0xe8>)
 800a21e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a220:	4b19      	ldr	r3, [pc, #100]	; (800a288 <xTaskPriorityInherit+0xe0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	2201      	movs	r2, #1
 800a230:	409a      	lsls	r2, r3
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <xTaskPriorityInherit+0xe8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4313      	orrs	r3, r2
 800a238:	4a15      	ldr	r2, [pc, #84]	; (800a290 <xTaskPriorityInherit+0xe8>)
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4a10      	ldr	r2, [pc, #64]	; (800a28c <xTaskPriorityInherit+0xe4>)
 800a24a:	441a      	add	r2, r3
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	3304      	adds	r3, #4
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f7fe fb4d 	bl	80088f2 <vListInsertEnd>
 800a258:	e004      	b.n	800a264 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <xTaskPriorityInherit+0xe0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e008      	b.n	800a27c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a26e:	4b06      	ldr	r3, [pc, #24]	; (800a288 <xTaskPriorityInherit+0xe0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a274:	429a      	cmp	r2, r3
 800a276:	d201      	bcs.n	800a27c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a278:	2301      	movs	r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a27c:	68fb      	ldr	r3, [r7, #12]
	}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20000a08 	.word	0x20000a08
 800a28c:	20000a0c 	.word	0x20000a0c
 800a290:	20000b10 	.word	0x20000b10

0800a294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d06e      	beq.n	800a388 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2aa:	4b3a      	ldr	r3, [pc, #232]	; (800a394 <xTaskPriorityDisinherit+0x100>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d00a      	beq.n	800a2ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60bb      	str	r3, [r7, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ec:	1e5a      	subs	r2, r3, #1
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d044      	beq.n	800a388 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a302:	2b00      	cmp	r3, #0
 800a304:	d140      	bne.n	800a388 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fb4e 	bl	80089ac <uxListRemove>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d115      	bne.n	800a342 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	491f      	ldr	r1, [pc, #124]	; (800a398 <xTaskPriorityDisinherit+0x104>)
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xTaskPriorityDisinherit+0xae>
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	2201      	movs	r2, #1
 800a332:	fa02 f303 	lsl.w	r3, r2, r3
 800a336:	43da      	mvns	r2, r3
 800a338:	4b18      	ldr	r3, [pc, #96]	; (800a39c <xTaskPriorityDisinherit+0x108>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4013      	ands	r3, r2
 800a33e:	4a17      	ldr	r2, [pc, #92]	; (800a39c <xTaskPriorityDisinherit+0x108>)
 800a340:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	f1c3 0207 	rsb	r2, r3, #7
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	2201      	movs	r2, #1
 800a35c:	409a      	lsls	r2, r3
 800a35e:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <xTaskPriorityDisinherit+0x108>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4313      	orrs	r3, r2
 800a364:	4a0d      	ldr	r2, [pc, #52]	; (800a39c <xTaskPriorityDisinherit+0x108>)
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4a08      	ldr	r2, [pc, #32]	; (800a398 <xTaskPriorityDisinherit+0x104>)
 800a376:	441a      	add	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4619      	mov	r1, r3
 800a37e:	4610      	mov	r0, r2
 800a380:	f7fe fab7 	bl	80088f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a384:	2301      	movs	r3, #1
 800a386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a388:	697b      	ldr	r3, [r7, #20]
	}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000a08 	.word	0x20000a08
 800a398:	20000a0c 	.word	0x20000a0c
 800a39c:	20000b10 	.word	0x20000b10

0800a3a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d077      	beq.n	800a4a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	60fb      	str	r3, [r7, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d902      	bls.n	800a3e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	e002      	b.n	800a3ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	69fa      	ldr	r2, [r7, #28]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d058      	beq.n	800a4a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d153      	bne.n	800a4a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a400:	4b2b      	ldr	r3, [pc, #172]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	429a      	cmp	r2, r3
 800a408:	d10a      	bne.n	800a420 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	60bb      	str	r3, [r7, #8]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	db04      	blt.n	800a43e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	f1c3 0207 	rsb	r2, r3, #7
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	6959      	ldr	r1, [r3, #20]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4613      	mov	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4a19      	ldr	r2, [pc, #100]	; (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a44e:	4413      	add	r3, r2
 800a450:	4299      	cmp	r1, r3
 800a452:	d129      	bne.n	800a4a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	3304      	adds	r3, #4
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe faa7 	bl	80089ac <uxListRemove>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	2201      	movs	r2, #1
 800a46a:	fa02 f303 	lsl.w	r3, r2, r3
 800a46e:	43da      	mvns	r2, r3
 800a470:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4013      	ands	r3, r2
 800a476:	4a10      	ldr	r2, [pc, #64]	; (800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a478:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	2201      	movs	r2, #1
 800a480:	409a      	lsls	r2, r3
 800a482:	4b0d      	ldr	r3, [pc, #52]	; (800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4313      	orrs	r3, r2
 800a488:	4a0b      	ldr	r2, [pc, #44]	; (800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4a06      	ldr	r2, [pc, #24]	; (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a49a:	441a      	add	r2, r3
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7fe fa25 	bl	80088f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4a8:	bf00      	nop
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20000a08 	.word	0x20000a08
 800a4b4:	20000a0c 	.word	0x20000a0c
 800a4b8:	20000b10 	.word	0x20000b10

0800a4bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4c8:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ce:	3201      	adds	r2, #1
 800a4d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a4d2:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
	}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000a08 	.word	0x20000a08

0800a4e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4ee:	4b29      	ldr	r3, [pc, #164]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f4:	4b28      	ldr	r3, [pc, #160]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fa56 	bl	80089ac <uxListRemove>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a506:	4b24      	ldr	r3, [pc, #144]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	2201      	movs	r2, #1
 800a50e:	fa02 f303 	lsl.w	r3, r2, r3
 800a512:	43da      	mvns	r2, r3
 800a514:	4b21      	ldr	r3, [pc, #132]	; (800a59c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4013      	ands	r3, r2
 800a51a:	4a20      	ldr	r2, [pc, #128]	; (800a59c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a51c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a524:	d10a      	bne.n	800a53c <prvAddCurrentTaskToDelayedList+0x58>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d007      	beq.n	800a53c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a52c:	4b1a      	ldr	r3, [pc, #104]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3304      	adds	r3, #4
 800a532:	4619      	mov	r1, r3
 800a534:	481a      	ldr	r0, [pc, #104]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a536:	f7fe f9dc 	bl	80088f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a53a:	e026      	b.n	800a58a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a544:	4b14      	ldr	r3, [pc, #80]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	429a      	cmp	r2, r3
 800a552:	d209      	bcs.n	800a568 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a554:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4b0f      	ldr	r3, [pc, #60]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f7fe f9ea 	bl	800893a <vListInsert>
}
 800a566:	e010      	b.n	800a58a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a568:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3304      	adds	r3, #4
 800a572:	4619      	mov	r1, r3
 800a574:	4610      	mov	r0, r2
 800a576:	f7fe f9e0 	bl	800893a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a57a:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	429a      	cmp	r2, r3
 800a582:	d202      	bcs.n	800a58a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a584:	4a09      	ldr	r2, [pc, #36]	; (800a5ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	6013      	str	r3, [r2, #0]
}
 800a58a:	bf00      	nop
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000b0c 	.word	0x20000b0c
 800a598:	20000a08 	.word	0x20000a08
 800a59c:	20000b10 	.word	0x20000b10
 800a5a0:	20000af4 	.word	0x20000af4
 800a5a4:	20000ac4 	.word	0x20000ac4
 800a5a8:	20000ac0 	.word	0x20000ac0
 800a5ac:	20000b28 	.word	0x20000b28

0800a5b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3b04      	subs	r3, #4
 800a5c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3b04      	subs	r3, #4
 800a5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f023 0201 	bic.w	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3b04      	subs	r3, #4
 800a5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5e0:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <pxPortInitialiseStack+0x64>)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3b14      	subs	r3, #20
 800a5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f06f 0202 	mvn.w	r2, #2
 800a5fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3b20      	subs	r3, #32
 800a604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a606:	68fb      	ldr	r3, [r7, #12]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	0800a619 	.word	0x0800a619

0800a618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a622:	4b12      	ldr	r3, [pc, #72]	; (800a66c <prvTaskExitError+0x54>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d00a      	beq.n	800a642 <prvTaskExitError+0x2a>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	60fb      	str	r3, [r7, #12]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <prvTaskExitError+0x28>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60bb      	str	r3, [r7, #8]
}
 800a654:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a656:	bf00      	nop
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0fc      	beq.n	800a658 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	2000007c 	.word	0x2000007c

0800a670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a670:	4b07      	ldr	r3, [pc, #28]	; (800a690 <pxCurrentTCBConst2>)
 800a672:	6819      	ldr	r1, [r3, #0]
 800a674:	6808      	ldr	r0, [r1, #0]
 800a676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67a:	f380 8809 	msr	PSP, r0
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8811 	msr	BASEPRI, r0
 800a68a:	4770      	bx	lr
 800a68c:	f3af 8000 	nop.w

0800a690 <pxCurrentTCBConst2>:
 800a690:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop

0800a698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a698:	4808      	ldr	r0, [pc, #32]	; (800a6bc <prvPortStartFirstTask+0x24>)
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	6800      	ldr	r0, [r0, #0]
 800a69e:	f380 8808 	msr	MSP, r0
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8814 	msr	CONTROL, r0
 800a6aa:	b662      	cpsie	i
 800a6ac:	b661      	cpsie	f
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	df00      	svc	0
 800a6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ba:	bf00      	nop
 800a6bc:	e000ed08 	.word	0xe000ed08

0800a6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6c6:	4b46      	ldr	r3, [pc, #280]	; (800a7e0 <xPortStartScheduler+0x120>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a46      	ldr	r2, [pc, #280]	; (800a7e4 <xPortStartScheduler+0x124>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d10a      	bne.n	800a6e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	613b      	str	r3, [r7, #16]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6e6:	4b3e      	ldr	r3, [pc, #248]	; (800a7e0 <xPortStartScheduler+0x120>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a3f      	ldr	r2, [pc, #252]	; (800a7e8 <xPortStartScheduler+0x128>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d10a      	bne.n	800a706 <xPortStartScheduler+0x46>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	60fb      	str	r3, [r7, #12]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a706:	4b39      	ldr	r3, [pc, #228]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	22ff      	movs	r2, #255	; 0xff
 800a716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	4b31      	ldr	r3, [pc, #196]	; (800a7f0 <xPortStartScheduler+0x130>)
 800a72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a72e:	4b31      	ldr	r3, [pc, #196]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a730:	2207      	movs	r2, #7
 800a732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a734:	e009      	b.n	800a74a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a736:	4b2f      	ldr	r3, [pc, #188]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	4a2d      	ldr	r2, [pc, #180]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	b2db      	uxtb	r3, r3
 800a748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a74a:	78fb      	ldrb	r3, [r7, #3]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a752:	2b80      	cmp	r3, #128	; 0x80
 800a754:	d0ef      	beq.n	800a736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a756:	4b27      	ldr	r3, [pc, #156]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f1c3 0307 	rsb	r3, r3, #7
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d00a      	beq.n	800a778 <xPortStartScheduler+0xb8>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	60bb      	str	r3, [r7, #8]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a778:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	021b      	lsls	r3, r3, #8
 800a77e:	4a1d      	ldr	r2, [pc, #116]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a782:	4b1c      	ldr	r3, [pc, #112]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a78a:	4a1a      	ldr	r2, [pc, #104]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a78c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	b2da      	uxtb	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a796:	4b18      	ldr	r3, [pc, #96]	; (800a7f8 <xPortStartScheduler+0x138>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a17      	ldr	r2, [pc, #92]	; (800a7f8 <xPortStartScheduler+0x138>)
 800a79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7a2:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <xPortStartScheduler+0x138>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a14      	ldr	r2, [pc, #80]	; (800a7f8 <xPortStartScheduler+0x138>)
 800a7a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7ae:	f000 f8dd 	bl	800a96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7b2:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <xPortStartScheduler+0x13c>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7b8:	f000 f8fc 	bl	800a9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7bc:	4b10      	ldr	r3, [pc, #64]	; (800a800 <xPortStartScheduler+0x140>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a0f      	ldr	r2, [pc, #60]	; (800a800 <xPortStartScheduler+0x140>)
 800a7c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7c8:	f7ff ff66 	bl	800a698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7cc:	f7ff fa88 	bl	8009ce0 <vTaskSwitchContext>
	prvTaskExitError();
 800a7d0:	f7ff ff22 	bl	800a618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	e000ed00 	.word	0xe000ed00
 800a7e4:	410fc271 	.word	0x410fc271
 800a7e8:	410fc270 	.word	0x410fc270
 800a7ec:	e000e400 	.word	0xe000e400
 800a7f0:	20000b34 	.word	0x20000b34
 800a7f4:	20000b38 	.word	0x20000b38
 800a7f8:	e000ed20 	.word	0xe000ed20
 800a7fc:	2000007c 	.word	0x2000007c
 800a800:	e000ef34 	.word	0xe000ef34

0800a804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	607b      	str	r3, [r7, #4]
}
 800a81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <vPortEnterCritical+0x58>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3301      	adds	r3, #1
 800a824:	4a0d      	ldr	r2, [pc, #52]	; (800a85c <vPortEnterCritical+0x58>)
 800a826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a828:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <vPortEnterCritical+0x58>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d10f      	bne.n	800a850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <vPortEnterCritical+0x5c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00a      	beq.n	800a850 <vPortEnterCritical+0x4c>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	603b      	str	r3, [r7, #0]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <vPortEnterCritical+0x4a>
	}
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	2000007c 	.word	0x2000007c
 800a860:	e000ed04 	.word	0xe000ed04

0800a864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a86a:	4b12      	ldr	r3, [pc, #72]	; (800a8b4 <vPortExitCritical+0x50>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <vPortExitCritical+0x24>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	607b      	str	r3, [r7, #4]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a888:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <vPortExitCritical+0x50>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	4a09      	ldr	r2, [pc, #36]	; (800a8b4 <vPortExitCritical+0x50>)
 800a890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a892:	4b08      	ldr	r3, [pc, #32]	; (800a8b4 <vPortExitCritical+0x50>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d105      	bne.n	800a8a6 <vPortExitCritical+0x42>
 800a89a:	2300      	movs	r3, #0
 800a89c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	f383 8811 	msr	BASEPRI, r3
}
 800a8a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	2000007c 	.word	0x2000007c
	...

0800a8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8c0:	f3ef 8009 	mrs	r0, PSP
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	4b15      	ldr	r3, [pc, #84]	; (800a920 <pxCurrentTCBConst>)
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	f01e 0f10 	tst.w	lr, #16
 800a8d0:	bf08      	it	eq
 800a8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8da:	6010      	str	r0, [r2, #0]
 800a8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8e4:	f380 8811 	msr	BASEPRI, r0
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f7ff f9f6 	bl	8009ce0 <vTaskSwitchContext>
 800a8f4:	f04f 0000 	mov.w	r0, #0
 800a8f8:	f380 8811 	msr	BASEPRI, r0
 800a8fc:	bc09      	pop	{r0, r3}
 800a8fe:	6819      	ldr	r1, [r3, #0]
 800a900:	6808      	ldr	r0, [r1, #0]
 800a902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a906:	f01e 0f10 	tst.w	lr, #16
 800a90a:	bf08      	it	eq
 800a90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a910:	f380 8809 	msr	PSP, r0
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst>:
 800a920:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a942:	f7ff f915 	bl	8009b70 <xTaskIncrementTick>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <SysTick_Handler+0x40>)
 800a94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	2300      	movs	r3, #0
 800a956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	f383 8811 	msr	BASEPRI, r3
}
 800a95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a970:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <vPortSetupTimerInterrupt+0x34>)
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <vPortSetupTimerInterrupt+0x38>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a97c:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <vPortSetupTimerInterrupt+0x3c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a0a      	ldr	r2, [pc, #40]	; (800a9ac <vPortSetupTimerInterrupt+0x40>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	099b      	lsrs	r3, r3, #6
 800a988:	4a09      	ldr	r2, [pc, #36]	; (800a9b0 <vPortSetupTimerInterrupt+0x44>)
 800a98a:	3b01      	subs	r3, #1
 800a98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a98e:	4b04      	ldr	r3, [pc, #16]	; (800a9a0 <vPortSetupTimerInterrupt+0x34>)
 800a990:	2207      	movs	r2, #7
 800a992:	601a      	str	r2, [r3, #0]
}
 800a994:	bf00      	nop
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	e000e010 	.word	0xe000e010
 800a9a4:	e000e018 	.word	0xe000e018
 800a9a8:	20000070 	.word	0x20000070
 800a9ac:	10624dd3 	.word	0x10624dd3
 800a9b0:	e000e014 	.word	0xe000e014

0800a9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9c4 <vPortEnableVFP+0x10>
 800a9b8:	6801      	ldr	r1, [r0, #0]
 800a9ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9be:	6001      	str	r1, [r0, #0]
 800a9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9c2:	bf00      	nop
 800a9c4:	e000ed88 	.word	0xe000ed88

0800a9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ce:	f3ef 8305 	mrs	r3, IPSR
 800a9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b0f      	cmp	r3, #15
 800a9d8:	d914      	bls.n	800aa04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9da:	4a17      	ldr	r2, [pc, #92]	; (800aa38 <vPortValidateInterruptPriority+0x70>)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9e4:	4b15      	ldr	r3, [pc, #84]	; (800aa3c <vPortValidateInterruptPriority+0x74>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	7afa      	ldrb	r2, [r7, #11]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d20a      	bcs.n	800aa04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	607b      	str	r3, [r7, #4]
}
 800aa00:	bf00      	nop
 800aa02:	e7fe      	b.n	800aa02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa04:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <vPortValidateInterruptPriority+0x78>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa0c:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <vPortValidateInterruptPriority+0x7c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d90a      	bls.n	800aa2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	603b      	str	r3, [r7, #0]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <vPortValidateInterruptPriority+0x60>
	}
 800aa2a:	bf00      	nop
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	e000e3f0 	.word	0xe000e3f0
 800aa3c:	20000b34 	.word	0x20000b34
 800aa40:	e000ed0c 	.word	0xe000ed0c
 800aa44:	20000b38 	.word	0x20000b38

0800aa48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08a      	sub	sp, #40	; 0x28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa54:	f7fe ffe2 	bl	8009a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa58:	4b5b      	ldr	r3, [pc, #364]	; (800abc8 <pvPortMalloc+0x180>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa60:	f000 f920 	bl	800aca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa64:	4b59      	ldr	r3, [pc, #356]	; (800abcc <pvPortMalloc+0x184>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f040 8093 	bne.w	800ab98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01d      	beq.n	800aab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa78:	2208      	movs	r2, #8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d014      	beq.n	800aab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f023 0307 	bic.w	r3, r3, #7
 800aa90:	3308      	adds	r3, #8
 800aa92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <pvPortMalloc+0x6c>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	617b      	str	r3, [r7, #20]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d06e      	beq.n	800ab98 <pvPortMalloc+0x150>
 800aaba:	4b45      	ldr	r3, [pc, #276]	; (800abd0 <pvPortMalloc+0x188>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d869      	bhi.n	800ab98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aac4:	4b43      	ldr	r3, [pc, #268]	; (800abd4 <pvPortMalloc+0x18c>)
 800aac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aac8:	4b42      	ldr	r3, [pc, #264]	; (800abd4 <pvPortMalloc+0x18c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aace:	e004      	b.n	800aada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d903      	bls.n	800aaec <pvPortMalloc+0xa4>
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1f1      	bne.n	800aad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aaec:	4b36      	ldr	r3, [pc, #216]	; (800abc8 <pvPortMalloc+0x180>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d050      	beq.n	800ab98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaf6:	6a3b      	ldr	r3, [r7, #32]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2208      	movs	r2, #8
 800aafc:	4413      	add	r3, r2
 800aafe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	2308      	movs	r3, #8
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d91f      	bls.n	800ab58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00a      	beq.n	800ab40 <pvPortMalloc+0xf8>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	613b      	str	r3, [r7, #16]
}
 800ab3c:	bf00      	nop
 800ab3e:	e7fe      	b.n	800ab3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab52:	69b8      	ldr	r0, [r7, #24]
 800ab54:	f000 f908 	bl	800ad68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab58:	4b1d      	ldr	r3, [pc, #116]	; (800abd0 <pvPortMalloc+0x188>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <pvPortMalloc+0x188>)
 800ab64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab66:	4b1a      	ldr	r3, [pc, #104]	; (800abd0 <pvPortMalloc+0x188>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <pvPortMalloc+0x190>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d203      	bcs.n	800ab7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab72:	4b17      	ldr	r3, [pc, #92]	; (800abd0 <pvPortMalloc+0x188>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a18      	ldr	r2, [pc, #96]	; (800abd8 <pvPortMalloc+0x190>)
 800ab78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	4b13      	ldr	r3, [pc, #76]	; (800abcc <pvPortMalloc+0x184>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab8e:	4b13      	ldr	r3, [pc, #76]	; (800abdc <pvPortMalloc+0x194>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a11      	ldr	r2, [pc, #68]	; (800abdc <pvPortMalloc+0x194>)
 800ab96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab98:	f7fe ff4e 	bl	8009a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f003 0307 	and.w	r3, r3, #7
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <pvPortMalloc+0x174>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	60fb      	str	r3, [r7, #12]
}
 800abb8:	bf00      	nop
 800abba:	e7fe      	b.n	800abba <pvPortMalloc+0x172>
	return pvReturn;
 800abbc:	69fb      	ldr	r3, [r7, #28]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3728      	adds	r7, #40	; 0x28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20004744 	.word	0x20004744
 800abcc:	20004758 	.word	0x20004758
 800abd0:	20004748 	.word	0x20004748
 800abd4:	2000473c 	.word	0x2000473c
 800abd8:	2000474c 	.word	0x2000474c
 800abdc:	20004750 	.word	0x20004750

0800abe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d04d      	beq.n	800ac8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abf2:	2308      	movs	r3, #8
 800abf4:	425b      	negs	r3, r3
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4413      	add	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <vPortFree+0xb8>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <vPortFree+0x44>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	60fb      	str	r3, [r7, #12]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00a      	beq.n	800ac42 <vPortFree+0x62>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	60bb      	str	r3, [r7, #8]
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <vPortFree+0xb8>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01e      	beq.n	800ac8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11a      	bne.n	800ac8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	4b0e      	ldr	r3, [pc, #56]	; (800ac98 <vPortFree+0xb8>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	43db      	mvns	r3, r3
 800ac62:	401a      	ands	r2, r3
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac68:	f7fe fed8 	bl	8009a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <vPortFree+0xbc>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4413      	add	r3, r2
 800ac76:	4a09      	ldr	r2, [pc, #36]	; (800ac9c <vPortFree+0xbc>)
 800ac78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac7a:	6938      	ldr	r0, [r7, #16]
 800ac7c:	f000 f874 	bl	800ad68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac80:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <vPortFree+0xc0>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	4a06      	ldr	r2, [pc, #24]	; (800aca0 <vPortFree+0xc0>)
 800ac88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac8a:	f7fe fed5 	bl	8009a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac8e:	bf00      	nop
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20004758 	.word	0x20004758
 800ac9c:	20004748 	.word	0x20004748
 800aca0:	20004754 	.word	0x20004754

0800aca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800acae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acb0:	4b27      	ldr	r3, [pc, #156]	; (800ad50 <prvHeapInit+0xac>)
 800acb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00c      	beq.n	800acd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3307      	adds	r3, #7
 800acc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 0307 	bic.w	r3, r3, #7
 800acca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	4a1f      	ldr	r2, [pc, #124]	; (800ad50 <prvHeapInit+0xac>)
 800acd4:	4413      	add	r3, r2
 800acd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acdc:	4a1d      	ldr	r2, [pc, #116]	; (800ad54 <prvHeapInit+0xb0>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <prvHeapInit+0xb0>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	4413      	add	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acf0:	2208      	movs	r2, #8
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f023 0307 	bic.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a15      	ldr	r2, [pc, #84]	; (800ad58 <prvHeapInit+0xb4>)
 800ad04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad06:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <prvHeapInit+0xb4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <prvHeapInit+0xb4>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad24:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <prvHeapInit+0xb4>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <prvHeapInit+0xb8>)
 800ad32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <prvHeapInit+0xbc>)
 800ad3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad3c:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <prvHeapInit+0xc0>)
 800ad3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad42:	601a      	str	r2, [r3, #0]
}
 800ad44:	bf00      	nop
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	20000b3c 	.word	0x20000b3c
 800ad54:	2000473c 	.word	0x2000473c
 800ad58:	20004744 	.word	0x20004744
 800ad5c:	2000474c 	.word	0x2000474c
 800ad60:	20004748 	.word	0x20004748
 800ad64:	20004758 	.word	0x20004758

0800ad68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad70:	4b28      	ldr	r3, [pc, #160]	; (800ae14 <prvInsertBlockIntoFreeList+0xac>)
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	e002      	b.n	800ad7c <prvInsertBlockIntoFreeList+0x14>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d8f7      	bhi.n	800ad76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	4413      	add	r3, r2
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d108      	bne.n	800adaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	441a      	add	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	441a      	add	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d118      	bne.n	800adf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <prvInsertBlockIntoFreeList+0xb0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d00d      	beq.n	800ade6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	441a      	add	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e008      	b.n	800adf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ade6:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <prvInsertBlockIntoFreeList+0xb0>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	e003      	b.n	800adf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d002      	beq.n	800ae06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	2000473c 	.word	0x2000473c
 800ae18:	20004744 	.word	0x20004744

0800ae1c <sulp>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	ec45 4b10 	vmov	d0, r4, r5
 800ae26:	4616      	mov	r6, r2
 800ae28:	f001 ffe0 	bl	800cdec <__ulp>
 800ae2c:	ec51 0b10 	vmov	r0, r1, d0
 800ae30:	b17e      	cbz	r6, 800ae52 <sulp+0x36>
 800ae32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dd09      	ble.n	800ae52 <sulp+0x36>
 800ae3e:	051b      	lsls	r3, r3, #20
 800ae40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae44:	2400      	movs	r4, #0
 800ae46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	f7f5 fbeb 	bl	8000628 <__aeabi_dmul>
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	0000      	movs	r0, r0
	...

0800ae58 <_strtod_l>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	ed2d 8b02 	vpush	{d8}
 800ae60:	b09b      	sub	sp, #108	; 0x6c
 800ae62:	4604      	mov	r4, r0
 800ae64:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae66:	2200      	movs	r2, #0
 800ae68:	9216      	str	r2, [sp, #88]	; 0x58
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	f04f 0800 	mov.w	r8, #0
 800ae70:	f04f 0900 	mov.w	r9, #0
 800ae74:	460a      	mov	r2, r1
 800ae76:	9215      	str	r2, [sp, #84]	; 0x54
 800ae78:	7811      	ldrb	r1, [r2, #0]
 800ae7a:	292b      	cmp	r1, #43	; 0x2b
 800ae7c:	d04c      	beq.n	800af18 <_strtod_l+0xc0>
 800ae7e:	d83a      	bhi.n	800aef6 <_strtod_l+0x9e>
 800ae80:	290d      	cmp	r1, #13
 800ae82:	d834      	bhi.n	800aeee <_strtod_l+0x96>
 800ae84:	2908      	cmp	r1, #8
 800ae86:	d834      	bhi.n	800aef2 <_strtod_l+0x9a>
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	d03d      	beq.n	800af08 <_strtod_l+0xb0>
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	920a      	str	r2, [sp, #40]	; 0x28
 800ae90:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ae92:	7832      	ldrb	r2, [r6, #0]
 800ae94:	2a30      	cmp	r2, #48	; 0x30
 800ae96:	f040 80b4 	bne.w	800b002 <_strtod_l+0x1aa>
 800ae9a:	7872      	ldrb	r2, [r6, #1]
 800ae9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aea0:	2a58      	cmp	r2, #88	; 0x58
 800aea2:	d170      	bne.n	800af86 <_strtod_l+0x12e>
 800aea4:	9302      	str	r3, [sp, #8]
 800aea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	ab16      	add	r3, sp, #88	; 0x58
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	4a8e      	ldr	r2, [pc, #568]	; (800b0e8 <_strtod_l+0x290>)
 800aeb0:	ab17      	add	r3, sp, #92	; 0x5c
 800aeb2:	a915      	add	r1, sp, #84	; 0x54
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f001 f87f 	bl	800bfb8 <__gethex>
 800aeba:	f010 070f 	ands.w	r7, r0, #15
 800aebe:	4605      	mov	r5, r0
 800aec0:	d005      	beq.n	800aece <_strtod_l+0x76>
 800aec2:	2f06      	cmp	r7, #6
 800aec4:	d12a      	bne.n	800af1c <_strtod_l+0xc4>
 800aec6:	3601      	adds	r6, #1
 800aec8:	2300      	movs	r3, #0
 800aeca:	9615      	str	r6, [sp, #84]	; 0x54
 800aecc:	930a      	str	r3, [sp, #40]	; 0x28
 800aece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f040 857f 	bne.w	800b9d4 <_strtod_l+0xb7c>
 800aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed8:	b1db      	cbz	r3, 800af12 <_strtod_l+0xba>
 800aeda:	4642      	mov	r2, r8
 800aedc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aee0:	ec43 2b10 	vmov	d0, r2, r3
 800aee4:	b01b      	add	sp, #108	; 0x6c
 800aee6:	ecbd 8b02 	vpop	{d8}
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeee:	2920      	cmp	r1, #32
 800aef0:	d1cc      	bne.n	800ae8c <_strtod_l+0x34>
 800aef2:	3201      	adds	r2, #1
 800aef4:	e7bf      	b.n	800ae76 <_strtod_l+0x1e>
 800aef6:	292d      	cmp	r1, #45	; 0x2d
 800aef8:	d1c8      	bne.n	800ae8c <_strtod_l+0x34>
 800aefa:	2101      	movs	r1, #1
 800aefc:	910a      	str	r1, [sp, #40]	; 0x28
 800aefe:	1c51      	adds	r1, r2, #1
 800af00:	9115      	str	r1, [sp, #84]	; 0x54
 800af02:	7852      	ldrb	r2, [r2, #1]
 800af04:	2a00      	cmp	r2, #0
 800af06:	d1c3      	bne.n	800ae90 <_strtod_l+0x38>
 800af08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af0a:	9515      	str	r5, [sp, #84]	; 0x54
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 855f 	bne.w	800b9d0 <_strtod_l+0xb78>
 800af12:	4642      	mov	r2, r8
 800af14:	464b      	mov	r3, r9
 800af16:	e7e3      	b.n	800aee0 <_strtod_l+0x88>
 800af18:	2100      	movs	r1, #0
 800af1a:	e7ef      	b.n	800aefc <_strtod_l+0xa4>
 800af1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af1e:	b13a      	cbz	r2, 800af30 <_strtod_l+0xd8>
 800af20:	2135      	movs	r1, #53	; 0x35
 800af22:	a818      	add	r0, sp, #96	; 0x60
 800af24:	f002 f85f 	bl	800cfe6 <__copybits>
 800af28:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af2a:	4620      	mov	r0, r4
 800af2c:	f001 fc32 	bl	800c794 <_Bfree>
 800af30:	3f01      	subs	r7, #1
 800af32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af34:	2f04      	cmp	r7, #4
 800af36:	d806      	bhi.n	800af46 <_strtod_l+0xee>
 800af38:	e8df f007 	tbb	[pc, r7]
 800af3c:	201d0314 	.word	0x201d0314
 800af40:	14          	.byte	0x14
 800af41:	00          	.byte	0x00
 800af42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800af46:	05e9      	lsls	r1, r5, #23
 800af48:	bf48      	it	mi
 800af4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800af4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af52:	0d1b      	lsrs	r3, r3, #20
 800af54:	051b      	lsls	r3, r3, #20
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1b9      	bne.n	800aece <_strtod_l+0x76>
 800af5a:	f000 ff35 	bl	800bdc8 <__errno>
 800af5e:	2322      	movs	r3, #34	; 0x22
 800af60:	6003      	str	r3, [r0, #0]
 800af62:	e7b4      	b.n	800aece <_strtod_l+0x76>
 800af64:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800af68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800af74:	e7e7      	b.n	800af46 <_strtod_l+0xee>
 800af76:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b0f0 <_strtod_l+0x298>
 800af7a:	e7e4      	b.n	800af46 <_strtod_l+0xee>
 800af7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800af80:	f04f 38ff 	mov.w	r8, #4294967295
 800af84:	e7df      	b.n	800af46 <_strtod_l+0xee>
 800af86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	9215      	str	r2, [sp, #84]	; 0x54
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b30      	cmp	r3, #48	; 0x30
 800af90:	d0f9      	beq.n	800af86 <_strtod_l+0x12e>
 800af92:	2b00      	cmp	r3, #0
 800af94:	d09b      	beq.n	800aece <_strtod_l+0x76>
 800af96:	2301      	movs	r3, #1
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	9304      	str	r3, [sp, #16]
 800af9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800afa6:	46d3      	mov	fp, sl
 800afa8:	220a      	movs	r2, #10
 800afaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800afac:	7806      	ldrb	r6, [r0, #0]
 800afae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afb2:	b2d9      	uxtb	r1, r3
 800afb4:	2909      	cmp	r1, #9
 800afb6:	d926      	bls.n	800b006 <_strtod_l+0x1ae>
 800afb8:	494c      	ldr	r1, [pc, #304]	; (800b0ec <_strtod_l+0x294>)
 800afba:	2201      	movs	r2, #1
 800afbc:	f000 fe55 	bl	800bc6a <strncmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d030      	beq.n	800b026 <_strtod_l+0x1ce>
 800afc4:	2000      	movs	r0, #0
 800afc6:	4632      	mov	r2, r6
 800afc8:	9005      	str	r0, [sp, #20]
 800afca:	465e      	mov	r6, fp
 800afcc:	4603      	mov	r3, r0
 800afce:	2a65      	cmp	r2, #101	; 0x65
 800afd0:	d001      	beq.n	800afd6 <_strtod_l+0x17e>
 800afd2:	2a45      	cmp	r2, #69	; 0x45
 800afd4:	d113      	bne.n	800affe <_strtod_l+0x1a6>
 800afd6:	b91e      	cbnz	r6, 800afe0 <_strtod_l+0x188>
 800afd8:	9a04      	ldr	r2, [sp, #16]
 800afda:	4302      	orrs	r2, r0
 800afdc:	d094      	beq.n	800af08 <_strtod_l+0xb0>
 800afde:	2600      	movs	r6, #0
 800afe0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800afe2:	1c6a      	adds	r2, r5, #1
 800afe4:	9215      	str	r2, [sp, #84]	; 0x54
 800afe6:	786a      	ldrb	r2, [r5, #1]
 800afe8:	2a2b      	cmp	r2, #43	; 0x2b
 800afea:	d074      	beq.n	800b0d6 <_strtod_l+0x27e>
 800afec:	2a2d      	cmp	r2, #45	; 0x2d
 800afee:	d078      	beq.n	800b0e2 <_strtod_l+0x28a>
 800aff0:	f04f 0c00 	mov.w	ip, #0
 800aff4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aff8:	2909      	cmp	r1, #9
 800affa:	d97f      	bls.n	800b0fc <_strtod_l+0x2a4>
 800affc:	9515      	str	r5, [sp, #84]	; 0x54
 800affe:	2700      	movs	r7, #0
 800b000:	e09e      	b.n	800b140 <_strtod_l+0x2e8>
 800b002:	2300      	movs	r3, #0
 800b004:	e7c8      	b.n	800af98 <_strtod_l+0x140>
 800b006:	f1bb 0f08 	cmp.w	fp, #8
 800b00a:	bfd8      	it	le
 800b00c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b00e:	f100 0001 	add.w	r0, r0, #1
 800b012:	bfda      	itte	le
 800b014:	fb02 3301 	mlale	r3, r2, r1, r3
 800b018:	9309      	strle	r3, [sp, #36]	; 0x24
 800b01a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b01e:	f10b 0b01 	add.w	fp, fp, #1
 800b022:	9015      	str	r0, [sp, #84]	; 0x54
 800b024:	e7c1      	b.n	800afaa <_strtod_l+0x152>
 800b026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b028:	1c5a      	adds	r2, r3, #1
 800b02a:	9215      	str	r2, [sp, #84]	; 0x54
 800b02c:	785a      	ldrb	r2, [r3, #1]
 800b02e:	f1bb 0f00 	cmp.w	fp, #0
 800b032:	d037      	beq.n	800b0a4 <_strtod_l+0x24c>
 800b034:	9005      	str	r0, [sp, #20]
 800b036:	465e      	mov	r6, fp
 800b038:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d912      	bls.n	800b066 <_strtod_l+0x20e>
 800b040:	2301      	movs	r3, #1
 800b042:	e7c4      	b.n	800afce <_strtod_l+0x176>
 800b044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	9215      	str	r2, [sp, #84]	; 0x54
 800b04a:	785a      	ldrb	r2, [r3, #1]
 800b04c:	3001      	adds	r0, #1
 800b04e:	2a30      	cmp	r2, #48	; 0x30
 800b050:	d0f8      	beq.n	800b044 <_strtod_l+0x1ec>
 800b052:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b056:	2b08      	cmp	r3, #8
 800b058:	f200 84c1 	bhi.w	800b9de <_strtod_l+0xb86>
 800b05c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b05e:	9005      	str	r0, [sp, #20]
 800b060:	2000      	movs	r0, #0
 800b062:	930b      	str	r3, [sp, #44]	; 0x2c
 800b064:	4606      	mov	r6, r0
 800b066:	3a30      	subs	r2, #48	; 0x30
 800b068:	f100 0301 	add.w	r3, r0, #1
 800b06c:	d014      	beq.n	800b098 <_strtod_l+0x240>
 800b06e:	9905      	ldr	r1, [sp, #20]
 800b070:	4419      	add	r1, r3
 800b072:	9105      	str	r1, [sp, #20]
 800b074:	4633      	mov	r3, r6
 800b076:	eb00 0c06 	add.w	ip, r0, r6
 800b07a:	210a      	movs	r1, #10
 800b07c:	4563      	cmp	r3, ip
 800b07e:	d113      	bne.n	800b0a8 <_strtod_l+0x250>
 800b080:	1833      	adds	r3, r6, r0
 800b082:	2b08      	cmp	r3, #8
 800b084:	f106 0601 	add.w	r6, r6, #1
 800b088:	4406      	add	r6, r0
 800b08a:	dc1a      	bgt.n	800b0c2 <_strtod_l+0x26a>
 800b08c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b08e:	230a      	movs	r3, #10
 800b090:	fb03 2301 	mla	r3, r3, r1, r2
 800b094:	9309      	str	r3, [sp, #36]	; 0x24
 800b096:	2300      	movs	r3, #0
 800b098:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b09a:	1c51      	adds	r1, r2, #1
 800b09c:	9115      	str	r1, [sp, #84]	; 0x54
 800b09e:	7852      	ldrb	r2, [r2, #1]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	e7c9      	b.n	800b038 <_strtod_l+0x1e0>
 800b0a4:	4658      	mov	r0, fp
 800b0a6:	e7d2      	b.n	800b04e <_strtod_l+0x1f6>
 800b0a8:	2b08      	cmp	r3, #8
 800b0aa:	f103 0301 	add.w	r3, r3, #1
 800b0ae:	dc03      	bgt.n	800b0b8 <_strtod_l+0x260>
 800b0b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0b2:	434f      	muls	r7, r1
 800b0b4:	9709      	str	r7, [sp, #36]	; 0x24
 800b0b6:	e7e1      	b.n	800b07c <_strtod_l+0x224>
 800b0b8:	2b10      	cmp	r3, #16
 800b0ba:	bfd8      	it	le
 800b0bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b0c0:	e7dc      	b.n	800b07c <_strtod_l+0x224>
 800b0c2:	2e10      	cmp	r6, #16
 800b0c4:	bfdc      	itt	le
 800b0c6:	230a      	movle	r3, #10
 800b0c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b0cc:	e7e3      	b.n	800b096 <_strtod_l+0x23e>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9305      	str	r3, [sp, #20]
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e780      	b.n	800afd8 <_strtod_l+0x180>
 800b0d6:	f04f 0c00 	mov.w	ip, #0
 800b0da:	1caa      	adds	r2, r5, #2
 800b0dc:	9215      	str	r2, [sp, #84]	; 0x54
 800b0de:	78aa      	ldrb	r2, [r5, #2]
 800b0e0:	e788      	b.n	800aff4 <_strtod_l+0x19c>
 800b0e2:	f04f 0c01 	mov.w	ip, #1
 800b0e6:	e7f8      	b.n	800b0da <_strtod_l+0x282>
 800b0e8:	0800eff8 	.word	0x0800eff8
 800b0ec:	0800efe8 	.word	0x0800efe8
 800b0f0:	7ff00000 	.word	0x7ff00000
 800b0f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0f6:	1c51      	adds	r1, r2, #1
 800b0f8:	9115      	str	r1, [sp, #84]	; 0x54
 800b0fa:	7852      	ldrb	r2, [r2, #1]
 800b0fc:	2a30      	cmp	r2, #48	; 0x30
 800b0fe:	d0f9      	beq.n	800b0f4 <_strtod_l+0x29c>
 800b100:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b104:	2908      	cmp	r1, #8
 800b106:	f63f af7a 	bhi.w	800affe <_strtod_l+0x1a6>
 800b10a:	3a30      	subs	r2, #48	; 0x30
 800b10c:	9208      	str	r2, [sp, #32]
 800b10e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b110:	920c      	str	r2, [sp, #48]	; 0x30
 800b112:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b114:	1c57      	adds	r7, r2, #1
 800b116:	9715      	str	r7, [sp, #84]	; 0x54
 800b118:	7852      	ldrb	r2, [r2, #1]
 800b11a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b11e:	f1be 0f09 	cmp.w	lr, #9
 800b122:	d938      	bls.n	800b196 <_strtod_l+0x33e>
 800b124:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b126:	1a7f      	subs	r7, r7, r1
 800b128:	2f08      	cmp	r7, #8
 800b12a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b12e:	dc03      	bgt.n	800b138 <_strtod_l+0x2e0>
 800b130:	9908      	ldr	r1, [sp, #32]
 800b132:	428f      	cmp	r7, r1
 800b134:	bfa8      	it	ge
 800b136:	460f      	movge	r7, r1
 800b138:	f1bc 0f00 	cmp.w	ip, #0
 800b13c:	d000      	beq.n	800b140 <_strtod_l+0x2e8>
 800b13e:	427f      	negs	r7, r7
 800b140:	2e00      	cmp	r6, #0
 800b142:	d14f      	bne.n	800b1e4 <_strtod_l+0x38c>
 800b144:	9904      	ldr	r1, [sp, #16]
 800b146:	4301      	orrs	r1, r0
 800b148:	f47f aec1 	bne.w	800aece <_strtod_l+0x76>
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f47f aedb 	bne.w	800af08 <_strtod_l+0xb0>
 800b152:	2a69      	cmp	r2, #105	; 0x69
 800b154:	d029      	beq.n	800b1aa <_strtod_l+0x352>
 800b156:	dc26      	bgt.n	800b1a6 <_strtod_l+0x34e>
 800b158:	2a49      	cmp	r2, #73	; 0x49
 800b15a:	d026      	beq.n	800b1aa <_strtod_l+0x352>
 800b15c:	2a4e      	cmp	r2, #78	; 0x4e
 800b15e:	f47f aed3 	bne.w	800af08 <_strtod_l+0xb0>
 800b162:	499b      	ldr	r1, [pc, #620]	; (800b3d0 <_strtod_l+0x578>)
 800b164:	a815      	add	r0, sp, #84	; 0x54
 800b166:	f001 f967 	bl	800c438 <__match>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f43f aecc 	beq.w	800af08 <_strtod_l+0xb0>
 800b170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	2b28      	cmp	r3, #40	; 0x28
 800b176:	d12f      	bne.n	800b1d8 <_strtod_l+0x380>
 800b178:	4996      	ldr	r1, [pc, #600]	; (800b3d4 <_strtod_l+0x57c>)
 800b17a:	aa18      	add	r2, sp, #96	; 0x60
 800b17c:	a815      	add	r0, sp, #84	; 0x54
 800b17e:	f001 f96f 	bl	800c460 <__hexnan>
 800b182:	2805      	cmp	r0, #5
 800b184:	d128      	bne.n	800b1d8 <_strtod_l+0x380>
 800b186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b188:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b18c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b190:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b194:	e69b      	b.n	800aece <_strtod_l+0x76>
 800b196:	9f08      	ldr	r7, [sp, #32]
 800b198:	210a      	movs	r1, #10
 800b19a:	fb01 2107 	mla	r1, r1, r7, r2
 800b19e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b1a2:	9208      	str	r2, [sp, #32]
 800b1a4:	e7b5      	b.n	800b112 <_strtod_l+0x2ba>
 800b1a6:	2a6e      	cmp	r2, #110	; 0x6e
 800b1a8:	e7d9      	b.n	800b15e <_strtod_l+0x306>
 800b1aa:	498b      	ldr	r1, [pc, #556]	; (800b3d8 <_strtod_l+0x580>)
 800b1ac:	a815      	add	r0, sp, #84	; 0x54
 800b1ae:	f001 f943 	bl	800c438 <__match>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	f43f aea8 	beq.w	800af08 <_strtod_l+0xb0>
 800b1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ba:	4988      	ldr	r1, [pc, #544]	; (800b3dc <_strtod_l+0x584>)
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	a815      	add	r0, sp, #84	; 0x54
 800b1c0:	9315      	str	r3, [sp, #84]	; 0x54
 800b1c2:	f001 f939 	bl	800c438 <__match>
 800b1c6:	b910      	cbnz	r0, 800b1ce <_strtod_l+0x376>
 800b1c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	9315      	str	r3, [sp, #84]	; 0x54
 800b1ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b3ec <_strtod_l+0x594>
 800b1d2:	f04f 0800 	mov.w	r8, #0
 800b1d6:	e67a      	b.n	800aece <_strtod_l+0x76>
 800b1d8:	4881      	ldr	r0, [pc, #516]	; (800b3e0 <_strtod_l+0x588>)
 800b1da:	f000 fe31 	bl	800be40 <nan>
 800b1de:	ec59 8b10 	vmov	r8, r9, d0
 800b1e2:	e674      	b.n	800aece <_strtod_l+0x76>
 800b1e4:	9b05      	ldr	r3, [sp, #20]
 800b1e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1e8:	1afb      	subs	r3, r7, r3
 800b1ea:	f1bb 0f00 	cmp.w	fp, #0
 800b1ee:	bf08      	it	eq
 800b1f0:	46b3      	moveq	fp, r6
 800b1f2:	2e10      	cmp	r6, #16
 800b1f4:	9308      	str	r3, [sp, #32]
 800b1f6:	4635      	mov	r5, r6
 800b1f8:	bfa8      	it	ge
 800b1fa:	2510      	movge	r5, #16
 800b1fc:	f7f5 f99a 	bl	8000534 <__aeabi_ui2d>
 800b200:	2e09      	cmp	r6, #9
 800b202:	4680      	mov	r8, r0
 800b204:	4689      	mov	r9, r1
 800b206:	dd13      	ble.n	800b230 <_strtod_l+0x3d8>
 800b208:	4b76      	ldr	r3, [pc, #472]	; (800b3e4 <_strtod_l+0x58c>)
 800b20a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b20e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b212:	f7f5 fa09 	bl	8000628 <__aeabi_dmul>
 800b216:	4680      	mov	r8, r0
 800b218:	4650      	mov	r0, sl
 800b21a:	4689      	mov	r9, r1
 800b21c:	f7f5 f98a 	bl	8000534 <__aeabi_ui2d>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	4640      	mov	r0, r8
 800b226:	4649      	mov	r1, r9
 800b228:	f7f5 f848 	bl	80002bc <__adddf3>
 800b22c:	4680      	mov	r8, r0
 800b22e:	4689      	mov	r9, r1
 800b230:	2e0f      	cmp	r6, #15
 800b232:	dc38      	bgt.n	800b2a6 <_strtod_l+0x44e>
 800b234:	9b08      	ldr	r3, [sp, #32]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f43f ae49 	beq.w	800aece <_strtod_l+0x76>
 800b23c:	dd24      	ble.n	800b288 <_strtod_l+0x430>
 800b23e:	2b16      	cmp	r3, #22
 800b240:	dc0b      	bgt.n	800b25a <_strtod_l+0x402>
 800b242:	4968      	ldr	r1, [pc, #416]	; (800b3e4 <_strtod_l+0x58c>)
 800b244:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b24c:	4642      	mov	r2, r8
 800b24e:	464b      	mov	r3, r9
 800b250:	f7f5 f9ea 	bl	8000628 <__aeabi_dmul>
 800b254:	4680      	mov	r8, r0
 800b256:	4689      	mov	r9, r1
 800b258:	e639      	b.n	800aece <_strtod_l+0x76>
 800b25a:	9a08      	ldr	r2, [sp, #32]
 800b25c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b260:	4293      	cmp	r3, r2
 800b262:	db20      	blt.n	800b2a6 <_strtod_l+0x44e>
 800b264:	4c5f      	ldr	r4, [pc, #380]	; (800b3e4 <_strtod_l+0x58c>)
 800b266:	f1c6 060f 	rsb	r6, r6, #15
 800b26a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b26e:	4642      	mov	r2, r8
 800b270:	464b      	mov	r3, r9
 800b272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b276:	f7f5 f9d7 	bl	8000628 <__aeabi_dmul>
 800b27a:	9b08      	ldr	r3, [sp, #32]
 800b27c:	1b9e      	subs	r6, r3, r6
 800b27e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b282:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b286:	e7e3      	b.n	800b250 <_strtod_l+0x3f8>
 800b288:	9b08      	ldr	r3, [sp, #32]
 800b28a:	3316      	adds	r3, #22
 800b28c:	db0b      	blt.n	800b2a6 <_strtod_l+0x44e>
 800b28e:	9b05      	ldr	r3, [sp, #20]
 800b290:	1bdf      	subs	r7, r3, r7
 800b292:	4b54      	ldr	r3, [pc, #336]	; (800b3e4 <_strtod_l+0x58c>)
 800b294:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b29c:	4640      	mov	r0, r8
 800b29e:	4649      	mov	r1, r9
 800b2a0:	f7f5 faec 	bl	800087c <__aeabi_ddiv>
 800b2a4:	e7d6      	b.n	800b254 <_strtod_l+0x3fc>
 800b2a6:	9b08      	ldr	r3, [sp, #32]
 800b2a8:	1b75      	subs	r5, r6, r5
 800b2aa:	441d      	add	r5, r3
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	dd70      	ble.n	800b392 <_strtod_l+0x53a>
 800b2b0:	f015 030f 	ands.w	r3, r5, #15
 800b2b4:	d00a      	beq.n	800b2cc <_strtod_l+0x474>
 800b2b6:	494b      	ldr	r1, [pc, #300]	; (800b3e4 <_strtod_l+0x58c>)
 800b2b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2bc:	4642      	mov	r2, r8
 800b2be:	464b      	mov	r3, r9
 800b2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c4:	f7f5 f9b0 	bl	8000628 <__aeabi_dmul>
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	4689      	mov	r9, r1
 800b2cc:	f035 050f 	bics.w	r5, r5, #15
 800b2d0:	d04d      	beq.n	800b36e <_strtod_l+0x516>
 800b2d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b2d6:	dd22      	ble.n	800b31e <_strtod_l+0x4c6>
 800b2d8:	2500      	movs	r5, #0
 800b2da:	46ab      	mov	fp, r5
 800b2dc:	9509      	str	r5, [sp, #36]	; 0x24
 800b2de:	9505      	str	r5, [sp, #20]
 800b2e0:	2322      	movs	r3, #34	; 0x22
 800b2e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b3ec <_strtod_l+0x594>
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	f04f 0800 	mov.w	r8, #0
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f43f aded 	beq.w	800aece <_strtod_l+0x76>
 800b2f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f001 fa4c 	bl	800c794 <_Bfree>
 800b2fc:	9905      	ldr	r1, [sp, #20]
 800b2fe:	4620      	mov	r0, r4
 800b300:	f001 fa48 	bl	800c794 <_Bfree>
 800b304:	4659      	mov	r1, fp
 800b306:	4620      	mov	r0, r4
 800b308:	f001 fa44 	bl	800c794 <_Bfree>
 800b30c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 fa40 	bl	800c794 <_Bfree>
 800b314:	4629      	mov	r1, r5
 800b316:	4620      	mov	r0, r4
 800b318:	f001 fa3c 	bl	800c794 <_Bfree>
 800b31c:	e5d7      	b.n	800aece <_strtod_l+0x76>
 800b31e:	4b32      	ldr	r3, [pc, #200]	; (800b3e8 <_strtod_l+0x590>)
 800b320:	9304      	str	r3, [sp, #16]
 800b322:	2300      	movs	r3, #0
 800b324:	112d      	asrs	r5, r5, #4
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	469a      	mov	sl, r3
 800b32c:	2d01      	cmp	r5, #1
 800b32e:	dc21      	bgt.n	800b374 <_strtod_l+0x51c>
 800b330:	b10b      	cbz	r3, 800b336 <_strtod_l+0x4de>
 800b332:	4680      	mov	r8, r0
 800b334:	4689      	mov	r9, r1
 800b336:	492c      	ldr	r1, [pc, #176]	; (800b3e8 <_strtod_l+0x590>)
 800b338:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b33c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b340:	4642      	mov	r2, r8
 800b342:	464b      	mov	r3, r9
 800b344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b348:	f7f5 f96e 	bl	8000628 <__aeabi_dmul>
 800b34c:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <_strtod_l+0x594>)
 800b34e:	460a      	mov	r2, r1
 800b350:	400b      	ands	r3, r1
 800b352:	4927      	ldr	r1, [pc, #156]	; (800b3f0 <_strtod_l+0x598>)
 800b354:	428b      	cmp	r3, r1
 800b356:	4680      	mov	r8, r0
 800b358:	d8be      	bhi.n	800b2d8 <_strtod_l+0x480>
 800b35a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b35e:	428b      	cmp	r3, r1
 800b360:	bf86      	itte	hi
 800b362:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b3f4 <_strtod_l+0x59c>
 800b366:	f04f 38ff 	movhi.w	r8, #4294967295
 800b36a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b36e:	2300      	movs	r3, #0
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	e07b      	b.n	800b46c <_strtod_l+0x614>
 800b374:	07ea      	lsls	r2, r5, #31
 800b376:	d505      	bpl.n	800b384 <_strtod_l+0x52c>
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	f7f5 f953 	bl	8000628 <__aeabi_dmul>
 800b382:	2301      	movs	r3, #1
 800b384:	9a04      	ldr	r2, [sp, #16]
 800b386:	3208      	adds	r2, #8
 800b388:	f10a 0a01 	add.w	sl, sl, #1
 800b38c:	106d      	asrs	r5, r5, #1
 800b38e:	9204      	str	r2, [sp, #16]
 800b390:	e7cc      	b.n	800b32c <_strtod_l+0x4d4>
 800b392:	d0ec      	beq.n	800b36e <_strtod_l+0x516>
 800b394:	426d      	negs	r5, r5
 800b396:	f015 020f 	ands.w	r2, r5, #15
 800b39a:	d00a      	beq.n	800b3b2 <_strtod_l+0x55a>
 800b39c:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <_strtod_l+0x58c>)
 800b39e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f5 fa67 	bl	800087c <__aeabi_ddiv>
 800b3ae:	4680      	mov	r8, r0
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	112d      	asrs	r5, r5, #4
 800b3b4:	d0db      	beq.n	800b36e <_strtod_l+0x516>
 800b3b6:	2d1f      	cmp	r5, #31
 800b3b8:	dd1e      	ble.n	800b3f8 <_strtod_l+0x5a0>
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	46ab      	mov	fp, r5
 800b3be:	9509      	str	r5, [sp, #36]	; 0x24
 800b3c0:	9505      	str	r5, [sp, #20]
 800b3c2:	2322      	movs	r3, #34	; 0x22
 800b3c4:	f04f 0800 	mov.w	r8, #0
 800b3c8:	f04f 0900 	mov.w	r9, #0
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	e78d      	b.n	800b2ec <_strtod_l+0x494>
 800b3d0:	0800eff3 	.word	0x0800eff3
 800b3d4:	0800f00c 	.word	0x0800f00c
 800b3d8:	0800efea 	.word	0x0800efea
 800b3dc:	0800efed 	.word	0x0800efed
 800b3e0:	0800f370 	.word	0x0800f370
 800b3e4:	0800f160 	.word	0x0800f160
 800b3e8:	0800f138 	.word	0x0800f138
 800b3ec:	7ff00000 	.word	0x7ff00000
 800b3f0:	7ca00000 	.word	0x7ca00000
 800b3f4:	7fefffff 	.word	0x7fefffff
 800b3f8:	f015 0310 	ands.w	r3, r5, #16
 800b3fc:	bf18      	it	ne
 800b3fe:	236a      	movne	r3, #106	; 0x6a
 800b400:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b7a4 <_strtod_l+0x94c>
 800b404:	9304      	str	r3, [sp, #16]
 800b406:	4640      	mov	r0, r8
 800b408:	4649      	mov	r1, r9
 800b40a:	2300      	movs	r3, #0
 800b40c:	07ea      	lsls	r2, r5, #31
 800b40e:	d504      	bpl.n	800b41a <_strtod_l+0x5c2>
 800b410:	e9da 2300 	ldrd	r2, r3, [sl]
 800b414:	f7f5 f908 	bl	8000628 <__aeabi_dmul>
 800b418:	2301      	movs	r3, #1
 800b41a:	106d      	asrs	r5, r5, #1
 800b41c:	f10a 0a08 	add.w	sl, sl, #8
 800b420:	d1f4      	bne.n	800b40c <_strtod_l+0x5b4>
 800b422:	b10b      	cbz	r3, 800b428 <_strtod_l+0x5d0>
 800b424:	4680      	mov	r8, r0
 800b426:	4689      	mov	r9, r1
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	b1bb      	cbz	r3, 800b45c <_strtod_l+0x604>
 800b42c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b430:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b434:	2b00      	cmp	r3, #0
 800b436:	4649      	mov	r1, r9
 800b438:	dd10      	ble.n	800b45c <_strtod_l+0x604>
 800b43a:	2b1f      	cmp	r3, #31
 800b43c:	f340 811e 	ble.w	800b67c <_strtod_l+0x824>
 800b440:	2b34      	cmp	r3, #52	; 0x34
 800b442:	bfde      	ittt	le
 800b444:	f04f 33ff 	movle.w	r3, #4294967295
 800b448:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b44c:	4093      	lslle	r3, r2
 800b44e:	f04f 0800 	mov.w	r8, #0
 800b452:	bfcc      	ite	gt
 800b454:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b458:	ea03 0901 	andle.w	r9, r3, r1
 800b45c:	2200      	movs	r2, #0
 800b45e:	2300      	movs	r3, #0
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f5 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d1a6      	bne.n	800b3ba <_strtod_l+0x562>
 800b46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b472:	4633      	mov	r3, r6
 800b474:	465a      	mov	r2, fp
 800b476:	4620      	mov	r0, r4
 800b478:	f001 f9f4 	bl	800c864 <__s2b>
 800b47c:	9009      	str	r0, [sp, #36]	; 0x24
 800b47e:	2800      	cmp	r0, #0
 800b480:	f43f af2a 	beq.w	800b2d8 <_strtod_l+0x480>
 800b484:	9a08      	ldr	r2, [sp, #32]
 800b486:	9b05      	ldr	r3, [sp, #20]
 800b488:	2a00      	cmp	r2, #0
 800b48a:	eba3 0307 	sub.w	r3, r3, r7
 800b48e:	bfa8      	it	ge
 800b490:	2300      	movge	r3, #0
 800b492:	930c      	str	r3, [sp, #48]	; 0x30
 800b494:	2500      	movs	r5, #0
 800b496:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b49a:	9312      	str	r3, [sp, #72]	; 0x48
 800b49c:	46ab      	mov	fp, r5
 800b49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	6859      	ldr	r1, [r3, #4]
 800b4a4:	f001 f936 	bl	800c714 <_Balloc>
 800b4a8:	9005      	str	r0, [sp, #20]
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f43f af18 	beq.w	800b2e0 <_strtod_l+0x488>
 800b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b2:	691a      	ldr	r2, [r3, #16]
 800b4b4:	3202      	adds	r2, #2
 800b4b6:	f103 010c 	add.w	r1, r3, #12
 800b4ba:	0092      	lsls	r2, r2, #2
 800b4bc:	300c      	adds	r0, #12
 800b4be:	f000 fcb0 	bl	800be22 <memcpy>
 800b4c2:	ec49 8b10 	vmov	d0, r8, r9
 800b4c6:	aa18      	add	r2, sp, #96	; 0x60
 800b4c8:	a917      	add	r1, sp, #92	; 0x5c
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f001 fcfe 	bl	800cecc <__d2b>
 800b4d0:	ec49 8b18 	vmov	d8, r8, r9
 800b4d4:	9016      	str	r0, [sp, #88]	; 0x58
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f43f af02 	beq.w	800b2e0 <_strtod_l+0x488>
 800b4dc:	2101      	movs	r1, #1
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 fa58 	bl	800c994 <__i2b>
 800b4e4:	4683      	mov	fp, r0
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f aefa 	beq.w	800b2e0 <_strtod_l+0x488>
 800b4ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b4ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	bfab      	itete	ge
 800b4f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b4f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b4f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b4fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b4fe:	bfac      	ite	ge
 800b500:	eb06 0a03 	addge.w	sl, r6, r3
 800b504:	1b9f      	sublt	r7, r3, r6
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	1af6      	subs	r6, r6, r3
 800b50a:	4416      	add	r6, r2
 800b50c:	4ba0      	ldr	r3, [pc, #640]	; (800b790 <_strtod_l+0x938>)
 800b50e:	3e01      	subs	r6, #1
 800b510:	429e      	cmp	r6, r3
 800b512:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b516:	f280 80c4 	bge.w	800b6a2 <_strtod_l+0x84a>
 800b51a:	1b9b      	subs	r3, r3, r6
 800b51c:	2b1f      	cmp	r3, #31
 800b51e:	eba2 0203 	sub.w	r2, r2, r3
 800b522:	f04f 0101 	mov.w	r1, #1
 800b526:	f300 80b0 	bgt.w	800b68a <_strtod_l+0x832>
 800b52a:	fa01 f303 	lsl.w	r3, r1, r3
 800b52e:	930e      	str	r3, [sp, #56]	; 0x38
 800b530:	2300      	movs	r3, #0
 800b532:	930d      	str	r3, [sp, #52]	; 0x34
 800b534:	eb0a 0602 	add.w	r6, sl, r2
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	45b2      	cmp	sl, r6
 800b53c:	4417      	add	r7, r2
 800b53e:	441f      	add	r7, r3
 800b540:	4653      	mov	r3, sl
 800b542:	bfa8      	it	ge
 800b544:	4633      	movge	r3, r6
 800b546:	42bb      	cmp	r3, r7
 800b548:	bfa8      	it	ge
 800b54a:	463b      	movge	r3, r7
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfc2      	ittt	gt
 800b550:	1af6      	subgt	r6, r6, r3
 800b552:	1aff      	subgt	r7, r7, r3
 800b554:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dd17      	ble.n	800b58e <_strtod_l+0x736>
 800b55e:	4659      	mov	r1, fp
 800b560:	461a      	mov	r2, r3
 800b562:	4620      	mov	r0, r4
 800b564:	f001 fad6 	bl	800cb14 <__pow5mult>
 800b568:	4683      	mov	fp, r0
 800b56a:	2800      	cmp	r0, #0
 800b56c:	f43f aeb8 	beq.w	800b2e0 <_strtod_l+0x488>
 800b570:	4601      	mov	r1, r0
 800b572:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b574:	4620      	mov	r0, r4
 800b576:	f001 fa23 	bl	800c9c0 <__multiply>
 800b57a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f43f aeaf 	beq.w	800b2e0 <_strtod_l+0x488>
 800b582:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b584:	4620      	mov	r0, r4
 800b586:	f001 f905 	bl	800c794 <_Bfree>
 800b58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58c:	9316      	str	r3, [sp, #88]	; 0x58
 800b58e:	2e00      	cmp	r6, #0
 800b590:	f300 808c 	bgt.w	800b6ac <_strtod_l+0x854>
 800b594:	9b08      	ldr	r3, [sp, #32]
 800b596:	2b00      	cmp	r3, #0
 800b598:	dd08      	ble.n	800b5ac <_strtod_l+0x754>
 800b59a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b59c:	9905      	ldr	r1, [sp, #20]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f001 fab8 	bl	800cb14 <__pow5mult>
 800b5a4:	9005      	str	r0, [sp, #20]
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f43f ae9a 	beq.w	800b2e0 <_strtod_l+0x488>
 800b5ac:	2f00      	cmp	r7, #0
 800b5ae:	dd08      	ble.n	800b5c2 <_strtod_l+0x76a>
 800b5b0:	9905      	ldr	r1, [sp, #20]
 800b5b2:	463a      	mov	r2, r7
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f001 fb07 	bl	800cbc8 <__lshift>
 800b5ba:	9005      	str	r0, [sp, #20]
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f43f ae8f 	beq.w	800b2e0 <_strtod_l+0x488>
 800b5c2:	f1ba 0f00 	cmp.w	sl, #0
 800b5c6:	dd08      	ble.n	800b5da <_strtod_l+0x782>
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f001 fafb 	bl	800cbc8 <__lshift>
 800b5d2:	4683      	mov	fp, r0
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	f43f ae83 	beq.w	800b2e0 <_strtod_l+0x488>
 800b5da:	9a05      	ldr	r2, [sp, #20]
 800b5dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f001 fb7a 	bl	800ccd8 <__mdiff>
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f43f ae7a 	beq.w	800b2e0 <_strtod_l+0x488>
 800b5ec:	68c3      	ldr	r3, [r0, #12]
 800b5ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60c3      	str	r3, [r0, #12]
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	f001 fb53 	bl	800cca0 <__mcmp>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	da60      	bge.n	800b6c0 <_strtod_l+0x868>
 800b5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b600:	ea53 0308 	orrs.w	r3, r3, r8
 800b604:	f040 8084 	bne.w	800b710 <_strtod_l+0x8b8>
 800b608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d17f      	bne.n	800b710 <_strtod_l+0x8b8>
 800b610:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b614:	0d1b      	lsrs	r3, r3, #20
 800b616:	051b      	lsls	r3, r3, #20
 800b618:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b61c:	d978      	bls.n	800b710 <_strtod_l+0x8b8>
 800b61e:	696b      	ldr	r3, [r5, #20]
 800b620:	b913      	cbnz	r3, 800b628 <_strtod_l+0x7d0>
 800b622:	692b      	ldr	r3, [r5, #16]
 800b624:	2b01      	cmp	r3, #1
 800b626:	dd73      	ble.n	800b710 <_strtod_l+0x8b8>
 800b628:	4629      	mov	r1, r5
 800b62a:	2201      	movs	r2, #1
 800b62c:	4620      	mov	r0, r4
 800b62e:	f001 facb 	bl	800cbc8 <__lshift>
 800b632:	4659      	mov	r1, fp
 800b634:	4605      	mov	r5, r0
 800b636:	f001 fb33 	bl	800cca0 <__mcmp>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	dd68      	ble.n	800b710 <_strtod_l+0x8b8>
 800b63e:	9904      	ldr	r1, [sp, #16]
 800b640:	4a54      	ldr	r2, [pc, #336]	; (800b794 <_strtod_l+0x93c>)
 800b642:	464b      	mov	r3, r9
 800b644:	2900      	cmp	r1, #0
 800b646:	f000 8084 	beq.w	800b752 <_strtod_l+0x8fa>
 800b64a:	ea02 0109 	and.w	r1, r2, r9
 800b64e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b652:	dc7e      	bgt.n	800b752 <_strtod_l+0x8fa>
 800b654:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b658:	f77f aeb3 	ble.w	800b3c2 <_strtod_l+0x56a>
 800b65c:	4b4e      	ldr	r3, [pc, #312]	; (800b798 <_strtod_l+0x940>)
 800b65e:	4640      	mov	r0, r8
 800b660:	4649      	mov	r1, r9
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 ffe0 	bl	8000628 <__aeabi_dmul>
 800b668:	4b4a      	ldr	r3, [pc, #296]	; (800b794 <_strtod_l+0x93c>)
 800b66a:	400b      	ands	r3, r1
 800b66c:	4680      	mov	r8, r0
 800b66e:	4689      	mov	r9, r1
 800b670:	2b00      	cmp	r3, #0
 800b672:	f47f ae3f 	bne.w	800b2f4 <_strtod_l+0x49c>
 800b676:	2322      	movs	r3, #34	; 0x22
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	e63b      	b.n	800b2f4 <_strtod_l+0x49c>
 800b67c:	f04f 32ff 	mov.w	r2, #4294967295
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	ea03 0808 	and.w	r8, r3, r8
 800b688:	e6e8      	b.n	800b45c <_strtod_l+0x604>
 800b68a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b68e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b692:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b696:	36e2      	adds	r6, #226	; 0xe2
 800b698:	fa01 f306 	lsl.w	r3, r1, r6
 800b69c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b6a0:	e748      	b.n	800b534 <_strtod_l+0x6dc>
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b6aa:	e743      	b.n	800b534 <_strtod_l+0x6dc>
 800b6ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6ae:	4632      	mov	r2, r6
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f001 fa89 	bl	800cbc8 <__lshift>
 800b6b6:	9016      	str	r0, [sp, #88]	; 0x58
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f47f af6b 	bne.w	800b594 <_strtod_l+0x73c>
 800b6be:	e60f      	b.n	800b2e0 <_strtod_l+0x488>
 800b6c0:	46ca      	mov	sl, r9
 800b6c2:	d171      	bne.n	800b7a8 <_strtod_l+0x950>
 800b6c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6ca:	b352      	cbz	r2, 800b722 <_strtod_l+0x8ca>
 800b6cc:	4a33      	ldr	r2, [pc, #204]	; (800b79c <_strtod_l+0x944>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d12a      	bne.n	800b728 <_strtod_l+0x8d0>
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	4641      	mov	r1, r8
 800b6d6:	b1fb      	cbz	r3, 800b718 <_strtod_l+0x8c0>
 800b6d8:	4b2e      	ldr	r3, [pc, #184]	; (800b794 <_strtod_l+0x93c>)
 800b6da:	ea09 0303 	and.w	r3, r9, r3
 800b6de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e6:	d81a      	bhi.n	800b71e <_strtod_l+0x8c6>
 800b6e8:	0d1b      	lsrs	r3, r3, #20
 800b6ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f2:	4299      	cmp	r1, r3
 800b6f4:	d118      	bne.n	800b728 <_strtod_l+0x8d0>
 800b6f6:	4b2a      	ldr	r3, [pc, #168]	; (800b7a0 <_strtod_l+0x948>)
 800b6f8:	459a      	cmp	sl, r3
 800b6fa:	d102      	bne.n	800b702 <_strtod_l+0x8aa>
 800b6fc:	3101      	adds	r1, #1
 800b6fe:	f43f adef 	beq.w	800b2e0 <_strtod_l+0x488>
 800b702:	4b24      	ldr	r3, [pc, #144]	; (800b794 <_strtod_l+0x93c>)
 800b704:	ea0a 0303 	and.w	r3, sl, r3
 800b708:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b70c:	f04f 0800 	mov.w	r8, #0
 800b710:	9b04      	ldr	r3, [sp, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1a2      	bne.n	800b65c <_strtod_l+0x804>
 800b716:	e5ed      	b.n	800b2f4 <_strtod_l+0x49c>
 800b718:	f04f 33ff 	mov.w	r3, #4294967295
 800b71c:	e7e9      	b.n	800b6f2 <_strtod_l+0x89a>
 800b71e:	4613      	mov	r3, r2
 800b720:	e7e7      	b.n	800b6f2 <_strtod_l+0x89a>
 800b722:	ea53 0308 	orrs.w	r3, r3, r8
 800b726:	d08a      	beq.n	800b63e <_strtod_l+0x7e6>
 800b728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b72a:	b1e3      	cbz	r3, 800b766 <_strtod_l+0x90e>
 800b72c:	ea13 0f0a 	tst.w	r3, sl
 800b730:	d0ee      	beq.n	800b710 <_strtod_l+0x8b8>
 800b732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	b1c3      	cbz	r3, 800b76e <_strtod_l+0x916>
 800b73c:	f7ff fb6e 	bl	800ae1c <sulp>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	ec51 0b18 	vmov	r0, r1, d8
 800b748:	f7f4 fdb8 	bl	80002bc <__adddf3>
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	e7de      	b.n	800b710 <_strtod_l+0x8b8>
 800b752:	4013      	ands	r3, r2
 800b754:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b758:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b75c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b760:	f04f 38ff 	mov.w	r8, #4294967295
 800b764:	e7d4      	b.n	800b710 <_strtod_l+0x8b8>
 800b766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b768:	ea13 0f08 	tst.w	r3, r8
 800b76c:	e7e0      	b.n	800b730 <_strtod_l+0x8d8>
 800b76e:	f7ff fb55 	bl	800ae1c <sulp>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	ec51 0b18 	vmov	r0, r1, d8
 800b77a:	f7f4 fd9d 	bl	80002b8 <__aeabi_dsub>
 800b77e:	2200      	movs	r2, #0
 800b780:	2300      	movs	r3, #0
 800b782:	4680      	mov	r8, r0
 800b784:	4689      	mov	r9, r1
 800b786:	f7f5 f9b7 	bl	8000af8 <__aeabi_dcmpeq>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d0c0      	beq.n	800b710 <_strtod_l+0x8b8>
 800b78e:	e618      	b.n	800b3c2 <_strtod_l+0x56a>
 800b790:	fffffc02 	.word	0xfffffc02
 800b794:	7ff00000 	.word	0x7ff00000
 800b798:	39500000 	.word	0x39500000
 800b79c:	000fffff 	.word	0x000fffff
 800b7a0:	7fefffff 	.word	0x7fefffff
 800b7a4:	0800f020 	.word	0x0800f020
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f001 fbe8 	bl	800cf80 <__ratio>
 800b7b0:	ec57 6b10 	vmov	r6, r7, d0
 800b7b4:	ee10 0a10 	vmov	r0, s0
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7be:	4639      	mov	r1, r7
 800b7c0:	f7f5 f9ae 	bl	8000b20 <__aeabi_dcmple>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d071      	beq.n	800b8ac <_strtod_l+0xa54>
 800b7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d17c      	bne.n	800b8c8 <_strtod_l+0xa70>
 800b7ce:	f1b8 0f00 	cmp.w	r8, #0
 800b7d2:	d15a      	bne.n	800b88a <_strtod_l+0xa32>
 800b7d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d15d      	bne.n	800b898 <_strtod_l+0xa40>
 800b7dc:	4b90      	ldr	r3, [pc, #576]	; (800ba20 <_strtod_l+0xbc8>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f5 f992 	bl	8000b0c <__aeabi_dcmplt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d15c      	bne.n	800b8a6 <_strtod_l+0xa4e>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	4b8c      	ldr	r3, [pc, #560]	; (800ba24 <_strtod_l+0xbcc>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f7f4 ff18 	bl	8000628 <__aeabi_dmul>
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	460f      	mov	r7, r1
 800b7fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b800:	9606      	str	r6, [sp, #24]
 800b802:	9307      	str	r3, [sp, #28]
 800b804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b808:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b80c:	4b86      	ldr	r3, [pc, #536]	; (800ba28 <_strtod_l+0xbd0>)
 800b80e:	ea0a 0303 	and.w	r3, sl, r3
 800b812:	930d      	str	r3, [sp, #52]	; 0x34
 800b814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b816:	4b85      	ldr	r3, [pc, #532]	; (800ba2c <_strtod_l+0xbd4>)
 800b818:	429a      	cmp	r2, r3
 800b81a:	f040 8090 	bne.w	800b93e <_strtod_l+0xae6>
 800b81e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b822:	ec49 8b10 	vmov	d0, r8, r9
 800b826:	f001 fae1 	bl	800cdec <__ulp>
 800b82a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b82e:	ec51 0b10 	vmov	r0, r1, d0
 800b832:	f7f4 fef9 	bl	8000628 <__aeabi_dmul>
 800b836:	4642      	mov	r2, r8
 800b838:	464b      	mov	r3, r9
 800b83a:	f7f4 fd3f 	bl	80002bc <__adddf3>
 800b83e:	460b      	mov	r3, r1
 800b840:	4979      	ldr	r1, [pc, #484]	; (800ba28 <_strtod_l+0xbd0>)
 800b842:	4a7b      	ldr	r2, [pc, #492]	; (800ba30 <_strtod_l+0xbd8>)
 800b844:	4019      	ands	r1, r3
 800b846:	4291      	cmp	r1, r2
 800b848:	4680      	mov	r8, r0
 800b84a:	d944      	bls.n	800b8d6 <_strtod_l+0xa7e>
 800b84c:	ee18 2a90 	vmov	r2, s17
 800b850:	4b78      	ldr	r3, [pc, #480]	; (800ba34 <_strtod_l+0xbdc>)
 800b852:	429a      	cmp	r2, r3
 800b854:	d104      	bne.n	800b860 <_strtod_l+0xa08>
 800b856:	ee18 3a10 	vmov	r3, s16
 800b85a:	3301      	adds	r3, #1
 800b85c:	f43f ad40 	beq.w	800b2e0 <_strtod_l+0x488>
 800b860:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ba34 <_strtod_l+0xbdc>
 800b864:	f04f 38ff 	mov.w	r8, #4294967295
 800b868:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 ff92 	bl	800c794 <_Bfree>
 800b870:	9905      	ldr	r1, [sp, #20]
 800b872:	4620      	mov	r0, r4
 800b874:	f000 ff8e 	bl	800c794 <_Bfree>
 800b878:	4659      	mov	r1, fp
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 ff8a 	bl	800c794 <_Bfree>
 800b880:	4629      	mov	r1, r5
 800b882:	4620      	mov	r0, r4
 800b884:	f000 ff86 	bl	800c794 <_Bfree>
 800b888:	e609      	b.n	800b49e <_strtod_l+0x646>
 800b88a:	f1b8 0f01 	cmp.w	r8, #1
 800b88e:	d103      	bne.n	800b898 <_strtod_l+0xa40>
 800b890:	f1b9 0f00 	cmp.w	r9, #0
 800b894:	f43f ad95 	beq.w	800b3c2 <_strtod_l+0x56a>
 800b898:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b9f0 <_strtod_l+0xb98>
 800b89c:	4f60      	ldr	r7, [pc, #384]	; (800ba20 <_strtod_l+0xbc8>)
 800b89e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	e7ae      	b.n	800b804 <_strtod_l+0x9ac>
 800b8a6:	4f5f      	ldr	r7, [pc, #380]	; (800ba24 <_strtod_l+0xbcc>)
 800b8a8:	2600      	movs	r6, #0
 800b8aa:	e7a7      	b.n	800b7fc <_strtod_l+0x9a4>
 800b8ac:	4b5d      	ldr	r3, [pc, #372]	; (800ba24 <_strtod_l+0xbcc>)
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7f4 feb8 	bl	8000628 <__aeabi_dmul>
 800b8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	460f      	mov	r7, r1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d09c      	beq.n	800b7fc <_strtod_l+0x9a4>
 800b8c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b8c6:	e79d      	b.n	800b804 <_strtod_l+0x9ac>
 800b8c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b9f8 <_strtod_l+0xba0>
 800b8cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8d0:	ec57 6b17 	vmov	r6, r7, d7
 800b8d4:	e796      	b.n	800b804 <_strtod_l+0x9ac>
 800b8d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	46ca      	mov	sl, r9
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1c2      	bne.n	800b868 <_strtod_l+0xa10>
 800b8e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8e8:	0d1b      	lsrs	r3, r3, #20
 800b8ea:	051b      	lsls	r3, r3, #20
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d1bb      	bne.n	800b868 <_strtod_l+0xa10>
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	f7f5 fa48 	bl	8000d88 <__aeabi_d2lz>
 800b8f8:	f7f4 fe68 	bl	80005cc <__aeabi_l2d>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4630      	mov	r0, r6
 800b902:	4639      	mov	r1, r7
 800b904:	f7f4 fcd8 	bl	80002b8 <__aeabi_dsub>
 800b908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b90a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b90e:	ea43 0308 	orr.w	r3, r3, r8
 800b912:	4313      	orrs	r3, r2
 800b914:	4606      	mov	r6, r0
 800b916:	460f      	mov	r7, r1
 800b918:	d054      	beq.n	800b9c4 <_strtod_l+0xb6c>
 800b91a:	a339      	add	r3, pc, #228	; (adr r3, 800ba00 <_strtod_l+0xba8>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f5 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 800b924:	2800      	cmp	r0, #0
 800b926:	f47f ace5 	bne.w	800b2f4 <_strtod_l+0x49c>
 800b92a:	a337      	add	r3, pc, #220	; (adr r3, 800ba08 <_strtod_l+0xbb0>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	4630      	mov	r0, r6
 800b932:	4639      	mov	r1, r7
 800b934:	f7f5 f908 	bl	8000b48 <__aeabi_dcmpgt>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d095      	beq.n	800b868 <_strtod_l+0xa10>
 800b93c:	e4da      	b.n	800b2f4 <_strtod_l+0x49c>
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	b333      	cbz	r3, 800b990 <_strtod_l+0xb38>
 800b942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b944:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b948:	d822      	bhi.n	800b990 <_strtod_l+0xb38>
 800b94a:	a331      	add	r3, pc, #196	; (adr r3, 800ba10 <_strtod_l+0xbb8>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 f8e4 	bl	8000b20 <__aeabi_dcmple>
 800b958:	b1a0      	cbz	r0, 800b984 <_strtod_l+0xb2c>
 800b95a:	4639      	mov	r1, r7
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7f5 f93b 	bl	8000bd8 <__aeabi_d2uiz>
 800b962:	2801      	cmp	r0, #1
 800b964:	bf38      	it	cc
 800b966:	2001      	movcc	r0, #1
 800b968:	f7f4 fde4 	bl	8000534 <__aeabi_ui2d>
 800b96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b96e:	4606      	mov	r6, r0
 800b970:	460f      	mov	r7, r1
 800b972:	bb23      	cbnz	r3, 800b9be <_strtod_l+0xb66>
 800b974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b978:	9010      	str	r0, [sp, #64]	; 0x40
 800b97a:	9311      	str	r3, [sp, #68]	; 0x44
 800b97c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b980:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b988:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b98c:	1a9b      	subs	r3, r3, r2
 800b98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b990:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b994:	eeb0 0a48 	vmov.f32	s0, s16
 800b998:	eef0 0a68 	vmov.f32	s1, s17
 800b99c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b9a0:	f001 fa24 	bl	800cdec <__ulp>
 800b9a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9a8:	ec53 2b10 	vmov	r2, r3, d0
 800b9ac:	f7f4 fe3c 	bl	8000628 <__aeabi_dmul>
 800b9b0:	ec53 2b18 	vmov	r2, r3, d8
 800b9b4:	f7f4 fc82 	bl	80002bc <__adddf3>
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	e78d      	b.n	800b8da <_strtod_l+0xa82>
 800b9be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b9c2:	e7db      	b.n	800b97c <_strtod_l+0xb24>
 800b9c4:	a314      	add	r3, pc, #80	; (adr r3, 800ba18 <_strtod_l+0xbc0>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f5 f89f 	bl	8000b0c <__aeabi_dcmplt>
 800b9ce:	e7b3      	b.n	800b938 <_strtod_l+0xae0>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	f7ff ba7c 	b.w	800aed6 <_strtod_l+0x7e>
 800b9de:	2a65      	cmp	r2, #101	; 0x65
 800b9e0:	f43f ab75 	beq.w	800b0ce <_strtod_l+0x276>
 800b9e4:	2a45      	cmp	r2, #69	; 0x45
 800b9e6:	f43f ab72 	beq.w	800b0ce <_strtod_l+0x276>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	f7ff bbaa 	b.w	800b144 <_strtod_l+0x2ec>
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	bff00000 	.word	0xbff00000
 800b9f8:	00000000 	.word	0x00000000
 800b9fc:	3ff00000 	.word	0x3ff00000
 800ba00:	94a03595 	.word	0x94a03595
 800ba04:	3fdfffff 	.word	0x3fdfffff
 800ba08:	35afe535 	.word	0x35afe535
 800ba0c:	3fe00000 	.word	0x3fe00000
 800ba10:	ffc00000 	.word	0xffc00000
 800ba14:	41dfffff 	.word	0x41dfffff
 800ba18:	94a03595 	.word	0x94a03595
 800ba1c:	3fcfffff 	.word	0x3fcfffff
 800ba20:	3ff00000 	.word	0x3ff00000
 800ba24:	3fe00000 	.word	0x3fe00000
 800ba28:	7ff00000 	.word	0x7ff00000
 800ba2c:	7fe00000 	.word	0x7fe00000
 800ba30:	7c9fffff 	.word	0x7c9fffff
 800ba34:	7fefffff 	.word	0x7fefffff

0800ba38 <strtod>:
 800ba38:	460a      	mov	r2, r1
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	4802      	ldr	r0, [pc, #8]	; (800ba48 <strtod+0x10>)
 800ba3e:	4b03      	ldr	r3, [pc, #12]	; (800ba4c <strtod+0x14>)
 800ba40:	6800      	ldr	r0, [r0, #0]
 800ba42:	f7ff ba09 	b.w	800ae58 <_strtod_l>
 800ba46:	bf00      	nop
 800ba48:	20000244 	.word	0x20000244
 800ba4c:	2000008c 	.word	0x2000008c

0800ba50 <std>:
 800ba50:	2300      	movs	r3, #0
 800ba52:	b510      	push	{r4, lr}
 800ba54:	4604      	mov	r4, r0
 800ba56:	e9c0 3300 	strd	r3, r3, [r0]
 800ba5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba5e:	6083      	str	r3, [r0, #8]
 800ba60:	8181      	strh	r1, [r0, #12]
 800ba62:	6643      	str	r3, [r0, #100]	; 0x64
 800ba64:	81c2      	strh	r2, [r0, #14]
 800ba66:	6183      	str	r3, [r0, #24]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	2208      	movs	r2, #8
 800ba6c:	305c      	adds	r0, #92	; 0x5c
 800ba6e:	f000 f8f4 	bl	800bc5a <memset>
 800ba72:	4b0d      	ldr	r3, [pc, #52]	; (800baa8 <std+0x58>)
 800ba74:	6263      	str	r3, [r4, #36]	; 0x24
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <std+0x5c>)
 800ba78:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba7a:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <std+0x60>)
 800ba7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba7e:	4b0d      	ldr	r3, [pc, #52]	; (800bab4 <std+0x64>)
 800ba80:	6323      	str	r3, [r4, #48]	; 0x30
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <std+0x68>)
 800ba84:	6224      	str	r4, [r4, #32]
 800ba86:	429c      	cmp	r4, r3
 800ba88:	d006      	beq.n	800ba98 <std+0x48>
 800ba8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ba8e:	4294      	cmp	r4, r2
 800ba90:	d002      	beq.n	800ba98 <std+0x48>
 800ba92:	33d0      	adds	r3, #208	; 0xd0
 800ba94:	429c      	cmp	r4, r3
 800ba96:	d105      	bne.n	800baa4 <std+0x54>
 800ba98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa0:	f000 b9bc 	b.w	800be1c <__retarget_lock_init_recursive>
 800baa4:	bd10      	pop	{r4, pc}
 800baa6:	bf00      	nop
 800baa8:	0800bbd5 	.word	0x0800bbd5
 800baac:	0800bbf7 	.word	0x0800bbf7
 800bab0:	0800bc2f 	.word	0x0800bc2f
 800bab4:	0800bc53 	.word	0x0800bc53
 800bab8:	2000475c 	.word	0x2000475c

0800babc <stdio_exit_handler>:
 800babc:	4a02      	ldr	r2, [pc, #8]	; (800bac8 <stdio_exit_handler+0xc>)
 800babe:	4903      	ldr	r1, [pc, #12]	; (800bacc <stdio_exit_handler+0x10>)
 800bac0:	4803      	ldr	r0, [pc, #12]	; (800bad0 <stdio_exit_handler+0x14>)
 800bac2:	f000 b869 	b.w	800bb98 <_fwalk_sglue>
 800bac6:	bf00      	nop
 800bac8:	20000080 	.word	0x20000080
 800bacc:	0800d195 	.word	0x0800d195
 800bad0:	200001f8 	.word	0x200001f8

0800bad4 <cleanup_stdio>:
 800bad4:	6841      	ldr	r1, [r0, #4]
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <cleanup_stdio+0x34>)
 800bad8:	4299      	cmp	r1, r3
 800bada:	b510      	push	{r4, lr}
 800badc:	4604      	mov	r4, r0
 800bade:	d001      	beq.n	800bae4 <cleanup_stdio+0x10>
 800bae0:	f001 fb58 	bl	800d194 <_fflush_r>
 800bae4:	68a1      	ldr	r1, [r4, #8]
 800bae6:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <cleanup_stdio+0x38>)
 800bae8:	4299      	cmp	r1, r3
 800baea:	d002      	beq.n	800baf2 <cleanup_stdio+0x1e>
 800baec:	4620      	mov	r0, r4
 800baee:	f001 fb51 	bl	800d194 <_fflush_r>
 800baf2:	68e1      	ldr	r1, [r4, #12]
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <cleanup_stdio+0x3c>)
 800baf6:	4299      	cmp	r1, r3
 800baf8:	d004      	beq.n	800bb04 <cleanup_stdio+0x30>
 800bafa:	4620      	mov	r0, r4
 800bafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb00:	f001 bb48 	b.w	800d194 <_fflush_r>
 800bb04:	bd10      	pop	{r4, pc}
 800bb06:	bf00      	nop
 800bb08:	2000475c 	.word	0x2000475c
 800bb0c:	200047c4 	.word	0x200047c4
 800bb10:	2000482c 	.word	0x2000482c

0800bb14 <global_stdio_init.part.0>:
 800bb14:	b510      	push	{r4, lr}
 800bb16:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <global_stdio_init.part.0+0x30>)
 800bb18:	4c0b      	ldr	r4, [pc, #44]	; (800bb48 <global_stdio_init.part.0+0x34>)
 800bb1a:	4a0c      	ldr	r2, [pc, #48]	; (800bb4c <global_stdio_init.part.0+0x38>)
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	2200      	movs	r2, #0
 800bb22:	2104      	movs	r1, #4
 800bb24:	f7ff ff94 	bl	800ba50 <std>
 800bb28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	2109      	movs	r1, #9
 800bb30:	f7ff ff8e 	bl	800ba50 <std>
 800bb34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bb38:	2202      	movs	r2, #2
 800bb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb3e:	2112      	movs	r1, #18
 800bb40:	f7ff bf86 	b.w	800ba50 <std>
 800bb44:	20004894 	.word	0x20004894
 800bb48:	2000475c 	.word	0x2000475c
 800bb4c:	0800babd 	.word	0x0800babd

0800bb50 <__sfp_lock_acquire>:
 800bb50:	4801      	ldr	r0, [pc, #4]	; (800bb58 <__sfp_lock_acquire+0x8>)
 800bb52:	f000 b964 	b.w	800be1e <__retarget_lock_acquire_recursive>
 800bb56:	bf00      	nop
 800bb58:	2000489d 	.word	0x2000489d

0800bb5c <__sfp_lock_release>:
 800bb5c:	4801      	ldr	r0, [pc, #4]	; (800bb64 <__sfp_lock_release+0x8>)
 800bb5e:	f000 b95f 	b.w	800be20 <__retarget_lock_release_recursive>
 800bb62:	bf00      	nop
 800bb64:	2000489d 	.word	0x2000489d

0800bb68 <__sinit>:
 800bb68:	b510      	push	{r4, lr}
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	f7ff fff0 	bl	800bb50 <__sfp_lock_acquire>
 800bb70:	6a23      	ldr	r3, [r4, #32]
 800bb72:	b11b      	cbz	r3, 800bb7c <__sinit+0x14>
 800bb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb78:	f7ff bff0 	b.w	800bb5c <__sfp_lock_release>
 800bb7c:	4b04      	ldr	r3, [pc, #16]	; (800bb90 <__sinit+0x28>)
 800bb7e:	6223      	str	r3, [r4, #32]
 800bb80:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <__sinit+0x2c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1f5      	bne.n	800bb74 <__sinit+0xc>
 800bb88:	f7ff ffc4 	bl	800bb14 <global_stdio_init.part.0>
 800bb8c:	e7f2      	b.n	800bb74 <__sinit+0xc>
 800bb8e:	bf00      	nop
 800bb90:	0800bad5 	.word	0x0800bad5
 800bb94:	20004894 	.word	0x20004894

0800bb98 <_fwalk_sglue>:
 800bb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	4688      	mov	r8, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	2600      	movs	r6, #0
 800bba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bba8:	f1b9 0901 	subs.w	r9, r9, #1
 800bbac:	d505      	bpl.n	800bbba <_fwalk_sglue+0x22>
 800bbae:	6824      	ldr	r4, [r4, #0]
 800bbb0:	2c00      	cmp	r4, #0
 800bbb2:	d1f7      	bne.n	800bba4 <_fwalk_sglue+0xc>
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbba:	89ab      	ldrh	r3, [r5, #12]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d907      	bls.n	800bbd0 <_fwalk_sglue+0x38>
 800bbc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	d003      	beq.n	800bbd0 <_fwalk_sglue+0x38>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4638      	mov	r0, r7
 800bbcc:	47c0      	blx	r8
 800bbce:	4306      	orrs	r6, r0
 800bbd0:	3568      	adds	r5, #104	; 0x68
 800bbd2:	e7e9      	b.n	800bba8 <_fwalk_sglue+0x10>

0800bbd4 <__sread>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbdc:	f000 f8d0 	bl	800bd80 <_read_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	bfab      	itete	ge
 800bbe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbe6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbe8:	181b      	addge	r3, r3, r0
 800bbea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbee:	bfac      	ite	ge
 800bbf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbf2:	81a3      	strhlt	r3, [r4, #12]
 800bbf4:	bd10      	pop	{r4, pc}

0800bbf6 <__swrite>:
 800bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	461f      	mov	r7, r3
 800bbfc:	898b      	ldrh	r3, [r1, #12]
 800bbfe:	05db      	lsls	r3, r3, #23
 800bc00:	4605      	mov	r5, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4616      	mov	r6, r2
 800bc06:	d505      	bpl.n	800bc14 <__swrite+0x1e>
 800bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f000 f8a4 	bl	800bd5c <_lseek_r>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	4628      	mov	r0, r5
 800bc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	f000 b8bb 	b.w	800bda4 <_write_r>

0800bc2e <__sseek>:
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	460c      	mov	r4, r1
 800bc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc36:	f000 f891 	bl	800bd5c <_lseek_r>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	bf15      	itete	ne
 800bc40:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc4a:	81a3      	strheq	r3, [r4, #12]
 800bc4c:	bf18      	it	ne
 800bc4e:	81a3      	strhne	r3, [r4, #12]
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <__sclose>:
 800bc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc56:	f000 b81b 	b.w	800bc90 <_close_r>

0800bc5a <memset>:
 800bc5a:	4402      	add	r2, r0
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d100      	bne.n	800bc64 <memset+0xa>
 800bc62:	4770      	bx	lr
 800bc64:	f803 1b01 	strb.w	r1, [r3], #1
 800bc68:	e7f9      	b.n	800bc5e <memset+0x4>

0800bc6a <strncmp>:
 800bc6a:	b510      	push	{r4, lr}
 800bc6c:	b16a      	cbz	r2, 800bc8a <strncmp+0x20>
 800bc6e:	3901      	subs	r1, #1
 800bc70:	1884      	adds	r4, r0, r2
 800bc72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d103      	bne.n	800bc86 <strncmp+0x1c>
 800bc7e:	42a0      	cmp	r0, r4
 800bc80:	d001      	beq.n	800bc86 <strncmp+0x1c>
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	d1f5      	bne.n	800bc72 <strncmp+0x8>
 800bc86:	1ad0      	subs	r0, r2, r3
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	e7fc      	b.n	800bc88 <strncmp+0x1e>
	...

0800bc90 <_close_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d06      	ldr	r5, [pc, #24]	; (800bcac <_close_r+0x1c>)
 800bc94:	2300      	movs	r3, #0
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	602b      	str	r3, [r5, #0]
 800bc9c:	f7f8 fe1f 	bl	80048de <_close>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_close_r+0x1a>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_close_r+0x1a>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	20004898 	.word	0x20004898

0800bcb0 <_reclaim_reent>:
 800bcb0:	4b29      	ldr	r3, [pc, #164]	; (800bd58 <_reclaim_reent+0xa8>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4283      	cmp	r3, r0
 800bcb6:	b570      	push	{r4, r5, r6, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	d04b      	beq.n	800bd54 <_reclaim_reent+0xa4>
 800bcbc:	69c3      	ldr	r3, [r0, #28]
 800bcbe:	b143      	cbz	r3, 800bcd2 <_reclaim_reent+0x22>
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d144      	bne.n	800bd50 <_reclaim_reent+0xa0>
 800bcc6:	69e3      	ldr	r3, [r4, #28]
 800bcc8:	6819      	ldr	r1, [r3, #0]
 800bcca:	b111      	cbz	r1, 800bcd2 <_reclaim_reent+0x22>
 800bccc:	4620      	mov	r0, r4
 800bcce:	f000 f8bf 	bl	800be50 <_free_r>
 800bcd2:	6961      	ldr	r1, [r4, #20]
 800bcd4:	b111      	cbz	r1, 800bcdc <_reclaim_reent+0x2c>
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f000 f8ba 	bl	800be50 <_free_r>
 800bcdc:	69e1      	ldr	r1, [r4, #28]
 800bcde:	b111      	cbz	r1, 800bce6 <_reclaim_reent+0x36>
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 f8b5 	bl	800be50 <_free_r>
 800bce6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bce8:	b111      	cbz	r1, 800bcf0 <_reclaim_reent+0x40>
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f8b0 	bl	800be50 <_free_r>
 800bcf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcf2:	b111      	cbz	r1, 800bcfa <_reclaim_reent+0x4a>
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f000 f8ab 	bl	800be50 <_free_r>
 800bcfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcfc:	b111      	cbz	r1, 800bd04 <_reclaim_reent+0x54>
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f000 f8a6 	bl	800be50 <_free_r>
 800bd04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd06:	b111      	cbz	r1, 800bd0e <_reclaim_reent+0x5e>
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f000 f8a1 	bl	800be50 <_free_r>
 800bd0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bd10:	b111      	cbz	r1, 800bd18 <_reclaim_reent+0x68>
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 f89c 	bl	800be50 <_free_r>
 800bd18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bd1a:	b111      	cbz	r1, 800bd22 <_reclaim_reent+0x72>
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 f897 	bl	800be50 <_free_r>
 800bd22:	6a23      	ldr	r3, [r4, #32]
 800bd24:	b1b3      	cbz	r3, 800bd54 <_reclaim_reent+0xa4>
 800bd26:	4620      	mov	r0, r4
 800bd28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd2c:	4718      	bx	r3
 800bd2e:	5949      	ldr	r1, [r1, r5]
 800bd30:	b941      	cbnz	r1, 800bd44 <_reclaim_reent+0x94>
 800bd32:	3504      	adds	r5, #4
 800bd34:	69e3      	ldr	r3, [r4, #28]
 800bd36:	2d80      	cmp	r5, #128	; 0x80
 800bd38:	68d9      	ldr	r1, [r3, #12]
 800bd3a:	d1f8      	bne.n	800bd2e <_reclaim_reent+0x7e>
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 f887 	bl	800be50 <_free_r>
 800bd42:	e7c0      	b.n	800bcc6 <_reclaim_reent+0x16>
 800bd44:	680e      	ldr	r6, [r1, #0]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 f882 	bl	800be50 <_free_r>
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	e7ef      	b.n	800bd30 <_reclaim_reent+0x80>
 800bd50:	2500      	movs	r5, #0
 800bd52:	e7ef      	b.n	800bd34 <_reclaim_reent+0x84>
 800bd54:	bd70      	pop	{r4, r5, r6, pc}
 800bd56:	bf00      	nop
 800bd58:	20000244 	.word	0x20000244

0800bd5c <_lseek_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4d07      	ldr	r5, [pc, #28]	; (800bd7c <_lseek_r+0x20>)
 800bd60:	4604      	mov	r4, r0
 800bd62:	4608      	mov	r0, r1
 800bd64:	4611      	mov	r1, r2
 800bd66:	2200      	movs	r2, #0
 800bd68:	602a      	str	r2, [r5, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f7f8 fdde 	bl	800492c <_lseek>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_lseek_r+0x1e>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_lseek_r+0x1e>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20004898 	.word	0x20004898

0800bd80 <_read_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d07      	ldr	r5, [pc, #28]	; (800bda0 <_read_r+0x20>)
 800bd84:	4604      	mov	r4, r0
 800bd86:	4608      	mov	r0, r1
 800bd88:	4611      	mov	r1, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	602a      	str	r2, [r5, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f7f8 fd6c 	bl	800486c <_read>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d102      	bne.n	800bd9e <_read_r+0x1e>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b103      	cbz	r3, 800bd9e <_read_r+0x1e>
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	20004898 	.word	0x20004898

0800bda4 <_write_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	; (800bdc4 <_write_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f8 fd77 	bl	80048a6 <_write>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_write_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_write_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20004898 	.word	0x20004898

0800bdc8 <__errno>:
 800bdc8:	4b01      	ldr	r3, [pc, #4]	; (800bdd0 <__errno+0x8>)
 800bdca:	6818      	ldr	r0, [r3, #0]
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	20000244 	.word	0x20000244

0800bdd4 <__libc_init_array>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4d0d      	ldr	r5, [pc, #52]	; (800be0c <__libc_init_array+0x38>)
 800bdd8:	4c0d      	ldr	r4, [pc, #52]	; (800be10 <__libc_init_array+0x3c>)
 800bdda:	1b64      	subs	r4, r4, r5
 800bddc:	10a4      	asrs	r4, r4, #2
 800bdde:	2600      	movs	r6, #0
 800bde0:	42a6      	cmp	r6, r4
 800bde2:	d109      	bne.n	800bdf8 <__libc_init_array+0x24>
 800bde4:	4d0b      	ldr	r5, [pc, #44]	; (800be14 <__libc_init_array+0x40>)
 800bde6:	4c0c      	ldr	r4, [pc, #48]	; (800be18 <__libc_init_array+0x44>)
 800bde8:	f003 f838 	bl	800ee5c <_init>
 800bdec:	1b64      	subs	r4, r4, r5
 800bdee:	10a4      	asrs	r4, r4, #2
 800bdf0:	2600      	movs	r6, #0
 800bdf2:	42a6      	cmp	r6, r4
 800bdf4:	d105      	bne.n	800be02 <__libc_init_array+0x2e>
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdfc:	4798      	blx	r3
 800bdfe:	3601      	adds	r6, #1
 800be00:	e7ee      	b.n	800bde0 <__libc_init_array+0xc>
 800be02:	f855 3b04 	ldr.w	r3, [r5], #4
 800be06:	4798      	blx	r3
 800be08:	3601      	adds	r6, #1
 800be0a:	e7f2      	b.n	800bdf2 <__libc_init_array+0x1e>
 800be0c:	0800f450 	.word	0x0800f450
 800be10:	0800f450 	.word	0x0800f450
 800be14:	0800f450 	.word	0x0800f450
 800be18:	0800f454 	.word	0x0800f454

0800be1c <__retarget_lock_init_recursive>:
 800be1c:	4770      	bx	lr

0800be1e <__retarget_lock_acquire_recursive>:
 800be1e:	4770      	bx	lr

0800be20 <__retarget_lock_release_recursive>:
 800be20:	4770      	bx	lr

0800be22 <memcpy>:
 800be22:	440a      	add	r2, r1
 800be24:	4291      	cmp	r1, r2
 800be26:	f100 33ff 	add.w	r3, r0, #4294967295
 800be2a:	d100      	bne.n	800be2e <memcpy+0xc>
 800be2c:	4770      	bx	lr
 800be2e:	b510      	push	{r4, lr}
 800be30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be38:	4291      	cmp	r1, r2
 800be3a:	d1f9      	bne.n	800be30 <memcpy+0xe>
 800be3c:	bd10      	pop	{r4, pc}
	...

0800be40 <nan>:
 800be40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be48 <nan+0x8>
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	00000000 	.word	0x00000000
 800be4c:	7ff80000 	.word	0x7ff80000

0800be50 <_free_r>:
 800be50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be52:	2900      	cmp	r1, #0
 800be54:	d044      	beq.n	800bee0 <_free_r+0x90>
 800be56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5a:	9001      	str	r0, [sp, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f1a1 0404 	sub.w	r4, r1, #4
 800be62:	bfb8      	it	lt
 800be64:	18e4      	addlt	r4, r4, r3
 800be66:	f000 fc49 	bl	800c6fc <__malloc_lock>
 800be6a:	4a1e      	ldr	r2, [pc, #120]	; (800bee4 <_free_r+0x94>)
 800be6c:	9801      	ldr	r0, [sp, #4]
 800be6e:	6813      	ldr	r3, [r2, #0]
 800be70:	b933      	cbnz	r3, 800be80 <_free_r+0x30>
 800be72:	6063      	str	r3, [r4, #4]
 800be74:	6014      	str	r4, [r2, #0]
 800be76:	b003      	add	sp, #12
 800be78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be7c:	f000 bc44 	b.w	800c708 <__malloc_unlock>
 800be80:	42a3      	cmp	r3, r4
 800be82:	d908      	bls.n	800be96 <_free_r+0x46>
 800be84:	6825      	ldr	r5, [r4, #0]
 800be86:	1961      	adds	r1, r4, r5
 800be88:	428b      	cmp	r3, r1
 800be8a:	bf01      	itttt	eq
 800be8c:	6819      	ldreq	r1, [r3, #0]
 800be8e:	685b      	ldreq	r3, [r3, #4]
 800be90:	1949      	addeq	r1, r1, r5
 800be92:	6021      	streq	r1, [r4, #0]
 800be94:	e7ed      	b.n	800be72 <_free_r+0x22>
 800be96:	461a      	mov	r2, r3
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	b10b      	cbz	r3, 800bea0 <_free_r+0x50>
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	d9fa      	bls.n	800be96 <_free_r+0x46>
 800bea0:	6811      	ldr	r1, [r2, #0]
 800bea2:	1855      	adds	r5, r2, r1
 800bea4:	42a5      	cmp	r5, r4
 800bea6:	d10b      	bne.n	800bec0 <_free_r+0x70>
 800bea8:	6824      	ldr	r4, [r4, #0]
 800beaa:	4421      	add	r1, r4
 800beac:	1854      	adds	r4, r2, r1
 800beae:	42a3      	cmp	r3, r4
 800beb0:	6011      	str	r1, [r2, #0]
 800beb2:	d1e0      	bne.n	800be76 <_free_r+0x26>
 800beb4:	681c      	ldr	r4, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	6053      	str	r3, [r2, #4]
 800beba:	440c      	add	r4, r1
 800bebc:	6014      	str	r4, [r2, #0]
 800bebe:	e7da      	b.n	800be76 <_free_r+0x26>
 800bec0:	d902      	bls.n	800bec8 <_free_r+0x78>
 800bec2:	230c      	movs	r3, #12
 800bec4:	6003      	str	r3, [r0, #0]
 800bec6:	e7d6      	b.n	800be76 <_free_r+0x26>
 800bec8:	6825      	ldr	r5, [r4, #0]
 800beca:	1961      	adds	r1, r4, r5
 800becc:	428b      	cmp	r3, r1
 800bece:	bf04      	itt	eq
 800bed0:	6819      	ldreq	r1, [r3, #0]
 800bed2:	685b      	ldreq	r3, [r3, #4]
 800bed4:	6063      	str	r3, [r4, #4]
 800bed6:	bf04      	itt	eq
 800bed8:	1949      	addeq	r1, r1, r5
 800beda:	6021      	streq	r1, [r4, #0]
 800bedc:	6054      	str	r4, [r2, #4]
 800bede:	e7ca      	b.n	800be76 <_free_r+0x26>
 800bee0:	b003      	add	sp, #12
 800bee2:	bd30      	pop	{r4, r5, pc}
 800bee4:	200048a0 	.word	0x200048a0

0800bee8 <rshift>:
 800bee8:	6903      	ldr	r3, [r0, #16]
 800beea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800beee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bef2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bef6:	f100 0414 	add.w	r4, r0, #20
 800befa:	dd45      	ble.n	800bf88 <rshift+0xa0>
 800befc:	f011 011f 	ands.w	r1, r1, #31
 800bf00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf08:	d10c      	bne.n	800bf24 <rshift+0x3c>
 800bf0a:	f100 0710 	add.w	r7, r0, #16
 800bf0e:	4629      	mov	r1, r5
 800bf10:	42b1      	cmp	r1, r6
 800bf12:	d334      	bcc.n	800bf7e <rshift+0x96>
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	1eea      	subs	r2, r5, #3
 800bf1a:	4296      	cmp	r6, r2
 800bf1c:	bf38      	it	cc
 800bf1e:	2300      	movcc	r3, #0
 800bf20:	4423      	add	r3, r4
 800bf22:	e015      	b.n	800bf50 <rshift+0x68>
 800bf24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf28:	f1c1 0820 	rsb	r8, r1, #32
 800bf2c:	40cf      	lsrs	r7, r1
 800bf2e:	f105 0e04 	add.w	lr, r5, #4
 800bf32:	46a1      	mov	r9, r4
 800bf34:	4576      	cmp	r6, lr
 800bf36:	46f4      	mov	ip, lr
 800bf38:	d815      	bhi.n	800bf66 <rshift+0x7e>
 800bf3a:	1a9a      	subs	r2, r3, r2
 800bf3c:	0092      	lsls	r2, r2, #2
 800bf3e:	3a04      	subs	r2, #4
 800bf40:	3501      	adds	r5, #1
 800bf42:	42ae      	cmp	r6, r5
 800bf44:	bf38      	it	cc
 800bf46:	2200      	movcc	r2, #0
 800bf48:	18a3      	adds	r3, r4, r2
 800bf4a:	50a7      	str	r7, [r4, r2]
 800bf4c:	b107      	cbz	r7, 800bf50 <rshift+0x68>
 800bf4e:	3304      	adds	r3, #4
 800bf50:	1b1a      	subs	r2, r3, r4
 800bf52:	42a3      	cmp	r3, r4
 800bf54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf58:	bf08      	it	eq
 800bf5a:	2300      	moveq	r3, #0
 800bf5c:	6102      	str	r2, [r0, #16]
 800bf5e:	bf08      	it	eq
 800bf60:	6143      	streq	r3, [r0, #20]
 800bf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf66:	f8dc c000 	ldr.w	ip, [ip]
 800bf6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf6e:	ea4c 0707 	orr.w	r7, ip, r7
 800bf72:	f849 7b04 	str.w	r7, [r9], #4
 800bf76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf7a:	40cf      	lsrs	r7, r1
 800bf7c:	e7da      	b.n	800bf34 <rshift+0x4c>
 800bf7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf82:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf86:	e7c3      	b.n	800bf10 <rshift+0x28>
 800bf88:	4623      	mov	r3, r4
 800bf8a:	e7e1      	b.n	800bf50 <rshift+0x68>

0800bf8c <__hexdig_fun>:
 800bf8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf90:	2b09      	cmp	r3, #9
 800bf92:	d802      	bhi.n	800bf9a <__hexdig_fun+0xe>
 800bf94:	3820      	subs	r0, #32
 800bf96:	b2c0      	uxtb	r0, r0
 800bf98:	4770      	bx	lr
 800bf9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bf9e:	2b05      	cmp	r3, #5
 800bfa0:	d801      	bhi.n	800bfa6 <__hexdig_fun+0x1a>
 800bfa2:	3847      	subs	r0, #71	; 0x47
 800bfa4:	e7f7      	b.n	800bf96 <__hexdig_fun+0xa>
 800bfa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	d801      	bhi.n	800bfb2 <__hexdig_fun+0x26>
 800bfae:	3827      	subs	r0, #39	; 0x27
 800bfb0:	e7f1      	b.n	800bf96 <__hexdig_fun+0xa>
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	4770      	bx	lr
	...

0800bfb8 <__gethex>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	4617      	mov	r7, r2
 800bfbe:	680a      	ldr	r2, [r1, #0]
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	f102 0b02 	add.w	fp, r2, #2
 800bfc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bfca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bfce:	4681      	mov	r9, r0
 800bfd0:	468a      	mov	sl, r1
 800bfd2:	9302      	str	r3, [sp, #8]
 800bfd4:	32fe      	adds	r2, #254	; 0xfe
 800bfd6:	eb02 030b 	add.w	r3, r2, fp
 800bfda:	46d8      	mov	r8, fp
 800bfdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	2830      	cmp	r0, #48	; 0x30
 800bfe4:	d0f7      	beq.n	800bfd6 <__gethex+0x1e>
 800bfe6:	f7ff ffd1 	bl	800bf8c <__hexdig_fun>
 800bfea:	4604      	mov	r4, r0
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d138      	bne.n	800c062 <__gethex+0xaa>
 800bff0:	49a7      	ldr	r1, [pc, #668]	; (800c290 <__gethex+0x2d8>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	4640      	mov	r0, r8
 800bff6:	f7ff fe38 	bl	800bc6a <strncmp>
 800bffa:	4606      	mov	r6, r0
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d169      	bne.n	800c0d4 <__gethex+0x11c>
 800c000:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c004:	465d      	mov	r5, fp
 800c006:	f7ff ffc1 	bl	800bf8c <__hexdig_fun>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d064      	beq.n	800c0d8 <__gethex+0x120>
 800c00e:	465a      	mov	r2, fp
 800c010:	7810      	ldrb	r0, [r2, #0]
 800c012:	2830      	cmp	r0, #48	; 0x30
 800c014:	4690      	mov	r8, r2
 800c016:	f102 0201 	add.w	r2, r2, #1
 800c01a:	d0f9      	beq.n	800c010 <__gethex+0x58>
 800c01c:	f7ff ffb6 	bl	800bf8c <__hexdig_fun>
 800c020:	2301      	movs	r3, #1
 800c022:	fab0 f480 	clz	r4, r0
 800c026:	0964      	lsrs	r4, r4, #5
 800c028:	465e      	mov	r6, fp
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	4642      	mov	r2, r8
 800c02e:	4615      	mov	r5, r2
 800c030:	3201      	adds	r2, #1
 800c032:	7828      	ldrb	r0, [r5, #0]
 800c034:	f7ff ffaa 	bl	800bf8c <__hexdig_fun>
 800c038:	2800      	cmp	r0, #0
 800c03a:	d1f8      	bne.n	800c02e <__gethex+0x76>
 800c03c:	4994      	ldr	r1, [pc, #592]	; (800c290 <__gethex+0x2d8>)
 800c03e:	2201      	movs	r2, #1
 800c040:	4628      	mov	r0, r5
 800c042:	f7ff fe12 	bl	800bc6a <strncmp>
 800c046:	b978      	cbnz	r0, 800c068 <__gethex+0xb0>
 800c048:	b946      	cbnz	r6, 800c05c <__gethex+0xa4>
 800c04a:	1c6e      	adds	r6, r5, #1
 800c04c:	4632      	mov	r2, r6
 800c04e:	4615      	mov	r5, r2
 800c050:	3201      	adds	r2, #1
 800c052:	7828      	ldrb	r0, [r5, #0]
 800c054:	f7ff ff9a 	bl	800bf8c <__hexdig_fun>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d1f8      	bne.n	800c04e <__gethex+0x96>
 800c05c:	1b73      	subs	r3, r6, r5
 800c05e:	009e      	lsls	r6, r3, #2
 800c060:	e004      	b.n	800c06c <__gethex+0xb4>
 800c062:	2400      	movs	r4, #0
 800c064:	4626      	mov	r6, r4
 800c066:	e7e1      	b.n	800c02c <__gethex+0x74>
 800c068:	2e00      	cmp	r6, #0
 800c06a:	d1f7      	bne.n	800c05c <__gethex+0xa4>
 800c06c:	782b      	ldrb	r3, [r5, #0]
 800c06e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c072:	2b50      	cmp	r3, #80	; 0x50
 800c074:	d13d      	bne.n	800c0f2 <__gethex+0x13a>
 800c076:	786b      	ldrb	r3, [r5, #1]
 800c078:	2b2b      	cmp	r3, #43	; 0x2b
 800c07a:	d02f      	beq.n	800c0dc <__gethex+0x124>
 800c07c:	2b2d      	cmp	r3, #45	; 0x2d
 800c07e:	d031      	beq.n	800c0e4 <__gethex+0x12c>
 800c080:	1c69      	adds	r1, r5, #1
 800c082:	f04f 0b00 	mov.w	fp, #0
 800c086:	7808      	ldrb	r0, [r1, #0]
 800c088:	f7ff ff80 	bl	800bf8c <__hexdig_fun>
 800c08c:	1e42      	subs	r2, r0, #1
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	2a18      	cmp	r2, #24
 800c092:	d82e      	bhi.n	800c0f2 <__gethex+0x13a>
 800c094:	f1a0 0210 	sub.w	r2, r0, #16
 800c098:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c09c:	f7ff ff76 	bl	800bf8c <__hexdig_fun>
 800c0a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c0a4:	fa5f fc8c 	uxtb.w	ip, ip
 800c0a8:	f1bc 0f18 	cmp.w	ip, #24
 800c0ac:	d91d      	bls.n	800c0ea <__gethex+0x132>
 800c0ae:	f1bb 0f00 	cmp.w	fp, #0
 800c0b2:	d000      	beq.n	800c0b6 <__gethex+0xfe>
 800c0b4:	4252      	negs	r2, r2
 800c0b6:	4416      	add	r6, r2
 800c0b8:	f8ca 1000 	str.w	r1, [sl]
 800c0bc:	b1dc      	cbz	r4, 800c0f6 <__gethex+0x13e>
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bf14      	ite	ne
 800c0c4:	f04f 0800 	movne.w	r8, #0
 800c0c8:	f04f 0806 	moveq.w	r8, #6
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	b005      	add	sp, #20
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	4645      	mov	r5, r8
 800c0d6:	4626      	mov	r6, r4
 800c0d8:	2401      	movs	r4, #1
 800c0da:	e7c7      	b.n	800c06c <__gethex+0xb4>
 800c0dc:	f04f 0b00 	mov.w	fp, #0
 800c0e0:	1ca9      	adds	r1, r5, #2
 800c0e2:	e7d0      	b.n	800c086 <__gethex+0xce>
 800c0e4:	f04f 0b01 	mov.w	fp, #1
 800c0e8:	e7fa      	b.n	800c0e0 <__gethex+0x128>
 800c0ea:	230a      	movs	r3, #10
 800c0ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c0f0:	e7d0      	b.n	800c094 <__gethex+0xdc>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	e7e0      	b.n	800c0b8 <__gethex+0x100>
 800c0f6:	eba5 0308 	sub.w	r3, r5, r8
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	2b07      	cmp	r3, #7
 800c100:	dc0a      	bgt.n	800c118 <__gethex+0x160>
 800c102:	4648      	mov	r0, r9
 800c104:	f000 fb06 	bl	800c714 <_Balloc>
 800c108:	4604      	mov	r4, r0
 800c10a:	b940      	cbnz	r0, 800c11e <__gethex+0x166>
 800c10c:	4b61      	ldr	r3, [pc, #388]	; (800c294 <__gethex+0x2dc>)
 800c10e:	4602      	mov	r2, r0
 800c110:	21e4      	movs	r1, #228	; 0xe4
 800c112:	4861      	ldr	r0, [pc, #388]	; (800c298 <__gethex+0x2e0>)
 800c114:	f001 f876 	bl	800d204 <__assert_func>
 800c118:	3101      	adds	r1, #1
 800c11a:	105b      	asrs	r3, r3, #1
 800c11c:	e7ef      	b.n	800c0fe <__gethex+0x146>
 800c11e:	f100 0a14 	add.w	sl, r0, #20
 800c122:	2300      	movs	r3, #0
 800c124:	495a      	ldr	r1, [pc, #360]	; (800c290 <__gethex+0x2d8>)
 800c126:	f8cd a004 	str.w	sl, [sp, #4]
 800c12a:	469b      	mov	fp, r3
 800c12c:	45a8      	cmp	r8, r5
 800c12e:	d342      	bcc.n	800c1b6 <__gethex+0x1fe>
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	f840 bb04 	str.w	fp, [r0], #4
 800c136:	eba0 000a 	sub.w	r0, r0, sl
 800c13a:	1080      	asrs	r0, r0, #2
 800c13c:	6120      	str	r0, [r4, #16]
 800c13e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fbd8 	bl	800c8f8 <__hi0bits>
 800c148:	683d      	ldr	r5, [r7, #0]
 800c14a:	eba8 0000 	sub.w	r0, r8, r0
 800c14e:	42a8      	cmp	r0, r5
 800c150:	dd59      	ble.n	800c206 <__gethex+0x24e>
 800c152:	eba0 0805 	sub.w	r8, r0, r5
 800c156:	4641      	mov	r1, r8
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 ff67 	bl	800d02c <__any_on>
 800c15e:	4683      	mov	fp, r0
 800c160:	b1b8      	cbz	r0, 800c192 <__gethex+0x1da>
 800c162:	f108 33ff 	add.w	r3, r8, #4294967295
 800c166:	1159      	asrs	r1, r3, #5
 800c168:	f003 021f 	and.w	r2, r3, #31
 800c16c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c170:	f04f 0b01 	mov.w	fp, #1
 800c174:	fa0b f202 	lsl.w	r2, fp, r2
 800c178:	420a      	tst	r2, r1
 800c17a:	d00a      	beq.n	800c192 <__gethex+0x1da>
 800c17c:	455b      	cmp	r3, fp
 800c17e:	dd06      	ble.n	800c18e <__gethex+0x1d6>
 800c180:	f1a8 0102 	sub.w	r1, r8, #2
 800c184:	4620      	mov	r0, r4
 800c186:	f000 ff51 	bl	800d02c <__any_on>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d138      	bne.n	800c200 <__gethex+0x248>
 800c18e:	f04f 0b02 	mov.w	fp, #2
 800c192:	4641      	mov	r1, r8
 800c194:	4620      	mov	r0, r4
 800c196:	f7ff fea7 	bl	800bee8 <rshift>
 800c19a:	4446      	add	r6, r8
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	42b3      	cmp	r3, r6
 800c1a0:	da41      	bge.n	800c226 <__gethex+0x26e>
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	f000 faf5 	bl	800c794 <_Bfree>
 800c1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c1b4:	e78a      	b.n	800c0cc <__gethex+0x114>
 800c1b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c1ba:	2a2e      	cmp	r2, #46	; 0x2e
 800c1bc:	d014      	beq.n	800c1e8 <__gethex+0x230>
 800c1be:	2b20      	cmp	r3, #32
 800c1c0:	d106      	bne.n	800c1d0 <__gethex+0x218>
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	f843 bb04 	str.w	fp, [r3], #4
 800c1c8:	f04f 0b00 	mov.w	fp, #0
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	465b      	mov	r3, fp
 800c1d0:	7828      	ldrb	r0, [r5, #0]
 800c1d2:	9303      	str	r3, [sp, #12]
 800c1d4:	f7ff feda 	bl	800bf8c <__hexdig_fun>
 800c1d8:	9b03      	ldr	r3, [sp, #12]
 800c1da:	f000 000f 	and.w	r0, r0, #15
 800c1de:	4098      	lsls	r0, r3
 800c1e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	e7a1      	b.n	800c12c <__gethex+0x174>
 800c1e8:	45a8      	cmp	r8, r5
 800c1ea:	d8e8      	bhi.n	800c1be <__gethex+0x206>
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	9303      	str	r3, [sp, #12]
 800c1f2:	f7ff fd3a 	bl	800bc6a <strncmp>
 800c1f6:	4926      	ldr	r1, [pc, #152]	; (800c290 <__gethex+0x2d8>)
 800c1f8:	9b03      	ldr	r3, [sp, #12]
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d1df      	bne.n	800c1be <__gethex+0x206>
 800c1fe:	e795      	b.n	800c12c <__gethex+0x174>
 800c200:	f04f 0b03 	mov.w	fp, #3
 800c204:	e7c5      	b.n	800c192 <__gethex+0x1da>
 800c206:	da0b      	bge.n	800c220 <__gethex+0x268>
 800c208:	eba5 0800 	sub.w	r8, r5, r0
 800c20c:	4621      	mov	r1, r4
 800c20e:	4642      	mov	r2, r8
 800c210:	4648      	mov	r0, r9
 800c212:	f000 fcd9 	bl	800cbc8 <__lshift>
 800c216:	eba6 0608 	sub.w	r6, r6, r8
 800c21a:	4604      	mov	r4, r0
 800c21c:	f100 0a14 	add.w	sl, r0, #20
 800c220:	f04f 0b00 	mov.w	fp, #0
 800c224:	e7ba      	b.n	800c19c <__gethex+0x1e4>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	42b3      	cmp	r3, r6
 800c22a:	dd73      	ble.n	800c314 <__gethex+0x35c>
 800c22c:	1b9e      	subs	r6, r3, r6
 800c22e:	42b5      	cmp	r5, r6
 800c230:	dc34      	bgt.n	800c29c <__gethex+0x2e4>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d023      	beq.n	800c280 <__gethex+0x2c8>
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d025      	beq.n	800c288 <__gethex+0x2d0>
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d115      	bne.n	800c26c <__gethex+0x2b4>
 800c240:	42b5      	cmp	r5, r6
 800c242:	d113      	bne.n	800c26c <__gethex+0x2b4>
 800c244:	2d01      	cmp	r5, #1
 800c246:	d10b      	bne.n	800c260 <__gethex+0x2a8>
 800c248:	9a02      	ldr	r2, [sp, #8]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	2301      	movs	r3, #1
 800c250:	6123      	str	r3, [r4, #16]
 800c252:	f8ca 3000 	str.w	r3, [sl]
 800c256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c258:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c25c:	601c      	str	r4, [r3, #0]
 800c25e:	e735      	b.n	800c0cc <__gethex+0x114>
 800c260:	1e69      	subs	r1, r5, #1
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fee2 	bl	800d02c <__any_on>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d1ed      	bne.n	800c248 <__gethex+0x290>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4648      	mov	r0, r9
 800c270:	f000 fa90 	bl	800c794 <_Bfree>
 800c274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c276:	2300      	movs	r3, #0
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c27e:	e725      	b.n	800c0cc <__gethex+0x114>
 800c280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f2      	bne.n	800c26c <__gethex+0x2b4>
 800c286:	e7df      	b.n	800c248 <__gethex+0x290>
 800c288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1dc      	bne.n	800c248 <__gethex+0x290>
 800c28e:	e7ed      	b.n	800c26c <__gethex+0x2b4>
 800c290:	0800efe8 	.word	0x0800efe8
 800c294:	0800f050 	.word	0x0800f050
 800c298:	0800f061 	.word	0x0800f061
 800c29c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c2a0:	f1bb 0f00 	cmp.w	fp, #0
 800c2a4:	d133      	bne.n	800c30e <__gethex+0x356>
 800c2a6:	f1b8 0f00 	cmp.w	r8, #0
 800c2aa:	d004      	beq.n	800c2b6 <__gethex+0x2fe>
 800c2ac:	4641      	mov	r1, r8
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 febc 	bl	800d02c <__any_on>
 800c2b4:	4683      	mov	fp, r0
 800c2b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c2c0:	f008 081f 	and.w	r8, r8, #31
 800c2c4:	fa03 f308 	lsl.w	r3, r3, r8
 800c2c8:	4213      	tst	r3, r2
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	bf18      	it	ne
 800c2d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800c2d4:	1bad      	subs	r5, r5, r6
 800c2d6:	f7ff fe07 	bl	800bee8 <rshift>
 800c2da:	687e      	ldr	r6, [r7, #4]
 800c2dc:	f04f 0802 	mov.w	r8, #2
 800c2e0:	f1bb 0f00 	cmp.w	fp, #0
 800c2e4:	d04a      	beq.n	800c37c <__gethex+0x3c4>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d016      	beq.n	800c31a <__gethex+0x362>
 800c2ec:	2b03      	cmp	r3, #3
 800c2ee:	d018      	beq.n	800c322 <__gethex+0x36a>
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d109      	bne.n	800c308 <__gethex+0x350>
 800c2f4:	f01b 0f02 	tst.w	fp, #2
 800c2f8:	d006      	beq.n	800c308 <__gethex+0x350>
 800c2fa:	f8da 3000 	ldr.w	r3, [sl]
 800c2fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800c302:	f01b 0f01 	tst.w	fp, #1
 800c306:	d10f      	bne.n	800c328 <__gethex+0x370>
 800c308:	f048 0810 	orr.w	r8, r8, #16
 800c30c:	e036      	b.n	800c37c <__gethex+0x3c4>
 800c30e:	f04f 0b01 	mov.w	fp, #1
 800c312:	e7d0      	b.n	800c2b6 <__gethex+0x2fe>
 800c314:	f04f 0801 	mov.w	r8, #1
 800c318:	e7e2      	b.n	800c2e0 <__gethex+0x328>
 800c31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31c:	f1c3 0301 	rsb	r3, r3, #1
 800c320:	930f      	str	r3, [sp, #60]	; 0x3c
 800c322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c324:	2b00      	cmp	r3, #0
 800c326:	d0ef      	beq.n	800c308 <__gethex+0x350>
 800c328:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c32c:	f104 0214 	add.w	r2, r4, #20
 800c330:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c33a:	2300      	movs	r3, #0
 800c33c:	4694      	mov	ip, r2
 800c33e:	f852 1b04 	ldr.w	r1, [r2], #4
 800c342:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c346:	d01e      	beq.n	800c386 <__gethex+0x3ce>
 800c348:	3101      	adds	r1, #1
 800c34a:	f8cc 1000 	str.w	r1, [ip]
 800c34e:	f1b8 0f02 	cmp.w	r8, #2
 800c352:	f104 0214 	add.w	r2, r4, #20
 800c356:	d13d      	bne.n	800c3d4 <__gethex+0x41c>
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	42ab      	cmp	r3, r5
 800c35e:	d10b      	bne.n	800c378 <__gethex+0x3c0>
 800c360:	1169      	asrs	r1, r5, #5
 800c362:	2301      	movs	r3, #1
 800c364:	f005 051f 	and.w	r5, r5, #31
 800c368:	fa03 f505 	lsl.w	r5, r3, r5
 800c36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c370:	421d      	tst	r5, r3
 800c372:	bf18      	it	ne
 800c374:	f04f 0801 	movne.w	r8, #1
 800c378:	f048 0820 	orr.w	r8, r8, #32
 800c37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c37e:	601c      	str	r4, [r3, #0]
 800c380:	9b02      	ldr	r3, [sp, #8]
 800c382:	601e      	str	r6, [r3, #0]
 800c384:	e6a2      	b.n	800c0cc <__gethex+0x114>
 800c386:	4290      	cmp	r0, r2
 800c388:	f842 3c04 	str.w	r3, [r2, #-4]
 800c38c:	d8d6      	bhi.n	800c33c <__gethex+0x384>
 800c38e:	68a2      	ldr	r2, [r4, #8]
 800c390:	4593      	cmp	fp, r2
 800c392:	db17      	blt.n	800c3c4 <__gethex+0x40c>
 800c394:	6861      	ldr	r1, [r4, #4]
 800c396:	4648      	mov	r0, r9
 800c398:	3101      	adds	r1, #1
 800c39a:	f000 f9bb 	bl	800c714 <_Balloc>
 800c39e:	4682      	mov	sl, r0
 800c3a0:	b918      	cbnz	r0, 800c3aa <__gethex+0x3f2>
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	; (800c410 <__gethex+0x458>)
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	2184      	movs	r1, #132	; 0x84
 800c3a8:	e6b3      	b.n	800c112 <__gethex+0x15a>
 800c3aa:	6922      	ldr	r2, [r4, #16]
 800c3ac:	3202      	adds	r2, #2
 800c3ae:	f104 010c 	add.w	r1, r4, #12
 800c3b2:	0092      	lsls	r2, r2, #2
 800c3b4:	300c      	adds	r0, #12
 800c3b6:	f7ff fd34 	bl	800be22 <memcpy>
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4648      	mov	r0, r9
 800c3be:	f000 f9e9 	bl	800c794 <_Bfree>
 800c3c2:	4654      	mov	r4, sl
 800c3c4:	6922      	ldr	r2, [r4, #16]
 800c3c6:	1c51      	adds	r1, r2, #1
 800c3c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c3cc:	6121      	str	r1, [r4, #16]
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	6151      	str	r1, [r2, #20]
 800c3d2:	e7bc      	b.n	800c34e <__gethex+0x396>
 800c3d4:	6921      	ldr	r1, [r4, #16]
 800c3d6:	4559      	cmp	r1, fp
 800c3d8:	dd0b      	ble.n	800c3f2 <__gethex+0x43a>
 800c3da:	2101      	movs	r1, #1
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7ff fd83 	bl	800bee8 <rshift>
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	3601      	adds	r6, #1
 800c3e6:	42b3      	cmp	r3, r6
 800c3e8:	f6ff aedb 	blt.w	800c1a2 <__gethex+0x1ea>
 800c3ec:	f04f 0801 	mov.w	r8, #1
 800c3f0:	e7c2      	b.n	800c378 <__gethex+0x3c0>
 800c3f2:	f015 051f 	ands.w	r5, r5, #31
 800c3f6:	d0f9      	beq.n	800c3ec <__gethex+0x434>
 800c3f8:	9b01      	ldr	r3, [sp, #4]
 800c3fa:	441a      	add	r2, r3
 800c3fc:	f1c5 0520 	rsb	r5, r5, #32
 800c400:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c404:	f000 fa78 	bl	800c8f8 <__hi0bits>
 800c408:	42a8      	cmp	r0, r5
 800c40a:	dbe6      	blt.n	800c3da <__gethex+0x422>
 800c40c:	e7ee      	b.n	800c3ec <__gethex+0x434>
 800c40e:	bf00      	nop
 800c410:	0800f050 	.word	0x0800f050

0800c414 <L_shift>:
 800c414:	f1c2 0208 	rsb	r2, r2, #8
 800c418:	0092      	lsls	r2, r2, #2
 800c41a:	b570      	push	{r4, r5, r6, lr}
 800c41c:	f1c2 0620 	rsb	r6, r2, #32
 800c420:	6843      	ldr	r3, [r0, #4]
 800c422:	6804      	ldr	r4, [r0, #0]
 800c424:	fa03 f506 	lsl.w	r5, r3, r6
 800c428:	432c      	orrs	r4, r5
 800c42a:	40d3      	lsrs	r3, r2
 800c42c:	6004      	str	r4, [r0, #0]
 800c42e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c432:	4288      	cmp	r0, r1
 800c434:	d3f4      	bcc.n	800c420 <L_shift+0xc>
 800c436:	bd70      	pop	{r4, r5, r6, pc}

0800c438 <__match>:
 800c438:	b530      	push	{r4, r5, lr}
 800c43a:	6803      	ldr	r3, [r0, #0]
 800c43c:	3301      	adds	r3, #1
 800c43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c442:	b914      	cbnz	r4, 800c44a <__match+0x12>
 800c444:	6003      	str	r3, [r0, #0]
 800c446:	2001      	movs	r0, #1
 800c448:	bd30      	pop	{r4, r5, pc}
 800c44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c44e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c452:	2d19      	cmp	r5, #25
 800c454:	bf98      	it	ls
 800c456:	3220      	addls	r2, #32
 800c458:	42a2      	cmp	r2, r4
 800c45a:	d0f0      	beq.n	800c43e <__match+0x6>
 800c45c:	2000      	movs	r0, #0
 800c45e:	e7f3      	b.n	800c448 <__match+0x10>

0800c460 <__hexnan>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	680b      	ldr	r3, [r1, #0]
 800c466:	6801      	ldr	r1, [r0, #0]
 800c468:	115e      	asrs	r6, r3, #5
 800c46a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c46e:	f013 031f 	ands.w	r3, r3, #31
 800c472:	b087      	sub	sp, #28
 800c474:	bf18      	it	ne
 800c476:	3604      	addne	r6, #4
 800c478:	2500      	movs	r5, #0
 800c47a:	1f37      	subs	r7, r6, #4
 800c47c:	4682      	mov	sl, r0
 800c47e:	4690      	mov	r8, r2
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	f846 5c04 	str.w	r5, [r6, #-4]
 800c486:	46b9      	mov	r9, r7
 800c488:	463c      	mov	r4, r7
 800c48a:	9502      	str	r5, [sp, #8]
 800c48c:	46ab      	mov	fp, r5
 800c48e:	784a      	ldrb	r2, [r1, #1]
 800c490:	1c4b      	adds	r3, r1, #1
 800c492:	9303      	str	r3, [sp, #12]
 800c494:	b342      	cbz	r2, 800c4e8 <__hexnan+0x88>
 800c496:	4610      	mov	r0, r2
 800c498:	9105      	str	r1, [sp, #20]
 800c49a:	9204      	str	r2, [sp, #16]
 800c49c:	f7ff fd76 	bl	800bf8c <__hexdig_fun>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d14f      	bne.n	800c544 <__hexnan+0xe4>
 800c4a4:	9a04      	ldr	r2, [sp, #16]
 800c4a6:	9905      	ldr	r1, [sp, #20]
 800c4a8:	2a20      	cmp	r2, #32
 800c4aa:	d818      	bhi.n	800c4de <__hexnan+0x7e>
 800c4ac:	9b02      	ldr	r3, [sp, #8]
 800c4ae:	459b      	cmp	fp, r3
 800c4b0:	dd13      	ble.n	800c4da <__hexnan+0x7a>
 800c4b2:	454c      	cmp	r4, r9
 800c4b4:	d206      	bcs.n	800c4c4 <__hexnan+0x64>
 800c4b6:	2d07      	cmp	r5, #7
 800c4b8:	dc04      	bgt.n	800c4c4 <__hexnan+0x64>
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	4649      	mov	r1, r9
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f7ff ffa8 	bl	800c414 <L_shift>
 800c4c4:	4544      	cmp	r4, r8
 800c4c6:	d950      	bls.n	800c56a <__hexnan+0x10a>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f1a4 0904 	sub.w	r9, r4, #4
 800c4ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4d2:	f8cd b008 	str.w	fp, [sp, #8]
 800c4d6:	464c      	mov	r4, r9
 800c4d8:	461d      	mov	r5, r3
 800c4da:	9903      	ldr	r1, [sp, #12]
 800c4dc:	e7d7      	b.n	800c48e <__hexnan+0x2e>
 800c4de:	2a29      	cmp	r2, #41	; 0x29
 800c4e0:	d155      	bne.n	800c58e <__hexnan+0x12e>
 800c4e2:	3102      	adds	r1, #2
 800c4e4:	f8ca 1000 	str.w	r1, [sl]
 800c4e8:	f1bb 0f00 	cmp.w	fp, #0
 800c4ec:	d04f      	beq.n	800c58e <__hexnan+0x12e>
 800c4ee:	454c      	cmp	r4, r9
 800c4f0:	d206      	bcs.n	800c500 <__hexnan+0xa0>
 800c4f2:	2d07      	cmp	r5, #7
 800c4f4:	dc04      	bgt.n	800c500 <__hexnan+0xa0>
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f7ff ff8a 	bl	800c414 <L_shift>
 800c500:	4544      	cmp	r4, r8
 800c502:	d934      	bls.n	800c56e <__hexnan+0x10e>
 800c504:	f1a8 0204 	sub.w	r2, r8, #4
 800c508:	4623      	mov	r3, r4
 800c50a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c50e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c512:	429f      	cmp	r7, r3
 800c514:	d2f9      	bcs.n	800c50a <__hexnan+0xaa>
 800c516:	1b3b      	subs	r3, r7, r4
 800c518:	f023 0303 	bic.w	r3, r3, #3
 800c51c:	3304      	adds	r3, #4
 800c51e:	3e03      	subs	r6, #3
 800c520:	3401      	adds	r4, #1
 800c522:	42a6      	cmp	r6, r4
 800c524:	bf38      	it	cc
 800c526:	2304      	movcc	r3, #4
 800c528:	4443      	add	r3, r8
 800c52a:	2200      	movs	r2, #0
 800c52c:	f843 2b04 	str.w	r2, [r3], #4
 800c530:	429f      	cmp	r7, r3
 800c532:	d2fb      	bcs.n	800c52c <__hexnan+0xcc>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	b91b      	cbnz	r3, 800c540 <__hexnan+0xe0>
 800c538:	4547      	cmp	r7, r8
 800c53a:	d126      	bne.n	800c58a <__hexnan+0x12a>
 800c53c:	2301      	movs	r3, #1
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	2005      	movs	r0, #5
 800c542:	e025      	b.n	800c590 <__hexnan+0x130>
 800c544:	3501      	adds	r5, #1
 800c546:	2d08      	cmp	r5, #8
 800c548:	f10b 0b01 	add.w	fp, fp, #1
 800c54c:	dd06      	ble.n	800c55c <__hexnan+0xfc>
 800c54e:	4544      	cmp	r4, r8
 800c550:	d9c3      	bls.n	800c4da <__hexnan+0x7a>
 800c552:	2300      	movs	r3, #0
 800c554:	f844 3c04 	str.w	r3, [r4, #-4]
 800c558:	2501      	movs	r5, #1
 800c55a:	3c04      	subs	r4, #4
 800c55c:	6822      	ldr	r2, [r4, #0]
 800c55e:	f000 000f 	and.w	r0, r0, #15
 800c562:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c566:	6020      	str	r0, [r4, #0]
 800c568:	e7b7      	b.n	800c4da <__hexnan+0x7a>
 800c56a:	2508      	movs	r5, #8
 800c56c:	e7b5      	b.n	800c4da <__hexnan+0x7a>
 800c56e:	9b01      	ldr	r3, [sp, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0df      	beq.n	800c534 <__hexnan+0xd4>
 800c574:	f1c3 0320 	rsb	r3, r3, #32
 800c578:	f04f 32ff 	mov.w	r2, #4294967295
 800c57c:	40da      	lsrs	r2, r3
 800c57e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c582:	4013      	ands	r3, r2
 800c584:	f846 3c04 	str.w	r3, [r6, #-4]
 800c588:	e7d4      	b.n	800c534 <__hexnan+0xd4>
 800c58a:	3f04      	subs	r7, #4
 800c58c:	e7d2      	b.n	800c534 <__hexnan+0xd4>
 800c58e:	2004      	movs	r0, #4
 800c590:	b007      	add	sp, #28
 800c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c598 <sbrk_aligned>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	4e0e      	ldr	r6, [pc, #56]	; (800c5d4 <sbrk_aligned+0x3c>)
 800c59c:	460c      	mov	r4, r1
 800c59e:	6831      	ldr	r1, [r6, #0]
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	b911      	cbnz	r1, 800c5aa <sbrk_aligned+0x12>
 800c5a4:	f000 fe1e 	bl	800d1e4 <_sbrk_r>
 800c5a8:	6030      	str	r0, [r6, #0]
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f000 fe19 	bl	800d1e4 <_sbrk_r>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d00a      	beq.n	800c5cc <sbrk_aligned+0x34>
 800c5b6:	1cc4      	adds	r4, r0, #3
 800c5b8:	f024 0403 	bic.w	r4, r4, #3
 800c5bc:	42a0      	cmp	r0, r4
 800c5be:	d007      	beq.n	800c5d0 <sbrk_aligned+0x38>
 800c5c0:	1a21      	subs	r1, r4, r0
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 fe0e 	bl	800d1e4 <_sbrk_r>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d101      	bne.n	800c5d0 <sbrk_aligned+0x38>
 800c5cc:	f04f 34ff 	mov.w	r4, #4294967295
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	200048a4 	.word	0x200048a4

0800c5d8 <_malloc_r>:
 800c5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	1ccd      	adds	r5, r1, #3
 800c5de:	f025 0503 	bic.w	r5, r5, #3
 800c5e2:	3508      	adds	r5, #8
 800c5e4:	2d0c      	cmp	r5, #12
 800c5e6:	bf38      	it	cc
 800c5e8:	250c      	movcc	r5, #12
 800c5ea:	2d00      	cmp	r5, #0
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	db01      	blt.n	800c5f4 <_malloc_r+0x1c>
 800c5f0:	42a9      	cmp	r1, r5
 800c5f2:	d905      	bls.n	800c600 <_malloc_r+0x28>
 800c5f4:	230c      	movs	r3, #12
 800c5f6:	603b      	str	r3, [r7, #0]
 800c5f8:	2600      	movs	r6, #0
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c600:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6d4 <_malloc_r+0xfc>
 800c604:	f000 f87a 	bl	800c6fc <__malloc_lock>
 800c608:	f8d8 3000 	ldr.w	r3, [r8]
 800c60c:	461c      	mov	r4, r3
 800c60e:	bb5c      	cbnz	r4, 800c668 <_malloc_r+0x90>
 800c610:	4629      	mov	r1, r5
 800c612:	4638      	mov	r0, r7
 800c614:	f7ff ffc0 	bl	800c598 <sbrk_aligned>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	4604      	mov	r4, r0
 800c61c:	d155      	bne.n	800c6ca <_malloc_r+0xf2>
 800c61e:	f8d8 4000 	ldr.w	r4, [r8]
 800c622:	4626      	mov	r6, r4
 800c624:	2e00      	cmp	r6, #0
 800c626:	d145      	bne.n	800c6b4 <_malloc_r+0xdc>
 800c628:	2c00      	cmp	r4, #0
 800c62a:	d048      	beq.n	800c6be <_malloc_r+0xe6>
 800c62c:	6823      	ldr	r3, [r4, #0]
 800c62e:	4631      	mov	r1, r6
 800c630:	4638      	mov	r0, r7
 800c632:	eb04 0903 	add.w	r9, r4, r3
 800c636:	f000 fdd5 	bl	800d1e4 <_sbrk_r>
 800c63a:	4581      	cmp	r9, r0
 800c63c:	d13f      	bne.n	800c6be <_malloc_r+0xe6>
 800c63e:	6821      	ldr	r1, [r4, #0]
 800c640:	1a6d      	subs	r5, r5, r1
 800c642:	4629      	mov	r1, r5
 800c644:	4638      	mov	r0, r7
 800c646:	f7ff ffa7 	bl	800c598 <sbrk_aligned>
 800c64a:	3001      	adds	r0, #1
 800c64c:	d037      	beq.n	800c6be <_malloc_r+0xe6>
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	442b      	add	r3, r5
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	f8d8 3000 	ldr.w	r3, [r8]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d038      	beq.n	800c6ce <_malloc_r+0xf6>
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	42a2      	cmp	r2, r4
 800c660:	d12b      	bne.n	800c6ba <_malloc_r+0xe2>
 800c662:	2200      	movs	r2, #0
 800c664:	605a      	str	r2, [r3, #4]
 800c666:	e00f      	b.n	800c688 <_malloc_r+0xb0>
 800c668:	6822      	ldr	r2, [r4, #0]
 800c66a:	1b52      	subs	r2, r2, r5
 800c66c:	d41f      	bmi.n	800c6ae <_malloc_r+0xd6>
 800c66e:	2a0b      	cmp	r2, #11
 800c670:	d917      	bls.n	800c6a2 <_malloc_r+0xca>
 800c672:	1961      	adds	r1, r4, r5
 800c674:	42a3      	cmp	r3, r4
 800c676:	6025      	str	r5, [r4, #0]
 800c678:	bf18      	it	ne
 800c67a:	6059      	strne	r1, [r3, #4]
 800c67c:	6863      	ldr	r3, [r4, #4]
 800c67e:	bf08      	it	eq
 800c680:	f8c8 1000 	streq.w	r1, [r8]
 800c684:	5162      	str	r2, [r4, r5]
 800c686:	604b      	str	r3, [r1, #4]
 800c688:	4638      	mov	r0, r7
 800c68a:	f104 060b 	add.w	r6, r4, #11
 800c68e:	f000 f83b 	bl	800c708 <__malloc_unlock>
 800c692:	f026 0607 	bic.w	r6, r6, #7
 800c696:	1d23      	adds	r3, r4, #4
 800c698:	1af2      	subs	r2, r6, r3
 800c69a:	d0ae      	beq.n	800c5fa <_malloc_r+0x22>
 800c69c:	1b9b      	subs	r3, r3, r6
 800c69e:	50a3      	str	r3, [r4, r2]
 800c6a0:	e7ab      	b.n	800c5fa <_malloc_r+0x22>
 800c6a2:	42a3      	cmp	r3, r4
 800c6a4:	6862      	ldr	r2, [r4, #4]
 800c6a6:	d1dd      	bne.n	800c664 <_malloc_r+0x8c>
 800c6a8:	f8c8 2000 	str.w	r2, [r8]
 800c6ac:	e7ec      	b.n	800c688 <_malloc_r+0xb0>
 800c6ae:	4623      	mov	r3, r4
 800c6b0:	6864      	ldr	r4, [r4, #4]
 800c6b2:	e7ac      	b.n	800c60e <_malloc_r+0x36>
 800c6b4:	4634      	mov	r4, r6
 800c6b6:	6876      	ldr	r6, [r6, #4]
 800c6b8:	e7b4      	b.n	800c624 <_malloc_r+0x4c>
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	e7cc      	b.n	800c658 <_malloc_r+0x80>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	603b      	str	r3, [r7, #0]
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	f000 f820 	bl	800c708 <__malloc_unlock>
 800c6c8:	e797      	b.n	800c5fa <_malloc_r+0x22>
 800c6ca:	6025      	str	r5, [r4, #0]
 800c6cc:	e7dc      	b.n	800c688 <_malloc_r+0xb0>
 800c6ce:	605b      	str	r3, [r3, #4]
 800c6d0:	deff      	udf	#255	; 0xff
 800c6d2:	bf00      	nop
 800c6d4:	200048a0 	.word	0x200048a0

0800c6d8 <__ascii_mbtowc>:
 800c6d8:	b082      	sub	sp, #8
 800c6da:	b901      	cbnz	r1, 800c6de <__ascii_mbtowc+0x6>
 800c6dc:	a901      	add	r1, sp, #4
 800c6de:	b142      	cbz	r2, 800c6f2 <__ascii_mbtowc+0x1a>
 800c6e0:	b14b      	cbz	r3, 800c6f6 <__ascii_mbtowc+0x1e>
 800c6e2:	7813      	ldrb	r3, [r2, #0]
 800c6e4:	600b      	str	r3, [r1, #0]
 800c6e6:	7812      	ldrb	r2, [r2, #0]
 800c6e8:	1e10      	subs	r0, r2, #0
 800c6ea:	bf18      	it	ne
 800c6ec:	2001      	movne	r0, #1
 800c6ee:	b002      	add	sp, #8
 800c6f0:	4770      	bx	lr
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	e7fb      	b.n	800c6ee <__ascii_mbtowc+0x16>
 800c6f6:	f06f 0001 	mvn.w	r0, #1
 800c6fa:	e7f8      	b.n	800c6ee <__ascii_mbtowc+0x16>

0800c6fc <__malloc_lock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__malloc_lock+0x8>)
 800c6fe:	f7ff bb8e 	b.w	800be1e <__retarget_lock_acquire_recursive>
 800c702:	bf00      	nop
 800c704:	2000489c 	.word	0x2000489c

0800c708 <__malloc_unlock>:
 800c708:	4801      	ldr	r0, [pc, #4]	; (800c710 <__malloc_unlock+0x8>)
 800c70a:	f7ff bb89 	b.w	800be20 <__retarget_lock_release_recursive>
 800c70e:	bf00      	nop
 800c710:	2000489c 	.word	0x2000489c

0800c714 <_Balloc>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	69c6      	ldr	r6, [r0, #28]
 800c718:	4604      	mov	r4, r0
 800c71a:	460d      	mov	r5, r1
 800c71c:	b976      	cbnz	r6, 800c73c <_Balloc+0x28>
 800c71e:	2010      	movs	r0, #16
 800c720:	f000 fda4 	bl	800d26c <malloc>
 800c724:	4602      	mov	r2, r0
 800c726:	61e0      	str	r0, [r4, #28]
 800c728:	b920      	cbnz	r0, 800c734 <_Balloc+0x20>
 800c72a:	4b18      	ldr	r3, [pc, #96]	; (800c78c <_Balloc+0x78>)
 800c72c:	4818      	ldr	r0, [pc, #96]	; (800c790 <_Balloc+0x7c>)
 800c72e:	216b      	movs	r1, #107	; 0x6b
 800c730:	f000 fd68 	bl	800d204 <__assert_func>
 800c734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c738:	6006      	str	r6, [r0, #0]
 800c73a:	60c6      	str	r6, [r0, #12]
 800c73c:	69e6      	ldr	r6, [r4, #28]
 800c73e:	68f3      	ldr	r3, [r6, #12]
 800c740:	b183      	cbz	r3, 800c764 <_Balloc+0x50>
 800c742:	69e3      	ldr	r3, [r4, #28]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c74a:	b9b8      	cbnz	r0, 800c77c <_Balloc+0x68>
 800c74c:	2101      	movs	r1, #1
 800c74e:	fa01 f605 	lsl.w	r6, r1, r5
 800c752:	1d72      	adds	r2, r6, #5
 800c754:	0092      	lsls	r2, r2, #2
 800c756:	4620      	mov	r0, r4
 800c758:	f000 fd72 	bl	800d240 <_calloc_r>
 800c75c:	b160      	cbz	r0, 800c778 <_Balloc+0x64>
 800c75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c762:	e00e      	b.n	800c782 <_Balloc+0x6e>
 800c764:	2221      	movs	r2, #33	; 0x21
 800c766:	2104      	movs	r1, #4
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fd69 	bl	800d240 <_calloc_r>
 800c76e:	69e3      	ldr	r3, [r4, #28]
 800c770:	60f0      	str	r0, [r6, #12]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1e4      	bne.n	800c742 <_Balloc+0x2e>
 800c778:	2000      	movs	r0, #0
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	6802      	ldr	r2, [r0, #0]
 800c77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c782:	2300      	movs	r3, #0
 800c784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c788:	e7f7      	b.n	800c77a <_Balloc+0x66>
 800c78a:	bf00      	nop
 800c78c:	0800f0c1 	.word	0x0800f0c1
 800c790:	0800f0d8 	.word	0x0800f0d8

0800c794 <_Bfree>:
 800c794:	b570      	push	{r4, r5, r6, lr}
 800c796:	69c6      	ldr	r6, [r0, #28]
 800c798:	4605      	mov	r5, r0
 800c79a:	460c      	mov	r4, r1
 800c79c:	b976      	cbnz	r6, 800c7bc <_Bfree+0x28>
 800c79e:	2010      	movs	r0, #16
 800c7a0:	f000 fd64 	bl	800d26c <malloc>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	61e8      	str	r0, [r5, #28]
 800c7a8:	b920      	cbnz	r0, 800c7b4 <_Bfree+0x20>
 800c7aa:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <_Bfree+0x3c>)
 800c7ac:	4809      	ldr	r0, [pc, #36]	; (800c7d4 <_Bfree+0x40>)
 800c7ae:	218f      	movs	r1, #143	; 0x8f
 800c7b0:	f000 fd28 	bl	800d204 <__assert_func>
 800c7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7b8:	6006      	str	r6, [r0, #0]
 800c7ba:	60c6      	str	r6, [r0, #12]
 800c7bc:	b13c      	cbz	r4, 800c7ce <_Bfree+0x3a>
 800c7be:	69eb      	ldr	r3, [r5, #28]
 800c7c0:	6862      	ldr	r2, [r4, #4]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7c8:	6021      	str	r1, [r4, #0]
 800c7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}
 800c7d0:	0800f0c1 	.word	0x0800f0c1
 800c7d4:	0800f0d8 	.word	0x0800f0d8

0800c7d8 <__multadd>:
 800c7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7dc:	690d      	ldr	r5, [r1, #16]
 800c7de:	4607      	mov	r7, r0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	461e      	mov	r6, r3
 800c7e4:	f101 0c14 	add.w	ip, r1, #20
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c7ee:	b299      	uxth	r1, r3
 800c7f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c7f4:	0c1e      	lsrs	r6, r3, #16
 800c7f6:	0c0b      	lsrs	r3, r1, #16
 800c7f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c7fc:	b289      	uxth	r1, r1
 800c7fe:	3001      	adds	r0, #1
 800c800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c804:	4285      	cmp	r5, r0
 800c806:	f84c 1b04 	str.w	r1, [ip], #4
 800c80a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c80e:	dcec      	bgt.n	800c7ea <__multadd+0x12>
 800c810:	b30e      	cbz	r6, 800c856 <__multadd+0x7e>
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	42ab      	cmp	r3, r5
 800c816:	dc19      	bgt.n	800c84c <__multadd+0x74>
 800c818:	6861      	ldr	r1, [r4, #4]
 800c81a:	4638      	mov	r0, r7
 800c81c:	3101      	adds	r1, #1
 800c81e:	f7ff ff79 	bl	800c714 <_Balloc>
 800c822:	4680      	mov	r8, r0
 800c824:	b928      	cbnz	r0, 800c832 <__multadd+0x5a>
 800c826:	4602      	mov	r2, r0
 800c828:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <__multadd+0x84>)
 800c82a:	480d      	ldr	r0, [pc, #52]	; (800c860 <__multadd+0x88>)
 800c82c:	21ba      	movs	r1, #186	; 0xba
 800c82e:	f000 fce9 	bl	800d204 <__assert_func>
 800c832:	6922      	ldr	r2, [r4, #16]
 800c834:	3202      	adds	r2, #2
 800c836:	f104 010c 	add.w	r1, r4, #12
 800c83a:	0092      	lsls	r2, r2, #2
 800c83c:	300c      	adds	r0, #12
 800c83e:	f7ff faf0 	bl	800be22 <memcpy>
 800c842:	4621      	mov	r1, r4
 800c844:	4638      	mov	r0, r7
 800c846:	f7ff ffa5 	bl	800c794 <_Bfree>
 800c84a:	4644      	mov	r4, r8
 800c84c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c850:	3501      	adds	r5, #1
 800c852:	615e      	str	r6, [r3, #20]
 800c854:	6125      	str	r5, [r4, #16]
 800c856:	4620      	mov	r0, r4
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85c:	0800f050 	.word	0x0800f050
 800c860:	0800f0d8 	.word	0x0800f0d8

0800c864 <__s2b>:
 800c864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c868:	460c      	mov	r4, r1
 800c86a:	4615      	mov	r5, r2
 800c86c:	461f      	mov	r7, r3
 800c86e:	2209      	movs	r2, #9
 800c870:	3308      	adds	r3, #8
 800c872:	4606      	mov	r6, r0
 800c874:	fb93 f3f2 	sdiv	r3, r3, r2
 800c878:	2100      	movs	r1, #0
 800c87a:	2201      	movs	r2, #1
 800c87c:	429a      	cmp	r2, r3
 800c87e:	db09      	blt.n	800c894 <__s2b+0x30>
 800c880:	4630      	mov	r0, r6
 800c882:	f7ff ff47 	bl	800c714 <_Balloc>
 800c886:	b940      	cbnz	r0, 800c89a <__s2b+0x36>
 800c888:	4602      	mov	r2, r0
 800c88a:	4b19      	ldr	r3, [pc, #100]	; (800c8f0 <__s2b+0x8c>)
 800c88c:	4819      	ldr	r0, [pc, #100]	; (800c8f4 <__s2b+0x90>)
 800c88e:	21d3      	movs	r1, #211	; 0xd3
 800c890:	f000 fcb8 	bl	800d204 <__assert_func>
 800c894:	0052      	lsls	r2, r2, #1
 800c896:	3101      	adds	r1, #1
 800c898:	e7f0      	b.n	800c87c <__s2b+0x18>
 800c89a:	9b08      	ldr	r3, [sp, #32]
 800c89c:	6143      	str	r3, [r0, #20]
 800c89e:	2d09      	cmp	r5, #9
 800c8a0:	f04f 0301 	mov.w	r3, #1
 800c8a4:	6103      	str	r3, [r0, #16]
 800c8a6:	dd16      	ble.n	800c8d6 <__s2b+0x72>
 800c8a8:	f104 0909 	add.w	r9, r4, #9
 800c8ac:	46c8      	mov	r8, r9
 800c8ae:	442c      	add	r4, r5
 800c8b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	3b30      	subs	r3, #48	; 0x30
 800c8b8:	220a      	movs	r2, #10
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f7ff ff8c 	bl	800c7d8 <__multadd>
 800c8c0:	45a0      	cmp	r8, r4
 800c8c2:	d1f5      	bne.n	800c8b0 <__s2b+0x4c>
 800c8c4:	f1a5 0408 	sub.w	r4, r5, #8
 800c8c8:	444c      	add	r4, r9
 800c8ca:	1b2d      	subs	r5, r5, r4
 800c8cc:	1963      	adds	r3, r4, r5
 800c8ce:	42bb      	cmp	r3, r7
 800c8d0:	db04      	blt.n	800c8dc <__s2b+0x78>
 800c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d6:	340a      	adds	r4, #10
 800c8d8:	2509      	movs	r5, #9
 800c8da:	e7f6      	b.n	800c8ca <__s2b+0x66>
 800c8dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8e0:	4601      	mov	r1, r0
 800c8e2:	3b30      	subs	r3, #48	; 0x30
 800c8e4:	220a      	movs	r2, #10
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7ff ff76 	bl	800c7d8 <__multadd>
 800c8ec:	e7ee      	b.n	800c8cc <__s2b+0x68>
 800c8ee:	bf00      	nop
 800c8f0:	0800f050 	.word	0x0800f050
 800c8f4:	0800f0d8 	.word	0x0800f0d8

0800c8f8 <__hi0bits>:
 800c8f8:	0c03      	lsrs	r3, r0, #16
 800c8fa:	041b      	lsls	r3, r3, #16
 800c8fc:	b9d3      	cbnz	r3, 800c934 <__hi0bits+0x3c>
 800c8fe:	0400      	lsls	r0, r0, #16
 800c900:	2310      	movs	r3, #16
 800c902:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c906:	bf04      	itt	eq
 800c908:	0200      	lsleq	r0, r0, #8
 800c90a:	3308      	addeq	r3, #8
 800c90c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c910:	bf04      	itt	eq
 800c912:	0100      	lsleq	r0, r0, #4
 800c914:	3304      	addeq	r3, #4
 800c916:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c91a:	bf04      	itt	eq
 800c91c:	0080      	lsleq	r0, r0, #2
 800c91e:	3302      	addeq	r3, #2
 800c920:	2800      	cmp	r0, #0
 800c922:	db05      	blt.n	800c930 <__hi0bits+0x38>
 800c924:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c928:	f103 0301 	add.w	r3, r3, #1
 800c92c:	bf08      	it	eq
 800c92e:	2320      	moveq	r3, #32
 800c930:	4618      	mov	r0, r3
 800c932:	4770      	bx	lr
 800c934:	2300      	movs	r3, #0
 800c936:	e7e4      	b.n	800c902 <__hi0bits+0xa>

0800c938 <__lo0bits>:
 800c938:	6803      	ldr	r3, [r0, #0]
 800c93a:	f013 0207 	ands.w	r2, r3, #7
 800c93e:	d00c      	beq.n	800c95a <__lo0bits+0x22>
 800c940:	07d9      	lsls	r1, r3, #31
 800c942:	d422      	bmi.n	800c98a <__lo0bits+0x52>
 800c944:	079a      	lsls	r2, r3, #30
 800c946:	bf49      	itett	mi
 800c948:	085b      	lsrmi	r3, r3, #1
 800c94a:	089b      	lsrpl	r3, r3, #2
 800c94c:	6003      	strmi	r3, [r0, #0]
 800c94e:	2201      	movmi	r2, #1
 800c950:	bf5c      	itt	pl
 800c952:	6003      	strpl	r3, [r0, #0]
 800c954:	2202      	movpl	r2, #2
 800c956:	4610      	mov	r0, r2
 800c958:	4770      	bx	lr
 800c95a:	b299      	uxth	r1, r3
 800c95c:	b909      	cbnz	r1, 800c962 <__lo0bits+0x2a>
 800c95e:	0c1b      	lsrs	r3, r3, #16
 800c960:	2210      	movs	r2, #16
 800c962:	b2d9      	uxtb	r1, r3
 800c964:	b909      	cbnz	r1, 800c96a <__lo0bits+0x32>
 800c966:	3208      	adds	r2, #8
 800c968:	0a1b      	lsrs	r3, r3, #8
 800c96a:	0719      	lsls	r1, r3, #28
 800c96c:	bf04      	itt	eq
 800c96e:	091b      	lsreq	r3, r3, #4
 800c970:	3204      	addeq	r2, #4
 800c972:	0799      	lsls	r1, r3, #30
 800c974:	bf04      	itt	eq
 800c976:	089b      	lsreq	r3, r3, #2
 800c978:	3202      	addeq	r2, #2
 800c97a:	07d9      	lsls	r1, r3, #31
 800c97c:	d403      	bmi.n	800c986 <__lo0bits+0x4e>
 800c97e:	085b      	lsrs	r3, r3, #1
 800c980:	f102 0201 	add.w	r2, r2, #1
 800c984:	d003      	beq.n	800c98e <__lo0bits+0x56>
 800c986:	6003      	str	r3, [r0, #0]
 800c988:	e7e5      	b.n	800c956 <__lo0bits+0x1e>
 800c98a:	2200      	movs	r2, #0
 800c98c:	e7e3      	b.n	800c956 <__lo0bits+0x1e>
 800c98e:	2220      	movs	r2, #32
 800c990:	e7e1      	b.n	800c956 <__lo0bits+0x1e>
	...

0800c994 <__i2b>:
 800c994:	b510      	push	{r4, lr}
 800c996:	460c      	mov	r4, r1
 800c998:	2101      	movs	r1, #1
 800c99a:	f7ff febb 	bl	800c714 <_Balloc>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	b928      	cbnz	r0, 800c9ae <__i2b+0x1a>
 800c9a2:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <__i2b+0x24>)
 800c9a4:	4805      	ldr	r0, [pc, #20]	; (800c9bc <__i2b+0x28>)
 800c9a6:	f240 1145 	movw	r1, #325	; 0x145
 800c9aa:	f000 fc2b 	bl	800d204 <__assert_func>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	6144      	str	r4, [r0, #20]
 800c9b2:	6103      	str	r3, [r0, #16]
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0800f050 	.word	0x0800f050
 800c9bc:	0800f0d8 	.word	0x0800f0d8

0800c9c0 <__multiply>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	4691      	mov	r9, r2
 800c9c6:	690a      	ldr	r2, [r1, #16]
 800c9c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	bfb8      	it	lt
 800c9d0:	460b      	movlt	r3, r1
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	bfbc      	itt	lt
 800c9d6:	464c      	movlt	r4, r9
 800c9d8:	4699      	movlt	r9, r3
 800c9da:	6927      	ldr	r7, [r4, #16]
 800c9dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9e0:	68a3      	ldr	r3, [r4, #8]
 800c9e2:	6861      	ldr	r1, [r4, #4]
 800c9e4:	eb07 060a 	add.w	r6, r7, sl
 800c9e8:	42b3      	cmp	r3, r6
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	bfb8      	it	lt
 800c9ee:	3101      	addlt	r1, #1
 800c9f0:	f7ff fe90 	bl	800c714 <_Balloc>
 800c9f4:	b930      	cbnz	r0, 800ca04 <__multiply+0x44>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	4b44      	ldr	r3, [pc, #272]	; (800cb0c <__multiply+0x14c>)
 800c9fa:	4845      	ldr	r0, [pc, #276]	; (800cb10 <__multiply+0x150>)
 800c9fc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ca00:	f000 fc00 	bl	800d204 <__assert_func>
 800ca04:	f100 0514 	add.w	r5, r0, #20
 800ca08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	2200      	movs	r2, #0
 800ca10:	4543      	cmp	r3, r8
 800ca12:	d321      	bcc.n	800ca58 <__multiply+0x98>
 800ca14:	f104 0314 	add.w	r3, r4, #20
 800ca18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca1c:	f109 0314 	add.w	r3, r9, #20
 800ca20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca24:	9202      	str	r2, [sp, #8]
 800ca26:	1b3a      	subs	r2, r7, r4
 800ca28:	3a15      	subs	r2, #21
 800ca2a:	f022 0203 	bic.w	r2, r2, #3
 800ca2e:	3204      	adds	r2, #4
 800ca30:	f104 0115 	add.w	r1, r4, #21
 800ca34:	428f      	cmp	r7, r1
 800ca36:	bf38      	it	cc
 800ca38:	2204      	movcc	r2, #4
 800ca3a:	9201      	str	r2, [sp, #4]
 800ca3c:	9a02      	ldr	r2, [sp, #8]
 800ca3e:	9303      	str	r3, [sp, #12]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d80c      	bhi.n	800ca5e <__multiply+0x9e>
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	dd03      	ble.n	800ca50 <__multiply+0x90>
 800ca48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d05b      	beq.n	800cb08 <__multiply+0x148>
 800ca50:	6106      	str	r6, [r0, #16]
 800ca52:	b005      	add	sp, #20
 800ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca58:	f843 2b04 	str.w	r2, [r3], #4
 800ca5c:	e7d8      	b.n	800ca10 <__multiply+0x50>
 800ca5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca62:	f1ba 0f00 	cmp.w	sl, #0
 800ca66:	d024      	beq.n	800cab2 <__multiply+0xf2>
 800ca68:	f104 0e14 	add.w	lr, r4, #20
 800ca6c:	46a9      	mov	r9, r5
 800ca6e:	f04f 0c00 	mov.w	ip, #0
 800ca72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca76:	f8d9 1000 	ldr.w	r1, [r9]
 800ca7a:	fa1f fb82 	uxth.w	fp, r2
 800ca7e:	b289      	uxth	r1, r1
 800ca80:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca88:	f8d9 2000 	ldr.w	r2, [r9]
 800ca8c:	4461      	add	r1, ip
 800ca8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca92:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca9a:	b289      	uxth	r1, r1
 800ca9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800caa0:	4577      	cmp	r7, lr
 800caa2:	f849 1b04 	str.w	r1, [r9], #4
 800caa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caaa:	d8e2      	bhi.n	800ca72 <__multiply+0xb2>
 800caac:	9a01      	ldr	r2, [sp, #4]
 800caae:	f845 c002 	str.w	ip, [r5, r2]
 800cab2:	9a03      	ldr	r2, [sp, #12]
 800cab4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cab8:	3304      	adds	r3, #4
 800caba:	f1b9 0f00 	cmp.w	r9, #0
 800cabe:	d021      	beq.n	800cb04 <__multiply+0x144>
 800cac0:	6829      	ldr	r1, [r5, #0]
 800cac2:	f104 0c14 	add.w	ip, r4, #20
 800cac6:	46ae      	mov	lr, r5
 800cac8:	f04f 0a00 	mov.w	sl, #0
 800cacc:	f8bc b000 	ldrh.w	fp, [ip]
 800cad0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cad4:	fb09 220b 	mla	r2, r9, fp, r2
 800cad8:	4452      	add	r2, sl
 800cada:	b289      	uxth	r1, r1
 800cadc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cae0:	f84e 1b04 	str.w	r1, [lr], #4
 800cae4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cae8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800caec:	f8be 1000 	ldrh.w	r1, [lr]
 800caf0:	fb09 110a 	mla	r1, r9, sl, r1
 800caf4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800caf8:	4567      	cmp	r7, ip
 800cafa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cafe:	d8e5      	bhi.n	800cacc <__multiply+0x10c>
 800cb00:	9a01      	ldr	r2, [sp, #4]
 800cb02:	50a9      	str	r1, [r5, r2]
 800cb04:	3504      	adds	r5, #4
 800cb06:	e799      	b.n	800ca3c <__multiply+0x7c>
 800cb08:	3e01      	subs	r6, #1
 800cb0a:	e79b      	b.n	800ca44 <__multiply+0x84>
 800cb0c:	0800f050 	.word	0x0800f050
 800cb10:	0800f0d8 	.word	0x0800f0d8

0800cb14 <__pow5mult>:
 800cb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb18:	4615      	mov	r5, r2
 800cb1a:	f012 0203 	ands.w	r2, r2, #3
 800cb1e:	4606      	mov	r6, r0
 800cb20:	460f      	mov	r7, r1
 800cb22:	d007      	beq.n	800cb34 <__pow5mult+0x20>
 800cb24:	4c25      	ldr	r4, [pc, #148]	; (800cbbc <__pow5mult+0xa8>)
 800cb26:	3a01      	subs	r2, #1
 800cb28:	2300      	movs	r3, #0
 800cb2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb2e:	f7ff fe53 	bl	800c7d8 <__multadd>
 800cb32:	4607      	mov	r7, r0
 800cb34:	10ad      	asrs	r5, r5, #2
 800cb36:	d03d      	beq.n	800cbb4 <__pow5mult+0xa0>
 800cb38:	69f4      	ldr	r4, [r6, #28]
 800cb3a:	b97c      	cbnz	r4, 800cb5c <__pow5mult+0x48>
 800cb3c:	2010      	movs	r0, #16
 800cb3e:	f000 fb95 	bl	800d26c <malloc>
 800cb42:	4602      	mov	r2, r0
 800cb44:	61f0      	str	r0, [r6, #28]
 800cb46:	b928      	cbnz	r0, 800cb54 <__pow5mult+0x40>
 800cb48:	4b1d      	ldr	r3, [pc, #116]	; (800cbc0 <__pow5mult+0xac>)
 800cb4a:	481e      	ldr	r0, [pc, #120]	; (800cbc4 <__pow5mult+0xb0>)
 800cb4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb50:	f000 fb58 	bl	800d204 <__assert_func>
 800cb54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb58:	6004      	str	r4, [r0, #0]
 800cb5a:	60c4      	str	r4, [r0, #12]
 800cb5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb64:	b94c      	cbnz	r4, 800cb7a <__pow5mult+0x66>
 800cb66:	f240 2171 	movw	r1, #625	; 0x271
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff12 	bl	800c994 <__i2b>
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb76:	4604      	mov	r4, r0
 800cb78:	6003      	str	r3, [r0, #0]
 800cb7a:	f04f 0900 	mov.w	r9, #0
 800cb7e:	07eb      	lsls	r3, r5, #31
 800cb80:	d50a      	bpl.n	800cb98 <__pow5mult+0x84>
 800cb82:	4639      	mov	r1, r7
 800cb84:	4622      	mov	r2, r4
 800cb86:	4630      	mov	r0, r6
 800cb88:	f7ff ff1a 	bl	800c9c0 <__multiply>
 800cb8c:	4639      	mov	r1, r7
 800cb8e:	4680      	mov	r8, r0
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7ff fdff 	bl	800c794 <_Bfree>
 800cb96:	4647      	mov	r7, r8
 800cb98:	106d      	asrs	r5, r5, #1
 800cb9a:	d00b      	beq.n	800cbb4 <__pow5mult+0xa0>
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	b938      	cbnz	r0, 800cbb0 <__pow5mult+0x9c>
 800cba0:	4622      	mov	r2, r4
 800cba2:	4621      	mov	r1, r4
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7ff ff0b 	bl	800c9c0 <__multiply>
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	f8c0 9000 	str.w	r9, [r0]
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	e7e4      	b.n	800cb7e <__pow5mult+0x6a>
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbba:	bf00      	nop
 800cbbc:	0800f228 	.word	0x0800f228
 800cbc0:	0800f0c1 	.word	0x0800f0c1
 800cbc4:	0800f0d8 	.word	0x0800f0d8

0800cbc8 <__lshift>:
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	460c      	mov	r4, r1
 800cbce:	6849      	ldr	r1, [r1, #4]
 800cbd0:	6923      	ldr	r3, [r4, #16]
 800cbd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbd6:	68a3      	ldr	r3, [r4, #8]
 800cbd8:	4607      	mov	r7, r0
 800cbda:	4691      	mov	r9, r2
 800cbdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbe0:	f108 0601 	add.w	r6, r8, #1
 800cbe4:	42b3      	cmp	r3, r6
 800cbe6:	db0b      	blt.n	800cc00 <__lshift+0x38>
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f7ff fd93 	bl	800c714 <_Balloc>
 800cbee:	4605      	mov	r5, r0
 800cbf0:	b948      	cbnz	r0, 800cc06 <__lshift+0x3e>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	4b28      	ldr	r3, [pc, #160]	; (800cc98 <__lshift+0xd0>)
 800cbf6:	4829      	ldr	r0, [pc, #164]	; (800cc9c <__lshift+0xd4>)
 800cbf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cbfc:	f000 fb02 	bl	800d204 <__assert_func>
 800cc00:	3101      	adds	r1, #1
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	e7ee      	b.n	800cbe4 <__lshift+0x1c>
 800cc06:	2300      	movs	r3, #0
 800cc08:	f100 0114 	add.w	r1, r0, #20
 800cc0c:	f100 0210 	add.w	r2, r0, #16
 800cc10:	4618      	mov	r0, r3
 800cc12:	4553      	cmp	r3, sl
 800cc14:	db33      	blt.n	800cc7e <__lshift+0xb6>
 800cc16:	6920      	ldr	r0, [r4, #16]
 800cc18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc1c:	f104 0314 	add.w	r3, r4, #20
 800cc20:	f019 091f 	ands.w	r9, r9, #31
 800cc24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc2c:	d02b      	beq.n	800cc86 <__lshift+0xbe>
 800cc2e:	f1c9 0e20 	rsb	lr, r9, #32
 800cc32:	468a      	mov	sl, r1
 800cc34:	2200      	movs	r2, #0
 800cc36:	6818      	ldr	r0, [r3, #0]
 800cc38:	fa00 f009 	lsl.w	r0, r0, r9
 800cc3c:	4310      	orrs	r0, r2
 800cc3e:	f84a 0b04 	str.w	r0, [sl], #4
 800cc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc46:	459c      	cmp	ip, r3
 800cc48:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc4c:	d8f3      	bhi.n	800cc36 <__lshift+0x6e>
 800cc4e:	ebac 0304 	sub.w	r3, ip, r4
 800cc52:	3b15      	subs	r3, #21
 800cc54:	f023 0303 	bic.w	r3, r3, #3
 800cc58:	3304      	adds	r3, #4
 800cc5a:	f104 0015 	add.w	r0, r4, #21
 800cc5e:	4584      	cmp	ip, r0
 800cc60:	bf38      	it	cc
 800cc62:	2304      	movcc	r3, #4
 800cc64:	50ca      	str	r2, [r1, r3]
 800cc66:	b10a      	cbz	r2, 800cc6c <__lshift+0xa4>
 800cc68:	f108 0602 	add.w	r6, r8, #2
 800cc6c:	3e01      	subs	r6, #1
 800cc6e:	4638      	mov	r0, r7
 800cc70:	612e      	str	r6, [r5, #16]
 800cc72:	4621      	mov	r1, r4
 800cc74:	f7ff fd8e 	bl	800c794 <_Bfree>
 800cc78:	4628      	mov	r0, r5
 800cc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc82:	3301      	adds	r3, #1
 800cc84:	e7c5      	b.n	800cc12 <__lshift+0x4a>
 800cc86:	3904      	subs	r1, #4
 800cc88:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc90:	459c      	cmp	ip, r3
 800cc92:	d8f9      	bhi.n	800cc88 <__lshift+0xc0>
 800cc94:	e7ea      	b.n	800cc6c <__lshift+0xa4>
 800cc96:	bf00      	nop
 800cc98:	0800f050 	.word	0x0800f050
 800cc9c:	0800f0d8 	.word	0x0800f0d8

0800cca0 <__mcmp>:
 800cca0:	b530      	push	{r4, r5, lr}
 800cca2:	6902      	ldr	r2, [r0, #16]
 800cca4:	690c      	ldr	r4, [r1, #16]
 800cca6:	1b12      	subs	r2, r2, r4
 800cca8:	d10e      	bne.n	800ccc8 <__mcmp+0x28>
 800ccaa:	f100 0314 	add.w	r3, r0, #20
 800ccae:	3114      	adds	r1, #20
 800ccb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ccb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ccbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ccc0:	42a5      	cmp	r5, r4
 800ccc2:	d003      	beq.n	800cccc <__mcmp+0x2c>
 800ccc4:	d305      	bcc.n	800ccd2 <__mcmp+0x32>
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	4610      	mov	r0, r2
 800ccca:	bd30      	pop	{r4, r5, pc}
 800cccc:	4283      	cmp	r3, r0
 800ccce:	d3f3      	bcc.n	800ccb8 <__mcmp+0x18>
 800ccd0:	e7fa      	b.n	800ccc8 <__mcmp+0x28>
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	e7f7      	b.n	800ccc8 <__mcmp+0x28>

0800ccd8 <__mdiff>:
 800ccd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	460c      	mov	r4, r1
 800ccde:	4606      	mov	r6, r0
 800cce0:	4611      	mov	r1, r2
 800cce2:	4620      	mov	r0, r4
 800cce4:	4690      	mov	r8, r2
 800cce6:	f7ff ffdb 	bl	800cca0 <__mcmp>
 800ccea:	1e05      	subs	r5, r0, #0
 800ccec:	d110      	bne.n	800cd10 <__mdiff+0x38>
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f7ff fd0f 	bl	800c714 <_Balloc>
 800ccf6:	b930      	cbnz	r0, 800cd06 <__mdiff+0x2e>
 800ccf8:	4b3a      	ldr	r3, [pc, #232]	; (800cde4 <__mdiff+0x10c>)
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	f240 2137 	movw	r1, #567	; 0x237
 800cd00:	4839      	ldr	r0, [pc, #228]	; (800cde8 <__mdiff+0x110>)
 800cd02:	f000 fa7f 	bl	800d204 <__assert_func>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	bfa4      	itt	ge
 800cd12:	4643      	movge	r3, r8
 800cd14:	46a0      	movge	r8, r4
 800cd16:	4630      	mov	r0, r6
 800cd18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd1c:	bfa6      	itte	ge
 800cd1e:	461c      	movge	r4, r3
 800cd20:	2500      	movge	r5, #0
 800cd22:	2501      	movlt	r5, #1
 800cd24:	f7ff fcf6 	bl	800c714 <_Balloc>
 800cd28:	b920      	cbnz	r0, 800cd34 <__mdiff+0x5c>
 800cd2a:	4b2e      	ldr	r3, [pc, #184]	; (800cde4 <__mdiff+0x10c>)
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	f240 2145 	movw	r1, #581	; 0x245
 800cd32:	e7e5      	b.n	800cd00 <__mdiff+0x28>
 800cd34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd38:	6926      	ldr	r6, [r4, #16]
 800cd3a:	60c5      	str	r5, [r0, #12]
 800cd3c:	f104 0914 	add.w	r9, r4, #20
 800cd40:	f108 0514 	add.w	r5, r8, #20
 800cd44:	f100 0e14 	add.w	lr, r0, #20
 800cd48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd50:	f108 0210 	add.w	r2, r8, #16
 800cd54:	46f2      	mov	sl, lr
 800cd56:	2100      	movs	r1, #0
 800cd58:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd60:	fa11 f88b 	uxtah	r8, r1, fp
 800cd64:	b299      	uxth	r1, r3
 800cd66:	0c1b      	lsrs	r3, r3, #16
 800cd68:	eba8 0801 	sub.w	r8, r8, r1
 800cd6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd74:	fa1f f888 	uxth.w	r8, r8
 800cd78:	1419      	asrs	r1, r3, #16
 800cd7a:	454e      	cmp	r6, r9
 800cd7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd80:	f84a 3b04 	str.w	r3, [sl], #4
 800cd84:	d8e8      	bhi.n	800cd58 <__mdiff+0x80>
 800cd86:	1b33      	subs	r3, r6, r4
 800cd88:	3b15      	subs	r3, #21
 800cd8a:	f023 0303 	bic.w	r3, r3, #3
 800cd8e:	3304      	adds	r3, #4
 800cd90:	3415      	adds	r4, #21
 800cd92:	42a6      	cmp	r6, r4
 800cd94:	bf38      	it	cc
 800cd96:	2304      	movcc	r3, #4
 800cd98:	441d      	add	r5, r3
 800cd9a:	4473      	add	r3, lr
 800cd9c:	469e      	mov	lr, r3
 800cd9e:	462e      	mov	r6, r5
 800cda0:	4566      	cmp	r6, ip
 800cda2:	d30e      	bcc.n	800cdc2 <__mdiff+0xea>
 800cda4:	f10c 0203 	add.w	r2, ip, #3
 800cda8:	1b52      	subs	r2, r2, r5
 800cdaa:	f022 0203 	bic.w	r2, r2, #3
 800cdae:	3d03      	subs	r5, #3
 800cdb0:	45ac      	cmp	ip, r5
 800cdb2:	bf38      	it	cc
 800cdb4:	2200      	movcc	r2, #0
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cdbc:	b17a      	cbz	r2, 800cdde <__mdiff+0x106>
 800cdbe:	6107      	str	r7, [r0, #16]
 800cdc0:	e7a4      	b.n	800cd0c <__mdiff+0x34>
 800cdc2:	f856 8b04 	ldr.w	r8, [r6], #4
 800cdc6:	fa11 f288 	uxtah	r2, r1, r8
 800cdca:	1414      	asrs	r4, r2, #16
 800cdcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cdd0:	b292      	uxth	r2, r2
 800cdd2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cdd6:	f84e 2b04 	str.w	r2, [lr], #4
 800cdda:	1421      	asrs	r1, r4, #16
 800cddc:	e7e0      	b.n	800cda0 <__mdiff+0xc8>
 800cdde:	3f01      	subs	r7, #1
 800cde0:	e7ea      	b.n	800cdb8 <__mdiff+0xe0>
 800cde2:	bf00      	nop
 800cde4:	0800f050 	.word	0x0800f050
 800cde8:	0800f0d8 	.word	0x0800f0d8

0800cdec <__ulp>:
 800cdec:	b082      	sub	sp, #8
 800cdee:	ed8d 0b00 	vstr	d0, [sp]
 800cdf2:	9a01      	ldr	r2, [sp, #4]
 800cdf4:	4b0f      	ldr	r3, [pc, #60]	; (800ce34 <__ulp+0x48>)
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dc08      	bgt.n	800ce12 <__ulp+0x26>
 800ce00:	425b      	negs	r3, r3
 800ce02:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ce06:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce0a:	da04      	bge.n	800ce16 <__ulp+0x2a>
 800ce0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce10:	4113      	asrs	r3, r2
 800ce12:	2200      	movs	r2, #0
 800ce14:	e008      	b.n	800ce28 <__ulp+0x3c>
 800ce16:	f1a2 0314 	sub.w	r3, r2, #20
 800ce1a:	2b1e      	cmp	r3, #30
 800ce1c:	bfda      	itte	le
 800ce1e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ce22:	40da      	lsrle	r2, r3
 800ce24:	2201      	movgt	r2, #1
 800ce26:	2300      	movs	r3, #0
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	ec41 0b10 	vmov	d0, r0, r1
 800ce30:	b002      	add	sp, #8
 800ce32:	4770      	bx	lr
 800ce34:	7ff00000 	.word	0x7ff00000

0800ce38 <__b2d>:
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	6906      	ldr	r6, [r0, #16]
 800ce3e:	f100 0814 	add.w	r8, r0, #20
 800ce42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce46:	1f37      	subs	r7, r6, #4
 800ce48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	f7ff fd53 	bl	800c8f8 <__hi0bits>
 800ce52:	f1c0 0320 	rsb	r3, r0, #32
 800ce56:	280a      	cmp	r0, #10
 800ce58:	600b      	str	r3, [r1, #0]
 800ce5a:	491b      	ldr	r1, [pc, #108]	; (800cec8 <__b2d+0x90>)
 800ce5c:	dc15      	bgt.n	800ce8a <__b2d+0x52>
 800ce5e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce62:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce66:	45b8      	cmp	r8, r7
 800ce68:	ea43 0501 	orr.w	r5, r3, r1
 800ce6c:	bf34      	ite	cc
 800ce6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce72:	2300      	movcs	r3, #0
 800ce74:	3015      	adds	r0, #21
 800ce76:	fa02 f000 	lsl.w	r0, r2, r0
 800ce7a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce7e:	4303      	orrs	r3, r0
 800ce80:	461c      	mov	r4, r3
 800ce82:	ec45 4b10 	vmov	d0, r4, r5
 800ce86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8a:	45b8      	cmp	r8, r7
 800ce8c:	bf3a      	itte	cc
 800ce8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce92:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce96:	2300      	movcs	r3, #0
 800ce98:	380b      	subs	r0, #11
 800ce9a:	d012      	beq.n	800cec2 <__b2d+0x8a>
 800ce9c:	f1c0 0120 	rsb	r1, r0, #32
 800cea0:	fa23 f401 	lsr.w	r4, r3, r1
 800cea4:	4082      	lsls	r2, r0
 800cea6:	4322      	orrs	r2, r4
 800cea8:	4547      	cmp	r7, r8
 800ceaa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ceae:	bf8c      	ite	hi
 800ceb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ceb4:	2200      	movls	r2, #0
 800ceb6:	4083      	lsls	r3, r0
 800ceb8:	40ca      	lsrs	r2, r1
 800ceba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cebe:	4313      	orrs	r3, r2
 800cec0:	e7de      	b.n	800ce80 <__b2d+0x48>
 800cec2:	ea42 0501 	orr.w	r5, r2, r1
 800cec6:	e7db      	b.n	800ce80 <__b2d+0x48>
 800cec8:	3ff00000 	.word	0x3ff00000

0800cecc <__d2b>:
 800cecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ced0:	460f      	mov	r7, r1
 800ced2:	2101      	movs	r1, #1
 800ced4:	ec59 8b10 	vmov	r8, r9, d0
 800ced8:	4616      	mov	r6, r2
 800ceda:	f7ff fc1b 	bl	800c714 <_Balloc>
 800cede:	4604      	mov	r4, r0
 800cee0:	b930      	cbnz	r0, 800cef0 <__d2b+0x24>
 800cee2:	4602      	mov	r2, r0
 800cee4:	4b24      	ldr	r3, [pc, #144]	; (800cf78 <__d2b+0xac>)
 800cee6:	4825      	ldr	r0, [pc, #148]	; (800cf7c <__d2b+0xb0>)
 800cee8:	f240 310f 	movw	r1, #783	; 0x30f
 800ceec:	f000 f98a 	bl	800d204 <__assert_func>
 800cef0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cef8:	bb2d      	cbnz	r5, 800cf46 <__d2b+0x7a>
 800cefa:	9301      	str	r3, [sp, #4]
 800cefc:	f1b8 0300 	subs.w	r3, r8, #0
 800cf00:	d026      	beq.n	800cf50 <__d2b+0x84>
 800cf02:	4668      	mov	r0, sp
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	f7ff fd17 	bl	800c938 <__lo0bits>
 800cf0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cf0e:	b1e8      	cbz	r0, 800cf4c <__d2b+0x80>
 800cf10:	f1c0 0320 	rsb	r3, r0, #32
 800cf14:	fa02 f303 	lsl.w	r3, r2, r3
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	40c2      	lsrs	r2, r0
 800cf1c:	6163      	str	r3, [r4, #20]
 800cf1e:	9201      	str	r2, [sp, #4]
 800cf20:	9b01      	ldr	r3, [sp, #4]
 800cf22:	61a3      	str	r3, [r4, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	bf14      	ite	ne
 800cf28:	2202      	movne	r2, #2
 800cf2a:	2201      	moveq	r2, #1
 800cf2c:	6122      	str	r2, [r4, #16]
 800cf2e:	b1bd      	cbz	r5, 800cf60 <__d2b+0x94>
 800cf30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf34:	4405      	add	r5, r0
 800cf36:	603d      	str	r5, [r7, #0]
 800cf38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf3c:	6030      	str	r0, [r6, #0]
 800cf3e:	4620      	mov	r0, r4
 800cf40:	b003      	add	sp, #12
 800cf42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf4a:	e7d6      	b.n	800cefa <__d2b+0x2e>
 800cf4c:	6161      	str	r1, [r4, #20]
 800cf4e:	e7e7      	b.n	800cf20 <__d2b+0x54>
 800cf50:	a801      	add	r0, sp, #4
 800cf52:	f7ff fcf1 	bl	800c938 <__lo0bits>
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	6163      	str	r3, [r4, #20]
 800cf5a:	3020      	adds	r0, #32
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	e7e5      	b.n	800cf2c <__d2b+0x60>
 800cf60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf68:	6038      	str	r0, [r7, #0]
 800cf6a:	6918      	ldr	r0, [r3, #16]
 800cf6c:	f7ff fcc4 	bl	800c8f8 <__hi0bits>
 800cf70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf74:	e7e2      	b.n	800cf3c <__d2b+0x70>
 800cf76:	bf00      	nop
 800cf78:	0800f050 	.word	0x0800f050
 800cf7c:	0800f0d8 	.word	0x0800f0d8

0800cf80 <__ratio>:
 800cf80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	4688      	mov	r8, r1
 800cf86:	4669      	mov	r1, sp
 800cf88:	4681      	mov	r9, r0
 800cf8a:	f7ff ff55 	bl	800ce38 <__b2d>
 800cf8e:	a901      	add	r1, sp, #4
 800cf90:	4640      	mov	r0, r8
 800cf92:	ec55 4b10 	vmov	r4, r5, d0
 800cf96:	f7ff ff4f 	bl	800ce38 <__b2d>
 800cf9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cfa2:	eba3 0c02 	sub.w	ip, r3, r2
 800cfa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cfaa:	1a9b      	subs	r3, r3, r2
 800cfac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cfb0:	ec51 0b10 	vmov	r0, r1, d0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	bfd6      	itet	le
 800cfb8:	460a      	movle	r2, r1
 800cfba:	462a      	movgt	r2, r5
 800cfbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cfc0:	468b      	mov	fp, r1
 800cfc2:	462f      	mov	r7, r5
 800cfc4:	bfd4      	ite	le
 800cfc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cfca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cfce:	4620      	mov	r0, r4
 800cfd0:	ee10 2a10 	vmov	r2, s0
 800cfd4:	465b      	mov	r3, fp
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	f7f3 fc50 	bl	800087c <__aeabi_ddiv>
 800cfdc:	ec41 0b10 	vmov	d0, r0, r1
 800cfe0:	b003      	add	sp, #12
 800cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfe6 <__copybits>:
 800cfe6:	3901      	subs	r1, #1
 800cfe8:	b570      	push	{r4, r5, r6, lr}
 800cfea:	1149      	asrs	r1, r1, #5
 800cfec:	6914      	ldr	r4, [r2, #16]
 800cfee:	3101      	adds	r1, #1
 800cff0:	f102 0314 	add.w	r3, r2, #20
 800cff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cffc:	1f05      	subs	r5, r0, #4
 800cffe:	42a3      	cmp	r3, r4
 800d000:	d30c      	bcc.n	800d01c <__copybits+0x36>
 800d002:	1aa3      	subs	r3, r4, r2
 800d004:	3b11      	subs	r3, #17
 800d006:	f023 0303 	bic.w	r3, r3, #3
 800d00a:	3211      	adds	r2, #17
 800d00c:	42a2      	cmp	r2, r4
 800d00e:	bf88      	it	hi
 800d010:	2300      	movhi	r3, #0
 800d012:	4418      	add	r0, r3
 800d014:	2300      	movs	r3, #0
 800d016:	4288      	cmp	r0, r1
 800d018:	d305      	bcc.n	800d026 <__copybits+0x40>
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d020:	f845 6f04 	str.w	r6, [r5, #4]!
 800d024:	e7eb      	b.n	800cffe <__copybits+0x18>
 800d026:	f840 3b04 	str.w	r3, [r0], #4
 800d02a:	e7f4      	b.n	800d016 <__copybits+0x30>

0800d02c <__any_on>:
 800d02c:	f100 0214 	add.w	r2, r0, #20
 800d030:	6900      	ldr	r0, [r0, #16]
 800d032:	114b      	asrs	r3, r1, #5
 800d034:	4298      	cmp	r0, r3
 800d036:	b510      	push	{r4, lr}
 800d038:	db11      	blt.n	800d05e <__any_on+0x32>
 800d03a:	dd0a      	ble.n	800d052 <__any_on+0x26>
 800d03c:	f011 011f 	ands.w	r1, r1, #31
 800d040:	d007      	beq.n	800d052 <__any_on+0x26>
 800d042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d046:	fa24 f001 	lsr.w	r0, r4, r1
 800d04a:	fa00 f101 	lsl.w	r1, r0, r1
 800d04e:	428c      	cmp	r4, r1
 800d050:	d10b      	bne.n	800d06a <__any_on+0x3e>
 800d052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d056:	4293      	cmp	r3, r2
 800d058:	d803      	bhi.n	800d062 <__any_on+0x36>
 800d05a:	2000      	movs	r0, #0
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	4603      	mov	r3, r0
 800d060:	e7f7      	b.n	800d052 <__any_on+0x26>
 800d062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d066:	2900      	cmp	r1, #0
 800d068:	d0f5      	beq.n	800d056 <__any_on+0x2a>
 800d06a:	2001      	movs	r0, #1
 800d06c:	e7f6      	b.n	800d05c <__any_on+0x30>

0800d06e <__ascii_wctomb>:
 800d06e:	b149      	cbz	r1, 800d084 <__ascii_wctomb+0x16>
 800d070:	2aff      	cmp	r2, #255	; 0xff
 800d072:	bf85      	ittet	hi
 800d074:	238a      	movhi	r3, #138	; 0x8a
 800d076:	6003      	strhi	r3, [r0, #0]
 800d078:	700a      	strbls	r2, [r1, #0]
 800d07a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d07e:	bf98      	it	ls
 800d080:	2001      	movls	r0, #1
 800d082:	4770      	bx	lr
 800d084:	4608      	mov	r0, r1
 800d086:	4770      	bx	lr

0800d088 <__sflush_r>:
 800d088:	898a      	ldrh	r2, [r1, #12]
 800d08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08e:	4605      	mov	r5, r0
 800d090:	0710      	lsls	r0, r2, #28
 800d092:	460c      	mov	r4, r1
 800d094:	d458      	bmi.n	800d148 <__sflush_r+0xc0>
 800d096:	684b      	ldr	r3, [r1, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	dc05      	bgt.n	800d0a8 <__sflush_r+0x20>
 800d09c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	dc02      	bgt.n	800d0a8 <__sflush_r+0x20>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	d0f9      	beq.n	800d0a2 <__sflush_r+0x1a>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0b4:	682f      	ldr	r7, [r5, #0]
 800d0b6:	6a21      	ldr	r1, [r4, #32]
 800d0b8:	602b      	str	r3, [r5, #0]
 800d0ba:	d032      	beq.n	800d122 <__sflush_r+0x9a>
 800d0bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	075a      	lsls	r2, r3, #29
 800d0c2:	d505      	bpl.n	800d0d0 <__sflush_r+0x48>
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	1ac0      	subs	r0, r0, r3
 800d0c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0ca:	b10b      	cbz	r3, 800d0d0 <__sflush_r+0x48>
 800d0cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0ce:	1ac0      	subs	r0, r0, r3
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0d6:	6a21      	ldr	r1, [r4, #32]
 800d0d8:	4628      	mov	r0, r5
 800d0da:	47b0      	blx	r6
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	d106      	bne.n	800d0f0 <__sflush_r+0x68>
 800d0e2:	6829      	ldr	r1, [r5, #0]
 800d0e4:	291d      	cmp	r1, #29
 800d0e6:	d82b      	bhi.n	800d140 <__sflush_r+0xb8>
 800d0e8:	4a29      	ldr	r2, [pc, #164]	; (800d190 <__sflush_r+0x108>)
 800d0ea:	410a      	asrs	r2, r1
 800d0ec:	07d6      	lsls	r6, r2, #31
 800d0ee:	d427      	bmi.n	800d140 <__sflush_r+0xb8>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	6062      	str	r2, [r4, #4]
 800d0f4:	04d9      	lsls	r1, r3, #19
 800d0f6:	6922      	ldr	r2, [r4, #16]
 800d0f8:	6022      	str	r2, [r4, #0]
 800d0fa:	d504      	bpl.n	800d106 <__sflush_r+0x7e>
 800d0fc:	1c42      	adds	r2, r0, #1
 800d0fe:	d101      	bne.n	800d104 <__sflush_r+0x7c>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	b903      	cbnz	r3, 800d106 <__sflush_r+0x7e>
 800d104:	6560      	str	r0, [r4, #84]	; 0x54
 800d106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d108:	602f      	str	r7, [r5, #0]
 800d10a:	2900      	cmp	r1, #0
 800d10c:	d0c9      	beq.n	800d0a2 <__sflush_r+0x1a>
 800d10e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d112:	4299      	cmp	r1, r3
 800d114:	d002      	beq.n	800d11c <__sflush_r+0x94>
 800d116:	4628      	mov	r0, r5
 800d118:	f7fe fe9a 	bl	800be50 <_free_r>
 800d11c:	2000      	movs	r0, #0
 800d11e:	6360      	str	r0, [r4, #52]	; 0x34
 800d120:	e7c0      	b.n	800d0a4 <__sflush_r+0x1c>
 800d122:	2301      	movs	r3, #1
 800d124:	4628      	mov	r0, r5
 800d126:	47b0      	blx	r6
 800d128:	1c41      	adds	r1, r0, #1
 800d12a:	d1c8      	bne.n	800d0be <__sflush_r+0x36>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d0c5      	beq.n	800d0be <__sflush_r+0x36>
 800d132:	2b1d      	cmp	r3, #29
 800d134:	d001      	beq.n	800d13a <__sflush_r+0xb2>
 800d136:	2b16      	cmp	r3, #22
 800d138:	d101      	bne.n	800d13e <__sflush_r+0xb6>
 800d13a:	602f      	str	r7, [r5, #0]
 800d13c:	e7b1      	b.n	800d0a2 <__sflush_r+0x1a>
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d144:	81a3      	strh	r3, [r4, #12]
 800d146:	e7ad      	b.n	800d0a4 <__sflush_r+0x1c>
 800d148:	690f      	ldr	r7, [r1, #16]
 800d14a:	2f00      	cmp	r7, #0
 800d14c:	d0a9      	beq.n	800d0a2 <__sflush_r+0x1a>
 800d14e:	0793      	lsls	r3, r2, #30
 800d150:	680e      	ldr	r6, [r1, #0]
 800d152:	bf08      	it	eq
 800d154:	694b      	ldreq	r3, [r1, #20]
 800d156:	600f      	str	r7, [r1, #0]
 800d158:	bf18      	it	ne
 800d15a:	2300      	movne	r3, #0
 800d15c:	eba6 0807 	sub.w	r8, r6, r7
 800d160:	608b      	str	r3, [r1, #8]
 800d162:	f1b8 0f00 	cmp.w	r8, #0
 800d166:	dd9c      	ble.n	800d0a2 <__sflush_r+0x1a>
 800d168:	6a21      	ldr	r1, [r4, #32]
 800d16a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d16c:	4643      	mov	r3, r8
 800d16e:	463a      	mov	r2, r7
 800d170:	4628      	mov	r0, r5
 800d172:	47b0      	blx	r6
 800d174:	2800      	cmp	r0, #0
 800d176:	dc06      	bgt.n	800d186 <__sflush_r+0xfe>
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	f04f 30ff 	mov.w	r0, #4294967295
 800d184:	e78e      	b.n	800d0a4 <__sflush_r+0x1c>
 800d186:	4407      	add	r7, r0
 800d188:	eba8 0800 	sub.w	r8, r8, r0
 800d18c:	e7e9      	b.n	800d162 <__sflush_r+0xda>
 800d18e:	bf00      	nop
 800d190:	dfbffffe 	.word	0xdfbffffe

0800d194 <_fflush_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	690b      	ldr	r3, [r1, #16]
 800d198:	4605      	mov	r5, r0
 800d19a:	460c      	mov	r4, r1
 800d19c:	b913      	cbnz	r3, 800d1a4 <_fflush_r+0x10>
 800d19e:	2500      	movs	r5, #0
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	b118      	cbz	r0, 800d1ae <_fflush_r+0x1a>
 800d1a6:	6a03      	ldr	r3, [r0, #32]
 800d1a8:	b90b      	cbnz	r3, 800d1ae <_fflush_r+0x1a>
 800d1aa:	f7fe fcdd 	bl	800bb68 <__sinit>
 800d1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0f3      	beq.n	800d19e <_fflush_r+0xa>
 800d1b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1b8:	07d0      	lsls	r0, r2, #31
 800d1ba:	d404      	bmi.n	800d1c6 <_fflush_r+0x32>
 800d1bc:	0599      	lsls	r1, r3, #22
 800d1be:	d402      	bmi.n	800d1c6 <_fflush_r+0x32>
 800d1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c2:	f7fe fe2c 	bl	800be1e <__retarget_lock_acquire_recursive>
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	f7ff ff5d 	bl	800d088 <__sflush_r>
 800d1ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1d0:	07da      	lsls	r2, r3, #31
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	d4e4      	bmi.n	800d1a0 <_fflush_r+0xc>
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	059b      	lsls	r3, r3, #22
 800d1da:	d4e1      	bmi.n	800d1a0 <_fflush_r+0xc>
 800d1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1de:	f7fe fe1f 	bl	800be20 <__retarget_lock_release_recursive>
 800d1e2:	e7dd      	b.n	800d1a0 <_fflush_r+0xc>

0800d1e4 <_sbrk_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d06      	ldr	r5, [pc, #24]	; (800d200 <_sbrk_r+0x1c>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	f7f7 fbaa 	bl	8004948 <_sbrk>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_sbrk_r+0x1a>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_sbrk_r+0x1a>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	20004898 	.word	0x20004898

0800d204 <__assert_func>:
 800d204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d206:	4614      	mov	r4, r2
 800d208:	461a      	mov	r2, r3
 800d20a:	4b09      	ldr	r3, [pc, #36]	; (800d230 <__assert_func+0x2c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4605      	mov	r5, r0
 800d210:	68d8      	ldr	r0, [r3, #12]
 800d212:	b14c      	cbz	r4, 800d228 <__assert_func+0x24>
 800d214:	4b07      	ldr	r3, [pc, #28]	; (800d234 <__assert_func+0x30>)
 800d216:	9100      	str	r1, [sp, #0]
 800d218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d21c:	4906      	ldr	r1, [pc, #24]	; (800d238 <__assert_func+0x34>)
 800d21e:	462b      	mov	r3, r5
 800d220:	f000 f82c 	bl	800d27c <fiprintf>
 800d224:	f000 f83c 	bl	800d2a0 <abort>
 800d228:	4b04      	ldr	r3, [pc, #16]	; (800d23c <__assert_func+0x38>)
 800d22a:	461c      	mov	r4, r3
 800d22c:	e7f3      	b.n	800d216 <__assert_func+0x12>
 800d22e:	bf00      	nop
 800d230:	20000244 	.word	0x20000244
 800d234:	0800f335 	.word	0x0800f335
 800d238:	0800f342 	.word	0x0800f342
 800d23c:	0800f370 	.word	0x0800f370

0800d240 <_calloc_r>:
 800d240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d242:	fba1 2402 	umull	r2, r4, r1, r2
 800d246:	b94c      	cbnz	r4, 800d25c <_calloc_r+0x1c>
 800d248:	4611      	mov	r1, r2
 800d24a:	9201      	str	r2, [sp, #4]
 800d24c:	f7ff f9c4 	bl	800c5d8 <_malloc_r>
 800d250:	9a01      	ldr	r2, [sp, #4]
 800d252:	4605      	mov	r5, r0
 800d254:	b930      	cbnz	r0, 800d264 <_calloc_r+0x24>
 800d256:	4628      	mov	r0, r5
 800d258:	b003      	add	sp, #12
 800d25a:	bd30      	pop	{r4, r5, pc}
 800d25c:	220c      	movs	r2, #12
 800d25e:	6002      	str	r2, [r0, #0]
 800d260:	2500      	movs	r5, #0
 800d262:	e7f8      	b.n	800d256 <_calloc_r+0x16>
 800d264:	4621      	mov	r1, r4
 800d266:	f7fe fcf8 	bl	800bc5a <memset>
 800d26a:	e7f4      	b.n	800d256 <_calloc_r+0x16>

0800d26c <malloc>:
 800d26c:	4b02      	ldr	r3, [pc, #8]	; (800d278 <malloc+0xc>)
 800d26e:	4601      	mov	r1, r0
 800d270:	6818      	ldr	r0, [r3, #0]
 800d272:	f7ff b9b1 	b.w	800c5d8 <_malloc_r>
 800d276:	bf00      	nop
 800d278:	20000244 	.word	0x20000244

0800d27c <fiprintf>:
 800d27c:	b40e      	push	{r1, r2, r3}
 800d27e:	b503      	push	{r0, r1, lr}
 800d280:	4601      	mov	r1, r0
 800d282:	ab03      	add	r3, sp, #12
 800d284:	4805      	ldr	r0, [pc, #20]	; (800d29c <fiprintf+0x20>)
 800d286:	f853 2b04 	ldr.w	r2, [r3], #4
 800d28a:	6800      	ldr	r0, [r0, #0]
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	f000 f837 	bl	800d300 <_vfiprintf_r>
 800d292:	b002      	add	sp, #8
 800d294:	f85d eb04 	ldr.w	lr, [sp], #4
 800d298:	b003      	add	sp, #12
 800d29a:	4770      	bx	lr
 800d29c:	20000244 	.word	0x20000244

0800d2a0 <abort>:
 800d2a0:	b508      	push	{r3, lr}
 800d2a2:	2006      	movs	r0, #6
 800d2a4:	f000 fb94 	bl	800d9d0 <raise>
 800d2a8:	2001      	movs	r0, #1
 800d2aa:	f7f7 fad5 	bl	8004858 <_exit>

0800d2ae <__sfputc_r>:
 800d2ae:	6893      	ldr	r3, [r2, #8]
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	b410      	push	{r4}
 800d2b6:	6093      	str	r3, [r2, #8]
 800d2b8:	da08      	bge.n	800d2cc <__sfputc_r+0x1e>
 800d2ba:	6994      	ldr	r4, [r2, #24]
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	db01      	blt.n	800d2c4 <__sfputc_r+0x16>
 800d2c0:	290a      	cmp	r1, #10
 800d2c2:	d103      	bne.n	800d2cc <__sfputc_r+0x1e>
 800d2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2c8:	f000 bac4 	b.w	800d854 <__swbuf_r>
 800d2cc:	6813      	ldr	r3, [r2, #0]
 800d2ce:	1c58      	adds	r0, r3, #1
 800d2d0:	6010      	str	r0, [r2, #0]
 800d2d2:	7019      	strb	r1, [r3, #0]
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <__sfputs_r>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	4606      	mov	r6, r0
 800d2e0:	460f      	mov	r7, r1
 800d2e2:	4614      	mov	r4, r2
 800d2e4:	18d5      	adds	r5, r2, r3
 800d2e6:	42ac      	cmp	r4, r5
 800d2e8:	d101      	bne.n	800d2ee <__sfputs_r+0x12>
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	e007      	b.n	800d2fe <__sfputs_r+0x22>
 800d2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f2:	463a      	mov	r2, r7
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7ff ffda 	bl	800d2ae <__sfputc_r>
 800d2fa:	1c43      	adds	r3, r0, #1
 800d2fc:	d1f3      	bne.n	800d2e6 <__sfputs_r+0xa>
 800d2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d300 <_vfiprintf_r>:
 800d300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d304:	460d      	mov	r5, r1
 800d306:	b09d      	sub	sp, #116	; 0x74
 800d308:	4614      	mov	r4, r2
 800d30a:	4698      	mov	r8, r3
 800d30c:	4606      	mov	r6, r0
 800d30e:	b118      	cbz	r0, 800d318 <_vfiprintf_r+0x18>
 800d310:	6a03      	ldr	r3, [r0, #32]
 800d312:	b90b      	cbnz	r3, 800d318 <_vfiprintf_r+0x18>
 800d314:	f7fe fc28 	bl	800bb68 <__sinit>
 800d318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d31a:	07d9      	lsls	r1, r3, #31
 800d31c:	d405      	bmi.n	800d32a <_vfiprintf_r+0x2a>
 800d31e:	89ab      	ldrh	r3, [r5, #12]
 800d320:	059a      	lsls	r2, r3, #22
 800d322:	d402      	bmi.n	800d32a <_vfiprintf_r+0x2a>
 800d324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d326:	f7fe fd7a 	bl	800be1e <__retarget_lock_acquire_recursive>
 800d32a:	89ab      	ldrh	r3, [r5, #12]
 800d32c:	071b      	lsls	r3, r3, #28
 800d32e:	d501      	bpl.n	800d334 <_vfiprintf_r+0x34>
 800d330:	692b      	ldr	r3, [r5, #16]
 800d332:	b99b      	cbnz	r3, 800d35c <_vfiprintf_r+0x5c>
 800d334:	4629      	mov	r1, r5
 800d336:	4630      	mov	r0, r6
 800d338:	f000 faca 	bl	800d8d0 <__swsetup_r>
 800d33c:	b170      	cbz	r0, 800d35c <_vfiprintf_r+0x5c>
 800d33e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d340:	07dc      	lsls	r4, r3, #31
 800d342:	d504      	bpl.n	800d34e <_vfiprintf_r+0x4e>
 800d344:	f04f 30ff 	mov.w	r0, #4294967295
 800d348:	b01d      	add	sp, #116	; 0x74
 800d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34e:	89ab      	ldrh	r3, [r5, #12]
 800d350:	0598      	lsls	r0, r3, #22
 800d352:	d4f7      	bmi.n	800d344 <_vfiprintf_r+0x44>
 800d354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d356:	f7fe fd63 	bl	800be20 <__retarget_lock_release_recursive>
 800d35a:	e7f3      	b.n	800d344 <_vfiprintf_r+0x44>
 800d35c:	2300      	movs	r3, #0
 800d35e:	9309      	str	r3, [sp, #36]	; 0x24
 800d360:	2320      	movs	r3, #32
 800d362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d366:	f8cd 800c 	str.w	r8, [sp, #12]
 800d36a:	2330      	movs	r3, #48	; 0x30
 800d36c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d520 <_vfiprintf_r+0x220>
 800d370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d374:	f04f 0901 	mov.w	r9, #1
 800d378:	4623      	mov	r3, r4
 800d37a:	469a      	mov	sl, r3
 800d37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d380:	b10a      	cbz	r2, 800d386 <_vfiprintf_r+0x86>
 800d382:	2a25      	cmp	r2, #37	; 0x25
 800d384:	d1f9      	bne.n	800d37a <_vfiprintf_r+0x7a>
 800d386:	ebba 0b04 	subs.w	fp, sl, r4
 800d38a:	d00b      	beq.n	800d3a4 <_vfiprintf_r+0xa4>
 800d38c:	465b      	mov	r3, fp
 800d38e:	4622      	mov	r2, r4
 800d390:	4629      	mov	r1, r5
 800d392:	4630      	mov	r0, r6
 800d394:	f7ff ffa2 	bl	800d2dc <__sfputs_r>
 800d398:	3001      	adds	r0, #1
 800d39a:	f000 80a9 	beq.w	800d4f0 <_vfiprintf_r+0x1f0>
 800d39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3a0:	445a      	add	r2, fp
 800d3a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 80a1 	beq.w	800d4f0 <_vfiprintf_r+0x1f0>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b8:	f10a 0a01 	add.w	sl, sl, #1
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	9307      	str	r3, [sp, #28]
 800d3c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3c4:	931a      	str	r3, [sp, #104]	; 0x68
 800d3c6:	4654      	mov	r4, sl
 800d3c8:	2205      	movs	r2, #5
 800d3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ce:	4854      	ldr	r0, [pc, #336]	; (800d520 <_vfiprintf_r+0x220>)
 800d3d0:	f7f2 ff1e 	bl	8000210 <memchr>
 800d3d4:	9a04      	ldr	r2, [sp, #16]
 800d3d6:	b9d8      	cbnz	r0, 800d410 <_vfiprintf_r+0x110>
 800d3d8:	06d1      	lsls	r1, r2, #27
 800d3da:	bf44      	itt	mi
 800d3dc:	2320      	movmi	r3, #32
 800d3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3e2:	0713      	lsls	r3, r2, #28
 800d3e4:	bf44      	itt	mi
 800d3e6:	232b      	movmi	r3, #43	; 0x2b
 800d3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f2:	d015      	beq.n	800d420 <_vfiprintf_r+0x120>
 800d3f4:	9a07      	ldr	r2, [sp, #28]
 800d3f6:	4654      	mov	r4, sl
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	f04f 0c0a 	mov.w	ip, #10
 800d3fe:	4621      	mov	r1, r4
 800d400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d404:	3b30      	subs	r3, #48	; 0x30
 800d406:	2b09      	cmp	r3, #9
 800d408:	d94d      	bls.n	800d4a6 <_vfiprintf_r+0x1a6>
 800d40a:	b1b0      	cbz	r0, 800d43a <_vfiprintf_r+0x13a>
 800d40c:	9207      	str	r2, [sp, #28]
 800d40e:	e014      	b.n	800d43a <_vfiprintf_r+0x13a>
 800d410:	eba0 0308 	sub.w	r3, r0, r8
 800d414:	fa09 f303 	lsl.w	r3, r9, r3
 800d418:	4313      	orrs	r3, r2
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	46a2      	mov	sl, r4
 800d41e:	e7d2      	b.n	800d3c6 <_vfiprintf_r+0xc6>
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	1d19      	adds	r1, r3, #4
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	9103      	str	r1, [sp, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	bfbb      	ittet	lt
 800d42c:	425b      	neglt	r3, r3
 800d42e:	f042 0202 	orrlt.w	r2, r2, #2
 800d432:	9307      	strge	r3, [sp, #28]
 800d434:	9307      	strlt	r3, [sp, #28]
 800d436:	bfb8      	it	lt
 800d438:	9204      	strlt	r2, [sp, #16]
 800d43a:	7823      	ldrb	r3, [r4, #0]
 800d43c:	2b2e      	cmp	r3, #46	; 0x2e
 800d43e:	d10c      	bne.n	800d45a <_vfiprintf_r+0x15a>
 800d440:	7863      	ldrb	r3, [r4, #1]
 800d442:	2b2a      	cmp	r3, #42	; 0x2a
 800d444:	d134      	bne.n	800d4b0 <_vfiprintf_r+0x1b0>
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	1d1a      	adds	r2, r3, #4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	9203      	str	r2, [sp, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bfb8      	it	lt
 800d452:	f04f 33ff 	movlt.w	r3, #4294967295
 800d456:	3402      	adds	r4, #2
 800d458:	9305      	str	r3, [sp, #20]
 800d45a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d530 <_vfiprintf_r+0x230>
 800d45e:	7821      	ldrb	r1, [r4, #0]
 800d460:	2203      	movs	r2, #3
 800d462:	4650      	mov	r0, sl
 800d464:	f7f2 fed4 	bl	8000210 <memchr>
 800d468:	b138      	cbz	r0, 800d47a <_vfiprintf_r+0x17a>
 800d46a:	9b04      	ldr	r3, [sp, #16]
 800d46c:	eba0 000a 	sub.w	r0, r0, sl
 800d470:	2240      	movs	r2, #64	; 0x40
 800d472:	4082      	lsls	r2, r0
 800d474:	4313      	orrs	r3, r2
 800d476:	3401      	adds	r4, #1
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47e:	4829      	ldr	r0, [pc, #164]	; (800d524 <_vfiprintf_r+0x224>)
 800d480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d484:	2206      	movs	r2, #6
 800d486:	f7f2 fec3 	bl	8000210 <memchr>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d03f      	beq.n	800d50e <_vfiprintf_r+0x20e>
 800d48e:	4b26      	ldr	r3, [pc, #152]	; (800d528 <_vfiprintf_r+0x228>)
 800d490:	bb1b      	cbnz	r3, 800d4da <_vfiprintf_r+0x1da>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	3307      	adds	r3, #7
 800d496:	f023 0307 	bic.w	r3, r3, #7
 800d49a:	3308      	adds	r3, #8
 800d49c:	9303      	str	r3, [sp, #12]
 800d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a0:	443b      	add	r3, r7
 800d4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a4:	e768      	b.n	800d378 <_vfiprintf_r+0x78>
 800d4a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	e7a6      	b.n	800d3fe <_vfiprintf_r+0xfe>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	3401      	adds	r4, #1
 800d4b4:	9305      	str	r3, [sp, #20]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f04f 0c0a 	mov.w	ip, #10
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c2:	3a30      	subs	r2, #48	; 0x30
 800d4c4:	2a09      	cmp	r2, #9
 800d4c6:	d903      	bls.n	800d4d0 <_vfiprintf_r+0x1d0>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0c6      	beq.n	800d45a <_vfiprintf_r+0x15a>
 800d4cc:	9105      	str	r1, [sp, #20]
 800d4ce:	e7c4      	b.n	800d45a <_vfiprintf_r+0x15a>
 800d4d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e7f0      	b.n	800d4bc <_vfiprintf_r+0x1bc>
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4b12      	ldr	r3, [pc, #72]	; (800d52c <_vfiprintf_r+0x22c>)
 800d4e2:	a904      	add	r1, sp, #16
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f3af 8000 	nop.w
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	1c78      	adds	r0, r7, #1
 800d4ee:	d1d6      	bne.n	800d49e <_vfiprintf_r+0x19e>
 800d4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f2:	07d9      	lsls	r1, r3, #31
 800d4f4:	d405      	bmi.n	800d502 <_vfiprintf_r+0x202>
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	059a      	lsls	r2, r3, #22
 800d4fa:	d402      	bmi.n	800d502 <_vfiprintf_r+0x202>
 800d4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4fe:	f7fe fc8f 	bl	800be20 <__retarget_lock_release_recursive>
 800d502:	89ab      	ldrh	r3, [r5, #12]
 800d504:	065b      	lsls	r3, r3, #25
 800d506:	f53f af1d 	bmi.w	800d344 <_vfiprintf_r+0x44>
 800d50a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d50c:	e71c      	b.n	800d348 <_vfiprintf_r+0x48>
 800d50e:	ab03      	add	r3, sp, #12
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	462a      	mov	r2, r5
 800d514:	4b05      	ldr	r3, [pc, #20]	; (800d52c <_vfiprintf_r+0x22c>)
 800d516:	a904      	add	r1, sp, #16
 800d518:	4630      	mov	r0, r6
 800d51a:	f000 f879 	bl	800d610 <_printf_i>
 800d51e:	e7e4      	b.n	800d4ea <_vfiprintf_r+0x1ea>
 800d520:	0800f371 	.word	0x0800f371
 800d524:	0800f37b 	.word	0x0800f37b
 800d528:	00000000 	.word	0x00000000
 800d52c:	0800d2dd 	.word	0x0800d2dd
 800d530:	0800f377 	.word	0x0800f377

0800d534 <_printf_common>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	4616      	mov	r6, r2
 800d53a:	4699      	mov	r9, r3
 800d53c:	688a      	ldr	r2, [r1, #8]
 800d53e:	690b      	ldr	r3, [r1, #16]
 800d540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d544:	4293      	cmp	r3, r2
 800d546:	bfb8      	it	lt
 800d548:	4613      	movlt	r3, r2
 800d54a:	6033      	str	r3, [r6, #0]
 800d54c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d550:	4607      	mov	r7, r0
 800d552:	460c      	mov	r4, r1
 800d554:	b10a      	cbz	r2, 800d55a <_printf_common+0x26>
 800d556:	3301      	adds	r3, #1
 800d558:	6033      	str	r3, [r6, #0]
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	0699      	lsls	r1, r3, #26
 800d55e:	bf42      	ittt	mi
 800d560:	6833      	ldrmi	r3, [r6, #0]
 800d562:	3302      	addmi	r3, #2
 800d564:	6033      	strmi	r3, [r6, #0]
 800d566:	6825      	ldr	r5, [r4, #0]
 800d568:	f015 0506 	ands.w	r5, r5, #6
 800d56c:	d106      	bne.n	800d57c <_printf_common+0x48>
 800d56e:	f104 0a19 	add.w	sl, r4, #25
 800d572:	68e3      	ldr	r3, [r4, #12]
 800d574:	6832      	ldr	r2, [r6, #0]
 800d576:	1a9b      	subs	r3, r3, r2
 800d578:	42ab      	cmp	r3, r5
 800d57a:	dc26      	bgt.n	800d5ca <_printf_common+0x96>
 800d57c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d580:	1e13      	subs	r3, r2, #0
 800d582:	6822      	ldr	r2, [r4, #0]
 800d584:	bf18      	it	ne
 800d586:	2301      	movne	r3, #1
 800d588:	0692      	lsls	r2, r2, #26
 800d58a:	d42b      	bmi.n	800d5e4 <_printf_common+0xb0>
 800d58c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d590:	4649      	mov	r1, r9
 800d592:	4638      	mov	r0, r7
 800d594:	47c0      	blx	r8
 800d596:	3001      	adds	r0, #1
 800d598:	d01e      	beq.n	800d5d8 <_printf_common+0xa4>
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	6922      	ldr	r2, [r4, #16]
 800d59e:	f003 0306 	and.w	r3, r3, #6
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	bf02      	ittt	eq
 800d5a6:	68e5      	ldreq	r5, [r4, #12]
 800d5a8:	6833      	ldreq	r3, [r6, #0]
 800d5aa:	1aed      	subeq	r5, r5, r3
 800d5ac:	68a3      	ldr	r3, [r4, #8]
 800d5ae:	bf0c      	ite	eq
 800d5b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5b4:	2500      	movne	r5, #0
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	bfc4      	itt	gt
 800d5ba:	1a9b      	subgt	r3, r3, r2
 800d5bc:	18ed      	addgt	r5, r5, r3
 800d5be:	2600      	movs	r6, #0
 800d5c0:	341a      	adds	r4, #26
 800d5c2:	42b5      	cmp	r5, r6
 800d5c4:	d11a      	bne.n	800d5fc <_printf_common+0xc8>
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	e008      	b.n	800d5dc <_printf_common+0xa8>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	4652      	mov	r2, sl
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	47c0      	blx	r8
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d103      	bne.n	800d5e0 <_printf_common+0xac>
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e0:	3501      	adds	r5, #1
 800d5e2:	e7c6      	b.n	800d572 <_printf_common+0x3e>
 800d5e4:	18e1      	adds	r1, r4, r3
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	2030      	movs	r0, #48	; 0x30
 800d5ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5ee:	4422      	add	r2, r4
 800d5f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5f8:	3302      	adds	r3, #2
 800d5fa:	e7c7      	b.n	800d58c <_printf_common+0x58>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	4622      	mov	r2, r4
 800d600:	4649      	mov	r1, r9
 800d602:	4638      	mov	r0, r7
 800d604:	47c0      	blx	r8
 800d606:	3001      	adds	r0, #1
 800d608:	d0e6      	beq.n	800d5d8 <_printf_common+0xa4>
 800d60a:	3601      	adds	r6, #1
 800d60c:	e7d9      	b.n	800d5c2 <_printf_common+0x8e>
	...

0800d610 <_printf_i>:
 800d610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d614:	7e0f      	ldrb	r7, [r1, #24]
 800d616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d618:	2f78      	cmp	r7, #120	; 0x78
 800d61a:	4691      	mov	r9, r2
 800d61c:	4680      	mov	r8, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	469a      	mov	sl, r3
 800d622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d626:	d807      	bhi.n	800d638 <_printf_i+0x28>
 800d628:	2f62      	cmp	r7, #98	; 0x62
 800d62a:	d80a      	bhi.n	800d642 <_printf_i+0x32>
 800d62c:	2f00      	cmp	r7, #0
 800d62e:	f000 80d4 	beq.w	800d7da <_printf_i+0x1ca>
 800d632:	2f58      	cmp	r7, #88	; 0x58
 800d634:	f000 80c0 	beq.w	800d7b8 <_printf_i+0x1a8>
 800d638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d63c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d640:	e03a      	b.n	800d6b8 <_printf_i+0xa8>
 800d642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d646:	2b15      	cmp	r3, #21
 800d648:	d8f6      	bhi.n	800d638 <_printf_i+0x28>
 800d64a:	a101      	add	r1, pc, #4	; (adr r1, 800d650 <_printf_i+0x40>)
 800d64c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d650:	0800d6a9 	.word	0x0800d6a9
 800d654:	0800d6bd 	.word	0x0800d6bd
 800d658:	0800d639 	.word	0x0800d639
 800d65c:	0800d639 	.word	0x0800d639
 800d660:	0800d639 	.word	0x0800d639
 800d664:	0800d639 	.word	0x0800d639
 800d668:	0800d6bd 	.word	0x0800d6bd
 800d66c:	0800d639 	.word	0x0800d639
 800d670:	0800d639 	.word	0x0800d639
 800d674:	0800d639 	.word	0x0800d639
 800d678:	0800d639 	.word	0x0800d639
 800d67c:	0800d7c1 	.word	0x0800d7c1
 800d680:	0800d6e9 	.word	0x0800d6e9
 800d684:	0800d77b 	.word	0x0800d77b
 800d688:	0800d639 	.word	0x0800d639
 800d68c:	0800d639 	.word	0x0800d639
 800d690:	0800d7e3 	.word	0x0800d7e3
 800d694:	0800d639 	.word	0x0800d639
 800d698:	0800d6e9 	.word	0x0800d6e9
 800d69c:	0800d639 	.word	0x0800d639
 800d6a0:	0800d639 	.word	0x0800d639
 800d6a4:	0800d783 	.word	0x0800d783
 800d6a8:	682b      	ldr	r3, [r5, #0]
 800d6aa:	1d1a      	adds	r2, r3, #4
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	602a      	str	r2, [r5, #0]
 800d6b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e09f      	b.n	800d7fc <_printf_i+0x1ec>
 800d6bc:	6820      	ldr	r0, [r4, #0]
 800d6be:	682b      	ldr	r3, [r5, #0]
 800d6c0:	0607      	lsls	r7, r0, #24
 800d6c2:	f103 0104 	add.w	r1, r3, #4
 800d6c6:	6029      	str	r1, [r5, #0]
 800d6c8:	d501      	bpl.n	800d6ce <_printf_i+0xbe>
 800d6ca:	681e      	ldr	r6, [r3, #0]
 800d6cc:	e003      	b.n	800d6d6 <_printf_i+0xc6>
 800d6ce:	0646      	lsls	r6, r0, #25
 800d6d0:	d5fb      	bpl.n	800d6ca <_printf_i+0xba>
 800d6d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d6d6:	2e00      	cmp	r6, #0
 800d6d8:	da03      	bge.n	800d6e2 <_printf_i+0xd2>
 800d6da:	232d      	movs	r3, #45	; 0x2d
 800d6dc:	4276      	negs	r6, r6
 800d6de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6e2:	485a      	ldr	r0, [pc, #360]	; (800d84c <_printf_i+0x23c>)
 800d6e4:	230a      	movs	r3, #10
 800d6e6:	e012      	b.n	800d70e <_printf_i+0xfe>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	6820      	ldr	r0, [r4, #0]
 800d6ec:	1d19      	adds	r1, r3, #4
 800d6ee:	6029      	str	r1, [r5, #0]
 800d6f0:	0605      	lsls	r5, r0, #24
 800d6f2:	d501      	bpl.n	800d6f8 <_printf_i+0xe8>
 800d6f4:	681e      	ldr	r6, [r3, #0]
 800d6f6:	e002      	b.n	800d6fe <_printf_i+0xee>
 800d6f8:	0641      	lsls	r1, r0, #25
 800d6fa:	d5fb      	bpl.n	800d6f4 <_printf_i+0xe4>
 800d6fc:	881e      	ldrh	r6, [r3, #0]
 800d6fe:	4853      	ldr	r0, [pc, #332]	; (800d84c <_printf_i+0x23c>)
 800d700:	2f6f      	cmp	r7, #111	; 0x6f
 800d702:	bf0c      	ite	eq
 800d704:	2308      	moveq	r3, #8
 800d706:	230a      	movne	r3, #10
 800d708:	2100      	movs	r1, #0
 800d70a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d70e:	6865      	ldr	r5, [r4, #4]
 800d710:	60a5      	str	r5, [r4, #8]
 800d712:	2d00      	cmp	r5, #0
 800d714:	bfa2      	ittt	ge
 800d716:	6821      	ldrge	r1, [r4, #0]
 800d718:	f021 0104 	bicge.w	r1, r1, #4
 800d71c:	6021      	strge	r1, [r4, #0]
 800d71e:	b90e      	cbnz	r6, 800d724 <_printf_i+0x114>
 800d720:	2d00      	cmp	r5, #0
 800d722:	d04b      	beq.n	800d7bc <_printf_i+0x1ac>
 800d724:	4615      	mov	r5, r2
 800d726:	fbb6 f1f3 	udiv	r1, r6, r3
 800d72a:	fb03 6711 	mls	r7, r3, r1, r6
 800d72e:	5dc7      	ldrb	r7, [r0, r7]
 800d730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d734:	4637      	mov	r7, r6
 800d736:	42bb      	cmp	r3, r7
 800d738:	460e      	mov	r6, r1
 800d73a:	d9f4      	bls.n	800d726 <_printf_i+0x116>
 800d73c:	2b08      	cmp	r3, #8
 800d73e:	d10b      	bne.n	800d758 <_printf_i+0x148>
 800d740:	6823      	ldr	r3, [r4, #0]
 800d742:	07de      	lsls	r6, r3, #31
 800d744:	d508      	bpl.n	800d758 <_printf_i+0x148>
 800d746:	6923      	ldr	r3, [r4, #16]
 800d748:	6861      	ldr	r1, [r4, #4]
 800d74a:	4299      	cmp	r1, r3
 800d74c:	bfde      	ittt	le
 800d74e:	2330      	movle	r3, #48	; 0x30
 800d750:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d754:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d758:	1b52      	subs	r2, r2, r5
 800d75a:	6122      	str	r2, [r4, #16]
 800d75c:	f8cd a000 	str.w	sl, [sp]
 800d760:	464b      	mov	r3, r9
 800d762:	aa03      	add	r2, sp, #12
 800d764:	4621      	mov	r1, r4
 800d766:	4640      	mov	r0, r8
 800d768:	f7ff fee4 	bl	800d534 <_printf_common>
 800d76c:	3001      	adds	r0, #1
 800d76e:	d14a      	bne.n	800d806 <_printf_i+0x1f6>
 800d770:	f04f 30ff 	mov.w	r0, #4294967295
 800d774:	b004      	add	sp, #16
 800d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	f043 0320 	orr.w	r3, r3, #32
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	4833      	ldr	r0, [pc, #204]	; (800d850 <_printf_i+0x240>)
 800d784:	2778      	movs	r7, #120	; 0x78
 800d786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	6829      	ldr	r1, [r5, #0]
 800d78e:	061f      	lsls	r7, r3, #24
 800d790:	f851 6b04 	ldr.w	r6, [r1], #4
 800d794:	d402      	bmi.n	800d79c <_printf_i+0x18c>
 800d796:	065f      	lsls	r7, r3, #25
 800d798:	bf48      	it	mi
 800d79a:	b2b6      	uxthmi	r6, r6
 800d79c:	07df      	lsls	r7, r3, #31
 800d79e:	bf48      	it	mi
 800d7a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d7a4:	6029      	str	r1, [r5, #0]
 800d7a6:	bf48      	it	mi
 800d7a8:	6023      	strmi	r3, [r4, #0]
 800d7aa:	b91e      	cbnz	r6, 800d7b4 <_printf_i+0x1a4>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	f023 0320 	bic.w	r3, r3, #32
 800d7b2:	6023      	str	r3, [r4, #0]
 800d7b4:	2310      	movs	r3, #16
 800d7b6:	e7a7      	b.n	800d708 <_printf_i+0xf8>
 800d7b8:	4824      	ldr	r0, [pc, #144]	; (800d84c <_printf_i+0x23c>)
 800d7ba:	e7e4      	b.n	800d786 <_printf_i+0x176>
 800d7bc:	4615      	mov	r5, r2
 800d7be:	e7bd      	b.n	800d73c <_printf_i+0x12c>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	6826      	ldr	r6, [r4, #0]
 800d7c4:	6961      	ldr	r1, [r4, #20]
 800d7c6:	1d18      	adds	r0, r3, #4
 800d7c8:	6028      	str	r0, [r5, #0]
 800d7ca:	0635      	lsls	r5, r6, #24
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	d501      	bpl.n	800d7d4 <_printf_i+0x1c4>
 800d7d0:	6019      	str	r1, [r3, #0]
 800d7d2:	e002      	b.n	800d7da <_printf_i+0x1ca>
 800d7d4:	0670      	lsls	r0, r6, #25
 800d7d6:	d5fb      	bpl.n	800d7d0 <_printf_i+0x1c0>
 800d7d8:	8019      	strh	r1, [r3, #0]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	6123      	str	r3, [r4, #16]
 800d7de:	4615      	mov	r5, r2
 800d7e0:	e7bc      	b.n	800d75c <_printf_i+0x14c>
 800d7e2:	682b      	ldr	r3, [r5, #0]
 800d7e4:	1d1a      	adds	r2, r3, #4
 800d7e6:	602a      	str	r2, [r5, #0]
 800d7e8:	681d      	ldr	r5, [r3, #0]
 800d7ea:	6862      	ldr	r2, [r4, #4]
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f7f2 fd0e 	bl	8000210 <memchr>
 800d7f4:	b108      	cbz	r0, 800d7fa <_printf_i+0x1ea>
 800d7f6:	1b40      	subs	r0, r0, r5
 800d7f8:	6060      	str	r0, [r4, #4]
 800d7fa:	6863      	ldr	r3, [r4, #4]
 800d7fc:	6123      	str	r3, [r4, #16]
 800d7fe:	2300      	movs	r3, #0
 800d800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d804:	e7aa      	b.n	800d75c <_printf_i+0x14c>
 800d806:	6923      	ldr	r3, [r4, #16]
 800d808:	462a      	mov	r2, r5
 800d80a:	4649      	mov	r1, r9
 800d80c:	4640      	mov	r0, r8
 800d80e:	47d0      	blx	sl
 800d810:	3001      	adds	r0, #1
 800d812:	d0ad      	beq.n	800d770 <_printf_i+0x160>
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	079b      	lsls	r3, r3, #30
 800d818:	d413      	bmi.n	800d842 <_printf_i+0x232>
 800d81a:	68e0      	ldr	r0, [r4, #12]
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	4298      	cmp	r0, r3
 800d820:	bfb8      	it	lt
 800d822:	4618      	movlt	r0, r3
 800d824:	e7a6      	b.n	800d774 <_printf_i+0x164>
 800d826:	2301      	movs	r3, #1
 800d828:	4632      	mov	r2, r6
 800d82a:	4649      	mov	r1, r9
 800d82c:	4640      	mov	r0, r8
 800d82e:	47d0      	blx	sl
 800d830:	3001      	adds	r0, #1
 800d832:	d09d      	beq.n	800d770 <_printf_i+0x160>
 800d834:	3501      	adds	r5, #1
 800d836:	68e3      	ldr	r3, [r4, #12]
 800d838:	9903      	ldr	r1, [sp, #12]
 800d83a:	1a5b      	subs	r3, r3, r1
 800d83c:	42ab      	cmp	r3, r5
 800d83e:	dcf2      	bgt.n	800d826 <_printf_i+0x216>
 800d840:	e7eb      	b.n	800d81a <_printf_i+0x20a>
 800d842:	2500      	movs	r5, #0
 800d844:	f104 0619 	add.w	r6, r4, #25
 800d848:	e7f5      	b.n	800d836 <_printf_i+0x226>
 800d84a:	bf00      	nop
 800d84c:	0800f382 	.word	0x0800f382
 800d850:	0800f393 	.word	0x0800f393

0800d854 <__swbuf_r>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	460e      	mov	r6, r1
 800d858:	4614      	mov	r4, r2
 800d85a:	4605      	mov	r5, r0
 800d85c:	b118      	cbz	r0, 800d866 <__swbuf_r+0x12>
 800d85e:	6a03      	ldr	r3, [r0, #32]
 800d860:	b90b      	cbnz	r3, 800d866 <__swbuf_r+0x12>
 800d862:	f7fe f981 	bl	800bb68 <__sinit>
 800d866:	69a3      	ldr	r3, [r4, #24]
 800d868:	60a3      	str	r3, [r4, #8]
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	071a      	lsls	r2, r3, #28
 800d86e:	d525      	bpl.n	800d8bc <__swbuf_r+0x68>
 800d870:	6923      	ldr	r3, [r4, #16]
 800d872:	b31b      	cbz	r3, 800d8bc <__swbuf_r+0x68>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	6922      	ldr	r2, [r4, #16]
 800d878:	1a98      	subs	r0, r3, r2
 800d87a:	6963      	ldr	r3, [r4, #20]
 800d87c:	b2f6      	uxtb	r6, r6
 800d87e:	4283      	cmp	r3, r0
 800d880:	4637      	mov	r7, r6
 800d882:	dc04      	bgt.n	800d88e <__swbuf_r+0x3a>
 800d884:	4621      	mov	r1, r4
 800d886:	4628      	mov	r0, r5
 800d888:	f7ff fc84 	bl	800d194 <_fflush_r>
 800d88c:	b9e0      	cbnz	r0, 800d8c8 <__swbuf_r+0x74>
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	3b01      	subs	r3, #1
 800d892:	60a3      	str	r3, [r4, #8]
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	6022      	str	r2, [r4, #0]
 800d89a:	701e      	strb	r6, [r3, #0]
 800d89c:	6962      	ldr	r2, [r4, #20]
 800d89e:	1c43      	adds	r3, r0, #1
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d004      	beq.n	800d8ae <__swbuf_r+0x5a>
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	07db      	lsls	r3, r3, #31
 800d8a8:	d506      	bpl.n	800d8b8 <__swbuf_r+0x64>
 800d8aa:	2e0a      	cmp	r6, #10
 800d8ac:	d104      	bne.n	800d8b8 <__swbuf_r+0x64>
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f7ff fc6f 	bl	800d194 <_fflush_r>
 800d8b6:	b938      	cbnz	r0, 800d8c8 <__swbuf_r+0x74>
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8bc:	4621      	mov	r1, r4
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f000 f806 	bl	800d8d0 <__swsetup_r>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d0d5      	beq.n	800d874 <__swbuf_r+0x20>
 800d8c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d8cc:	e7f4      	b.n	800d8b8 <__swbuf_r+0x64>
	...

0800d8d0 <__swsetup_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	4b2a      	ldr	r3, [pc, #168]	; (800d97c <__swsetup_r+0xac>)
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	6818      	ldr	r0, [r3, #0]
 800d8d8:	460c      	mov	r4, r1
 800d8da:	b118      	cbz	r0, 800d8e4 <__swsetup_r+0x14>
 800d8dc:	6a03      	ldr	r3, [r0, #32]
 800d8de:	b90b      	cbnz	r3, 800d8e4 <__swsetup_r+0x14>
 800d8e0:	f7fe f942 	bl	800bb68 <__sinit>
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8ea:	0718      	lsls	r0, r3, #28
 800d8ec:	d422      	bmi.n	800d934 <__swsetup_r+0x64>
 800d8ee:	06d9      	lsls	r1, r3, #27
 800d8f0:	d407      	bmi.n	800d902 <__swsetup_r+0x32>
 800d8f2:	2309      	movs	r3, #9
 800d8f4:	602b      	str	r3, [r5, #0]
 800d8f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d900:	e034      	b.n	800d96c <__swsetup_r+0x9c>
 800d902:	0758      	lsls	r0, r3, #29
 800d904:	d512      	bpl.n	800d92c <__swsetup_r+0x5c>
 800d906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d908:	b141      	cbz	r1, 800d91c <__swsetup_r+0x4c>
 800d90a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d90e:	4299      	cmp	r1, r3
 800d910:	d002      	beq.n	800d918 <__swsetup_r+0x48>
 800d912:	4628      	mov	r0, r5
 800d914:	f7fe fa9c 	bl	800be50 <_free_r>
 800d918:	2300      	movs	r3, #0
 800d91a:	6363      	str	r3, [r4, #52]	; 0x34
 800d91c:	89a3      	ldrh	r3, [r4, #12]
 800d91e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d922:	81a3      	strh	r3, [r4, #12]
 800d924:	2300      	movs	r3, #0
 800d926:	6063      	str	r3, [r4, #4]
 800d928:	6923      	ldr	r3, [r4, #16]
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f043 0308 	orr.w	r3, r3, #8
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	6923      	ldr	r3, [r4, #16]
 800d936:	b94b      	cbnz	r3, 800d94c <__swsetup_r+0x7c>
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d93e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d942:	d003      	beq.n	800d94c <__swsetup_r+0x7c>
 800d944:	4621      	mov	r1, r4
 800d946:	4628      	mov	r0, r5
 800d948:	f000 f884 	bl	800da54 <__smakebuf_r>
 800d94c:	89a0      	ldrh	r0, [r4, #12]
 800d94e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d952:	f010 0301 	ands.w	r3, r0, #1
 800d956:	d00a      	beq.n	800d96e <__swsetup_r+0x9e>
 800d958:	2300      	movs	r3, #0
 800d95a:	60a3      	str	r3, [r4, #8]
 800d95c:	6963      	ldr	r3, [r4, #20]
 800d95e:	425b      	negs	r3, r3
 800d960:	61a3      	str	r3, [r4, #24]
 800d962:	6923      	ldr	r3, [r4, #16]
 800d964:	b943      	cbnz	r3, 800d978 <__swsetup_r+0xa8>
 800d966:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d96a:	d1c4      	bne.n	800d8f6 <__swsetup_r+0x26>
 800d96c:	bd38      	pop	{r3, r4, r5, pc}
 800d96e:	0781      	lsls	r1, r0, #30
 800d970:	bf58      	it	pl
 800d972:	6963      	ldrpl	r3, [r4, #20]
 800d974:	60a3      	str	r3, [r4, #8]
 800d976:	e7f4      	b.n	800d962 <__swsetup_r+0x92>
 800d978:	2000      	movs	r0, #0
 800d97a:	e7f7      	b.n	800d96c <__swsetup_r+0x9c>
 800d97c:	20000244 	.word	0x20000244

0800d980 <_raise_r>:
 800d980:	291f      	cmp	r1, #31
 800d982:	b538      	push	{r3, r4, r5, lr}
 800d984:	4604      	mov	r4, r0
 800d986:	460d      	mov	r5, r1
 800d988:	d904      	bls.n	800d994 <_raise_r+0x14>
 800d98a:	2316      	movs	r3, #22
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d996:	b112      	cbz	r2, 800d99e <_raise_r+0x1e>
 800d998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d99c:	b94b      	cbnz	r3, 800d9b2 <_raise_r+0x32>
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 f830 	bl	800da04 <_getpid_r>
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ae:	f000 b817 	b.w	800d9e0 <_kill_r>
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d00a      	beq.n	800d9cc <_raise_r+0x4c>
 800d9b6:	1c59      	adds	r1, r3, #1
 800d9b8:	d103      	bne.n	800d9c2 <_raise_r+0x42>
 800d9ba:	2316      	movs	r3, #22
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	2001      	movs	r0, #1
 800d9c0:	e7e7      	b.n	800d992 <_raise_r+0x12>
 800d9c2:	2400      	movs	r4, #0
 800d9c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	4798      	blx	r3
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7e0      	b.n	800d992 <_raise_r+0x12>

0800d9d0 <raise>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <raise+0xc>)
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f7ff bfd3 	b.w	800d980 <_raise_r>
 800d9da:	bf00      	nop
 800d9dc:	20000244 	.word	0x20000244

0800d9e0 <_kill_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	; (800da00 <_kill_r+0x20>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	602b      	str	r3, [r5, #0]
 800d9ee:	f7f6 ff23 	bl	8004838 <_kill>
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	d102      	bne.n	800d9fc <_kill_r+0x1c>
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	b103      	cbz	r3, 800d9fc <_kill_r+0x1c>
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	20004898 	.word	0x20004898

0800da04 <_getpid_r>:
 800da04:	f7f6 bf10 	b.w	8004828 <_getpid>

0800da08 <__swhatbuf_r>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	460c      	mov	r4, r1
 800da0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da10:	2900      	cmp	r1, #0
 800da12:	b096      	sub	sp, #88	; 0x58
 800da14:	4615      	mov	r5, r2
 800da16:	461e      	mov	r6, r3
 800da18:	da0d      	bge.n	800da36 <__swhatbuf_r+0x2e>
 800da1a:	89a3      	ldrh	r3, [r4, #12]
 800da1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da20:	f04f 0100 	mov.w	r1, #0
 800da24:	bf0c      	ite	eq
 800da26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800da2a:	2340      	movne	r3, #64	; 0x40
 800da2c:	2000      	movs	r0, #0
 800da2e:	6031      	str	r1, [r6, #0]
 800da30:	602b      	str	r3, [r5, #0]
 800da32:	b016      	add	sp, #88	; 0x58
 800da34:	bd70      	pop	{r4, r5, r6, pc}
 800da36:	466a      	mov	r2, sp
 800da38:	f000 f848 	bl	800dacc <_fstat_r>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	dbec      	blt.n	800da1a <__swhatbuf_r+0x12>
 800da40:	9901      	ldr	r1, [sp, #4]
 800da42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800da46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800da4a:	4259      	negs	r1, r3
 800da4c:	4159      	adcs	r1, r3
 800da4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da52:	e7eb      	b.n	800da2c <__swhatbuf_r+0x24>

0800da54 <__smakebuf_r>:
 800da54:	898b      	ldrh	r3, [r1, #12]
 800da56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da58:	079d      	lsls	r5, r3, #30
 800da5a:	4606      	mov	r6, r0
 800da5c:	460c      	mov	r4, r1
 800da5e:	d507      	bpl.n	800da70 <__smakebuf_r+0x1c>
 800da60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	6123      	str	r3, [r4, #16]
 800da68:	2301      	movs	r3, #1
 800da6a:	6163      	str	r3, [r4, #20]
 800da6c:	b002      	add	sp, #8
 800da6e:	bd70      	pop	{r4, r5, r6, pc}
 800da70:	ab01      	add	r3, sp, #4
 800da72:	466a      	mov	r2, sp
 800da74:	f7ff ffc8 	bl	800da08 <__swhatbuf_r>
 800da78:	9900      	ldr	r1, [sp, #0]
 800da7a:	4605      	mov	r5, r0
 800da7c:	4630      	mov	r0, r6
 800da7e:	f7fe fdab 	bl	800c5d8 <_malloc_r>
 800da82:	b948      	cbnz	r0, 800da98 <__smakebuf_r+0x44>
 800da84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da88:	059a      	lsls	r2, r3, #22
 800da8a:	d4ef      	bmi.n	800da6c <__smakebuf_r+0x18>
 800da8c:	f023 0303 	bic.w	r3, r3, #3
 800da90:	f043 0302 	orr.w	r3, r3, #2
 800da94:	81a3      	strh	r3, [r4, #12]
 800da96:	e7e3      	b.n	800da60 <__smakebuf_r+0xc>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	6020      	str	r0, [r4, #0]
 800da9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	6163      	str	r3, [r4, #20]
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	6120      	str	r0, [r4, #16]
 800daaa:	b15b      	cbz	r3, 800dac4 <__smakebuf_r+0x70>
 800daac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dab0:	4630      	mov	r0, r6
 800dab2:	f000 f81d 	bl	800daf0 <_isatty_r>
 800dab6:	b128      	cbz	r0, 800dac4 <__smakebuf_r+0x70>
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f023 0303 	bic.w	r3, r3, #3
 800dabe:	f043 0301 	orr.w	r3, r3, #1
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	431d      	orrs	r5, r3
 800dac8:	81a5      	strh	r5, [r4, #12]
 800daca:	e7cf      	b.n	800da6c <__smakebuf_r+0x18>

0800dacc <_fstat_r>:
 800dacc:	b538      	push	{r3, r4, r5, lr}
 800dace:	4d07      	ldr	r5, [pc, #28]	; (800daec <_fstat_r+0x20>)
 800dad0:	2300      	movs	r3, #0
 800dad2:	4604      	mov	r4, r0
 800dad4:	4608      	mov	r0, r1
 800dad6:	4611      	mov	r1, r2
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	f7f6 ff0c 	bl	80048f6 <_fstat>
 800dade:	1c43      	adds	r3, r0, #1
 800dae0:	d102      	bne.n	800dae8 <_fstat_r+0x1c>
 800dae2:	682b      	ldr	r3, [r5, #0]
 800dae4:	b103      	cbz	r3, 800dae8 <_fstat_r+0x1c>
 800dae6:	6023      	str	r3, [r4, #0]
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	bf00      	nop
 800daec:	20004898 	.word	0x20004898

0800daf0 <_isatty_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d06      	ldr	r5, [pc, #24]	; (800db0c <_isatty_r+0x1c>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	602b      	str	r3, [r5, #0]
 800dafc:	f7f6 ff0b 	bl	8004916 <_isatty>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	d102      	bne.n	800db0a <_isatty_r+0x1a>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	b103      	cbz	r3, 800db0a <_isatty_r+0x1a>
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	bd38      	pop	{r3, r4, r5, pc}
 800db0c:	20004898 	.word	0x20004898

0800db10 <atan2>:
 800db10:	f000 b956 	b.w	800ddc0 <__ieee754_atan2>

0800db14 <pow>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	ed2d 8b02 	vpush	{d8}
 800db1a:	eeb0 8a40 	vmov.f32	s16, s0
 800db1e:	eef0 8a60 	vmov.f32	s17, s1
 800db22:	ec55 4b11 	vmov	r4, r5, d1
 800db26:	f000 fa13 	bl	800df50 <__ieee754_pow>
 800db2a:	4622      	mov	r2, r4
 800db2c:	462b      	mov	r3, r5
 800db2e:	4620      	mov	r0, r4
 800db30:	4629      	mov	r1, r5
 800db32:	ec57 6b10 	vmov	r6, r7, d0
 800db36:	f7f3 f811 	bl	8000b5c <__aeabi_dcmpun>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d13b      	bne.n	800dbb6 <pow+0xa2>
 800db3e:	ec51 0b18 	vmov	r0, r1, d8
 800db42:	2200      	movs	r2, #0
 800db44:	2300      	movs	r3, #0
 800db46:	f7f2 ffd7 	bl	8000af8 <__aeabi_dcmpeq>
 800db4a:	b1b8      	cbz	r0, 800db7c <pow+0x68>
 800db4c:	2200      	movs	r2, #0
 800db4e:	2300      	movs	r3, #0
 800db50:	4620      	mov	r0, r4
 800db52:	4629      	mov	r1, r5
 800db54:	f7f2 ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d146      	bne.n	800dbea <pow+0xd6>
 800db5c:	ec45 4b10 	vmov	d0, r4, r5
 800db60:	f000 f848 	bl	800dbf4 <finite>
 800db64:	b338      	cbz	r0, 800dbb6 <pow+0xa2>
 800db66:	2200      	movs	r2, #0
 800db68:	2300      	movs	r3, #0
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7f2 ffcd 	bl	8000b0c <__aeabi_dcmplt>
 800db72:	b300      	cbz	r0, 800dbb6 <pow+0xa2>
 800db74:	f7fe f928 	bl	800bdc8 <__errno>
 800db78:	2322      	movs	r3, #34	; 0x22
 800db7a:	e01b      	b.n	800dbb4 <pow+0xa0>
 800db7c:	ec47 6b10 	vmov	d0, r6, r7
 800db80:	f000 f838 	bl	800dbf4 <finite>
 800db84:	b9e0      	cbnz	r0, 800dbc0 <pow+0xac>
 800db86:	eeb0 0a48 	vmov.f32	s0, s16
 800db8a:	eef0 0a68 	vmov.f32	s1, s17
 800db8e:	f000 f831 	bl	800dbf4 <finite>
 800db92:	b1a8      	cbz	r0, 800dbc0 <pow+0xac>
 800db94:	ec45 4b10 	vmov	d0, r4, r5
 800db98:	f000 f82c 	bl	800dbf4 <finite>
 800db9c:	b180      	cbz	r0, 800dbc0 <pow+0xac>
 800db9e:	4632      	mov	r2, r6
 800dba0:	463b      	mov	r3, r7
 800dba2:	4630      	mov	r0, r6
 800dba4:	4639      	mov	r1, r7
 800dba6:	f7f2 ffd9 	bl	8000b5c <__aeabi_dcmpun>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d0e2      	beq.n	800db74 <pow+0x60>
 800dbae:	f7fe f90b 	bl	800bdc8 <__errno>
 800dbb2:	2321      	movs	r3, #33	; 0x21
 800dbb4:	6003      	str	r3, [r0, #0]
 800dbb6:	ecbd 8b02 	vpop	{d8}
 800dbba:	ec47 6b10 	vmov	d0, r6, r7
 800dbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	f7f2 ff96 	bl	8000af8 <__aeabi_dcmpeq>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d0f2      	beq.n	800dbb6 <pow+0xa2>
 800dbd0:	eeb0 0a48 	vmov.f32	s0, s16
 800dbd4:	eef0 0a68 	vmov.f32	s1, s17
 800dbd8:	f000 f80c 	bl	800dbf4 <finite>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d0ea      	beq.n	800dbb6 <pow+0xa2>
 800dbe0:	ec45 4b10 	vmov	d0, r4, r5
 800dbe4:	f000 f806 	bl	800dbf4 <finite>
 800dbe8:	e7c3      	b.n	800db72 <pow+0x5e>
 800dbea:	4f01      	ldr	r7, [pc, #4]	; (800dbf0 <pow+0xdc>)
 800dbec:	2600      	movs	r6, #0
 800dbee:	e7e2      	b.n	800dbb6 <pow+0xa2>
 800dbf0:	3ff00000 	.word	0x3ff00000

0800dbf4 <finite>:
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	ed8d 0b00 	vstr	d0, [sp]
 800dbfa:	9801      	ldr	r0, [sp, #4]
 800dbfc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dc00:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dc04:	0fc0      	lsrs	r0, r0, #31
 800dc06:	b002      	add	sp, #8
 800dc08:	4770      	bx	lr
	...

0800dc0c <__ieee754_sqrt>:
 800dc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	ec55 4b10 	vmov	r4, r5, d0
 800dc14:	4e67      	ldr	r6, [pc, #412]	; (800ddb4 <__ieee754_sqrt+0x1a8>)
 800dc16:	43ae      	bics	r6, r5
 800dc18:	ee10 0a10 	vmov	r0, s0
 800dc1c:	ee10 2a10 	vmov	r2, s0
 800dc20:	4629      	mov	r1, r5
 800dc22:	462b      	mov	r3, r5
 800dc24:	d10d      	bne.n	800dc42 <__ieee754_sqrt+0x36>
 800dc26:	f7f2 fcff 	bl	8000628 <__aeabi_dmul>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4620      	mov	r0, r4
 800dc30:	4629      	mov	r1, r5
 800dc32:	f7f2 fb43 	bl	80002bc <__adddf3>
 800dc36:	4604      	mov	r4, r0
 800dc38:	460d      	mov	r5, r1
 800dc3a:	ec45 4b10 	vmov	d0, r4, r5
 800dc3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	dc0b      	bgt.n	800dc5e <__ieee754_sqrt+0x52>
 800dc46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc4a:	4326      	orrs	r6, r4
 800dc4c:	d0f5      	beq.n	800dc3a <__ieee754_sqrt+0x2e>
 800dc4e:	b135      	cbz	r5, 800dc5e <__ieee754_sqrt+0x52>
 800dc50:	f7f2 fb32 	bl	80002b8 <__aeabi_dsub>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	f7f2 fe10 	bl	800087c <__aeabi_ddiv>
 800dc5c:	e7eb      	b.n	800dc36 <__ieee754_sqrt+0x2a>
 800dc5e:	1509      	asrs	r1, r1, #20
 800dc60:	f000 808d 	beq.w	800dd7e <__ieee754_sqrt+0x172>
 800dc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc68:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dc6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc70:	07c9      	lsls	r1, r1, #31
 800dc72:	bf5c      	itt	pl
 800dc74:	005b      	lslpl	r3, r3, #1
 800dc76:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dc7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc7e:	bf58      	it	pl
 800dc80:	0052      	lslpl	r2, r2, #1
 800dc82:	2500      	movs	r5, #0
 800dc84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc88:	1076      	asrs	r6, r6, #1
 800dc8a:	0052      	lsls	r2, r2, #1
 800dc8c:	f04f 0e16 	mov.w	lr, #22
 800dc90:	46ac      	mov	ip, r5
 800dc92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc96:	eb0c 0001 	add.w	r0, ip, r1
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	bfde      	ittt	le
 800dc9e:	1a1b      	suble	r3, r3, r0
 800dca0:	eb00 0c01 	addle.w	ip, r0, r1
 800dca4:	186d      	addle	r5, r5, r1
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	f1be 0e01 	subs.w	lr, lr, #1
 800dcac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dcb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dcb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dcb8:	d1ed      	bne.n	800dc96 <__ieee754_sqrt+0x8a>
 800dcba:	4674      	mov	r4, lr
 800dcbc:	2720      	movs	r7, #32
 800dcbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dcc2:	4563      	cmp	r3, ip
 800dcc4:	eb01 000e 	add.w	r0, r1, lr
 800dcc8:	dc02      	bgt.n	800dcd0 <__ieee754_sqrt+0xc4>
 800dcca:	d113      	bne.n	800dcf4 <__ieee754_sqrt+0xe8>
 800dccc:	4290      	cmp	r0, r2
 800dcce:	d811      	bhi.n	800dcf4 <__ieee754_sqrt+0xe8>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	eb00 0e01 	add.w	lr, r0, r1
 800dcd6:	da57      	bge.n	800dd88 <__ieee754_sqrt+0x17c>
 800dcd8:	f1be 0f00 	cmp.w	lr, #0
 800dcdc:	db54      	blt.n	800dd88 <__ieee754_sqrt+0x17c>
 800dcde:	f10c 0801 	add.w	r8, ip, #1
 800dce2:	eba3 030c 	sub.w	r3, r3, ip
 800dce6:	4290      	cmp	r0, r2
 800dce8:	bf88      	it	hi
 800dcea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dcee:	1a12      	subs	r2, r2, r0
 800dcf0:	440c      	add	r4, r1
 800dcf2:	46c4      	mov	ip, r8
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	3f01      	subs	r7, #1
 800dcf8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dcfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dd00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dd04:	d1dd      	bne.n	800dcc2 <__ieee754_sqrt+0xb6>
 800dd06:	4313      	orrs	r3, r2
 800dd08:	d01b      	beq.n	800dd42 <__ieee754_sqrt+0x136>
 800dd0a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ddb8 <__ieee754_sqrt+0x1ac>
 800dd0e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ddbc <__ieee754_sqrt+0x1b0>
 800dd12:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd16:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd1a:	f7f2 facd 	bl	80002b8 <__aeabi_dsub>
 800dd1e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	4640      	mov	r0, r8
 800dd28:	4649      	mov	r1, r9
 800dd2a:	f7f2 fef9 	bl	8000b20 <__aeabi_dcmple>
 800dd2e:	b140      	cbz	r0, 800dd42 <__ieee754_sqrt+0x136>
 800dd30:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dd34:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd38:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd3c:	d126      	bne.n	800dd8c <__ieee754_sqrt+0x180>
 800dd3e:	3501      	adds	r5, #1
 800dd40:	463c      	mov	r4, r7
 800dd42:	106a      	asrs	r2, r5, #1
 800dd44:	0863      	lsrs	r3, r4, #1
 800dd46:	07e9      	lsls	r1, r5, #31
 800dd48:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dd4c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dd50:	bf48      	it	mi
 800dd52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dd56:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dd5a:	461c      	mov	r4, r3
 800dd5c:	e76d      	b.n	800dc3a <__ieee754_sqrt+0x2e>
 800dd5e:	0ad3      	lsrs	r3, r2, #11
 800dd60:	3815      	subs	r0, #21
 800dd62:	0552      	lsls	r2, r2, #21
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0fa      	beq.n	800dd5e <__ieee754_sqrt+0x152>
 800dd68:	02dc      	lsls	r4, r3, #11
 800dd6a:	d50a      	bpl.n	800dd82 <__ieee754_sqrt+0x176>
 800dd6c:	f1c1 0420 	rsb	r4, r1, #32
 800dd70:	fa22 f404 	lsr.w	r4, r2, r4
 800dd74:	1e4d      	subs	r5, r1, #1
 800dd76:	408a      	lsls	r2, r1
 800dd78:	4323      	orrs	r3, r4
 800dd7a:	1b41      	subs	r1, r0, r5
 800dd7c:	e772      	b.n	800dc64 <__ieee754_sqrt+0x58>
 800dd7e:	4608      	mov	r0, r1
 800dd80:	e7f0      	b.n	800dd64 <__ieee754_sqrt+0x158>
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	3101      	adds	r1, #1
 800dd86:	e7ef      	b.n	800dd68 <__ieee754_sqrt+0x15c>
 800dd88:	46e0      	mov	r8, ip
 800dd8a:	e7aa      	b.n	800dce2 <__ieee754_sqrt+0xd6>
 800dd8c:	f7f2 fa96 	bl	80002bc <__adddf3>
 800dd90:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	4640      	mov	r0, r8
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	f7f2 feb6 	bl	8000b0c <__aeabi_dcmplt>
 800dda0:	b120      	cbz	r0, 800ddac <__ieee754_sqrt+0x1a0>
 800dda2:	1ca0      	adds	r0, r4, #2
 800dda4:	bf08      	it	eq
 800dda6:	3501      	addeq	r5, #1
 800dda8:	3402      	adds	r4, #2
 800ddaa:	e7ca      	b.n	800dd42 <__ieee754_sqrt+0x136>
 800ddac:	3401      	adds	r4, #1
 800ddae:	f024 0401 	bic.w	r4, r4, #1
 800ddb2:	e7c6      	b.n	800dd42 <__ieee754_sqrt+0x136>
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	20000248 	.word	0x20000248
 800ddbc:	20000250 	.word	0x20000250

0800ddc0 <__ieee754_atan2>:
 800ddc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddc4:	ec57 6b11 	vmov	r6, r7, d1
 800ddc8:	4273      	negs	r3, r6
 800ddca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800df48 <__ieee754_atan2+0x188>
 800ddce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ddd2:	4333      	orrs	r3, r6
 800ddd4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ddd8:	4543      	cmp	r3, r8
 800ddda:	ec51 0b10 	vmov	r0, r1, d0
 800ddde:	ee11 5a10 	vmov	r5, s2
 800dde2:	d80a      	bhi.n	800ddfa <__ieee754_atan2+0x3a>
 800dde4:	4244      	negs	r4, r0
 800dde6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ddea:	4304      	orrs	r4, r0
 800ddec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ddf0:	4544      	cmp	r4, r8
 800ddf2:	ee10 9a10 	vmov	r9, s0
 800ddf6:	468e      	mov	lr, r1
 800ddf8:	d907      	bls.n	800de0a <__ieee754_atan2+0x4a>
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	f7f2 fa5d 	bl	80002bc <__adddf3>
 800de02:	ec41 0b10 	vmov	d0, r0, r1
 800de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800de0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de12:	4334      	orrs	r4, r6
 800de14:	d103      	bne.n	800de1e <__ieee754_atan2+0x5e>
 800de16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de1a:	f000 bdc5 	b.w	800e9a8 <atan>
 800de1e:	17bc      	asrs	r4, r7, #30
 800de20:	f004 0402 	and.w	r4, r4, #2
 800de24:	ea53 0909 	orrs.w	r9, r3, r9
 800de28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800de2c:	d107      	bne.n	800de3e <__ieee754_atan2+0x7e>
 800de2e:	2c02      	cmp	r4, #2
 800de30:	d05f      	beq.n	800def2 <__ieee754_atan2+0x132>
 800de32:	2c03      	cmp	r4, #3
 800de34:	d1e5      	bne.n	800de02 <__ieee754_atan2+0x42>
 800de36:	a140      	add	r1, pc, #256	; (adr r1, 800df38 <__ieee754_atan2+0x178>)
 800de38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de3c:	e7e1      	b.n	800de02 <__ieee754_atan2+0x42>
 800de3e:	4315      	orrs	r5, r2
 800de40:	d106      	bne.n	800de50 <__ieee754_atan2+0x90>
 800de42:	f1be 0f00 	cmp.w	lr, #0
 800de46:	da5f      	bge.n	800df08 <__ieee754_atan2+0x148>
 800de48:	a13d      	add	r1, pc, #244	; (adr r1, 800df40 <__ieee754_atan2+0x180>)
 800de4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de4e:	e7d8      	b.n	800de02 <__ieee754_atan2+0x42>
 800de50:	4542      	cmp	r2, r8
 800de52:	d10f      	bne.n	800de74 <__ieee754_atan2+0xb4>
 800de54:	4293      	cmp	r3, r2
 800de56:	f104 34ff 	add.w	r4, r4, #4294967295
 800de5a:	d107      	bne.n	800de6c <__ieee754_atan2+0xac>
 800de5c:	2c02      	cmp	r4, #2
 800de5e:	d84c      	bhi.n	800defa <__ieee754_atan2+0x13a>
 800de60:	4b33      	ldr	r3, [pc, #204]	; (800df30 <__ieee754_atan2+0x170>)
 800de62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de6a:	e7ca      	b.n	800de02 <__ieee754_atan2+0x42>
 800de6c:	2c02      	cmp	r4, #2
 800de6e:	d848      	bhi.n	800df02 <__ieee754_atan2+0x142>
 800de70:	4b30      	ldr	r3, [pc, #192]	; (800df34 <__ieee754_atan2+0x174>)
 800de72:	e7f6      	b.n	800de62 <__ieee754_atan2+0xa2>
 800de74:	4543      	cmp	r3, r8
 800de76:	d0e4      	beq.n	800de42 <__ieee754_atan2+0x82>
 800de78:	1a9b      	subs	r3, r3, r2
 800de7a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800de7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800de82:	da1e      	bge.n	800dec2 <__ieee754_atan2+0x102>
 800de84:	2f00      	cmp	r7, #0
 800de86:	da01      	bge.n	800de8c <__ieee754_atan2+0xcc>
 800de88:	323c      	adds	r2, #60	; 0x3c
 800de8a:	db1e      	blt.n	800deca <__ieee754_atan2+0x10a>
 800de8c:	4632      	mov	r2, r6
 800de8e:	463b      	mov	r3, r7
 800de90:	f7f2 fcf4 	bl	800087c <__aeabi_ddiv>
 800de94:	ec41 0b10 	vmov	d0, r0, r1
 800de98:	f000 ff26 	bl	800ece8 <fabs>
 800de9c:	f000 fd84 	bl	800e9a8 <atan>
 800dea0:	ec51 0b10 	vmov	r0, r1, d0
 800dea4:	2c01      	cmp	r4, #1
 800dea6:	d013      	beq.n	800ded0 <__ieee754_atan2+0x110>
 800dea8:	2c02      	cmp	r4, #2
 800deaa:	d015      	beq.n	800ded8 <__ieee754_atan2+0x118>
 800deac:	2c00      	cmp	r4, #0
 800deae:	d0a8      	beq.n	800de02 <__ieee754_atan2+0x42>
 800deb0:	a317      	add	r3, pc, #92	; (adr r3, 800df10 <__ieee754_atan2+0x150>)
 800deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb6:	f7f2 f9ff 	bl	80002b8 <__aeabi_dsub>
 800deba:	a317      	add	r3, pc, #92	; (adr r3, 800df18 <__ieee754_atan2+0x158>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	e014      	b.n	800deec <__ieee754_atan2+0x12c>
 800dec2:	a117      	add	r1, pc, #92	; (adr r1, 800df20 <__ieee754_atan2+0x160>)
 800dec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dec8:	e7ec      	b.n	800dea4 <__ieee754_atan2+0xe4>
 800deca:	2000      	movs	r0, #0
 800decc:	2100      	movs	r1, #0
 800dece:	e7e9      	b.n	800dea4 <__ieee754_atan2+0xe4>
 800ded0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ded4:	4619      	mov	r1, r3
 800ded6:	e794      	b.n	800de02 <__ieee754_atan2+0x42>
 800ded8:	a30d      	add	r3, pc, #52	; (adr r3, 800df10 <__ieee754_atan2+0x150>)
 800deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dede:	f7f2 f9eb 	bl	80002b8 <__aeabi_dsub>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	a10c      	add	r1, pc, #48	; (adr r1, 800df18 <__ieee754_atan2+0x158>)
 800dee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deec:	f7f2 f9e4 	bl	80002b8 <__aeabi_dsub>
 800def0:	e787      	b.n	800de02 <__ieee754_atan2+0x42>
 800def2:	a109      	add	r1, pc, #36	; (adr r1, 800df18 <__ieee754_atan2+0x158>)
 800def4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800def8:	e783      	b.n	800de02 <__ieee754_atan2+0x42>
 800defa:	a10b      	add	r1, pc, #44	; (adr r1, 800df28 <__ieee754_atan2+0x168>)
 800defc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df00:	e77f      	b.n	800de02 <__ieee754_atan2+0x42>
 800df02:	2000      	movs	r0, #0
 800df04:	2100      	movs	r1, #0
 800df06:	e77c      	b.n	800de02 <__ieee754_atan2+0x42>
 800df08:	a105      	add	r1, pc, #20	; (adr r1, 800df20 <__ieee754_atan2+0x160>)
 800df0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df0e:	e778      	b.n	800de02 <__ieee754_atan2+0x42>
 800df10:	33145c07 	.word	0x33145c07
 800df14:	3ca1a626 	.word	0x3ca1a626
 800df18:	54442d18 	.word	0x54442d18
 800df1c:	400921fb 	.word	0x400921fb
 800df20:	54442d18 	.word	0x54442d18
 800df24:	3ff921fb 	.word	0x3ff921fb
 800df28:	54442d18 	.word	0x54442d18
 800df2c:	3fe921fb 	.word	0x3fe921fb
 800df30:	0800f3a8 	.word	0x0800f3a8
 800df34:	0800f3c0 	.word	0x0800f3c0
 800df38:	54442d18 	.word	0x54442d18
 800df3c:	c00921fb 	.word	0xc00921fb
 800df40:	54442d18 	.word	0x54442d18
 800df44:	bff921fb 	.word	0xbff921fb
 800df48:	7ff00000 	.word	0x7ff00000
 800df4c:	00000000 	.word	0x00000000

0800df50 <__ieee754_pow>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	ed2d 8b06 	vpush	{d8-d10}
 800df58:	b089      	sub	sp, #36	; 0x24
 800df5a:	ed8d 1b00 	vstr	d1, [sp]
 800df5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800df62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800df66:	ea58 0102 	orrs.w	r1, r8, r2
 800df6a:	ec57 6b10 	vmov	r6, r7, d0
 800df6e:	d115      	bne.n	800df9c <__ieee754_pow+0x4c>
 800df70:	19b3      	adds	r3, r6, r6
 800df72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800df76:	4152      	adcs	r2, r2
 800df78:	4299      	cmp	r1, r3
 800df7a:	4b89      	ldr	r3, [pc, #548]	; (800e1a0 <__ieee754_pow+0x250>)
 800df7c:	4193      	sbcs	r3, r2
 800df7e:	f080 84d1 	bcs.w	800e924 <__ieee754_pow+0x9d4>
 800df82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df86:	4630      	mov	r0, r6
 800df88:	4639      	mov	r1, r7
 800df8a:	f7f2 f997 	bl	80002bc <__adddf3>
 800df8e:	ec41 0b10 	vmov	d0, r0, r1
 800df92:	b009      	add	sp, #36	; 0x24
 800df94:	ecbd 8b06 	vpop	{d8-d10}
 800df98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9c:	4b81      	ldr	r3, [pc, #516]	; (800e1a4 <__ieee754_pow+0x254>)
 800df9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dfa2:	429c      	cmp	r4, r3
 800dfa4:	ee10 aa10 	vmov	sl, s0
 800dfa8:	463d      	mov	r5, r7
 800dfaa:	dc06      	bgt.n	800dfba <__ieee754_pow+0x6a>
 800dfac:	d101      	bne.n	800dfb2 <__ieee754_pow+0x62>
 800dfae:	2e00      	cmp	r6, #0
 800dfb0:	d1e7      	bne.n	800df82 <__ieee754_pow+0x32>
 800dfb2:	4598      	cmp	r8, r3
 800dfb4:	dc01      	bgt.n	800dfba <__ieee754_pow+0x6a>
 800dfb6:	d10f      	bne.n	800dfd8 <__ieee754_pow+0x88>
 800dfb8:	b172      	cbz	r2, 800dfd8 <__ieee754_pow+0x88>
 800dfba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dfbe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dfc2:	ea55 050a 	orrs.w	r5, r5, sl
 800dfc6:	d1dc      	bne.n	800df82 <__ieee754_pow+0x32>
 800dfc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dfcc:	18db      	adds	r3, r3, r3
 800dfce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dfd2:	4152      	adcs	r2, r2
 800dfd4:	429d      	cmp	r5, r3
 800dfd6:	e7d0      	b.n	800df7a <__ieee754_pow+0x2a>
 800dfd8:	2d00      	cmp	r5, #0
 800dfda:	da3b      	bge.n	800e054 <__ieee754_pow+0x104>
 800dfdc:	4b72      	ldr	r3, [pc, #456]	; (800e1a8 <__ieee754_pow+0x258>)
 800dfde:	4598      	cmp	r8, r3
 800dfe0:	dc51      	bgt.n	800e086 <__ieee754_pow+0x136>
 800dfe2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dfe6:	4598      	cmp	r8, r3
 800dfe8:	f340 84ab 	ble.w	800e942 <__ieee754_pow+0x9f2>
 800dfec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dff4:	2b14      	cmp	r3, #20
 800dff6:	dd0f      	ble.n	800e018 <__ieee754_pow+0xc8>
 800dff8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dffc:	fa22 f103 	lsr.w	r1, r2, r3
 800e000:	fa01 f303 	lsl.w	r3, r1, r3
 800e004:	4293      	cmp	r3, r2
 800e006:	f040 849c 	bne.w	800e942 <__ieee754_pow+0x9f2>
 800e00a:	f001 0101 	and.w	r1, r1, #1
 800e00e:	f1c1 0302 	rsb	r3, r1, #2
 800e012:	9304      	str	r3, [sp, #16]
 800e014:	b182      	cbz	r2, 800e038 <__ieee754_pow+0xe8>
 800e016:	e05f      	b.n	800e0d8 <__ieee754_pow+0x188>
 800e018:	2a00      	cmp	r2, #0
 800e01a:	d15b      	bne.n	800e0d4 <__ieee754_pow+0x184>
 800e01c:	f1c3 0314 	rsb	r3, r3, #20
 800e020:	fa48 f103 	asr.w	r1, r8, r3
 800e024:	fa01 f303 	lsl.w	r3, r1, r3
 800e028:	4543      	cmp	r3, r8
 800e02a:	f040 8487 	bne.w	800e93c <__ieee754_pow+0x9ec>
 800e02e:	f001 0101 	and.w	r1, r1, #1
 800e032:	f1c1 0302 	rsb	r3, r1, #2
 800e036:	9304      	str	r3, [sp, #16]
 800e038:	4b5c      	ldr	r3, [pc, #368]	; (800e1ac <__ieee754_pow+0x25c>)
 800e03a:	4598      	cmp	r8, r3
 800e03c:	d132      	bne.n	800e0a4 <__ieee754_pow+0x154>
 800e03e:	f1b9 0f00 	cmp.w	r9, #0
 800e042:	f280 8477 	bge.w	800e934 <__ieee754_pow+0x9e4>
 800e046:	4959      	ldr	r1, [pc, #356]	; (800e1ac <__ieee754_pow+0x25c>)
 800e048:	4632      	mov	r2, r6
 800e04a:	463b      	mov	r3, r7
 800e04c:	2000      	movs	r0, #0
 800e04e:	f7f2 fc15 	bl	800087c <__aeabi_ddiv>
 800e052:	e79c      	b.n	800df8e <__ieee754_pow+0x3e>
 800e054:	2300      	movs	r3, #0
 800e056:	9304      	str	r3, [sp, #16]
 800e058:	2a00      	cmp	r2, #0
 800e05a:	d13d      	bne.n	800e0d8 <__ieee754_pow+0x188>
 800e05c:	4b51      	ldr	r3, [pc, #324]	; (800e1a4 <__ieee754_pow+0x254>)
 800e05e:	4598      	cmp	r8, r3
 800e060:	d1ea      	bne.n	800e038 <__ieee754_pow+0xe8>
 800e062:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e066:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e06a:	ea53 030a 	orrs.w	r3, r3, sl
 800e06e:	f000 8459 	beq.w	800e924 <__ieee754_pow+0x9d4>
 800e072:	4b4f      	ldr	r3, [pc, #316]	; (800e1b0 <__ieee754_pow+0x260>)
 800e074:	429c      	cmp	r4, r3
 800e076:	dd08      	ble.n	800e08a <__ieee754_pow+0x13a>
 800e078:	f1b9 0f00 	cmp.w	r9, #0
 800e07c:	f2c0 8456 	blt.w	800e92c <__ieee754_pow+0x9dc>
 800e080:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e084:	e783      	b.n	800df8e <__ieee754_pow+0x3e>
 800e086:	2302      	movs	r3, #2
 800e088:	e7e5      	b.n	800e056 <__ieee754_pow+0x106>
 800e08a:	f1b9 0f00 	cmp.w	r9, #0
 800e08e:	f04f 0000 	mov.w	r0, #0
 800e092:	f04f 0100 	mov.w	r1, #0
 800e096:	f6bf af7a 	bge.w	800df8e <__ieee754_pow+0x3e>
 800e09a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e09e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0a2:	e774      	b.n	800df8e <__ieee754_pow+0x3e>
 800e0a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e0a8:	d106      	bne.n	800e0b8 <__ieee754_pow+0x168>
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	463b      	mov	r3, r7
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	f7f2 fab9 	bl	8000628 <__aeabi_dmul>
 800e0b6:	e76a      	b.n	800df8e <__ieee754_pow+0x3e>
 800e0b8:	4b3e      	ldr	r3, [pc, #248]	; (800e1b4 <__ieee754_pow+0x264>)
 800e0ba:	4599      	cmp	r9, r3
 800e0bc:	d10c      	bne.n	800e0d8 <__ieee754_pow+0x188>
 800e0be:	2d00      	cmp	r5, #0
 800e0c0:	db0a      	blt.n	800e0d8 <__ieee754_pow+0x188>
 800e0c2:	ec47 6b10 	vmov	d0, r6, r7
 800e0c6:	b009      	add	sp, #36	; 0x24
 800e0c8:	ecbd 8b06 	vpop	{d8-d10}
 800e0cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d0:	f7ff bd9c 	b.w	800dc0c <__ieee754_sqrt>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	9304      	str	r3, [sp, #16]
 800e0d8:	ec47 6b10 	vmov	d0, r6, r7
 800e0dc:	f000 fe04 	bl	800ece8 <fabs>
 800e0e0:	ec51 0b10 	vmov	r0, r1, d0
 800e0e4:	f1ba 0f00 	cmp.w	sl, #0
 800e0e8:	d129      	bne.n	800e13e <__ieee754_pow+0x1ee>
 800e0ea:	b124      	cbz	r4, 800e0f6 <__ieee754_pow+0x1a6>
 800e0ec:	4b2f      	ldr	r3, [pc, #188]	; (800e1ac <__ieee754_pow+0x25c>)
 800e0ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d123      	bne.n	800e13e <__ieee754_pow+0x1ee>
 800e0f6:	f1b9 0f00 	cmp.w	r9, #0
 800e0fa:	da05      	bge.n	800e108 <__ieee754_pow+0x1b8>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	2000      	movs	r0, #0
 800e102:	492a      	ldr	r1, [pc, #168]	; (800e1ac <__ieee754_pow+0x25c>)
 800e104:	f7f2 fbba 	bl	800087c <__aeabi_ddiv>
 800e108:	2d00      	cmp	r5, #0
 800e10a:	f6bf af40 	bge.w	800df8e <__ieee754_pow+0x3e>
 800e10e:	9b04      	ldr	r3, [sp, #16]
 800e110:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e114:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e118:	431c      	orrs	r4, r3
 800e11a:	d108      	bne.n	800e12e <__ieee754_pow+0x1de>
 800e11c:	4602      	mov	r2, r0
 800e11e:	460b      	mov	r3, r1
 800e120:	4610      	mov	r0, r2
 800e122:	4619      	mov	r1, r3
 800e124:	f7f2 f8c8 	bl	80002b8 <__aeabi_dsub>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	e78f      	b.n	800e04e <__ieee754_pow+0xfe>
 800e12e:	9b04      	ldr	r3, [sp, #16]
 800e130:	2b01      	cmp	r3, #1
 800e132:	f47f af2c 	bne.w	800df8e <__ieee754_pow+0x3e>
 800e136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e13a:	4619      	mov	r1, r3
 800e13c:	e727      	b.n	800df8e <__ieee754_pow+0x3e>
 800e13e:	0feb      	lsrs	r3, r5, #31
 800e140:	3b01      	subs	r3, #1
 800e142:	9306      	str	r3, [sp, #24]
 800e144:	9a06      	ldr	r2, [sp, #24]
 800e146:	9b04      	ldr	r3, [sp, #16]
 800e148:	4313      	orrs	r3, r2
 800e14a:	d102      	bne.n	800e152 <__ieee754_pow+0x202>
 800e14c:	4632      	mov	r2, r6
 800e14e:	463b      	mov	r3, r7
 800e150:	e7e6      	b.n	800e120 <__ieee754_pow+0x1d0>
 800e152:	4b19      	ldr	r3, [pc, #100]	; (800e1b8 <__ieee754_pow+0x268>)
 800e154:	4598      	cmp	r8, r3
 800e156:	f340 80fb 	ble.w	800e350 <__ieee754_pow+0x400>
 800e15a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e15e:	4598      	cmp	r8, r3
 800e160:	4b13      	ldr	r3, [pc, #76]	; (800e1b0 <__ieee754_pow+0x260>)
 800e162:	dd0c      	ble.n	800e17e <__ieee754_pow+0x22e>
 800e164:	429c      	cmp	r4, r3
 800e166:	dc0f      	bgt.n	800e188 <__ieee754_pow+0x238>
 800e168:	f1b9 0f00 	cmp.w	r9, #0
 800e16c:	da0f      	bge.n	800e18e <__ieee754_pow+0x23e>
 800e16e:	2000      	movs	r0, #0
 800e170:	b009      	add	sp, #36	; 0x24
 800e172:	ecbd 8b06 	vpop	{d8-d10}
 800e176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	f000 be66 	b.w	800ee4a <__math_oflow>
 800e17e:	429c      	cmp	r4, r3
 800e180:	dbf2      	blt.n	800e168 <__ieee754_pow+0x218>
 800e182:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <__ieee754_pow+0x25c>)
 800e184:	429c      	cmp	r4, r3
 800e186:	dd19      	ble.n	800e1bc <__ieee754_pow+0x26c>
 800e188:	f1b9 0f00 	cmp.w	r9, #0
 800e18c:	dcef      	bgt.n	800e16e <__ieee754_pow+0x21e>
 800e18e:	2000      	movs	r0, #0
 800e190:	b009      	add	sp, #36	; 0x24
 800e192:	ecbd 8b06 	vpop	{d8-d10}
 800e196:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19a:	f000 be4d 	b.w	800ee38 <__math_uflow>
 800e19e:	bf00      	nop
 800e1a0:	fff00000 	.word	0xfff00000
 800e1a4:	7ff00000 	.word	0x7ff00000
 800e1a8:	433fffff 	.word	0x433fffff
 800e1ac:	3ff00000 	.word	0x3ff00000
 800e1b0:	3fefffff 	.word	0x3fefffff
 800e1b4:	3fe00000 	.word	0x3fe00000
 800e1b8:	41e00000 	.word	0x41e00000
 800e1bc:	4b60      	ldr	r3, [pc, #384]	; (800e340 <__ieee754_pow+0x3f0>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f7f2 f87a 	bl	80002b8 <__aeabi_dsub>
 800e1c4:	a354      	add	r3, pc, #336	; (adr r3, 800e318 <__ieee754_pow+0x3c8>)
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	460d      	mov	r5, r1
 800e1ce:	f7f2 fa2b 	bl	8000628 <__aeabi_dmul>
 800e1d2:	a353      	add	r3, pc, #332	; (adr r3, 800e320 <__ieee754_pow+0x3d0>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	4606      	mov	r6, r0
 800e1da:	460f      	mov	r7, r1
 800e1dc:	4620      	mov	r0, r4
 800e1de:	4629      	mov	r1, r5
 800e1e0:	f7f2 fa22 	bl	8000628 <__aeabi_dmul>
 800e1e4:	4b57      	ldr	r3, [pc, #348]	; (800e344 <__ieee754_pow+0x3f4>)
 800e1e6:	4682      	mov	sl, r0
 800e1e8:	468b      	mov	fp, r1
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	a14b      	add	r1, pc, #300	; (adr r1, 800e328 <__ieee754_pow+0x3d8>)
 800e1fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1fe:	f7f2 f85b 	bl	80002b8 <__aeabi_dsub>
 800e202:	4622      	mov	r2, r4
 800e204:	462b      	mov	r3, r5
 800e206:	f7f2 fa0f 	bl	8000628 <__aeabi_dmul>
 800e20a:	4602      	mov	r2, r0
 800e20c:	460b      	mov	r3, r1
 800e20e:	2000      	movs	r0, #0
 800e210:	494d      	ldr	r1, [pc, #308]	; (800e348 <__ieee754_pow+0x3f8>)
 800e212:	f7f2 f851 	bl	80002b8 <__aeabi_dsub>
 800e216:	4622      	mov	r2, r4
 800e218:	4680      	mov	r8, r0
 800e21a:	4689      	mov	r9, r1
 800e21c:	462b      	mov	r3, r5
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 fa01 	bl	8000628 <__aeabi_dmul>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4640      	mov	r0, r8
 800e22c:	4649      	mov	r1, r9
 800e22e:	f7f2 f9fb 	bl	8000628 <__aeabi_dmul>
 800e232:	a33f      	add	r3, pc, #252	; (adr r3, 800e330 <__ieee754_pow+0x3e0>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f9f6 	bl	8000628 <__aeabi_dmul>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4650      	mov	r0, sl
 800e242:	4659      	mov	r1, fp
 800e244:	f7f2 f838 	bl	80002b8 <__aeabi_dsub>
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	4680      	mov	r8, r0
 800e24e:	4689      	mov	r9, r1
 800e250:	4630      	mov	r0, r6
 800e252:	4639      	mov	r1, r7
 800e254:	f7f2 f832 	bl	80002bc <__adddf3>
 800e258:	2000      	movs	r0, #0
 800e25a:	4632      	mov	r2, r6
 800e25c:	463b      	mov	r3, r7
 800e25e:	4604      	mov	r4, r0
 800e260:	460d      	mov	r5, r1
 800e262:	f7f2 f829 	bl	80002b8 <__aeabi_dsub>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4640      	mov	r0, r8
 800e26c:	4649      	mov	r1, r9
 800e26e:	f7f2 f823 	bl	80002b8 <__aeabi_dsub>
 800e272:	9b04      	ldr	r3, [sp, #16]
 800e274:	9a06      	ldr	r2, [sp, #24]
 800e276:	3b01      	subs	r3, #1
 800e278:	4313      	orrs	r3, r2
 800e27a:	4682      	mov	sl, r0
 800e27c:	468b      	mov	fp, r1
 800e27e:	f040 81e7 	bne.w	800e650 <__ieee754_pow+0x700>
 800e282:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e338 <__ieee754_pow+0x3e8>
 800e286:	eeb0 8a47 	vmov.f32	s16, s14
 800e28a:	eef0 8a67 	vmov.f32	s17, s15
 800e28e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e292:	2600      	movs	r6, #0
 800e294:	4632      	mov	r2, r6
 800e296:	463b      	mov	r3, r7
 800e298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e29c:	f7f2 f80c 	bl	80002b8 <__aeabi_dsub>
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	f7f2 f9c0 	bl	8000628 <__aeabi_dmul>
 800e2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ac:	4680      	mov	r8, r0
 800e2ae:	4689      	mov	r9, r1
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	4659      	mov	r1, fp
 800e2b4:	f7f2 f9b8 	bl	8000628 <__aeabi_dmul>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4640      	mov	r0, r8
 800e2be:	4649      	mov	r1, r9
 800e2c0:	f7f1 fffc 	bl	80002bc <__adddf3>
 800e2c4:	4632      	mov	r2, r6
 800e2c6:	463b      	mov	r3, r7
 800e2c8:	4680      	mov	r8, r0
 800e2ca:	4689      	mov	r9, r1
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	f7f2 f9aa 	bl	8000628 <__aeabi_dmul>
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	4602      	mov	r2, r0
 800e2dc:	4649      	mov	r1, r9
 800e2de:	4640      	mov	r0, r8
 800e2e0:	f7f1 ffec 	bl	80002bc <__adddf3>
 800e2e4:	4b19      	ldr	r3, [pc, #100]	; (800e34c <__ieee754_pow+0x3fc>)
 800e2e6:	4299      	cmp	r1, r3
 800e2e8:	ec45 4b19 	vmov	d9, r4, r5
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	460f      	mov	r7, r1
 800e2f0:	468b      	mov	fp, r1
 800e2f2:	f340 82f0 	ble.w	800e8d6 <__ieee754_pow+0x986>
 800e2f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e2fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e2fe:	4303      	orrs	r3, r0
 800e300:	f000 81e4 	beq.w	800e6cc <__ieee754_pow+0x77c>
 800e304:	ec51 0b18 	vmov	r0, r1, d8
 800e308:	2200      	movs	r2, #0
 800e30a:	2300      	movs	r3, #0
 800e30c:	f7f2 fbfe 	bl	8000b0c <__aeabi_dcmplt>
 800e310:	3800      	subs	r0, #0
 800e312:	bf18      	it	ne
 800e314:	2001      	movne	r0, #1
 800e316:	e72b      	b.n	800e170 <__ieee754_pow+0x220>
 800e318:	60000000 	.word	0x60000000
 800e31c:	3ff71547 	.word	0x3ff71547
 800e320:	f85ddf44 	.word	0xf85ddf44
 800e324:	3e54ae0b 	.word	0x3e54ae0b
 800e328:	55555555 	.word	0x55555555
 800e32c:	3fd55555 	.word	0x3fd55555
 800e330:	652b82fe 	.word	0x652b82fe
 800e334:	3ff71547 	.word	0x3ff71547
 800e338:	00000000 	.word	0x00000000
 800e33c:	bff00000 	.word	0xbff00000
 800e340:	3ff00000 	.word	0x3ff00000
 800e344:	3fd00000 	.word	0x3fd00000
 800e348:	3fe00000 	.word	0x3fe00000
 800e34c:	408fffff 	.word	0x408fffff
 800e350:	4bd5      	ldr	r3, [pc, #852]	; (800e6a8 <__ieee754_pow+0x758>)
 800e352:	402b      	ands	r3, r5
 800e354:	2200      	movs	r2, #0
 800e356:	b92b      	cbnz	r3, 800e364 <__ieee754_pow+0x414>
 800e358:	4bd4      	ldr	r3, [pc, #848]	; (800e6ac <__ieee754_pow+0x75c>)
 800e35a:	f7f2 f965 	bl	8000628 <__aeabi_dmul>
 800e35e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e362:	460c      	mov	r4, r1
 800e364:	1523      	asrs	r3, r4, #20
 800e366:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e36a:	4413      	add	r3, r2
 800e36c:	9305      	str	r3, [sp, #20]
 800e36e:	4bd0      	ldr	r3, [pc, #832]	; (800e6b0 <__ieee754_pow+0x760>)
 800e370:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e374:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e378:	429c      	cmp	r4, r3
 800e37a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e37e:	dd08      	ble.n	800e392 <__ieee754_pow+0x442>
 800e380:	4bcc      	ldr	r3, [pc, #816]	; (800e6b4 <__ieee754_pow+0x764>)
 800e382:	429c      	cmp	r4, r3
 800e384:	f340 8162 	ble.w	800e64c <__ieee754_pow+0x6fc>
 800e388:	9b05      	ldr	r3, [sp, #20]
 800e38a:	3301      	adds	r3, #1
 800e38c:	9305      	str	r3, [sp, #20]
 800e38e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e392:	2400      	movs	r4, #0
 800e394:	00e3      	lsls	r3, r4, #3
 800e396:	9307      	str	r3, [sp, #28]
 800e398:	4bc7      	ldr	r3, [pc, #796]	; (800e6b8 <__ieee754_pow+0x768>)
 800e39a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e39e:	ed93 7b00 	vldr	d7, [r3]
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	ec53 2b17 	vmov	r2, r3, d7
 800e3a8:	eeb0 9a47 	vmov.f32	s18, s14
 800e3ac:	eef0 9a67 	vmov.f32	s19, s15
 800e3b0:	4682      	mov	sl, r0
 800e3b2:	f7f1 ff81 	bl	80002b8 <__aeabi_dsub>
 800e3b6:	4652      	mov	r2, sl
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	460f      	mov	r7, r1
 800e3bc:	462b      	mov	r3, r5
 800e3be:	ec51 0b19 	vmov	r0, r1, d9
 800e3c2:	f7f1 ff7b 	bl	80002bc <__adddf3>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	49bb      	ldr	r1, [pc, #748]	; (800e6bc <__ieee754_pow+0x76c>)
 800e3ce:	f7f2 fa55 	bl	800087c <__aeabi_ddiv>
 800e3d2:	ec41 0b1a 	vmov	d10, r0, r1
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	f7f2 f923 	bl	8000628 <__aeabi_dmul>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3e8:	9302      	str	r3, [sp, #8]
 800e3ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e3ee:	46ab      	mov	fp, r5
 800e3f0:	106d      	asrs	r5, r5, #1
 800e3f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e3f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e3fa:	ec41 0b18 	vmov	d8, r0, r1
 800e3fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e402:	2200      	movs	r2, #0
 800e404:	4640      	mov	r0, r8
 800e406:	4649      	mov	r1, r9
 800e408:	4614      	mov	r4, r2
 800e40a:	461d      	mov	r5, r3
 800e40c:	f7f2 f90c 	bl	8000628 <__aeabi_dmul>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4630      	mov	r0, r6
 800e416:	4639      	mov	r1, r7
 800e418:	f7f1 ff4e 	bl	80002b8 <__aeabi_dsub>
 800e41c:	ec53 2b19 	vmov	r2, r3, d9
 800e420:	4606      	mov	r6, r0
 800e422:	460f      	mov	r7, r1
 800e424:	4620      	mov	r0, r4
 800e426:	4629      	mov	r1, r5
 800e428:	f7f1 ff46 	bl	80002b8 <__aeabi_dsub>
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	4650      	mov	r0, sl
 800e432:	4659      	mov	r1, fp
 800e434:	f7f1 ff40 	bl	80002b8 <__aeabi_dsub>
 800e438:	4642      	mov	r2, r8
 800e43a:	464b      	mov	r3, r9
 800e43c:	f7f2 f8f4 	bl	8000628 <__aeabi_dmul>
 800e440:	4602      	mov	r2, r0
 800e442:	460b      	mov	r3, r1
 800e444:	4630      	mov	r0, r6
 800e446:	4639      	mov	r1, r7
 800e448:	f7f1 ff36 	bl	80002b8 <__aeabi_dsub>
 800e44c:	ec53 2b1a 	vmov	r2, r3, d10
 800e450:	f7f2 f8ea 	bl	8000628 <__aeabi_dmul>
 800e454:	ec53 2b18 	vmov	r2, r3, d8
 800e458:	ec41 0b19 	vmov	d9, r0, r1
 800e45c:	ec51 0b18 	vmov	r0, r1, d8
 800e460:	f7f2 f8e2 	bl	8000628 <__aeabi_dmul>
 800e464:	a37c      	add	r3, pc, #496	; (adr r3, 800e658 <__ieee754_pow+0x708>)
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	4604      	mov	r4, r0
 800e46c:	460d      	mov	r5, r1
 800e46e:	f7f2 f8db 	bl	8000628 <__aeabi_dmul>
 800e472:	a37b      	add	r3, pc, #492	; (adr r3, 800e660 <__ieee754_pow+0x710>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 ff20 	bl	80002bc <__adddf3>
 800e47c:	4622      	mov	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f7f2 f8d2 	bl	8000628 <__aeabi_dmul>
 800e484:	a378      	add	r3, pc, #480	; (adr r3, 800e668 <__ieee754_pow+0x718>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 ff17 	bl	80002bc <__adddf3>
 800e48e:	4622      	mov	r2, r4
 800e490:	462b      	mov	r3, r5
 800e492:	f7f2 f8c9 	bl	8000628 <__aeabi_dmul>
 800e496:	a376      	add	r3, pc, #472	; (adr r3, 800e670 <__ieee754_pow+0x720>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	f7f1 ff0e 	bl	80002bc <__adddf3>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	462b      	mov	r3, r5
 800e4a4:	f7f2 f8c0 	bl	8000628 <__aeabi_dmul>
 800e4a8:	a373      	add	r3, pc, #460	; (adr r3, 800e678 <__ieee754_pow+0x728>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f7f1 ff05 	bl	80002bc <__adddf3>
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	f7f2 f8b7 	bl	8000628 <__aeabi_dmul>
 800e4ba:	a371      	add	r3, pc, #452	; (adr r3, 800e680 <__ieee754_pow+0x730>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	f7f1 fefc 	bl	80002bc <__adddf3>
 800e4c4:	4622      	mov	r2, r4
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	460f      	mov	r7, r1
 800e4ca:	462b      	mov	r3, r5
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f7f2 f8aa 	bl	8000628 <__aeabi_dmul>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f2 f8a4 	bl	8000628 <__aeabi_dmul>
 800e4e0:	4642      	mov	r2, r8
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	ec51 0b18 	vmov	r0, r1, d8
 800e4ec:	f7f1 fee6 	bl	80002bc <__adddf3>
 800e4f0:	ec53 2b19 	vmov	r2, r3, d9
 800e4f4:	f7f2 f898 	bl	8000628 <__aeabi_dmul>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	f7f1 fede 	bl	80002bc <__adddf3>
 800e500:	4642      	mov	r2, r8
 800e502:	4682      	mov	sl, r0
 800e504:	468b      	mov	fp, r1
 800e506:	464b      	mov	r3, r9
 800e508:	4640      	mov	r0, r8
 800e50a:	4649      	mov	r1, r9
 800e50c:	f7f2 f88c 	bl	8000628 <__aeabi_dmul>
 800e510:	4b6b      	ldr	r3, [pc, #428]	; (800e6c0 <__ieee754_pow+0x770>)
 800e512:	2200      	movs	r2, #0
 800e514:	4606      	mov	r6, r0
 800e516:	460f      	mov	r7, r1
 800e518:	f7f1 fed0 	bl	80002bc <__adddf3>
 800e51c:	4652      	mov	r2, sl
 800e51e:	465b      	mov	r3, fp
 800e520:	f7f1 fecc 	bl	80002bc <__adddf3>
 800e524:	2000      	movs	r0, #0
 800e526:	4604      	mov	r4, r0
 800e528:	460d      	mov	r5, r1
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4640      	mov	r0, r8
 800e530:	4649      	mov	r1, r9
 800e532:	f7f2 f879 	bl	8000628 <__aeabi_dmul>
 800e536:	4b62      	ldr	r3, [pc, #392]	; (800e6c0 <__ieee754_pow+0x770>)
 800e538:	4680      	mov	r8, r0
 800e53a:	4689      	mov	r9, r1
 800e53c:	2200      	movs	r2, #0
 800e53e:	4620      	mov	r0, r4
 800e540:	4629      	mov	r1, r5
 800e542:	f7f1 feb9 	bl	80002b8 <__aeabi_dsub>
 800e546:	4632      	mov	r2, r6
 800e548:	463b      	mov	r3, r7
 800e54a:	f7f1 feb5 	bl	80002b8 <__aeabi_dsub>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	4650      	mov	r0, sl
 800e554:	4659      	mov	r1, fp
 800e556:	f7f1 feaf 	bl	80002b8 <__aeabi_dsub>
 800e55a:	ec53 2b18 	vmov	r2, r3, d8
 800e55e:	f7f2 f863 	bl	8000628 <__aeabi_dmul>
 800e562:	4622      	mov	r2, r4
 800e564:	4606      	mov	r6, r0
 800e566:	460f      	mov	r7, r1
 800e568:	462b      	mov	r3, r5
 800e56a:	ec51 0b19 	vmov	r0, r1, d9
 800e56e:	f7f2 f85b 	bl	8000628 <__aeabi_dmul>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	4630      	mov	r0, r6
 800e578:	4639      	mov	r1, r7
 800e57a:	f7f1 fe9f 	bl	80002bc <__adddf3>
 800e57e:	4606      	mov	r6, r0
 800e580:	460f      	mov	r7, r1
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4640      	mov	r0, r8
 800e588:	4649      	mov	r1, r9
 800e58a:	f7f1 fe97 	bl	80002bc <__adddf3>
 800e58e:	a33e      	add	r3, pc, #248	; (adr r3, 800e688 <__ieee754_pow+0x738>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	2000      	movs	r0, #0
 800e596:	4604      	mov	r4, r0
 800e598:	460d      	mov	r5, r1
 800e59a:	f7f2 f845 	bl	8000628 <__aeabi_dmul>
 800e59e:	4642      	mov	r2, r8
 800e5a0:	ec41 0b18 	vmov	d8, r0, r1
 800e5a4:	464b      	mov	r3, r9
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	f7f1 fe85 	bl	80002b8 <__aeabi_dsub>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	4639      	mov	r1, r7
 800e5b6:	f7f1 fe7f 	bl	80002b8 <__aeabi_dsub>
 800e5ba:	a335      	add	r3, pc, #212	; (adr r3, 800e690 <__ieee754_pow+0x740>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f2 f832 	bl	8000628 <__aeabi_dmul>
 800e5c4:	a334      	add	r3, pc, #208	; (adr r3, 800e698 <__ieee754_pow+0x748>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	460f      	mov	r7, r1
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	f7f2 f829 	bl	8000628 <__aeabi_dmul>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	460b      	mov	r3, r1
 800e5da:	4630      	mov	r0, r6
 800e5dc:	4639      	mov	r1, r7
 800e5de:	f7f1 fe6d 	bl	80002bc <__adddf3>
 800e5e2:	9a07      	ldr	r2, [sp, #28]
 800e5e4:	4b37      	ldr	r3, [pc, #220]	; (800e6c4 <__ieee754_pow+0x774>)
 800e5e6:	4413      	add	r3, r2
 800e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ec:	f7f1 fe66 	bl	80002bc <__adddf3>
 800e5f0:	4682      	mov	sl, r0
 800e5f2:	9805      	ldr	r0, [sp, #20]
 800e5f4:	468b      	mov	fp, r1
 800e5f6:	f7f1 ffad 	bl	8000554 <__aeabi_i2d>
 800e5fa:	9a07      	ldr	r2, [sp, #28]
 800e5fc:	4b32      	ldr	r3, [pc, #200]	; (800e6c8 <__ieee754_pow+0x778>)
 800e5fe:	4413      	add	r3, r2
 800e600:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e604:	4606      	mov	r6, r0
 800e606:	460f      	mov	r7, r1
 800e608:	4652      	mov	r2, sl
 800e60a:	465b      	mov	r3, fp
 800e60c:	ec51 0b18 	vmov	r0, r1, d8
 800e610:	f7f1 fe54 	bl	80002bc <__adddf3>
 800e614:	4642      	mov	r2, r8
 800e616:	464b      	mov	r3, r9
 800e618:	f7f1 fe50 	bl	80002bc <__adddf3>
 800e61c:	4632      	mov	r2, r6
 800e61e:	463b      	mov	r3, r7
 800e620:	f7f1 fe4c 	bl	80002bc <__adddf3>
 800e624:	2000      	movs	r0, #0
 800e626:	4632      	mov	r2, r6
 800e628:	463b      	mov	r3, r7
 800e62a:	4604      	mov	r4, r0
 800e62c:	460d      	mov	r5, r1
 800e62e:	f7f1 fe43 	bl	80002b8 <__aeabi_dsub>
 800e632:	4642      	mov	r2, r8
 800e634:	464b      	mov	r3, r9
 800e636:	f7f1 fe3f 	bl	80002b8 <__aeabi_dsub>
 800e63a:	ec53 2b18 	vmov	r2, r3, d8
 800e63e:	f7f1 fe3b 	bl	80002b8 <__aeabi_dsub>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4650      	mov	r0, sl
 800e648:	4659      	mov	r1, fp
 800e64a:	e610      	b.n	800e26e <__ieee754_pow+0x31e>
 800e64c:	2401      	movs	r4, #1
 800e64e:	e6a1      	b.n	800e394 <__ieee754_pow+0x444>
 800e650:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e6a0 <__ieee754_pow+0x750>
 800e654:	e617      	b.n	800e286 <__ieee754_pow+0x336>
 800e656:	bf00      	nop
 800e658:	4a454eef 	.word	0x4a454eef
 800e65c:	3fca7e28 	.word	0x3fca7e28
 800e660:	93c9db65 	.word	0x93c9db65
 800e664:	3fcd864a 	.word	0x3fcd864a
 800e668:	a91d4101 	.word	0xa91d4101
 800e66c:	3fd17460 	.word	0x3fd17460
 800e670:	518f264d 	.word	0x518f264d
 800e674:	3fd55555 	.word	0x3fd55555
 800e678:	db6fabff 	.word	0xdb6fabff
 800e67c:	3fdb6db6 	.word	0x3fdb6db6
 800e680:	33333303 	.word	0x33333303
 800e684:	3fe33333 	.word	0x3fe33333
 800e688:	e0000000 	.word	0xe0000000
 800e68c:	3feec709 	.word	0x3feec709
 800e690:	dc3a03fd 	.word	0xdc3a03fd
 800e694:	3feec709 	.word	0x3feec709
 800e698:	145b01f5 	.word	0x145b01f5
 800e69c:	be3e2fe0 	.word	0xbe3e2fe0
 800e6a0:	00000000 	.word	0x00000000
 800e6a4:	3ff00000 	.word	0x3ff00000
 800e6a8:	7ff00000 	.word	0x7ff00000
 800e6ac:	43400000 	.word	0x43400000
 800e6b0:	0003988e 	.word	0x0003988e
 800e6b4:	000bb679 	.word	0x000bb679
 800e6b8:	0800f3d8 	.word	0x0800f3d8
 800e6bc:	3ff00000 	.word	0x3ff00000
 800e6c0:	40080000 	.word	0x40080000
 800e6c4:	0800f3f8 	.word	0x0800f3f8
 800e6c8:	0800f3e8 	.word	0x0800f3e8
 800e6cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800e99c <__ieee754_pow+0xa4c>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	4649      	mov	r1, r9
 800e6d6:	f7f1 fdf1 	bl	80002bc <__adddf3>
 800e6da:	4622      	mov	r2, r4
 800e6dc:	ec41 0b1a 	vmov	d10, r0, r1
 800e6e0:	462b      	mov	r3, r5
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	4639      	mov	r1, r7
 800e6e6:	f7f1 fde7 	bl	80002b8 <__aeabi_dsub>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	ec51 0b1a 	vmov	r0, r1, d10
 800e6f2:	f7f2 fa29 	bl	8000b48 <__aeabi_dcmpgt>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f47f ae04 	bne.w	800e304 <__ieee754_pow+0x3b4>
 800e6fc:	4aa2      	ldr	r2, [pc, #648]	; (800e988 <__ieee754_pow+0xa38>)
 800e6fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e702:	4293      	cmp	r3, r2
 800e704:	f340 8107 	ble.w	800e916 <__ieee754_pow+0x9c6>
 800e708:	151b      	asrs	r3, r3, #20
 800e70a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e70e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e712:	fa4a fa03 	asr.w	sl, sl, r3
 800e716:	44da      	add	sl, fp
 800e718:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e71c:	489b      	ldr	r0, [pc, #620]	; (800e98c <__ieee754_pow+0xa3c>)
 800e71e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e722:	4108      	asrs	r0, r1
 800e724:	ea00 030a 	and.w	r3, r0, sl
 800e728:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e72c:	f1c1 0114 	rsb	r1, r1, #20
 800e730:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e734:	fa4a fa01 	asr.w	sl, sl, r1
 800e738:	f1bb 0f00 	cmp.w	fp, #0
 800e73c:	f04f 0200 	mov.w	r2, #0
 800e740:	4620      	mov	r0, r4
 800e742:	4629      	mov	r1, r5
 800e744:	bfb8      	it	lt
 800e746:	f1ca 0a00 	rsblt	sl, sl, #0
 800e74a:	f7f1 fdb5 	bl	80002b8 <__aeabi_dsub>
 800e74e:	ec41 0b19 	vmov	d9, r0, r1
 800e752:	4642      	mov	r2, r8
 800e754:	464b      	mov	r3, r9
 800e756:	ec51 0b19 	vmov	r0, r1, d9
 800e75a:	f7f1 fdaf 	bl	80002bc <__adddf3>
 800e75e:	a37a      	add	r3, pc, #488	; (adr r3, 800e948 <__ieee754_pow+0x9f8>)
 800e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e764:	2000      	movs	r0, #0
 800e766:	4604      	mov	r4, r0
 800e768:	460d      	mov	r5, r1
 800e76a:	f7f1 ff5d 	bl	8000628 <__aeabi_dmul>
 800e76e:	ec53 2b19 	vmov	r2, r3, d9
 800e772:	4606      	mov	r6, r0
 800e774:	460f      	mov	r7, r1
 800e776:	4620      	mov	r0, r4
 800e778:	4629      	mov	r1, r5
 800e77a:	f7f1 fd9d 	bl	80002b8 <__aeabi_dsub>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4640      	mov	r0, r8
 800e784:	4649      	mov	r1, r9
 800e786:	f7f1 fd97 	bl	80002b8 <__aeabi_dsub>
 800e78a:	a371      	add	r3, pc, #452	; (adr r3, 800e950 <__ieee754_pow+0xa00>)
 800e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e790:	f7f1 ff4a 	bl	8000628 <__aeabi_dmul>
 800e794:	a370      	add	r3, pc, #448	; (adr r3, 800e958 <__ieee754_pow+0xa08>)
 800e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79a:	4680      	mov	r8, r0
 800e79c:	4689      	mov	r9, r1
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7f1 ff41 	bl	8000628 <__aeabi_dmul>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	4640      	mov	r0, r8
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	f7f1 fd85 	bl	80002bc <__adddf3>
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	460d      	mov	r5, r1
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	f7f1 fd7d 	bl	80002bc <__adddf3>
 800e7c2:	4632      	mov	r2, r6
 800e7c4:	463b      	mov	r3, r7
 800e7c6:	4680      	mov	r8, r0
 800e7c8:	4689      	mov	r9, r1
 800e7ca:	f7f1 fd75 	bl	80002b8 <__aeabi_dsub>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	f7f1 fd6f 	bl	80002b8 <__aeabi_dsub>
 800e7da:	4642      	mov	r2, r8
 800e7dc:	4606      	mov	r6, r0
 800e7de:	460f      	mov	r7, r1
 800e7e0:	464b      	mov	r3, r9
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	4649      	mov	r1, r9
 800e7e6:	f7f1 ff1f 	bl	8000628 <__aeabi_dmul>
 800e7ea:	a35d      	add	r3, pc, #372	; (adr r3, 800e960 <__ieee754_pow+0xa10>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	460d      	mov	r5, r1
 800e7f4:	f7f1 ff18 	bl	8000628 <__aeabi_dmul>
 800e7f8:	a35b      	add	r3, pc, #364	; (adr r3, 800e968 <__ieee754_pow+0xa18>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	f7f1 fd5b 	bl	80002b8 <__aeabi_dsub>
 800e802:	4622      	mov	r2, r4
 800e804:	462b      	mov	r3, r5
 800e806:	f7f1 ff0f 	bl	8000628 <__aeabi_dmul>
 800e80a:	a359      	add	r3, pc, #356	; (adr r3, 800e970 <__ieee754_pow+0xa20>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f1 fd54 	bl	80002bc <__adddf3>
 800e814:	4622      	mov	r2, r4
 800e816:	462b      	mov	r3, r5
 800e818:	f7f1 ff06 	bl	8000628 <__aeabi_dmul>
 800e81c:	a356      	add	r3, pc, #344	; (adr r3, 800e978 <__ieee754_pow+0xa28>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f7f1 fd49 	bl	80002b8 <__aeabi_dsub>
 800e826:	4622      	mov	r2, r4
 800e828:	462b      	mov	r3, r5
 800e82a:	f7f1 fefd 	bl	8000628 <__aeabi_dmul>
 800e82e:	a354      	add	r3, pc, #336	; (adr r3, 800e980 <__ieee754_pow+0xa30>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f1 fd42 	bl	80002bc <__adddf3>
 800e838:	4622      	mov	r2, r4
 800e83a:	462b      	mov	r3, r5
 800e83c:	f7f1 fef4 	bl	8000628 <__aeabi_dmul>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4640      	mov	r0, r8
 800e846:	4649      	mov	r1, r9
 800e848:	f7f1 fd36 	bl	80002b8 <__aeabi_dsub>
 800e84c:	4604      	mov	r4, r0
 800e84e:	460d      	mov	r5, r1
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4640      	mov	r0, r8
 800e856:	4649      	mov	r1, r9
 800e858:	f7f1 fee6 	bl	8000628 <__aeabi_dmul>
 800e85c:	2200      	movs	r2, #0
 800e85e:	ec41 0b19 	vmov	d9, r0, r1
 800e862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e866:	4620      	mov	r0, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	f7f1 fd25 	bl	80002b8 <__aeabi_dsub>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	ec51 0b19 	vmov	r0, r1, d9
 800e876:	f7f2 f801 	bl	800087c <__aeabi_ddiv>
 800e87a:	4632      	mov	r2, r6
 800e87c:	4604      	mov	r4, r0
 800e87e:	460d      	mov	r5, r1
 800e880:	463b      	mov	r3, r7
 800e882:	4640      	mov	r0, r8
 800e884:	4649      	mov	r1, r9
 800e886:	f7f1 fecf 	bl	8000628 <__aeabi_dmul>
 800e88a:	4632      	mov	r2, r6
 800e88c:	463b      	mov	r3, r7
 800e88e:	f7f1 fd15 	bl	80002bc <__adddf3>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	4620      	mov	r0, r4
 800e898:	4629      	mov	r1, r5
 800e89a:	f7f1 fd0d 	bl	80002b8 <__aeabi_dsub>
 800e89e:	4642      	mov	r2, r8
 800e8a0:	464b      	mov	r3, r9
 800e8a2:	f7f1 fd09 	bl	80002b8 <__aeabi_dsub>
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	4939      	ldr	r1, [pc, #228]	; (800e990 <__ieee754_pow+0xa40>)
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	f7f1 fd03 	bl	80002b8 <__aeabi_dsub>
 800e8b2:	ec41 0b10 	vmov	d0, r0, r1
 800e8b6:	ee10 3a90 	vmov	r3, s1
 800e8ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8c2:	da2b      	bge.n	800e91c <__ieee754_pow+0x9cc>
 800e8c4:	4650      	mov	r0, sl
 800e8c6:	f000 fa1b 	bl	800ed00 <scalbn>
 800e8ca:	ec51 0b10 	vmov	r0, r1, d0
 800e8ce:	ec53 2b18 	vmov	r2, r3, d8
 800e8d2:	f7ff bbee 	b.w	800e0b2 <__ieee754_pow+0x162>
 800e8d6:	4b2f      	ldr	r3, [pc, #188]	; (800e994 <__ieee754_pow+0xa44>)
 800e8d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e8dc:	429e      	cmp	r6, r3
 800e8de:	f77f af0d 	ble.w	800e6fc <__ieee754_pow+0x7ac>
 800e8e2:	4b2d      	ldr	r3, [pc, #180]	; (800e998 <__ieee754_pow+0xa48>)
 800e8e4:	440b      	add	r3, r1
 800e8e6:	4303      	orrs	r3, r0
 800e8e8:	d009      	beq.n	800e8fe <__ieee754_pow+0x9ae>
 800e8ea:	ec51 0b18 	vmov	r0, r1, d8
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f7f2 f90b 	bl	8000b0c <__aeabi_dcmplt>
 800e8f6:	3800      	subs	r0, #0
 800e8f8:	bf18      	it	ne
 800e8fa:	2001      	movne	r0, #1
 800e8fc:	e448      	b.n	800e190 <__ieee754_pow+0x240>
 800e8fe:	4622      	mov	r2, r4
 800e900:	462b      	mov	r3, r5
 800e902:	f7f1 fcd9 	bl	80002b8 <__aeabi_dsub>
 800e906:	4642      	mov	r2, r8
 800e908:	464b      	mov	r3, r9
 800e90a:	f7f2 f913 	bl	8000b34 <__aeabi_dcmpge>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f aef4 	beq.w	800e6fc <__ieee754_pow+0x7ac>
 800e914:	e7e9      	b.n	800e8ea <__ieee754_pow+0x99a>
 800e916:	f04f 0a00 	mov.w	sl, #0
 800e91a:	e71a      	b.n	800e752 <__ieee754_pow+0x802>
 800e91c:	ec51 0b10 	vmov	r0, r1, d0
 800e920:	4619      	mov	r1, r3
 800e922:	e7d4      	b.n	800e8ce <__ieee754_pow+0x97e>
 800e924:	491a      	ldr	r1, [pc, #104]	; (800e990 <__ieee754_pow+0xa40>)
 800e926:	2000      	movs	r0, #0
 800e928:	f7ff bb31 	b.w	800df8e <__ieee754_pow+0x3e>
 800e92c:	2000      	movs	r0, #0
 800e92e:	2100      	movs	r1, #0
 800e930:	f7ff bb2d 	b.w	800df8e <__ieee754_pow+0x3e>
 800e934:	4630      	mov	r0, r6
 800e936:	4639      	mov	r1, r7
 800e938:	f7ff bb29 	b.w	800df8e <__ieee754_pow+0x3e>
 800e93c:	9204      	str	r2, [sp, #16]
 800e93e:	f7ff bb7b 	b.w	800e038 <__ieee754_pow+0xe8>
 800e942:	2300      	movs	r3, #0
 800e944:	f7ff bb65 	b.w	800e012 <__ieee754_pow+0xc2>
 800e948:	00000000 	.word	0x00000000
 800e94c:	3fe62e43 	.word	0x3fe62e43
 800e950:	fefa39ef 	.word	0xfefa39ef
 800e954:	3fe62e42 	.word	0x3fe62e42
 800e958:	0ca86c39 	.word	0x0ca86c39
 800e95c:	be205c61 	.word	0xbe205c61
 800e960:	72bea4d0 	.word	0x72bea4d0
 800e964:	3e663769 	.word	0x3e663769
 800e968:	c5d26bf1 	.word	0xc5d26bf1
 800e96c:	3ebbbd41 	.word	0x3ebbbd41
 800e970:	af25de2c 	.word	0xaf25de2c
 800e974:	3f11566a 	.word	0x3f11566a
 800e978:	16bebd93 	.word	0x16bebd93
 800e97c:	3f66c16c 	.word	0x3f66c16c
 800e980:	5555553e 	.word	0x5555553e
 800e984:	3fc55555 	.word	0x3fc55555
 800e988:	3fe00000 	.word	0x3fe00000
 800e98c:	fff00000 	.word	0xfff00000
 800e990:	3ff00000 	.word	0x3ff00000
 800e994:	4090cbff 	.word	0x4090cbff
 800e998:	3f6f3400 	.word	0x3f6f3400
 800e99c:	652b82fe 	.word	0x652b82fe
 800e9a0:	3c971547 	.word	0x3c971547
 800e9a4:	00000000 	.word	0x00000000

0800e9a8 <atan>:
 800e9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	ec55 4b10 	vmov	r4, r5, d0
 800e9b0:	4bc3      	ldr	r3, [pc, #780]	; (800ecc0 <atan+0x318>)
 800e9b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9b6:	429e      	cmp	r6, r3
 800e9b8:	46ab      	mov	fp, r5
 800e9ba:	dd18      	ble.n	800e9ee <atan+0x46>
 800e9bc:	4bc1      	ldr	r3, [pc, #772]	; (800ecc4 <atan+0x31c>)
 800e9be:	429e      	cmp	r6, r3
 800e9c0:	dc01      	bgt.n	800e9c6 <atan+0x1e>
 800e9c2:	d109      	bne.n	800e9d8 <atan+0x30>
 800e9c4:	b144      	cbz	r4, 800e9d8 <atan+0x30>
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	462b      	mov	r3, r5
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	f7f1 fc75 	bl	80002bc <__adddf3>
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	460d      	mov	r5, r1
 800e9d6:	e006      	b.n	800e9e6 <atan+0x3e>
 800e9d8:	f1bb 0f00 	cmp.w	fp, #0
 800e9dc:	f300 8131 	bgt.w	800ec42 <atan+0x29a>
 800e9e0:	a59b      	add	r5, pc, #620	; (adr r5, 800ec50 <atan+0x2a8>)
 800e9e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9e6:	ec45 4b10 	vmov	d0, r4, r5
 800e9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ee:	4bb6      	ldr	r3, [pc, #728]	; (800ecc8 <atan+0x320>)
 800e9f0:	429e      	cmp	r6, r3
 800e9f2:	dc14      	bgt.n	800ea1e <atan+0x76>
 800e9f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e9f8:	429e      	cmp	r6, r3
 800e9fa:	dc0d      	bgt.n	800ea18 <atan+0x70>
 800e9fc:	a396      	add	r3, pc, #600	; (adr r3, 800ec58 <atan+0x2b0>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	ee10 0a10 	vmov	r0, s0
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fc58 	bl	80002bc <__adddf3>
 800ea0c:	4baf      	ldr	r3, [pc, #700]	; (800eccc <atan+0x324>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f7f2 f89a 	bl	8000b48 <__aeabi_dcmpgt>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d1e6      	bne.n	800e9e6 <atan+0x3e>
 800ea18:	f04f 3aff 	mov.w	sl, #4294967295
 800ea1c:	e02b      	b.n	800ea76 <atan+0xce>
 800ea1e:	f000 f963 	bl	800ece8 <fabs>
 800ea22:	4bab      	ldr	r3, [pc, #684]	; (800ecd0 <atan+0x328>)
 800ea24:	429e      	cmp	r6, r3
 800ea26:	ec55 4b10 	vmov	r4, r5, d0
 800ea2a:	f300 80bf 	bgt.w	800ebac <atan+0x204>
 800ea2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ea32:	429e      	cmp	r6, r3
 800ea34:	f300 80a0 	bgt.w	800eb78 <atan+0x1d0>
 800ea38:	ee10 2a10 	vmov	r2, s0
 800ea3c:	ee10 0a10 	vmov	r0, s0
 800ea40:	462b      	mov	r3, r5
 800ea42:	4629      	mov	r1, r5
 800ea44:	f7f1 fc3a 	bl	80002bc <__adddf3>
 800ea48:	4ba0      	ldr	r3, [pc, #640]	; (800eccc <atan+0x324>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f7f1 fc34 	bl	80002b8 <__aeabi_dsub>
 800ea50:	2200      	movs	r2, #0
 800ea52:	4606      	mov	r6, r0
 800ea54:	460f      	mov	r7, r1
 800ea56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	f7f1 fc2d 	bl	80002bc <__adddf3>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4630      	mov	r0, r6
 800ea68:	4639      	mov	r1, r7
 800ea6a:	f7f1 ff07 	bl	800087c <__aeabi_ddiv>
 800ea6e:	f04f 0a00 	mov.w	sl, #0
 800ea72:	4604      	mov	r4, r0
 800ea74:	460d      	mov	r5, r1
 800ea76:	4622      	mov	r2, r4
 800ea78:	462b      	mov	r3, r5
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	f7f1 fdd3 	bl	8000628 <__aeabi_dmul>
 800ea82:	4602      	mov	r2, r0
 800ea84:	460b      	mov	r3, r1
 800ea86:	4680      	mov	r8, r0
 800ea88:	4689      	mov	r9, r1
 800ea8a:	f7f1 fdcd 	bl	8000628 <__aeabi_dmul>
 800ea8e:	a374      	add	r3, pc, #464	; (adr r3, 800ec60 <atan+0x2b8>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	f7f1 fdc6 	bl	8000628 <__aeabi_dmul>
 800ea9c:	a372      	add	r3, pc, #456	; (adr r3, 800ec68 <atan+0x2c0>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fc0b 	bl	80002bc <__adddf3>
 800eaa6:	4632      	mov	r2, r6
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	f7f1 fdbd 	bl	8000628 <__aeabi_dmul>
 800eaae:	a370      	add	r3, pc, #448	; (adr r3, 800ec70 <atan+0x2c8>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fc02 	bl	80002bc <__adddf3>
 800eab8:	4632      	mov	r2, r6
 800eaba:	463b      	mov	r3, r7
 800eabc:	f7f1 fdb4 	bl	8000628 <__aeabi_dmul>
 800eac0:	a36d      	add	r3, pc, #436	; (adr r3, 800ec78 <atan+0x2d0>)
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	f7f1 fbf9 	bl	80002bc <__adddf3>
 800eaca:	4632      	mov	r2, r6
 800eacc:	463b      	mov	r3, r7
 800eace:	f7f1 fdab 	bl	8000628 <__aeabi_dmul>
 800ead2:	a36b      	add	r3, pc, #428	; (adr r3, 800ec80 <atan+0x2d8>)
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	f7f1 fbf0 	bl	80002bc <__adddf3>
 800eadc:	4632      	mov	r2, r6
 800eade:	463b      	mov	r3, r7
 800eae0:	f7f1 fda2 	bl	8000628 <__aeabi_dmul>
 800eae4:	a368      	add	r3, pc, #416	; (adr r3, 800ec88 <atan+0x2e0>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	f7f1 fbe7 	bl	80002bc <__adddf3>
 800eaee:	4642      	mov	r2, r8
 800eaf0:	464b      	mov	r3, r9
 800eaf2:	f7f1 fd99 	bl	8000628 <__aeabi_dmul>
 800eaf6:	a366      	add	r3, pc, #408	; (adr r3, 800ec90 <atan+0x2e8>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	4680      	mov	r8, r0
 800eafe:	4689      	mov	r9, r1
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f7f1 fd90 	bl	8000628 <__aeabi_dmul>
 800eb08:	a363      	add	r3, pc, #396	; (adr r3, 800ec98 <atan+0x2f0>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	f7f1 fbd3 	bl	80002b8 <__aeabi_dsub>
 800eb12:	4632      	mov	r2, r6
 800eb14:	463b      	mov	r3, r7
 800eb16:	f7f1 fd87 	bl	8000628 <__aeabi_dmul>
 800eb1a:	a361      	add	r3, pc, #388	; (adr r3, 800eca0 <atan+0x2f8>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f1 fbca 	bl	80002b8 <__aeabi_dsub>
 800eb24:	4632      	mov	r2, r6
 800eb26:	463b      	mov	r3, r7
 800eb28:	f7f1 fd7e 	bl	8000628 <__aeabi_dmul>
 800eb2c:	a35e      	add	r3, pc, #376	; (adr r3, 800eca8 <atan+0x300>)
 800eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb32:	f7f1 fbc1 	bl	80002b8 <__aeabi_dsub>
 800eb36:	4632      	mov	r2, r6
 800eb38:	463b      	mov	r3, r7
 800eb3a:	f7f1 fd75 	bl	8000628 <__aeabi_dmul>
 800eb3e:	a35c      	add	r3, pc, #368	; (adr r3, 800ecb0 <atan+0x308>)
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	f7f1 fbb8 	bl	80002b8 <__aeabi_dsub>
 800eb48:	4632      	mov	r2, r6
 800eb4a:	463b      	mov	r3, r7
 800eb4c:	f7f1 fd6c 	bl	8000628 <__aeabi_dmul>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
 800eb54:	4640      	mov	r0, r8
 800eb56:	4649      	mov	r1, r9
 800eb58:	f7f1 fbb0 	bl	80002bc <__adddf3>
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	462b      	mov	r3, r5
 800eb60:	f7f1 fd62 	bl	8000628 <__aeabi_dmul>
 800eb64:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	d14b      	bne.n	800ec06 <atan+0x25e>
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 fba1 	bl	80002b8 <__aeabi_dsub>
 800eb76:	e72c      	b.n	800e9d2 <atan+0x2a>
 800eb78:	ee10 0a10 	vmov	r0, s0
 800eb7c:	4b53      	ldr	r3, [pc, #332]	; (800eccc <atan+0x324>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f1 fb99 	bl	80002b8 <__aeabi_dsub>
 800eb86:	4b51      	ldr	r3, [pc, #324]	; (800eccc <atan+0x324>)
 800eb88:	4606      	mov	r6, r0
 800eb8a:	460f      	mov	r7, r1
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	4620      	mov	r0, r4
 800eb90:	4629      	mov	r1, r5
 800eb92:	f7f1 fb93 	bl	80002bc <__adddf3>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	f7f1 fe6d 	bl	800087c <__aeabi_ddiv>
 800eba2:	f04f 0a01 	mov.w	sl, #1
 800eba6:	4604      	mov	r4, r0
 800eba8:	460d      	mov	r5, r1
 800ebaa:	e764      	b.n	800ea76 <atan+0xce>
 800ebac:	4b49      	ldr	r3, [pc, #292]	; (800ecd4 <atan+0x32c>)
 800ebae:	429e      	cmp	r6, r3
 800ebb0:	da1d      	bge.n	800ebee <atan+0x246>
 800ebb2:	ee10 0a10 	vmov	r0, s0
 800ebb6:	4b48      	ldr	r3, [pc, #288]	; (800ecd8 <atan+0x330>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	4629      	mov	r1, r5
 800ebbc:	f7f1 fb7c 	bl	80002b8 <__aeabi_dsub>
 800ebc0:	4b45      	ldr	r3, [pc, #276]	; (800ecd8 <atan+0x330>)
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460f      	mov	r7, r1
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4620      	mov	r0, r4
 800ebca:	4629      	mov	r1, r5
 800ebcc:	f7f1 fd2c 	bl	8000628 <__aeabi_dmul>
 800ebd0:	4b3e      	ldr	r3, [pc, #248]	; (800eccc <atan+0x324>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f7f1 fb72 	bl	80002bc <__adddf3>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4630      	mov	r0, r6
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f7f1 fe4c 	bl	800087c <__aeabi_ddiv>
 800ebe4:	f04f 0a02 	mov.w	sl, #2
 800ebe8:	4604      	mov	r4, r0
 800ebea:	460d      	mov	r5, r1
 800ebec:	e743      	b.n	800ea76 <atan+0xce>
 800ebee:	462b      	mov	r3, r5
 800ebf0:	ee10 2a10 	vmov	r2, s0
 800ebf4:	4939      	ldr	r1, [pc, #228]	; (800ecdc <atan+0x334>)
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f7f1 fe40 	bl	800087c <__aeabi_ddiv>
 800ebfc:	f04f 0a03 	mov.w	sl, #3
 800ec00:	4604      	mov	r4, r0
 800ec02:	460d      	mov	r5, r1
 800ec04:	e737      	b.n	800ea76 <atan+0xce>
 800ec06:	4b36      	ldr	r3, [pc, #216]	; (800ece0 <atan+0x338>)
 800ec08:	4e36      	ldr	r6, [pc, #216]	; (800ece4 <atan+0x33c>)
 800ec0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f7f1 fb51 	bl	80002b8 <__aeabi_dsub>
 800ec16:	4622      	mov	r2, r4
 800ec18:	462b      	mov	r3, r5
 800ec1a:	f7f1 fb4d 	bl	80002b8 <__aeabi_dsub>
 800ec1e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ec2a:	f7f1 fb45 	bl	80002b8 <__aeabi_dsub>
 800ec2e:	f1bb 0f00 	cmp.w	fp, #0
 800ec32:	4604      	mov	r4, r0
 800ec34:	460d      	mov	r5, r1
 800ec36:	f6bf aed6 	bge.w	800e9e6 <atan+0x3e>
 800ec3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec3e:	461d      	mov	r5, r3
 800ec40:	e6d1      	b.n	800e9e6 <atan+0x3e>
 800ec42:	a51d      	add	r5, pc, #116	; (adr r5, 800ecb8 <atan+0x310>)
 800ec44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec48:	e6cd      	b.n	800e9e6 <atan+0x3e>
 800ec4a:	bf00      	nop
 800ec4c:	f3af 8000 	nop.w
 800ec50:	54442d18 	.word	0x54442d18
 800ec54:	bff921fb 	.word	0xbff921fb
 800ec58:	8800759c 	.word	0x8800759c
 800ec5c:	7e37e43c 	.word	0x7e37e43c
 800ec60:	e322da11 	.word	0xe322da11
 800ec64:	3f90ad3a 	.word	0x3f90ad3a
 800ec68:	24760deb 	.word	0x24760deb
 800ec6c:	3fa97b4b 	.word	0x3fa97b4b
 800ec70:	a0d03d51 	.word	0xa0d03d51
 800ec74:	3fb10d66 	.word	0x3fb10d66
 800ec78:	c54c206e 	.word	0xc54c206e
 800ec7c:	3fb745cd 	.word	0x3fb745cd
 800ec80:	920083ff 	.word	0x920083ff
 800ec84:	3fc24924 	.word	0x3fc24924
 800ec88:	5555550d 	.word	0x5555550d
 800ec8c:	3fd55555 	.word	0x3fd55555
 800ec90:	2c6a6c2f 	.word	0x2c6a6c2f
 800ec94:	bfa2b444 	.word	0xbfa2b444
 800ec98:	52defd9a 	.word	0x52defd9a
 800ec9c:	3fadde2d 	.word	0x3fadde2d
 800eca0:	af749a6d 	.word	0xaf749a6d
 800eca4:	3fb3b0f2 	.word	0x3fb3b0f2
 800eca8:	fe231671 	.word	0xfe231671
 800ecac:	3fbc71c6 	.word	0x3fbc71c6
 800ecb0:	9998ebc4 	.word	0x9998ebc4
 800ecb4:	3fc99999 	.word	0x3fc99999
 800ecb8:	54442d18 	.word	0x54442d18
 800ecbc:	3ff921fb 	.word	0x3ff921fb
 800ecc0:	440fffff 	.word	0x440fffff
 800ecc4:	7ff00000 	.word	0x7ff00000
 800ecc8:	3fdbffff 	.word	0x3fdbffff
 800eccc:	3ff00000 	.word	0x3ff00000
 800ecd0:	3ff2ffff 	.word	0x3ff2ffff
 800ecd4:	40038000 	.word	0x40038000
 800ecd8:	3ff80000 	.word	0x3ff80000
 800ecdc:	bff00000 	.word	0xbff00000
 800ece0:	0800f428 	.word	0x0800f428
 800ece4:	0800f408 	.word	0x0800f408

0800ece8 <fabs>:
 800ece8:	ec51 0b10 	vmov	r0, r1, d0
 800ecec:	ee10 2a10 	vmov	r2, s0
 800ecf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ecf4:	ec43 2b10 	vmov	d0, r2, r3
 800ecf8:	4770      	bx	lr
 800ecfa:	0000      	movs	r0, r0
 800ecfc:	0000      	movs	r0, r0
	...

0800ed00 <scalbn>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	ec55 4b10 	vmov	r4, r5, d0
 800ed06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ed0a:	4606      	mov	r6, r0
 800ed0c:	462b      	mov	r3, r5
 800ed0e:	b999      	cbnz	r1, 800ed38 <scalbn+0x38>
 800ed10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed14:	4323      	orrs	r3, r4
 800ed16:	d03f      	beq.n	800ed98 <scalbn+0x98>
 800ed18:	4b35      	ldr	r3, [pc, #212]	; (800edf0 <scalbn+0xf0>)
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	ee10 0a10 	vmov	r0, s0
 800ed20:	2200      	movs	r2, #0
 800ed22:	f7f1 fc81 	bl	8000628 <__aeabi_dmul>
 800ed26:	4b33      	ldr	r3, [pc, #204]	; (800edf4 <scalbn+0xf4>)
 800ed28:	429e      	cmp	r6, r3
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	da10      	bge.n	800ed52 <scalbn+0x52>
 800ed30:	a327      	add	r3, pc, #156	; (adr r3, 800edd0 <scalbn+0xd0>)
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	e01f      	b.n	800ed78 <scalbn+0x78>
 800ed38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ed3c:	4291      	cmp	r1, r2
 800ed3e:	d10c      	bne.n	800ed5a <scalbn+0x5a>
 800ed40:	ee10 2a10 	vmov	r2, s0
 800ed44:	4620      	mov	r0, r4
 800ed46:	4629      	mov	r1, r5
 800ed48:	f7f1 fab8 	bl	80002bc <__adddf3>
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	460d      	mov	r5, r1
 800ed50:	e022      	b.n	800ed98 <scalbn+0x98>
 800ed52:	460b      	mov	r3, r1
 800ed54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ed58:	3936      	subs	r1, #54	; 0x36
 800ed5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ed5e:	4296      	cmp	r6, r2
 800ed60:	dd0d      	ble.n	800ed7e <scalbn+0x7e>
 800ed62:	2d00      	cmp	r5, #0
 800ed64:	a11c      	add	r1, pc, #112	; (adr r1, 800edd8 <scalbn+0xd8>)
 800ed66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed6a:	da02      	bge.n	800ed72 <scalbn+0x72>
 800ed6c:	a11c      	add	r1, pc, #112	; (adr r1, 800ede0 <scalbn+0xe0>)
 800ed6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed72:	a319      	add	r3, pc, #100	; (adr r3, 800edd8 <scalbn+0xd8>)
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	f7f1 fc56 	bl	8000628 <__aeabi_dmul>
 800ed7c:	e7e6      	b.n	800ed4c <scalbn+0x4c>
 800ed7e:	1872      	adds	r2, r6, r1
 800ed80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ed84:	428a      	cmp	r2, r1
 800ed86:	dcec      	bgt.n	800ed62 <scalbn+0x62>
 800ed88:	2a00      	cmp	r2, #0
 800ed8a:	dd08      	ble.n	800ed9e <scalbn+0x9e>
 800ed8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed98:	ec45 4b10 	vmov	d0, r4, r5
 800ed9c:	bd70      	pop	{r4, r5, r6, pc}
 800ed9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eda2:	da08      	bge.n	800edb6 <scalbn+0xb6>
 800eda4:	2d00      	cmp	r5, #0
 800eda6:	a10a      	add	r1, pc, #40	; (adr r1, 800edd0 <scalbn+0xd0>)
 800eda8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edac:	dac0      	bge.n	800ed30 <scalbn+0x30>
 800edae:	a10e      	add	r1, pc, #56	; (adr r1, 800ede8 <scalbn+0xe8>)
 800edb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edb4:	e7bc      	b.n	800ed30 <scalbn+0x30>
 800edb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800edba:	3236      	adds	r2, #54	; 0x36
 800edbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800edc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800edc4:	4620      	mov	r0, r4
 800edc6:	4b0c      	ldr	r3, [pc, #48]	; (800edf8 <scalbn+0xf8>)
 800edc8:	2200      	movs	r2, #0
 800edca:	e7d5      	b.n	800ed78 <scalbn+0x78>
 800edcc:	f3af 8000 	nop.w
 800edd0:	c2f8f359 	.word	0xc2f8f359
 800edd4:	01a56e1f 	.word	0x01a56e1f
 800edd8:	8800759c 	.word	0x8800759c
 800eddc:	7e37e43c 	.word	0x7e37e43c
 800ede0:	8800759c 	.word	0x8800759c
 800ede4:	fe37e43c 	.word	0xfe37e43c
 800ede8:	c2f8f359 	.word	0xc2f8f359
 800edec:	81a56e1f 	.word	0x81a56e1f
 800edf0:	43500000 	.word	0x43500000
 800edf4:	ffff3cb0 	.word	0xffff3cb0
 800edf8:	3c900000 	.word	0x3c900000

0800edfc <with_errno>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	4604      	mov	r4, r0
 800ee00:	460d      	mov	r5, r1
 800ee02:	4616      	mov	r6, r2
 800ee04:	f7fc ffe0 	bl	800bdc8 <__errno>
 800ee08:	4629      	mov	r1, r5
 800ee0a:	6006      	str	r6, [r0, #0]
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}

0800ee10 <xflow>:
 800ee10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee12:	4614      	mov	r4, r2
 800ee14:	461d      	mov	r5, r3
 800ee16:	b108      	cbz	r0, 800ee1c <xflow+0xc>
 800ee18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee1c:	e9cd 2300 	strd	r2, r3, [sp]
 800ee20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee24:	4620      	mov	r0, r4
 800ee26:	4629      	mov	r1, r5
 800ee28:	f7f1 fbfe 	bl	8000628 <__aeabi_dmul>
 800ee2c:	2222      	movs	r2, #34	; 0x22
 800ee2e:	b003      	add	sp, #12
 800ee30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee34:	f7ff bfe2 	b.w	800edfc <with_errno>

0800ee38 <__math_uflow>:
 800ee38:	b508      	push	{r3, lr}
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee40:	f7ff ffe6 	bl	800ee10 <xflow>
 800ee44:	ec41 0b10 	vmov	d0, r0, r1
 800ee48:	bd08      	pop	{r3, pc}

0800ee4a <__math_oflow>:
 800ee4a:	b508      	push	{r3, lr}
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ee52:	f7ff ffdd 	bl	800ee10 <xflow>
 800ee56:	ec41 0b10 	vmov	d0, r0, r1
 800ee5a:	bd08      	pop	{r3, pc}

0800ee5c <_init>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	bf00      	nop
 800ee60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee62:	bc08      	pop	{r3}
 800ee64:	469e      	mov	lr, r3
 800ee66:	4770      	bx	lr

0800ee68 <_fini>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	bf00      	nop
 800ee6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee6e:	bc08      	pop	{r3}
 800ee70:	469e      	mov	lr, r3
 800ee72:	4770      	bx	lr
