
ThirdParty_MainAvionic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006280  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006448  08006448  00016448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006540  08006540  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006548  08006548  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08006550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200000d8  08006628  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006628  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c37  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001939  00000000  00000000  00028d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000675  00000000  00000000  0002af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002176a  00000000  00000000  0002b595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bacd  00000000  00000000  0004ccff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8b6a  00000000  00000000  000587cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028c4  00000000  00000000  00121338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00123bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000d8 	.word	0x200000d8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006430 	.word	0x08006430

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000dc 	.word	0x200000dc
 8000204:	08006430 	.word	0x08006430

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_ldivmod>:
 8000b80:	b97b      	cbnz	r3, 8000ba2 <__aeabi_ldivmod+0x22>
 8000b82:	b972      	cbnz	r2, 8000ba2 <__aeabi_ldivmod+0x22>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bfbe      	ittt	lt
 8000b88:	2000      	movlt	r0, #0
 8000b8a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b8e:	e006      	blt.n	8000b9e <__aeabi_ldivmod+0x1e>
 8000b90:	bf08      	it	eq
 8000b92:	2800      	cmpeq	r0, #0
 8000b94:	bf1c      	itt	ne
 8000b96:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b9a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9e:	f000 b9bb 	b.w	8000f18 <__aeabi_idiv0>
 8000ba2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000baa:	2900      	cmp	r1, #0
 8000bac:	db09      	blt.n	8000bc2 <__aeabi_ldivmod+0x42>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db1a      	blt.n	8000be8 <__aeabi_ldivmod+0x68>
 8000bb2:	f000 f84d 	bl	8000c50 <__udivmoddi4>
 8000bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4770      	bx	lr
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db1b      	blt.n	8000c04 <__aeabi_ldivmod+0x84>
 8000bcc:	f000 f840 	bl	8000c50 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	4770      	bx	lr
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	f000 f82f 	bl	8000c50 <__udivmoddi4>
 8000bf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfa:	b004      	add	sp, #16
 8000bfc:	4240      	negs	r0, r0
 8000bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c02:	4770      	bx	lr
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	f000 f821 	bl	8000c50 <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b970 	b.w	8000f18 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9e08      	ldr	r6, [sp, #32]
 8000c56:	460d      	mov	r5, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	460f      	mov	r7, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14a      	bne.n	8000cf6 <__udivmoddi4+0xa6>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4694      	mov	ip, r2
 8000c64:	d965      	bls.n	8000d32 <__udivmoddi4+0xe2>
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	b143      	cbz	r3, 8000c7e <__udivmoddi4+0x2e>
 8000c6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c70:	f1c3 0220 	rsb	r2, r3, #32
 8000c74:	409f      	lsls	r7, r3
 8000c76:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7a:	4317      	orrs	r7, r2
 8000c7c:	409c      	lsls	r4, r3
 8000c7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c82:	fa1f f58c 	uxth.w	r5, ip
 8000c86:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c8a:	0c22      	lsrs	r2, r4, #16
 8000c8c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c94:	fb01 f005 	mul.w	r0, r1, r5
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x62>
 8000c9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca4:	f080 811c 	bcs.w	8000ee0 <__udivmoddi4+0x290>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f240 8119 	bls.w	8000ee0 <__udivmoddi4+0x290>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4462      	add	r2, ip
 8000cb2:	1a12      	subs	r2, r2, r0
 8000cb4:	b2a4      	uxth	r4, r4
 8000cb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc2:	fb00 f505 	mul.w	r5, r0, r5
 8000cc6:	42a5      	cmp	r5, r4
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x90>
 8000cca:	eb1c 0404 	adds.w	r4, ip, r4
 8000cce:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd2:	f080 8107 	bcs.w	8000ee4 <__udivmoddi4+0x294>
 8000cd6:	42a5      	cmp	r5, r4
 8000cd8:	f240 8104 	bls.w	8000ee4 <__udivmoddi4+0x294>
 8000cdc:	4464      	add	r4, ip
 8000cde:	3802      	subs	r0, #2
 8000ce0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	b11e      	cbz	r6, 8000cf2 <__udivmoddi4+0xa2>
 8000cea:	40dc      	lsrs	r4, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0xbc>
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	f000 80ed 	beq.w	8000eda <__udivmoddi4+0x28a>
 8000d00:	2100      	movs	r1, #0
 8000d02:	e9c6 0500 	strd	r0, r5, [r6]
 8000d06:	4608      	mov	r0, r1
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	fab3 f183 	clz	r1, r3
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d149      	bne.n	8000da8 <__udivmoddi4+0x158>
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d302      	bcc.n	8000d1e <__udivmoddi4+0xce>
 8000d18:	4282      	cmp	r2, r0
 8000d1a:	f200 80f8 	bhi.w	8000f0e <__udivmoddi4+0x2be>
 8000d1e:	1a84      	subs	r4, r0, r2
 8000d20:	eb65 0203 	sbc.w	r2, r5, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	4617      	mov	r7, r2
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d0e2      	beq.n	8000cf2 <__udivmoddi4+0xa2>
 8000d2c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d30:	e7df      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xe6>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f382 	clz	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8090 	bne.w	8000e60 <__udivmoddi4+0x210>
 8000d40:	1a8a      	subs	r2, r1, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d50:	fb07 2015 	mls	r0, r7, r5, r2
 8000d54:	0c22      	lsrs	r2, r4, #16
 8000d56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d5a:	fb0e f005 	mul.w	r0, lr, r5
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x124>
 8000d62:	eb1c 0202 	adds.w	r2, ip, r2
 8000d66:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x122>
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2b8>
 8000d72:	4645      	mov	r5, r8
 8000d74:	1a12      	subs	r2, r2, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x14e>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x14c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2c2>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da6:	e79f      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000da8:	f1c1 0720 	rsb	r7, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa05 f401 	lsl.w	r4, r5, r1
 8000dba:	fa20 f307 	lsr.w	r3, r0, r7
 8000dbe:	40fd      	lsrs	r5, r7
 8000dc0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	fb09 5518 	mls	r5, r9, r8, r5
 8000dd2:	0c1c      	lsrs	r4, r3, #16
 8000dd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd8:	fb08 f50e 	mul.w	r5, r8, lr
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	fa00 f001 	lsl.w	r0, r0, r1
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b0>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2b4>
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2b4>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4464      	add	r4, ip
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	b29d      	uxth	r5, r3
 8000e04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e08:	fb09 4413 	mls	r4, r9, r3, r4
 8000e0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e10:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1da>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2ac>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2ac>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e32:	eba4 040e 	sub.w	r4, r4, lr
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46ae      	mov	lr, r5
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x29c>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x298>
 8000e40:	b156      	cbz	r6, 8000e58 <__udivmoddi4+0x208>
 8000e42:	ebb0 0208 	subs.w	r2, r0, r8
 8000e46:	eb64 040e 	sbc.w	r4, r4, lr
 8000e4a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e4e:	40ca      	lsrs	r2, r1
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	4317      	orrs	r7, r2
 8000e54:	e9c6 7400 	strd	r7, r4, [r6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	f1c3 0120 	rsb	r1, r3, #32
 8000e64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e68:	fa20 f201 	lsr.w	r2, r0, r1
 8000e6c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e70:	409d      	lsls	r5, r3
 8000e72:	432a      	orrs	r2, r5
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e80:	fb07 1510 	mls	r5, r7, r0, r1
 8000e84:	0c11      	lsrs	r1, r2, #16
 8000e86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e8e:	428d      	cmp	r5, r1
 8000e90:	fa04 f403 	lsl.w	r4, r4, r3
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x258>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ea0:	428d      	cmp	r5, r1
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	1b49      	subs	r1, r1, r5
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb0:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ebc:	4291      	cmp	r1, r2
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x282>
 8000ec0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2a8>
 8000eca:	4291      	cmp	r1, r2
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2a8>
 8000ece:	3d02      	subs	r5, #2
 8000ed0:	4462      	add	r2, ip
 8000ed2:	1a52      	subs	r2, r2, r1
 8000ed4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0xfc>
 8000eda:	4631      	mov	r1, r6
 8000edc:	4630      	mov	r0, r6
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000ee0:	4639      	mov	r1, r7
 8000ee2:	e6e6      	b.n	8000cb2 <__udivmoddi4+0x62>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	e6fb      	b.n	8000ce0 <__udivmoddi4+0x90>
 8000ee8:	4548      	cmp	r0, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f0>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f0>
 8000ef8:	4645      	mov	r5, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x282>
 8000efc:	462b      	mov	r3, r5
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1da>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x258>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b0>
 8000f08:	3d02      	subs	r5, #2
 8000f0a:	4462      	add	r2, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x124>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e70a      	b.n	8000d28 <__udivmoddi4+0xd8>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x14e>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2319      	movs	r3, #25
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <TrimRead+0x1b8>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2288      	movs	r2, #136	; 0x88
 8000f34:	21ec      	movs	r1, #236	; 0xec
 8000f36:	4868      	ldr	r0, [pc, #416]	; (80010d8 <TrimRead+0x1bc>)
 8000f38:	f002 fdd0 	bl	8003adc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000f3c:	4b67      	ldr	r3, [pc, #412]	; (80010dc <TrimRead+0x1c0>)
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	9202      	str	r2, [sp, #8]
 8000f44:	2207      	movs	r2, #7
 8000f46:	9201      	str	r2, [sp, #4]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	22e1      	movs	r2, #225	; 0xe1
 8000f4e:	21ec      	movs	r1, #236	; 0xec
 8000f50:	4861      	ldr	r0, [pc, #388]	; (80010d8 <TrimRead+0x1bc>)
 8000f52:	f002 fdc3 	bl	8003adc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000f56:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <TrimRead+0x1b8>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <TrimRead+0x1b8>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <TrimRead+0x1c4>)
 8000f6c:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000f6e:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <TrimRead+0x1b8>)
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <TrimRead+0x1b8>)
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <TrimRead+0x1c8>)
 8000f82:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <TrimRead+0x1b8>)
 8000f86:	795b      	ldrb	r3, [r3, #5]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <TrimRead+0x1b8>)
 8000f8e:	791b      	ldrb	r3, [r3, #4]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <TrimRead+0x1cc>)
 8000f98:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <TrimRead+0x1b8>)
 8000f9c:	79db      	ldrb	r3, [r3, #7]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <TrimRead+0x1b8>)
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <TrimRead+0x1d0>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000fb2:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <TrimRead+0x1b8>)
 8000fb4:	7a5b      	ldrb	r3, [r3, #9]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <TrimRead+0x1b8>)
 8000fbc:	799b      	ldrb	r3, [r3, #6]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <TrimRead+0x1d4>)
 8000fc6:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <TrimRead+0x1b8>)
 8000fca:	7adb      	ldrb	r3, [r3, #11]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <TrimRead+0x1b8>)
 8000fd2:	7a9b      	ldrb	r3, [r3, #10]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <TrimRead+0x1d8>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <TrimRead+0x1b8>)
 8000fe0:	7b5b      	ldrb	r3, [r3, #13]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <TrimRead+0x1b8>)
 8000fe8:	7b1b      	ldrb	r3, [r3, #12]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <TrimRead+0x1dc>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <TrimRead+0x1b8>)
 8000ff6:	7bdb      	ldrb	r3, [r3, #15]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <TrimRead+0x1b8>)
 8000ffe:	7b9b      	ldrb	r3, [r3, #14]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <TrimRead+0x1e0>)
 8001008:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <TrimRead+0x1b8>)
 800100c:	7c5b      	ldrb	r3, [r3, #17]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <TrimRead+0x1b8>)
 8001014:	7c1b      	ldrb	r3, [r3, #16]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b38      	ldr	r3, [pc, #224]	; (8001100 <TrimRead+0x1e4>)
 800101e:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <TrimRead+0x1b8>)
 8001022:	7cdb      	ldrb	r3, [r3, #19]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <TrimRead+0x1b8>)
 800102a:	7c9b      	ldrb	r3, [r3, #18]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <TrimRead+0x1e8>)
 8001034:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <TrimRead+0x1b8>)
 8001038:	7d5b      	ldrb	r3, [r3, #21]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <TrimRead+0x1b8>)
 8001040:	7d1b      	ldrb	r3, [r3, #20]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <TrimRead+0x1ec>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <TrimRead+0x1b8>)
 800104e:	7ddb      	ldrb	r3, [r3, #23]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <TrimRead+0x1b8>)
 8001056:	7d9b      	ldrb	r3, [r3, #22]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <TrimRead+0x1f0>)
 8001060:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <TrimRead+0x1b8>)
 8001064:	7e1b      	ldrb	r3, [r3, #24]
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <TrimRead+0x1f4>)
 800106a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <TrimRead+0x1b8>)
 800106e:	7e9b      	ldrb	r3, [r3, #26]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <TrimRead+0x1b8>)
 8001076:	7e5b      	ldrb	r3, [r3, #25]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <TrimRead+0x1f8>)
 8001080:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <TrimRead+0x1b8>)
 8001084:	7edb      	ldrb	r3, [r3, #27]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <TrimRead+0x1fc>)
 800108a:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <TrimRead+0x1b8>)
 800108e:	7f1b      	ldrb	r3, [r3, #28]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <TrimRead+0x1b8>)
 8001096:	7f5b      	ldrb	r3, [r3, #29]
 8001098:	b21b      	sxth	r3, r3
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <TrimRead+0x200>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <TrimRead+0x1b8>)
 80010aa:	7f9b      	ldrb	r3, [r3, #30]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <TrimRead+0x1b8>)
 80010b2:	7f5b      	ldrb	r3, [r3, #29]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <TrimRead+0x204>)
 80010c0:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <TrimRead+0x1b8>)
 80010c4:	7fdb      	ldrb	r3, [r3, #31]
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <TrimRead+0x208>)
 80010ca:	801a      	strh	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000f8 	.word	0x200000f8
 80010d8:	200001a0 	.word	0x200001a0
 80010dc:	20000111 	.word	0x20000111
 80010e0:	20000118 	.word	0x20000118
 80010e4:	20000120 	.word	0x20000120
 80010e8:	20000122 	.word	0x20000122
 80010ec:	2000011a 	.word	0x2000011a
 80010f0:	20000124 	.word	0x20000124
 80010f4:	20000126 	.word	0x20000126
 80010f8:	20000128 	.word	0x20000128
 80010fc:	2000012a 	.word	0x2000012a
 8001100:	2000012c 	.word	0x2000012c
 8001104:	2000012e 	.word	0x2000012e
 8001108:	20000130 	.word	0x20000130
 800110c:	20000132 	.word	0x20000132
 8001110:	2000011c 	.word	0x2000011c
 8001114:	20000134 	.word	0x20000134
 8001118:	2000011e 	.word	0x2000011e
 800111c:	20000136 	.word	0x20000136
 8001120:	20000138 	.word	0x20000138
 8001124:	2000013a 	.word	0x2000013a

08001128 <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af04      	add	r7, sp, #16
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	4603      	mov	r3, r0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	717b      	strb	r3, [r7, #5]
 8001142:	4613      	mov	r3, r2
 8001144:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001146:	f7ff fee9 	bl	8000f1c <TrimRead>

	uint8_t datatowrite = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001152:	23b6      	movs	r3, #182	; 0xb6
 8001154:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f107 030f 	add.w	r3, r7, #15
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	22e0      	movs	r2, #224	; 0xe0
 800116a:	21ec      	movs	r1, #236	; 0xec
 800116c:	4858      	ldr	r0, [pc, #352]	; (80012d0 <BME280_Config+0x1a8>)
 800116e:	f002 fbbb 	bl	80038e8 <HAL_I2C_Mem_Write>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <BME280_Config+0x56>
	{
		return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	e0a3      	b.n	80012c6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800117e:	2064      	movs	r0, #100	; 0x64
 8001180:	f001 ffd0 	bl	8003124 <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030f 	add.w	r3, r7, #15
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	22f2      	movs	r2, #242	; 0xf2
 800119c:	21ec      	movs	r1, #236	; 0xec
 800119e:	484c      	ldr	r0, [pc, #304]	; (80012d0 <BME280_Config+0x1a8>)
 80011a0:	f002 fba2 	bl	80038e8 <HAL_I2C_Mem_Write>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <BME280_Config+0x88>
	{
		return -1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e08a      	b.n	80012c6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f001 ffb7 	bl	8003124 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	f107 030e 	add.w	r3, r7, #14
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	22f2      	movs	r2, #242	; 0xf2
 80011ca:	21ec      	movs	r1, #236	; 0xec
 80011cc:	4840      	ldr	r0, [pc, #256]	; (80012d0 <BME280_Config+0x1a8>)
 80011ce:	f002 fc85 	bl	8003adc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80011d2:	7bba      	ldrb	r2, [r7, #14]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d002      	beq.n	80011e0 <BME280_Config+0xb8>
	{
		return -1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e072      	b.n	80012c6 <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80011e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011e4:	015b      	lsls	r3, r3, #5
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	2301      	movs	r3, #1
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	f107 030f 	add.w	r3, r7, #15
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	22f5      	movs	r2, #245	; 0xf5
 800120c:	21ec      	movs	r1, #236	; 0xec
 800120e:	4830      	ldr	r0, [pc, #192]	; (80012d0 <BME280_Config+0x1a8>)
 8001210:	f002 fb6a 	bl	80038e8 <HAL_I2C_Mem_Write>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <BME280_Config+0xf8>
	{
		return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e052      	b.n	80012c6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001220:	2064      	movs	r0, #100	; 0x64
 8001222:	f001 ff7f 	bl	8003124 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	f107 030e 	add.w	r3, r7, #14
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	22f5      	movs	r2, #245	; 0xf5
 800123a:	21ec      	movs	r1, #236	; 0xec
 800123c:	4824      	ldr	r0, [pc, #144]	; (80012d0 <BME280_Config+0x1a8>)
 800123e:	f002 fc4d 	bl	8003adc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001242:	7bba      	ldrb	r2, [r7, #14]
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	429a      	cmp	r2, r3
 8001248:	d002      	beq.n	8001250 <BME280_Config+0x128>
	{
		return -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e03a      	b.n	80012c6 <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	b25a      	sxtb	r2, r3
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	b25b      	sxtb	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b25a      	sxtb	r2, r3
 8001260:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	b25b      	sxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 030f 	add.w	r3, r7, #15
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	22f4      	movs	r2, #244	; 0xf4
 8001280:	21ec      	movs	r1, #236	; 0xec
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <BME280_Config+0x1a8>)
 8001284:	f002 fb30 	bl	80038e8 <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <BME280_Config+0x16c>
	{
		return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e018      	b.n	80012c6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f001 ff45 	bl	8003124 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f4      	movs	r2, #244	; 0xf4
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <BME280_Config+0x1a8>)
 80012b2:	f002 fc13 	bl	8003adc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x19c>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e000      	b.n	80012c6 <BME280_Config+0x19e>
	}
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001a0 	.word	0x200001a0

080012d4 <BMEReadRaw>:

int BMEReadRaw(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <BMEReadRaw+0x8c>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	22d0      	movs	r2, #208	; 0xd0
 80012ec:	21ec      	movs	r1, #236	; 0xec
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <BMEReadRaw+0x90>)
 80012f0:	f002 fbf4 	bl	8003adc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <BMEReadRaw+0x8c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b60      	cmp	r3, #96	; 0x60
 80012fa:	d12a      	bne.n	8001352 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2308      	movs	r3, #8
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	463b      	mov	r3, r7
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f7      	movs	r2, #247	; 0xf7
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4814      	ldr	r0, [pc, #80]	; (8001364 <BMEReadRaw+0x90>)
 8001312:	f002 fbe3 	bl	8003adc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001316:	783b      	ldrb	r3, [r7, #0]
 8001318:	031a      	lsls	r2, r3, #12
 800131a:	787b      	ldrb	r3, [r7, #1]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	4313      	orrs	r3, r2
 8001320:	78ba      	ldrb	r2, [r7, #2]
 8001322:	0912      	lsrs	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	4313      	orrs	r3, r2
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <BMEReadRaw+0x94>)
 800132a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	031a      	lsls	r2, r3, #12
 8001330:	793b      	ldrb	r3, [r7, #4]
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4313      	orrs	r3, r2
 8001336:	797a      	ldrb	r2, [r7, #5]
 8001338:	0912      	lsrs	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	4313      	orrs	r3, r2
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <BMEReadRaw+0x98>)
 8001340:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4313      	orrs	r3, r2
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <BMEReadRaw+0x9c>)
 800134c:	6013      	str	r3, [r2, #0]

		return 0;
 800134e:	2300      	movs	r3, #0
 8001350:	e001      	b.n	8001356 <BMEReadRaw+0x82>
	}
	else return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000f4 	.word	0x200000f4
 8001364:	200001a0 	.word	0x200001a0
 8001368:	20000140 	.word	0x20000140
 800136c:	2000013c 	.word	0x2000013c
 8001370:	20000144 	.word	0x20000144

08001374 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	10da      	asrs	r2, r3, #3
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <BME280_compensate_T_int32+0x74>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <BME280_compensate_T_int32+0x78>)
 800138a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	12db      	asrs	r3, r3, #11
 8001394:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	111b      	asrs	r3, r3, #4
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <BME280_compensate_T_int32+0x74>)
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	1112      	asrs	r2, r2, #4
 80013a4:	4910      	ldr	r1, [pc, #64]	; (80013e8 <BME280_compensate_T_int32+0x74>)
 80013a6:	8809      	ldrh	r1, [r1, #0]
 80013a8:	1a52      	subs	r2, r2, r1
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	131b      	asrs	r3, r3, #12
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <BME280_compensate_T_int32+0x7c>)
 80013b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	139b      	asrs	r3, r3, #14
 80013bc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <BME280_compensate_T_int32+0x80>)
 80013c6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <BME280_compensate_T_int32+0x80>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3380      	adds	r3, #128	; 0x80
 80013d4:	121b      	asrs	r3, r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
	return T;
 80013d8:	68fb      	ldr	r3, [r7, #12]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000118 	.word	0x20000118
 80013ec:	20000120 	.word	0x20000120
 80013f0:	20000122 	.word	0x20000122
 80013f4:	20000150 	.word	0x20000150

080013f8 <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b0ca      	sub	sp, #296	; 0x128
 80013fe:	af00      	add	r7, sp, #0
 8001400:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001404:	4baf      	ldr	r3, [pc, #700]	; (80016c4 <BME280_compensate_P_int64+0x2cc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	17da      	asrs	r2, r3, #31
 800140a:	461c      	mov	r4, r3
 800140c:	4615      	mov	r5, r2
 800140e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001412:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001416:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800141a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800141e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001422:	fb03 f102 	mul.w	r1, r3, r2
 8001426:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800142a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	18ca      	adds	r2, r1, r3
 8001434:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001438:	fba3 8903 	umull	r8, r9, r3, r3
 800143c:	eb02 0309 	add.w	r3, r2, r9
 8001440:	4699      	mov	r9, r3
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <BME280_compensate_P_int64+0x2d0>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	b21b      	sxth	r3, r3
 800144a:	17da      	asrs	r2, r3, #31
 800144c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001454:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001458:	4603      	mov	r3, r0
 800145a:	fb03 f209 	mul.w	r2, r3, r9
 800145e:	460b      	mov	r3, r1
 8001460:	fb08 f303 	mul.w	r3, r8, r3
 8001464:	4413      	add	r3, r2
 8001466:	4602      	mov	r2, r0
 8001468:	fba8 1202 	umull	r1, r2, r8, r2
 800146c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001470:	460a      	mov	r2, r1
 8001472:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800147a:	4413      	add	r3, r2
 800147c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001480:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001484:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001488:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800148c:	4b8f      	ldr	r3, [pc, #572]	; (80016cc <BME280_compensate_P_int64+0x2d4>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	b21b      	sxth	r3, r3
 8001494:	17da      	asrs	r2, r3, #31
 8001496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800149a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014a6:	462a      	mov	r2, r5
 80014a8:	fb02 f203 	mul.w	r2, r2, r3
 80014ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014b0:	4621      	mov	r1, r4
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	441a      	add	r2, r3
 80014b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014bc:	4621      	mov	r1, r4
 80014be:	fba3 1301 	umull	r1, r3, r3, r1
 80014c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014c6:	460b      	mov	r3, r1
 80014c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014d0:	18d3      	adds	r3, r2, r3
 80014d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80014e2:	462b      	mov	r3, r5
 80014e4:	0459      	lsls	r1, r3, #17
 80014e6:	4623      	mov	r3, r4
 80014e8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80014ec:	4623      	mov	r3, r4
 80014ee:	0458      	lsls	r0, r3, #17
 80014f0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014f4:	1814      	adds	r4, r2, r0
 80014f6:	643c      	str	r4, [r7, #64]	; 0x40
 80014f8:	414b      	adcs	r3, r1
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
 80014fc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001500:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001504:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <BME280_compensate_P_int64+0x2d8>)
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	b21b      	sxth	r3, r3
 800150c:	17da      	asrs	r2, r3, #31
 800150e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001512:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001522:	00d9      	lsls	r1, r3, #3
 8001524:	2000      	movs	r0, #0
 8001526:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800152a:	1814      	adds	r4, r2, r0
 800152c:	63bc      	str	r4, [r7, #56]	; 0x38
 800152e:	414b      	adcs	r3, r1
 8001530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001532:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001536:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800153a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800153e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001542:	fb03 f102 	mul.w	r1, r3, r2
 8001546:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800154a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	18ca      	adds	r2, r1, r3
 8001554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001558:	fba3 1303 	umull	r1, r3, r3, r3
 800155c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001560:	460b      	mov	r3, r1
 8001562:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001570:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <BME280_compensate_P_int64+0x2dc>)
 8001572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001576:	b21b      	sxth	r3, r3
 8001578:	17da      	asrs	r2, r3, #31
 800157a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800157e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001582:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001586:	462b      	mov	r3, r5
 8001588:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800158c:	4642      	mov	r2, r8
 800158e:	fb02 f203 	mul.w	r2, r2, r3
 8001592:	464b      	mov	r3, r9
 8001594:	4621      	mov	r1, r4
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4413      	add	r3, r2
 800159c:	4622      	mov	r2, r4
 800159e:	4641      	mov	r1, r8
 80015a0:	fba2 1201 	umull	r1, r2, r2, r1
 80015a4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80015a8:	460a      	mov	r2, r1
 80015aa:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015ae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015b2:	4413      	add	r3, r2
 80015b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015c4:	4623      	mov	r3, r4
 80015c6:	0a18      	lsrs	r0, r3, #8
 80015c8:	462b      	mov	r3, r5
 80015ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015ce:	462b      	mov	r3, r5
 80015d0:	1219      	asrs	r1, r3, #8
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <BME280_compensate_P_int64+0x2e0>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	17da      	asrs	r2, r3, #31
 80015dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80015ec:	464a      	mov	r2, r9
 80015ee:	fb02 f203 	mul.w	r2, r2, r3
 80015f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f6:	4644      	mov	r4, r8
 80015f8:	fb04 f303 	mul.w	r3, r4, r3
 80015fc:	441a      	add	r2, r3
 80015fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001602:	4644      	mov	r4, r8
 8001604:	fba3 4304 	umull	r4, r3, r3, r4
 8001608:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800160c:	4623      	mov	r3, r4
 800160e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001628:	464c      	mov	r4, r9
 800162a:	0323      	lsls	r3, r4, #12
 800162c:	4644      	mov	r4, r8
 800162e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001632:	4644      	mov	r4, r8
 8001634:	0322      	lsls	r2, r4, #12
 8001636:	1884      	adds	r4, r0, r2
 8001638:	633c      	str	r4, [r7, #48]	; 0x30
 800163a:	eb41 0303 	adc.w	r3, r1, r3
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
 8001640:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001644:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001648:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800164c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001650:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001654:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <BME280_compensate_P_int64+0x2e4>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	2200      	movs	r2, #0
 8001660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001664:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001668:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800166c:	462b      	mov	r3, r5
 800166e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001672:	4642      	mov	r2, r8
 8001674:	fb02 f203 	mul.w	r2, r2, r3
 8001678:	464b      	mov	r3, r9
 800167a:	4621      	mov	r1, r4
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	4622      	mov	r2, r4
 8001684:	4641      	mov	r1, r8
 8001686:	fba2 1201 	umull	r1, r2, r2, r1
 800168a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800168e:	460a      	mov	r2, r1
 8001690:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001694:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001698:	4413      	add	r3, r2
 800169a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80016aa:	4629      	mov	r1, r5
 80016ac:	104a      	asrs	r2, r1, #1
 80016ae:	4629      	mov	r1, r5
 80016b0:	17cb      	asrs	r3, r1, #31
 80016b2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80016b6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016ba:	4313      	orrs	r3, r2
 80016bc:	d110      	bne.n	80016e0 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80016be:	2300      	movs	r3, #0
 80016c0:	e154      	b.n	800196c <BME280_compensate_P_int64+0x574>
 80016c2:	bf00      	nop
 80016c4:	20000150 	.word	0x20000150
 80016c8:	2000012c 	.word	0x2000012c
 80016cc:	2000012a 	.word	0x2000012a
 80016d0:	20000128 	.word	0x20000128
 80016d4:	20000126 	.word	0x20000126
 80016d8:	20000124 	.word	0x20000124
 80016dc:	2000011a 	.word	0x2000011a
	}
	p = 1048576-adc_P;
 80016e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016e4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80016f2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80016f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016fa:	105b      	asrs	r3, r3, #1
 80016fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001700:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001704:	07db      	lsls	r3, r3, #31
 8001706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800170a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800170e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001712:	4621      	mov	r1, r4
 8001714:	1a89      	subs	r1, r1, r2
 8001716:	67b9      	str	r1, [r7, #120]	; 0x78
 8001718:	4629      	mov	r1, r5
 800171a:	eb61 0303 	sbc.w	r3, r1, r3
 800171e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001720:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001724:	4622      	mov	r2, r4
 8001726:	462b      	mov	r3, r5
 8001728:	1891      	adds	r1, r2, r2
 800172a:	6239      	str	r1, [r7, #32]
 800172c:	415b      	adcs	r3, r3
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001734:	4621      	mov	r1, r4
 8001736:	1851      	adds	r1, r2, r1
 8001738:	61b9      	str	r1, [r7, #24]
 800173a:	4629      	mov	r1, r5
 800173c:	414b      	adcs	r3, r1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800174c:	4649      	mov	r1, r9
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4641      	mov	r1, r8
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4641      	mov	r1, r8
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4641      	mov	r1, r8
 800175c:	1889      	adds	r1, r1, r2
 800175e:	6139      	str	r1, [r7, #16]
 8001760:	4649      	mov	r1, r9
 8001762:	eb43 0101 	adc.w	r1, r3, r1
 8001766:	6179      	str	r1, [r7, #20]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001774:	4649      	mov	r1, r9
 8001776:	008b      	lsls	r3, r1, #2
 8001778:	4641      	mov	r1, r8
 800177a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800177e:	4641      	mov	r1, r8
 8001780:	008a      	lsls	r2, r1, #2
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	4603      	mov	r3, r0
 8001788:	4622      	mov	r2, r4
 800178a:	189b      	adds	r3, r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	460b      	mov	r3, r1
 8001790:	462a      	mov	r2, r5
 8001792:	eb42 0303 	adc.w	r3, r2, r3
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017a4:	4649      	mov	r1, r9
 80017a6:	008b      	lsls	r3, r1, #2
 80017a8:	4641      	mov	r1, r8
 80017aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ae:	4641      	mov	r1, r8
 80017b0:	008a      	lsls	r2, r1, #2
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	4622      	mov	r2, r4
 80017ba:	189b      	adds	r3, r3, r2
 80017bc:	673b      	str	r3, [r7, #112]	; 0x70
 80017be:	462b      	mov	r3, r5
 80017c0:	460a      	mov	r2, r1
 80017c2:	eb42 0303 	adc.w	r3, r2, r3
 80017c6:	677b      	str	r3, [r7, #116]	; 0x74
 80017c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017d0:	f7ff f9d6 	bl	8000b80 <__aeabi_ldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80017dc:	4b66      	ldr	r3, [pc, #408]	; (8001978 <BME280_compensate_P_int64+0x580>)
 80017de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	17da      	asrs	r2, r3, #31
 80017e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80017e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017ea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	0b50      	lsrs	r0, r2, #13
 80017f8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017fc:	1359      	asrs	r1, r3, #13
 80017fe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001802:	462b      	mov	r3, r5
 8001804:	fb00 f203 	mul.w	r2, r0, r3
 8001808:	4623      	mov	r3, r4
 800180a:	fb03 f301 	mul.w	r3, r3, r1
 800180e:	4413      	add	r3, r2
 8001810:	4622      	mov	r2, r4
 8001812:	fba2 1200 	umull	r1, r2, r2, r0
 8001816:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800181a:	460a      	mov	r2, r1
 800181c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001820:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001824:	4413      	add	r3, r2
 8001826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800182a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0b50      	lsrs	r0, r2, #13
 8001838:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800183c:	1359      	asrs	r1, r3, #13
 800183e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001842:	462b      	mov	r3, r5
 8001844:	fb00 f203 	mul.w	r2, r0, r3
 8001848:	4623      	mov	r3, r4
 800184a:	fb03 f301 	mul.w	r3, r3, r1
 800184e:	4413      	add	r3, r2
 8001850:	4622      	mov	r2, r4
 8001852:	fba2 1200 	umull	r1, r2, r2, r0
 8001856:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800185a:	460a      	mov	r2, r1
 800185c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001860:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001864:	4413      	add	r3, r2
 8001866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001876:	4621      	mov	r1, r4
 8001878:	0e4a      	lsrs	r2, r1, #25
 800187a:	4629      	mov	r1, r5
 800187c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001880:	4629      	mov	r1, r5
 8001882:	164b      	asrs	r3, r1, #25
 8001884:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <BME280_compensate_P_int64+0x584>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	b21b      	sxth	r3, r3
 8001890:	17da      	asrs	r2, r3, #31
 8001892:	663b      	str	r3, [r7, #96]	; 0x60
 8001894:	667a      	str	r2, [r7, #100]	; 0x64
 8001896:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800189e:	462a      	mov	r2, r5
 80018a0:	fb02 f203 	mul.w	r2, r2, r3
 80018a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018a8:	4621      	mov	r1, r4
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018b4:	4621      	mov	r1, r4
 80018b6:	fba2 1201 	umull	r1, r2, r2, r1
 80018ba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80018be:	460a      	mov	r2, r1
 80018c0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80018c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018c8:	4413      	add	r3, r2
 80018ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018da:	4621      	mov	r1, r4
 80018dc:	0cca      	lsrs	r2, r1, #19
 80018de:	4629      	mov	r1, r5
 80018e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018e4:	4629      	mov	r1, r5
 80018e6:	14cb      	asrs	r3, r1, #19
 80018e8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80018ec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80018f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018f4:	1884      	adds	r4, r0, r2
 80018f6:	65bc      	str	r4, [r7, #88]	; 0x58
 80018f8:	eb41 0303 	adc.w	r3, r1, r3
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001902:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001906:	4621      	mov	r1, r4
 8001908:	1889      	adds	r1, r1, r2
 800190a:	6539      	str	r1, [r7, #80]	; 0x50
 800190c:	4629      	mov	r1, r5
 800190e:	eb43 0101 	adc.w	r1, r3, r1
 8001912:	6579      	str	r1, [r7, #84]	; 0x54
 8001914:	f04f 0000 	mov.w	r0, #0
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001920:	4623      	mov	r3, r4
 8001922:	0a18      	lsrs	r0, r3, #8
 8001924:	462b      	mov	r3, r5
 8001926:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800192a:	462b      	mov	r3, r5
 800192c:	1219      	asrs	r1, r3, #8
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <BME280_compensate_P_int64+0x588>)
 8001930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001948:	464c      	mov	r4, r9
 800194a:	0123      	lsls	r3, r4, #4
 800194c:	4644      	mov	r4, r8
 800194e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001952:	4644      	mov	r4, r8
 8001954:	0122      	lsls	r2, r4, #4
 8001956:	1884      	adds	r4, r0, r2
 8001958:	603c      	str	r4, [r7, #0]
 800195a:	eb41 0303 	adc.w	r3, r1, r3
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001964:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800196c:	4618      	mov	r0, r3
 800196e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001972:	46bd      	mov	sp, r7
 8001974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001978:	20000132 	.word	0x20000132
 800197c:	20000130 	.word	0x20000130
 8001980:	2000012e 	.word	0x2000012e

08001984 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <bme280_compensate_H_int32+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001994:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	039a      	lsls	r2, r3, #14
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <bme280_compensate_H_int32+0xc0>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	1ad2      	subs	r2, r2, r3
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <bme280_compensate_H_int32+0xc4>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	4619      	mov	r1, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80019b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019b8:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80019ba:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <bme280_compensate_H_int32+0xc8>)
 80019bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019c0:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80019c8:	1292      	asrs	r2, r2, #10
 80019ca:	4921      	ldr	r1, [pc, #132]	; (8001a50 <bme280_compensate_H_int32+0xcc>)
 80019cc:	8809      	ldrh	r1, [r1, #0]
 80019ce:	4608      	mov	r0, r1
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	fb00 f101 	mul.w	r1, r0, r1
 80019d6:	12c9      	asrs	r1, r1, #11
 80019d8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80019dc:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 80019e0:	1292      	asrs	r2, r2, #10
 80019e2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80019e6:	491b      	ldr	r1, [pc, #108]	; (8001a54 <bme280_compensate_H_int32+0xd0>)
 80019e8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80019ec:	fb01 f202 	mul.w	r2, r1, r2
 80019f0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 80019f4:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	13db      	asrs	r3, r3, #15
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	13d2      	asrs	r2, r2, #15
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <bme280_compensate_H_int32+0xd4>)
 8001a0c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a12:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a20:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a28:	bfa8      	it	ge
 8001a2a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a2e:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	131b      	asrs	r3, r3, #12
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	20000150 	.word	0x20000150
 8001a44:	20000136 	.word	0x20000136
 8001a48:	20000138 	.word	0x20000138
 8001a4c:	2000013a 	.word	0x2000013a
 8001a50:	2000011e 	.word	0x2000011e
 8001a54:	20000134 	.word	0x20000134
 8001a58:	2000011c 	.word	0x2000011c

08001a5c <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001a60:	f7ff fc38 	bl	80012d4 <BMEReadRaw>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d121      	bne.n	8001aae <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <BME280_Pressure+0x78>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a72:	d104      	bne.n	8001a7e <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <BME280_Pressure+0x7c>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e01b      	b.n	8001ab6 <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <BME280_Pressure+0x78>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fcb8 	bl	80013f8 <BME280_compensate_P_int64>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fcfe 	bl	800048c <__aeabi_ui2d>
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <BME280_Pressure+0x80>)
 8001a96:	f7fe fe9d 	bl	80007d4 <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f81d 	bl	8000ae0 <__aeabi_d2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <BME280_Pressure+0x7c>)
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e003      	b.n	8001ab6 <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <BME280_Pressure+0x7c>)
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <BME280_Pressure+0x7c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd08 	bl	80004d0 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8001acc:	eef0 0a67 	vmov.f32	s1, s15
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000140 	.word	0x20000140
 8001ad8:	20000200 	.word	0x20000200
 8001adc:	40700000 	.word	0x40700000

08001ae0 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ae4:	f7ff fbf6 	bl	80012d4 <BMEReadRaw>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d121      	bne.n	8001b32 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <BME280_Humidity+0x78>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af6:	d104      	bne.n	8001b02 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <BME280_Humidity+0x7c>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e01b      	b.n	8001b3a <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <BME280_Humidity+0x78>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff3c 	bl	8001984 <bme280_compensate_H_int32>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fcbc 	bl	800048c <__aeabi_ui2d>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <BME280_Humidity+0x80>)
 8001b1a:	f7fe fe5b 	bl	80007d4 <__aeabi_ddiv>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7fe ffdb 	bl	8000ae0 <__aeabi_d2f>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <BME280_Humidity+0x7c>)
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e003      	b.n	8001b3a <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <BME280_Humidity+0x7c>)
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <BME280_Humidity+0x7c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fcc6 	bl	80004d0 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b50:	eef0 0a67 	vmov.f32	s1, s15
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000144 	.word	0x20000144
 8001b5c:	20000204 	.word	0x20000204
 8001b60:	40900000 	.word	0x40900000

08001b64 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b68:	f7ff fbb4 	bl	80012d4 <BMEReadRaw>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d121      	bne.n	8001bb6 <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <BME280_Temperature+0x78>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b7a:	d104      	bne.n	8001b86 <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <BME280_Temperature+0x7c>)
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e01b      	b.n	8001bbe <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <BME280_Temperature+0x78>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fbf2 	bl	8001374 <BME280_compensate_T_int32>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc8a 	bl	80004ac <__aeabi_i2d>
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <BME280_Temperature+0x80>)
 8001b9e:	f7fe fe19 	bl	80007d4 <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7fe ff99 	bl	8000ae0 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <BME280_Temperature+0x7c>)
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e003      	b.n	8001bbe <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <BME280_Temperature+0x7c>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <BME280_Temperature+0x7c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc84 	bl	80004d0 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd4:	eef0 0a67 	vmov.f32	s1, s15
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000013c 	.word	0x2000013c
 8001be0:	200001fc 	.word	0x200001fc
 8001be4:	40590000 	.word	0x40590000

08001be8 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001bec:	f7ff ff36 	bl	8001a5c <BME280_Pressure>
 8001bf0:	ec53 2b10 	vmov	r2, r3, d0
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7fe ff72 	bl	8000ae0 <__aeabi_d2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <BME280_Altitude+0xa8>)
 8001c00:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <BME280_Altitude+0xa8>)
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001c94 <BME280_Altitude+0xac>
 8001c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <BME280_Altitude+0xa8>)
 8001c12:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <BME280_Altitude+0xa8>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <BME280_Altitude+0xb0>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c26:	ee16 0a90 	vmov	r0, s13
 8001c2a:	f7fe fc51 	bl	80004d0 <__aeabi_f2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001c80 <BME280_Altitude+0x98>
 8001c36:	ec43 2b10 	vmov	d0, r2, r3
 8001c3a:	f003 fa53 	bl	80050e4 <pow>
 8001c3e:	ec53 2b10 	vmov	r2, r3, d0
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	4915      	ldr	r1, [pc, #84]	; (8001c9c <BME280_Altitude+0xb4>)
 8001c48:	f7fe fae2 	bl	8000210 <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	a30c      	add	r3, pc, #48	; (adr r3, 8001c88 <BME280_Altitude+0xa0>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fc91 	bl	8000580 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ff3b 	bl	8000ae0 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <BME280_Altitude+0xb8>)
 8001c6e:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <BME280_Altitude+0xb8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	ee07 3a90 	vmov	s15, r3
}
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	ccd745e4 	.word	0xccd745e4
 8001c84:	3fc85b95 	.word	0x3fc85b95
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40e5a540 	.word	0x40e5a540
 8001c90:	2000014c 	.word	0x2000014c
 8001c94:	42c80000 	.word	0x42c80000
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	3ff00000 	.word	0x3ff00000
 8001ca0:	20000148 	.word	0x20000148

08001ca4 <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001cae:	f7ff ff9b 	bl	8001be8 <BME280_Altitude>
 8001cb2:	ee10 3a10 	vmov	r3, s0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc0a 	bl	80004d0 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001cc4:	4b45      	ldr	r3, [pc, #276]	; (8001ddc <BME280_Kalman_Alt+0x138>)
 8001cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <BME280_Kalman_Alt+0x13c>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe fc56 	bl	8000580 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <BME280_Kalman_Alt+0x13c>)
 8001cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <BME280_Kalman_Alt+0x138>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fc4a 	bl	8000580 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <BME280_Kalman_Alt+0x13c>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc41 	bl	8000580 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <BME280_Kalman_Alt+0x140>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fa82 	bl	8000214 <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fd5c 	bl	80007d4 <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4931      	ldr	r1, [pc, #196]	; (8001de8 <BME280_Kalman_Alt+0x144>)
 8001d22:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <BME280_Kalman_Alt+0x13c>)
 8001d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <BME280_Kalman_Alt+0x148>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc25 	bl	8000580 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d3e:	f7fe fa67 	bl	8000210 <__aeabi_dsub>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <BME280_Kalman_Alt+0x144>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fc16 	bl	8000580 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <BME280_Kalman_Alt+0x148>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fa57 	bl	8000214 <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4920      	ldr	r1, [pc, #128]	; (8001dec <BME280_Kalman_Alt+0x148>)
 8001d6c:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <BME280_Kalman_Alt+0x144>)
 8001d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <BME280_Kalman_Alt+0x13c>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc00 	bl	8000580 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	4919      	ldr	r1, [pc, #100]	; (8001df0 <BME280_Kalman_Alt+0x14c>)
 8001d8a:	f7fe fa41 	bl	8000210 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <BME280_Kalman_Alt+0x138>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fbf0 	bl	8000580 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <BME280_Kalman_Alt+0x150>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fa31 	bl	8000214 <__adddf3>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4909      	ldr	r1, [pc, #36]	; (8001ddc <BME280_Kalman_Alt+0x138>)
 8001db8:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <BME280_Kalman_Alt+0x148>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe fe8b 	bl	8000ae0 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	ee07 3a90 	vmov	s15, r3
}
 8001dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000158 	.word	0x20000158
 8001de0:	08006448 	.word	0x08006448
 8001de4:	08006450 	.word	0x08006450
 8001de8:	20000160 	.word	0x20000160
 8001dec:	20000168 	.word	0x20000168
 8001df0:	3ff00000 	.word	0x3ff00000
 8001df4:	20000008 	.word	0x20000008

08001df8 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001e02:	f7ff fe2b 	bl	8001a5c <BME280_Pressure>
 8001e06:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <BME280_Kalman_Press+0x124>)
 8001e0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <BME280_Kalman_Press+0x128>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fbb3 	bl	8000580 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <BME280_Kalman_Press+0x128>)
 8001e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e28:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <BME280_Kalman_Press+0x124>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fba7 	bl	8000580 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <BME280_Kalman_Press+0x128>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fb9e 	bl	8000580 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <BME280_Kalman_Press+0x12c>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe f9df 	bl	8000214 <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe fcb9 	bl	80007d4 <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4930      	ldr	r1, [pc, #192]	; (8001f28 <BME280_Kalman_Press+0x130>)
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <BME280_Kalman_Press+0x128>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <BME280_Kalman_Press+0x134>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fb82 	bl	8000580 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e84:	f7fe f9c4 	bl	8000210 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <BME280_Kalman_Press+0x130>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fb73 	bl	8000580 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <BME280_Kalman_Press+0x134>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe f9b4 	bl	8000214 <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	491e      	ldr	r1, [pc, #120]	; (8001f2c <BME280_Kalman_Press+0x134>)
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <BME280_Kalman_Press+0x130>)
 8001eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <BME280_Kalman_Press+0x128>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fb5d 	bl	8000580 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	f04f 0000 	mov.w	r0, #0
 8001ece:	4918      	ldr	r1, [pc, #96]	; (8001f30 <BME280_Kalman_Press+0x138>)
 8001ed0:	f7fe f99e 	bl	8000210 <__aeabi_dsub>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <BME280_Kalman_Press+0x124>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb4d 	bl	8000580 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <BME280_Kalman_Press+0x13c>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe f98e 	bl	8000214 <__adddf3>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <BME280_Kalman_Press+0x124>)
 8001efe:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <BME280_Kalman_Press+0x134>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f10:	eef0 0a67 	vmov.f32	s1, s15
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000170 	.word	0x20000170
 8001f20:	08006458 	.word	0x08006458
 8001f24:	08006460 	.word	0x08006460
 8001f28:	20000178 	.word	0x20000178
 8001f2c:	20000010 	.word	0x20000010
 8001f30:	3ff00000 	.word	0x3ff00000
 8001f34:	20000018 	.word	0x20000018

08001f38 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 8001f42:	f7ff fdcd 	bl	8001ae0 <BME280_Humidity>
 8001f46:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <BME280_Kalman_Hum+0x124>)
 8001f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <BME280_Kalman_Hum+0x128>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb13 	bl	8000580 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4614      	mov	r4, r2
 8001f60:	461d      	mov	r5, r3
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <BME280_Kalman_Hum+0x128>)
 8001f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <BME280_Kalman_Hum+0x124>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fb07 	bl	8000580 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <BME280_Kalman_Hum+0x128>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fafe 	bl	8000580 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <BME280_Kalman_Hum+0x12c>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe f93f 	bl	8000214 <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	f7fe fc19 	bl	80007d4 <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4930      	ldr	r1, [pc, #192]	; (8002068 <BME280_Kalman_Hum+0x130>)
 8001fa8:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <BME280_Kalman_Hum+0x128>)
 8001fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <BME280_Kalman_Hum+0x134>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fae2 	bl	8000580 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fc4:	f7fe f924 	bl	8000210 <__aeabi_dsub>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <BME280_Kalman_Hum+0x130>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fad3 	bl	8000580 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <BME280_Kalman_Hum+0x134>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe f914 	bl	8000214 <__adddf3>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	491e      	ldr	r1, [pc, #120]	; (800206c <BME280_Kalman_Hum+0x134>)
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <BME280_Kalman_Hum+0x130>)
 8001ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <BME280_Kalman_Hum+0x128>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fabd 	bl	8000580 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	4918      	ldr	r1, [pc, #96]	; (8002070 <BME280_Kalman_Hum+0x138>)
 8002010:	f7fe f8fe 	bl	8000210 <__aeabi_dsub>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <BME280_Kalman_Hum+0x124>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe faad 	bl	8000580 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <BME280_Kalman_Hum+0x13c>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe f8ee 	bl	8000214 <__adddf3>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <BME280_Kalman_Hum+0x124>)
 800203e:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <BME280_Kalman_Hum+0x134>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	ec43 2b17 	vmov	d7, r2, r3
}
 800204c:	eeb0 0a47 	vmov.f32	s0, s14
 8002050:	eef0 0a67 	vmov.f32	s1, s15
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	bf00      	nop
 800205c:	20000180 	.word	0x20000180
 8002060:	08006468 	.word	0x08006468
 8002064:	08006470 	.word	0x08006470
 8002068:	20000188 	.word	0x20000188
 800206c:	20000020 	.word	0x20000020
 8002070:	3ff00000 	.word	0x3ff00000
 8002074:	20000028 	.word	0x20000028

08002078 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 8002082:	f7ff fd6f 	bl	8001b64 <BME280_Temperature>
 8002086:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 800208a:	4b44      	ldr	r3, [pc, #272]	; (800219c <BME280_Kalman_Temp+0x124>)
 800208c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002090:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <BME280_Kalman_Temp+0x128>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fa73 	bl	8000580 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <BME280_Kalman_Temp+0x128>)
 80020a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <BME280_Kalman_Temp+0x124>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe fa67 	bl	8000580 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <BME280_Kalman_Temp+0x128>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fa5e 	bl	8000580 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <BME280_Kalman_Temp+0x12c>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe f89f 	bl	8000214 <__adddf3>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe fb79 	bl	80007d4 <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4930      	ldr	r1, [pc, #192]	; (80021a8 <BME280_Kalman_Temp+0x130>)
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <BME280_Kalman_Temp+0x128>)
 80020ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <BME280_Kalman_Temp+0x134>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fa42 	bl	8000580 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002104:	f7fe f884 	bl	8000210 <__aeabi_dsub>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <BME280_Kalman_Temp+0x130>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa33 	bl	8000580 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <BME280_Kalman_Temp+0x134>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe f874 	bl	8000214 <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	491e      	ldr	r1, [pc, #120]	; (80021ac <BME280_Kalman_Temp+0x134>)
 8002132:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <BME280_Kalman_Temp+0x130>)
 8002138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <BME280_Kalman_Temp+0x128>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe fa1d 	bl	8000580 <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	f04f 0000 	mov.w	r0, #0
 800214e:	4918      	ldr	r1, [pc, #96]	; (80021b0 <BME280_Kalman_Temp+0x138>)
 8002150:	f7fe f85e 	bl	8000210 <__aeabi_dsub>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <BME280_Kalman_Temp+0x124>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fa0d 	bl	8000580 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <BME280_Kalman_Temp+0x13c>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe f84e 	bl	8000214 <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <BME280_Kalman_Temp+0x124>)
 800217e:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <BME280_Kalman_Temp+0x134>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	ec43 2b17 	vmov	d7, r2, r3
}
 800218c:	eeb0 0a47 	vmov.f32	s0, s14
 8002190:	eef0 0a67 	vmov.f32	s1, s15
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bdb0      	pop	{r4, r5, r7, pc}
 800219a:	bf00      	nop
 800219c:	20000190 	.word	0x20000190
 80021a0:	08006478 	.word	0x08006478
 80021a4:	08006480 	.word	0x08006480
 80021a8:	20000198 	.word	0x20000198
 80021ac:	20000030 	.word	0x20000030
 80021b0:	3ff00000 	.word	0x3ff00000
 80021b4:	20000038 	.word	0x20000038

080021b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021be:	f000 ff3f 	bl	8003040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c2:	f000 f8f1 	bl	80023a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c6:	f000 f97d 	bl	80024c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021ca:	f000 f94d 	bl	8002468 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 80021ce:	f000 f9a7 	bl	8002520 <MPU6050_Init>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80021d2:	2304      	movs	r3, #4
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2303      	movs	r3, #3
 80021dc:	2201      	movs	r2, #1
 80021de:	2105      	movs	r1, #5
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7fe ffa1 	bl	8001128 <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  acX = MPU6050_Kalman_Accel_X();
 80021e6:	f000 fbcd 	bl	8002984 <MPU6050_Kalman_Accel_X>
 80021ea:	ec53 2b10 	vmov	r2, r3, d0
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fc75 	bl	8000ae0 <__aeabi_d2f>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a5c      	ldr	r2, [pc, #368]	; (800236c <main+0x1b4>)
 80021fa:	6013      	str	r3, [r2, #0]
	 	  acY = MPU6050_Kalman_Accel_Y();
 80021fc:	f000 fc64 	bl	8002ac8 <MPU6050_Kalman_Accel_Y>
 8002200:	ec53 2b10 	vmov	r2, r3, d0
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fc6a 	bl	8000ae0 <__aeabi_d2f>
 800220c:	4603      	mov	r3, r0
 800220e:	4a58      	ldr	r2, [pc, #352]	; (8002370 <main+0x1b8>)
 8002210:	6013      	str	r3, [r2, #0]
	 	  acZ = MPU6050_Kalman_Accel_Z();
 8002212:	f000 fcfb 	bl	8002c0c <MPU6050_Kalman_Accel_Z>
 8002216:	ec53 2b10 	vmov	r2, r3, d0
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fc5f 	bl	8000ae0 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	4a53      	ldr	r2, [pc, #332]	; (8002374 <main+0x1bc>)
 8002226:	6013      	str	r3, [r2, #0]
	 	  gyX = MPU6050_Kalman_Gyro_X();
 8002228:	f000 fd92 	bl	8002d50 <MPU6050_Kalman_Gyro_X>
 800222c:	ec53 2b10 	vmov	r2, r3, d0
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fc54 	bl	8000ae0 <__aeabi_d2f>
 8002238:	4603      	mov	r3, r0
 800223a:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <main+0x1c0>)
 800223c:	6013      	str	r3, [r2, #0]
	 	  gyY = MPU6050_Kalman_Gyro_X();
 800223e:	f000 fd87 	bl	8002d50 <MPU6050_Kalman_Gyro_X>
 8002242:	ec53 2b10 	vmov	r2, r3, d0
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fc49 	bl	8000ae0 <__aeabi_d2f>
 800224e:	4603      	mov	r3, r0
 8002250:	4a4a      	ldr	r2, [pc, #296]	; (800237c <main+0x1c4>)
 8002252:	6013      	str	r3, [r2, #0]
	 	  gyZ = MPU6050_Kalman_Gyro_X();
 8002254:	f000 fd7c 	bl	8002d50 <MPU6050_Kalman_Gyro_X>
 8002258:	ec53 2b10 	vmov	r2, r3, d0
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fc3e 	bl	8000ae0 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4a46      	ldr	r2, [pc, #280]	; (8002380 <main+0x1c8>)
 8002268:	6013      	str	r3, [r2, #0]
	 	  RollAng = MPU6050_Kalman_Roll_Angle();
 800226a:	f000 fae7 	bl	800283c <MPU6050_Kalman_Roll_Angle>
 800226e:	eef0 7a40 	vmov.f32	s15, s0
 8002272:	4b44      	ldr	r3, [pc, #272]	; (8002384 <main+0x1cc>)
 8002274:	edc3 7a00 	vstr	s15, [r3]
	 	  Temperature = BME280_Temperature();
 8002278:	f7ff fc74 	bl	8001b64 <BME280_Temperature>
 800227c:	ec53 2b10 	vmov	r2, r3, d0
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fc2c 	bl	8000ae0 <__aeabi_d2f>
 8002288:	4603      	mov	r3, r0
 800228a:	4a3f      	ldr	r2, [pc, #252]	; (8002388 <main+0x1d0>)
 800228c:	6013      	str	r3, [r2, #0]
	 	  Pressure = BME280_Pressure();
 800228e:	f7ff fbe5 	bl	8001a5c <BME280_Pressure>
 8002292:	ec53 2b10 	vmov	r2, r3, d0
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fc21 	bl	8000ae0 <__aeabi_d2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a3a      	ldr	r2, [pc, #232]	; (800238c <main+0x1d4>)
 80022a2:	6013      	str	r3, [r2, #0]
	 	  Humidity = BME280_Humidity();
 80022a4:	f7ff fc1c 	bl	8001ae0 <BME280_Humidity>
 80022a8:	ec53 2b10 	vmov	r2, r3, d0
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7fe fc16 	bl	8000ae0 <__aeabi_d2f>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a36      	ldr	r2, [pc, #216]	; (8002390 <main+0x1d8>)
 80022b8:	6013      	str	r3, [r2, #0]
	 	  T = BME280_Kalman_Temp(Temperature);
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <main+0x1d0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f906 	bl	80004d0 <__aeabi_f2d>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	ec43 2b10 	vmov	d0, r2, r3
 80022cc:	f7ff fed4 	bl	8002078 <BME280_Kalman_Temp>
 80022d0:	ec53 2b10 	vmov	r2, r3, d0
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fc02 	bl	8000ae0 <__aeabi_d2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <main+0x1dc>)
 80022e0:	6013      	str	r3, [r2, #0]
	 	  P = BME280_Kalman_Press(Pressure);
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <main+0x1d4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8f2 	bl	80004d0 <__aeabi_f2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	ec43 2b10 	vmov	d0, r2, r3
 80022f4:	f7ff fd80 	bl	8001df8 <BME280_Kalman_Press>
 80022f8:	ec53 2b10 	vmov	r2, r3, d0
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f7fe fbee 	bl	8000ae0 <__aeabi_d2f>
 8002304:	4603      	mov	r3, r0
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <main+0x1e0>)
 8002308:	6013      	str	r3, [r2, #0]
	 	  H = BME280_Kalman_Hum(Humidity);
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <main+0x1d8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f8de 	bl	80004d0 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	ec43 2b10 	vmov	d0, r2, r3
 800231c:	f7ff fe0c 	bl	8001f38 <BME280_Kalman_Hum>
 8002320:	ec53 2b10 	vmov	r2, r3, d0
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fbda 	bl	8000ae0 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	4a1b      	ldr	r2, [pc, #108]	; (800239c <main+0x1e4>)
 8002330:	6013      	str	r3, [r2, #0]
	 	  Altitude1 = BME280_Altitude();
 8002332:	f7ff fc59 	bl	8001be8 <BME280_Altitude>
 8002336:	eef0 7a40 	vmov.f32	s15, s0
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <main+0x1e8>)
 800233c:	edc3 7a00 	vstr	s15, [r3]
	 	  Alt = BME280_Kalman_Alt(Altitude1);
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <main+0x1e8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8c3 	bl	80004d0 <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	ec43 2b10 	vmov	d0, r2, r3
 8002352:	f7ff fca7 	bl	8001ca4 <BME280_Kalman_Alt>
 8002356:	eef0 7a40 	vmov.f32	s15, s0
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <main+0x1ec>)
 800235c:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(500);
 8002360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002364:	f000 fede 	bl	8003124 <HAL_Delay>
	  acX = MPU6050_Kalman_Accel_X();
 8002368:	e73d      	b.n	80021e6 <main+0x2e>
 800236a:	bf00      	nop
 800236c:	20000208 	.word	0x20000208
 8002370:	2000020c 	.word	0x2000020c
 8002374:	20000210 	.word	0x20000210
 8002378:	20000214 	.word	0x20000214
 800237c:	20000218 	.word	0x20000218
 8002380:	2000021c 	.word	0x2000021c
 8002384:	200001f4 	.word	0x200001f4
 8002388:	200001fc 	.word	0x200001fc
 800238c:	20000200 	.word	0x20000200
 8002390:	20000204 	.word	0x20000204
 8002394:	20000224 	.word	0x20000224
 8002398:	20000228 	.word	0x20000228
 800239c:	2000022c 	.word	0x2000022c
 80023a0:	200001f8 	.word	0x200001f8
 80023a4:	20000220 	.word	0x20000220

080023a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b094      	sub	sp, #80	; 0x50
 80023ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	2234      	movs	r2, #52	; 0x34
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fe60 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	4b23      	ldr	r3, [pc, #140]	; (8002460 <SystemClock_Config+0xb8>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <SystemClock_Config+0xb8>)
 80023d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <SystemClock_Config+0xb8>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023e8:	2300      	movs	r3, #0
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <SystemClock_Config+0xbc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <SystemClock_Config+0xbc>)
 80023f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <SystemClock_Config+0xbc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002408:	2302      	movs	r3, #2
 800240a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240c:	2301      	movs	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002410:	2310      	movs	r3, #16
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fb8f 	bl	8004b40 <HAL_RCC_OscConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002428:	f000 f874 	bl	8002514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800242c:	230f      	movs	r3, #15
 800242e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f8ca 	bl	80045e0 <HAL_RCC_ClockConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002452:	f000 f85f 	bl	8002514 <Error_Handler>
  }
}
 8002456:	bf00      	nop
 8002458:	3750      	adds	r7, #80	; 0x50
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000

08002468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_I2C1_Init+0x50>)
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <MX_I2C1_Init+0x54>)
 8002470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_I2C1_Init+0x50>)
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <MX_I2C1_Init+0x58>)
 8002476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_I2C1_Init+0x50>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_I2C1_Init+0x50>)
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_I2C1_Init+0x50>)
 8002486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800248a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_I2C1_Init+0x50>)
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_I2C1_Init+0x50>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_I2C1_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_I2C1_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_I2C1_Init+0x50>)
 80024a6:	f001 f8db 	bl	8003660 <HAL_I2C_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024b0:	f000 f830 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200001a0 	.word	0x200001a0
 80024bc:	40005400 	.word	0x40005400
 80024c0:	000186a0 	.word	0x000186a0

080024c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <MX_GPIO_Init+0x4c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <MX_GPIO_Init+0x4c>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <MX_GPIO_Init+0x4c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_GPIO_Init+0x4c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <MX_GPIO_Init+0x4c>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_GPIO_Init+0x4c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800251c:	e7fe      	b.n	800251c <Error_Handler+0x8>
	...

08002520 <MPU6050_Init>:
static double Q7 = 10; //initial estimated covariance
static double P7 = 0; //initial error covariance (it must be 0)
static double K7 = 0; //initial kalman gain

void MPU6050_Init (void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	9302      	str	r3, [sp, #8]
 800252c:	2301      	movs	r3, #1
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	2275      	movs	r2, #117	; 0x75
 8002538:	21d0      	movs	r1, #208	; 0xd0
 800253a:	4823      	ldr	r0, [pc, #140]	; (80025c8 <MPU6050_Init+0xa8>)
 800253c:	f001 face 	bl	8003adc <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	2b68      	cmp	r3, #104	; 0x68
 8002544:	d13b      	bne.n	80025be <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	2301      	movs	r3, #1
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2301      	movs	r3, #1
 800255a:	226b      	movs	r2, #107	; 0x6b
 800255c:	21d0      	movs	r1, #208	; 0xd0
 800255e:	481a      	ldr	r0, [pc, #104]	; (80025c8 <MPU6050_Init+0xa8>)
 8002560:	f001 f9c2 	bl	80038e8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002564:	2307      	movs	r3, #7
 8002566:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256c:	9302      	str	r3, [sp, #8]
 800256e:	2301      	movs	r3, #1
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	1dbb      	adds	r3, r7, #6
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	2219      	movs	r2, #25
 800257a:	21d0      	movs	r1, #208	; 0xd0
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <MPU6050_Init+0xa8>)
 800257e:	f001 f9b3 	bl	80038e8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Â± 2g
		Data = 0x00;
 8002582:	2300      	movs	r3, #0
 8002584:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258a:	9302      	str	r3, [sp, #8]
 800258c:	2301      	movs	r3, #1
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	1dbb      	adds	r3, r7, #6
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2301      	movs	r3, #1
 8002596:	221c      	movs	r2, #28
 8002598:	21d0      	movs	r1, #208	; 0xd0
 800259a:	480b      	ldr	r0, [pc, #44]	; (80025c8 <MPU6050_Init+0xa8>)
 800259c:	f001 f9a4 	bl	80038e8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> Â± 250 Â°/s
		Data = 0x00;
 80025a0:	2300      	movs	r3, #0
 80025a2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80025a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	2301      	movs	r3, #1
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	1dbb      	adds	r3, r7, #6
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2301      	movs	r3, #1
 80025b4:	221b      	movs	r2, #27
 80025b6:	21d0      	movs	r1, #208	; 0xd0
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <MPU6050_Init+0xa8>)
 80025ba:	f001 f995 	bl	80038e8 <HAL_I2C_Mem_Write>
	}

}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200001a0 	.word	0x200001a0

080025cc <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	2306      	movs	r3, #6
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	463b      	mov	r3, r7
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	223b      	movs	r2, #59	; 0x3b
 80025e4:	21d0      	movs	r1, #208	; 0xd0
 80025e6:	4811      	ldr	r0, [pc, #68]	; (800262c <MPU6050_Accel_Config+0x60>)
 80025e8:	f001 fa78 	bl	8003adc <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 80025ec:	783b      	ldrb	r3, [r7, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	787b      	ldrb	r3, [r7, #1]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <MPU6050_Accel_Config+0x64>)
 80025fc:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 80025fe:	78bb      	ldrb	r3, [r7, #2]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b21a      	sxth	r2, r3
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	b21b      	sxth	r3, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	b21a      	sxth	r2, r3
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MPU6050_Accel_Config+0x68>)
 800260e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 8002610:	793b      	ldrb	r3, [r7, #4]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b21a      	sxth	r2, r3
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21a      	sxth	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MPU6050_Accel_Config+0x6c>)
 8002620:	801a      	strh	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200001a0 	.word	0x200001a0
 8002630:	20000240 	.word	0x20000240
 8002634:	20000242 	.word	0x20000242
 8002638:	20000244 	.word	0x20000244

0800263c <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8002640:	f7ff ffc4 	bl	80025cc <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <MPU6050_Read_Accel_X+0x40>)
 8002646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff2e 	bl	80004ac <__aeabi_i2d>
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <MPU6050_Read_Accel_X+0x44>)
 8002656:	f7fe f8bd 	bl	80007d4 <__aeabi_ddiv>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fa3d 	bl	8000ae0 <__aeabi_d2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <MPU6050_Read_Accel_X+0x48>)
 800266a:	6013      	str	r3, [r2, #0]
	return Ax;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <MPU6050_Read_Accel_X+0x48>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	ee07 3a90 	vmov	s15, r3
}
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000240 	.word	0x20000240
 8002680:	40d00000 	.word	0x40d00000
 8002684:	20000230 	.word	0x20000230

08002688 <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 800268c:	f7ff ff9e 	bl	80025cc <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <MPU6050_Read_Accel_Y+0x40>)
 8002692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff08 	bl	80004ac <__aeabi_i2d>
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MPU6050_Read_Accel_Y+0x44>)
 80026a2:	f7fe f897 	bl	80007d4 <__aeabi_ddiv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa17 	bl	8000ae0 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <MPU6050_Read_Accel_Y+0x48>)
 80026b6:	6013      	str	r3, [r2, #0]
	return Ay;
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <MPU6050_Read_Accel_Y+0x48>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	ee07 3a90 	vmov	s15, r3
}
 80026c0:	eeb0 0a67 	vmov.f32	s0, s15
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000242 	.word	0x20000242
 80026cc:	40d00000 	.word	0x40d00000
 80026d0:	20000234 	.word	0x20000234

080026d4 <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80026d8:	f7ff ff78 	bl	80025cc <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <MPU6050_Read_Accel_Z+0x40>)
 80026de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd fee2 	bl	80004ac <__aeabi_i2d>
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <MPU6050_Read_Accel_Z+0x44>)
 80026ee:	f7fe f871 	bl	80007d4 <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe f9f1 	bl	8000ae0 <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <MPU6050_Read_Accel_Z+0x48>)
 8002702:	6013      	str	r3, [r2, #0]
	return Az;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <MPU6050_Read_Accel_Z+0x48>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	ee07 3a90 	vmov	s15, r3
}
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000244 	.word	0x20000244
 8002718:	40d00000 	.word	0x40d00000
 800271c:	20000238 	.word	0x20000238

08002720 <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 8002726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	2306      	movs	r3, #6
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	463b      	mov	r3, r7
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	2243      	movs	r2, #67	; 0x43
 8002738:	21d0      	movs	r1, #208	; 0xd0
 800273a:	4811      	ldr	r0, [pc, #68]	; (8002780 <MPU6050_Gyro_Config+0x60>)
 800273c:	f001 f9ce 	bl	8003adc <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 8002740:	783b      	ldrb	r3, [r7, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b21a      	sxth	r2, r3
 8002746:	787b      	ldrb	r3, [r7, #1]
 8002748:	b21b      	sxth	r3, r3
 800274a:	4313      	orrs	r3, r2
 800274c:	b21a      	sxth	r2, r3
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <MPU6050_Gyro_Config+0x64>)
 8002750:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 8002752:	78bb      	ldrb	r3, [r7, #2]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	b21a      	sxth	r2, r3
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	b21b      	sxth	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	b21a      	sxth	r2, r3
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MPU6050_Gyro_Config+0x68>)
 8002762:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8002764:	793b      	ldrb	r3, [r7, #4]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	b21a      	sxth	r2, r3
 800276a:	797b      	ldrb	r3, [r7, #5]
 800276c:	b21b      	sxth	r3, r3
 800276e:	4313      	orrs	r3, r2
 8002770:	b21a      	sxth	r2, r3
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <MPU6050_Gyro_Config+0x6c>)
 8002774:	801a      	strh	r2, [r3, #0]

}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200001a0 	.word	0x200001a0
 8002784:	20000246 	.word	0x20000246
 8002788:	20000248 	.word	0x20000248
 800278c:	2000024a 	.word	0x2000024a

08002790 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 8002794:	f7ff ffc4 	bl	8002720 <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MPU6050_Read_Gyro_X+0x48>)
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe84 	bl	80004ac <__aeabi_i2d>
 80027a4:	a30a      	add	r3, pc, #40	; (adr r3, 80027d0 <MPU6050_Read_Gyro_X+0x40>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fe f813 	bl	80007d4 <__aeabi_ddiv>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe f993 	bl	8000ae0 <__aeabi_d2f>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <MPU6050_Read_Gyro_X+0x4c>)
 80027be:	6013      	str	r3, [r2, #0]
	return Gx;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MPU6050_Read_Gyro_X+0x4c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	ee07 3a90 	vmov	s15, r3
}
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40606000 	.word	0x40606000
 80027d8:	20000246 	.word	0x20000246
 80027dc:	2000023c 	.word	0x2000023c

080027e0 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 80027e6:	f000 f96f 	bl	8002ac8 <MPU6050_Kalman_Accel_Y>
 80027ea:	ed87 0b04 	vstr	d0, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 80027ee:	f000 fa0d 	bl	8002c0c <MPU6050_Kalman_Accel_Z>
 80027f2:	ed87 0b02 	vstr	d0, [r7, #8]
	float Roll = 0;
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 80027fc:	ed97 1b02 	vldr	d1, [r7, #8]
 8002800:	ed97 0b04 	vldr	d0, [r7, #16]
 8002804:	f002 fc6c 	bl	80050e0 <atan2>
 8002808:	ec51 0b10 	vmov	r0, r1, d0
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <MPU6050_Roll_Angle+0x58>)
 8002812:	f7fd feb5 	bl	8000580 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f95f 	bl	8000ae0 <__aeabi_d2f>
 8002822:	4603      	mov	r3, r0
 8002824:	607b      	str	r3, [r7, #4]
	return Roll;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	ee07 3a90 	vmov	s15, r3
}
 800282c:	eeb0 0a67 	vmov.f32	s0, s15
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40668000 	.word	0x40668000

0800283c <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 8002842:	f7ff ffcd 	bl	80027e0 <MPU6050_Roll_Angle>
 8002846:	ed87 0a01 	vstr	s0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 800284a:	4b48      	ldr	r3, [pc, #288]	; (800296c <MPU6050_Kalman_Roll_Angle+0x130>)
 800284c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <MPU6050_Kalman_Roll_Angle+0x134>)
 8002856:	f7fd fe93 	bl	8000580 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4614      	mov	r4, r2
 8002860:	461d      	mov	r5, r3
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	4942      	ldr	r1, [pc, #264]	; (8002970 <MPU6050_Kalman_Roll_Angle+0x134>)
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <MPU6050_Kalman_Roll_Angle+0x130>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fe87 	bl	8000580 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <MPU6050_Kalman_Roll_Angle+0x134>)
 8002880:	f7fd fe7e 	bl	8000580 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b38      	ldr	r3, [pc, #224]	; (8002974 <MPU6050_Kalman_Roll_Angle+0x138>)
 8002892:	f7fd fcbf 	bl	8000214 <__adddf3>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd ff99 	bl	80007d4 <__aeabi_ddiv>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4934      	ldr	r1, [pc, #208]	; (8002978 <MPU6050_Kalman_Roll_Angle+0x13c>)
 80028a8:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fd fe0f 	bl	80004d0 <__aeabi_f2d>
 80028b2:	4604      	mov	r4, r0
 80028b4:	460d      	mov	r5, r1
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	492d      	ldr	r1, [pc, #180]	; (8002970 <MPU6050_Kalman_Roll_Angle+0x134>)
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <MPU6050_Kalman_Roll_Angle+0x140>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fe5d 	bl	8000580 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd fc9f 	bl	8000210 <__aeabi_dsub>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <MPU6050_Kalman_Roll_Angle+0x13c>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fe4e 	bl	8000580 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	4b23      	ldr	r3, [pc, #140]	; (800297c <MPU6050_Kalman_Roll_Angle+0x140>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fc8f 	bl	8000214 <__adddf3>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4920      	ldr	r1, [pc, #128]	; (800297c <MPU6050_Kalman_Roll_Angle+0x140>)
 80028fc:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8002902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <MPU6050_Kalman_Roll_Angle+0x134>)
 800290c:	f7fd fe38 	bl	8000580 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	4915      	ldr	r1, [pc, #84]	; (8002970 <MPU6050_Kalman_Roll_Angle+0x134>)
 800291a:	f7fd fc79 	bl	8000210 <__aeabi_dsub>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <MPU6050_Kalman_Roll_Angle+0x130>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fe28 	bl	8000580 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MPU6050_Kalman_Roll_Angle+0x144>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fc69 	bl	8000214 <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4909      	ldr	r1, [pc, #36]	; (800296c <MPU6050_Kalman_Roll_Angle+0x130>)
 8002948:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MPU6050_Kalman_Roll_Angle+0x140>)
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	f7fe f8c3 	bl	8000ae0 <__aeabi_d2f>
 800295a:	4603      	mov	r3, r0
 800295c:	ee07 3a90 	vmov	s15, r3
}
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bdb0      	pop	{r4, r5, r7, pc}
 800296a:	bf00      	nop
 800296c:	20000250 	.word	0x20000250
 8002970:	3ff00000 	.word	0x3ff00000
 8002974:	40440000 	.word	0x40440000
 8002978:	20000258 	.word	0x20000258
 800297c:	200002a0 	.word	0x200002a0
 8002980:	20000040 	.word	0x20000040

08002984 <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 800298a:	f7ff fe57 	bl	800263c <MPU6050_Read_Accel_X>
 800298e:	ee10 3a10 	vmov	r3, s0
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fd9c 	bl	80004d0 <__aeabi_f2d>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <MPU6050_Kalman_Accel_X+0x12c>)
 80029a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <MPU6050_Kalman_Accel_X+0x130>)
 80029ac:	f7fd fde8 	bl	8000580 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4614      	mov	r4, r2
 80029b6:	461d      	mov	r5, r3
 80029b8:	f04f 0000 	mov.w	r0, #0
 80029bc:	493d      	ldr	r1, [pc, #244]	; (8002ab4 <MPU6050_Kalman_Accel_X+0x130>)
 80029be:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <MPU6050_Kalman_Accel_X+0x12c>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fddc 	bl	8000580 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <MPU6050_Kalman_Accel_X+0x130>)
 80029d6:	f7fd fdd3 	bl	8000580 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <MPU6050_Kalman_Accel_X+0x134>)
 80029e8:	f7fd fc14 	bl	8000214 <__adddf3>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd feee 	bl	80007d4 <__aeabi_ddiv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	492f      	ldr	r1, [pc, #188]	; (8002abc <MPU6050_Kalman_Accel_X+0x138>)
 80029fe:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	492b      	ldr	r1, [pc, #172]	; (8002ab4 <MPU6050_Kalman_Accel_X+0x130>)
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <MPU6050_Kalman_Accel_X+0x13c>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fdb7 	bl	8000580 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a1a:	f7fd fbf9 	bl	8000210 <__aeabi_dsub>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <MPU6050_Kalman_Accel_X+0x138>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fda8 	bl	8000580 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <MPU6050_Kalman_Accel_X+0x13c>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fbe9 	bl	8000214 <__adddf3>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	491e      	ldr	r1, [pc, #120]	; (8002ac0 <MPU6050_Kalman_Accel_X+0x13c>)
 8002a48:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <MPU6050_Kalman_Accel_X+0x138>)
 8002a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <MPU6050_Kalman_Accel_X+0x130>)
 8002a58:	f7fd fd92 	bl	8000580 <__aeabi_dmul>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	4913      	ldr	r1, [pc, #76]	; (8002ab4 <MPU6050_Kalman_Accel_X+0x130>)
 8002a66:	f7fd fbd3 	bl	8000210 <__aeabi_dsub>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <MPU6050_Kalman_Accel_X+0x12c>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fd82 	bl	8000580 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <MPU6050_Kalman_Accel_X+0x140>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fbc3 	bl	8000214 <__adddf3>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <MPU6050_Kalman_Accel_X+0x12c>)
 8002a94:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MPU6050_Kalman_Accel_X+0x13c>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002aa2:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa6:	eef0 0a67 	vmov.f32	s1, s15
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab0:	20000260 	.word	0x20000260
 8002ab4:	3ff00000 	.word	0x3ff00000
 8002ab8:	40440000 	.word	0x40440000
 8002abc:	20000268 	.word	0x20000268
 8002ac0:	200002a8 	.word	0x200002a8
 8002ac4:	20000048 	.word	0x20000048

08002ac8 <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 8002ace:	f7ff fddb 	bl	8002688 <MPU6050_Read_Accel_Y>
 8002ad2:	ee10 3a10 	vmov	r3, s0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fcfa 	bl	80004d0 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <MPU6050_Kalman_Accel_Y+0x12c>)
 8002ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <MPU6050_Kalman_Accel_Y+0x130>)
 8002af0:	f7fd fd46 	bl	8000580 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	f04f 0000 	mov.w	r0, #0
 8002b00:	493d      	ldr	r1, [pc, #244]	; (8002bf8 <MPU6050_Kalman_Accel_Y+0x130>)
 8002b02:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <MPU6050_Kalman_Accel_Y+0x12c>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd3a 	bl	8000580 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <MPU6050_Kalman_Accel_Y+0x130>)
 8002b1a:	f7fd fd31 	bl	8000580 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <MPU6050_Kalman_Accel_Y+0x134>)
 8002b2c:	f7fd fb72 	bl	8000214 <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fe4c 	bl	80007d4 <__aeabi_ddiv>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	492f      	ldr	r1, [pc, #188]	; (8002c00 <MPU6050_Kalman_Accel_Y+0x138>)
 8002b42:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8002b46:	f04f 0000 	mov.w	r0, #0
 8002b4a:	492b      	ldr	r1, [pc, #172]	; (8002bf8 <MPU6050_Kalman_Accel_Y+0x130>)
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <MPU6050_Kalman_Accel_Y+0x13c>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fd15 	bl	8000580 <__aeabi_dmul>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b5e:	f7fd fb57 	bl	8000210 <__aeabi_dsub>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <MPU6050_Kalman_Accel_Y+0x138>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fd06 	bl	8000580 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <MPU6050_Kalman_Accel_Y+0x13c>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fb47 	bl	8000214 <__adddf3>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	491e      	ldr	r1, [pc, #120]	; (8002c04 <MPU6050_Kalman_Accel_Y+0x13c>)
 8002b8c:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <MPU6050_Kalman_Accel_Y+0x138>)
 8002b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MPU6050_Kalman_Accel_Y+0x130>)
 8002b9c:	f7fd fcf0 	bl	8000580 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	f04f 0000 	mov.w	r0, #0
 8002ba8:	4913      	ldr	r1, [pc, #76]	; (8002bf8 <MPU6050_Kalman_Accel_Y+0x130>)
 8002baa:	f7fd fb31 	bl	8000210 <__aeabi_dsub>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MPU6050_Kalman_Accel_Y+0x12c>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fce0 	bl	8000580 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MPU6050_Kalman_Accel_Y+0x140>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fb21 	bl	8000214 <__adddf3>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <MPU6050_Kalman_Accel_Y+0x12c>)
 8002bd8:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MPU6050_Kalman_Accel_Y+0x13c>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	ec43 2b17 	vmov	d7, r2, r3
}
 8002be6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bea:	eef0 0a67 	vmov.f32	s1, s15
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf4:	20000270 	.word	0x20000270
 8002bf8:	3ff00000 	.word	0x3ff00000
 8002bfc:	40440000 	.word	0x40440000
 8002c00:	20000278 	.word	0x20000278
 8002c04:	200002b0 	.word	0x200002b0
 8002c08:	20000050 	.word	0x20000050

08002c0c <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8002c12:	f7ff fd5f 	bl	80026d4 <MPU6050_Read_Accel_Z>
 8002c16:	ee10 3a10 	vmov	r3, s0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc58 	bl	80004d0 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <MPU6050_Kalman_Accel_Z+0x12c>)
 8002c2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <MPU6050_Kalman_Accel_Z+0x130>)
 8002c34:	f7fd fca4 	bl	8000580 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	493d      	ldr	r1, [pc, #244]	; (8002d3c <MPU6050_Kalman_Accel_Z+0x130>)
 8002c46:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <MPU6050_Kalman_Accel_Z+0x12c>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fc98 	bl	8000580 <__aeabi_dmul>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <MPU6050_Kalman_Accel_Z+0x130>)
 8002c5e:	f7fd fc8f 	bl	8000580 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <MPU6050_Kalman_Accel_Z+0x134>)
 8002c70:	f7fd fad0 	bl	8000214 <__adddf3>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fdaa 	bl	80007d4 <__aeabi_ddiv>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	492f      	ldr	r1, [pc, #188]	; (8002d44 <MPU6050_Kalman_Accel_Z+0x138>)
 8002c86:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	492b      	ldr	r1, [pc, #172]	; (8002d3c <MPU6050_Kalman_Accel_Z+0x130>)
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MPU6050_Kalman_Accel_Z+0x13c>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fc73 	bl	8000580 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ca2:	f7fd fab5 	bl	8000210 <__aeabi_dsub>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <MPU6050_Kalman_Accel_Z+0x138>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fc64 	bl	8000580 <__aeabi_dmul>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MPU6050_Kalman_Accel_Z+0x13c>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd faa5 	bl	8000214 <__adddf3>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	491e      	ldr	r1, [pc, #120]	; (8002d48 <MPU6050_Kalman_Accel_Z+0x13c>)
 8002cd0:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <MPU6050_Kalman_Accel_Z+0x138>)
 8002cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <MPU6050_Kalman_Accel_Z+0x130>)
 8002ce0:	f7fd fc4e 	bl	8000580 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	4913      	ldr	r1, [pc, #76]	; (8002d3c <MPU6050_Kalman_Accel_Z+0x130>)
 8002cee:	f7fd fa8f 	bl	8000210 <__aeabi_dsub>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <MPU6050_Kalman_Accel_Z+0x12c>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fc3e 	bl	8000580 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <MPU6050_Kalman_Accel_Z+0x140>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fa7f 	bl	8000214 <__adddf3>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4907      	ldr	r1, [pc, #28]	; (8002d38 <MPU6050_Kalman_Accel_Z+0x12c>)
 8002d1c:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <MPU6050_Kalman_Accel_Z+0x13c>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d2e:	eef0 0a67 	vmov.f32	s1, s15
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdb0      	pop	{r4, r5, r7, pc}
 8002d38:	20000280 	.word	0x20000280
 8002d3c:	3ff00000 	.word	0x3ff00000
 8002d40:	40440000 	.word	0x40440000
 8002d44:	20000288 	.word	0x20000288
 8002d48:	200002b8 	.word	0x200002b8
 8002d4c:	20000058 	.word	0x20000058

08002d50 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8002d56:	f7ff fd1b 	bl	8002790 <MPU6050_Read_Gyro_X>
 8002d5a:	ee10 3a10 	vmov	r3, s0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fbb6 	bl	80004d0 <__aeabi_f2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <MPU6050_Kalman_Gyro_X+0x12c>)
 8002d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <MPU6050_Kalman_Gyro_X+0x130>)
 8002d78:	f7fd fc02 	bl	8000580 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	461d      	mov	r5, r3
 8002d84:	f04f 0000 	mov.w	r0, #0
 8002d88:	493d      	ldr	r1, [pc, #244]	; (8002e80 <MPU6050_Kalman_Gyro_X+0x130>)
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <MPU6050_Kalman_Gyro_X+0x12c>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fbf6 	bl	8000580 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <MPU6050_Kalman_Gyro_X+0x130>)
 8002da2:	f7fd fbed 	bl	8000580 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <MPU6050_Kalman_Gyro_X+0x134>)
 8002db4:	f7fd fa2e 	bl	8000214 <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	f7fd fd08 	bl	80007d4 <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	492f      	ldr	r1, [pc, #188]	; (8002e88 <MPU6050_Kalman_Gyro_X+0x138>)
 8002dca:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	492b      	ldr	r1, [pc, #172]	; (8002e80 <MPU6050_Kalman_Gyro_X+0x130>)
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <MPU6050_Kalman_Gyro_X+0x13c>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fbd1 	bl	8000580 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002de6:	f7fd fa13 	bl	8000210 <__aeabi_dsub>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <MPU6050_Kalman_Gyro_X+0x138>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fbc2 	bl	8000580 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <MPU6050_Kalman_Gyro_X+0x13c>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fa03 	bl	8000214 <__adddf3>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	491e      	ldr	r1, [pc, #120]	; (8002e8c <MPU6050_Kalman_Gyro_X+0x13c>)
 8002e14:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <MPU6050_Kalman_Gyro_X+0x138>)
 8002e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MPU6050_Kalman_Gyro_X+0x130>)
 8002e24:	f7fd fbac 	bl	8000580 <__aeabi_dmul>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	f04f 0000 	mov.w	r0, #0
 8002e30:	4913      	ldr	r1, [pc, #76]	; (8002e80 <MPU6050_Kalman_Gyro_X+0x130>)
 8002e32:	f7fd f9ed 	bl	8000210 <__aeabi_dsub>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MPU6050_Kalman_Gyro_X+0x12c>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f7fd fb9c 	bl	8000580 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MPU6050_Kalman_Gyro_X+0x140>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd f9dd 	bl	8000214 <__adddf3>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4907      	ldr	r1, [pc, #28]	; (8002e7c <MPU6050_Kalman_Gyro_X+0x12c>)
 8002e60:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MPU6050_Kalman_Gyro_X+0x13c>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e72:	eef0 0a67 	vmov.f32	s1, s15
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7c:	20000290 	.word	0x20000290
 8002e80:	3ff00000 	.word	0x3ff00000
 8002e84:	40440000 	.word	0x40440000
 8002e88:	20000298 	.word	0x20000298
 8002e8c:	200002c0 	.word	0x200002c0
 8002e90:	20000060 	.word	0x20000060

08002e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_MspInit+0x4c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_MspInit+0x4c>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_MspInit+0x4c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_MspInit+0x4c>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <HAL_MspInit+0x4c>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_MspInit+0x4c>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_I2C_MspInit+0x84>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d12b      	bne.n	8002f5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_I2C_MspInit+0x88>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_I2C_MspInit+0x88>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_I2C_MspInit+0x88>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f22:	23c0      	movs	r3, #192	; 0xc0
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f26:	2312      	movs	r3, #18
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f32:	2304      	movs	r3, #4
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <HAL_I2C_MspInit+0x8c>)
 8002f3e:	f000 f9fb 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_I2C_MspInit+0x88>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_I2C_MspInit+0x88>)
 8002f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_I2C_MspInit+0x88>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f5e:	bf00      	nop
 8002f60:	3728      	adds	r7, #40	; 0x28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40005400 	.word	0x40005400
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020400 	.word	0x40020400

08002f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <NMI_Handler+0x4>

08002f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <HardFault_Handler+0x4>

08002f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <MemManage_Handler+0x4>

08002f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <BusFault_Handler+0x4>

08002f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <UsageFault_Handler+0x4>

08002f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc0:	f000 f890 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <SystemInit+0x20>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <SystemInit+0x20>)
 8002fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003024 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ff2:	490e      	ldr	r1, [pc, #56]	; (800302c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003008:	4c0b      	ldr	r4, [pc, #44]	; (8003038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003016:	f7ff ffd7 	bl	8002fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301a:	f002 f83d 	bl	8005098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800301e:	f7ff f8cb 	bl	80021b8 <main>
  bx  lr    
 8003022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003030:	08006550 	.word	0x08006550
  ldr r2, =_sbss
 8003034:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003038:	20000404 	.word	0x20000404

0800303c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC_IRQHandler>
	...

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <HAL_Init+0x40>)
 800304a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_Init+0x40>)
 8003056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a07      	ldr	r2, [pc, #28]	; (8003080 <HAL_Init+0x40>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 f931 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306e:	200f      	movs	r0, #15
 8003070:	f000 f808 	bl	8003084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003074:	f7ff ff0e 	bl	8002e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023c00 	.word	0x40023c00

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_InitTick+0x54>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_InitTick+0x58>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	fbb3 f3f1 	udiv	r3, r3, r1
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f93b 	bl	800331e <HAL_SYSTICK_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00e      	b.n	80030d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d80a      	bhi.n	80030ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f000 f911 	bl	80032e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <HAL_InitTick+0x5c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000068 	.word	0x20000068
 80030dc:	20000070 	.word	0x20000070
 80030e0:	2000006c 	.word	0x2000006c

080030e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_IncTick+0x20>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x24>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_IncTick+0x24>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000070 	.word	0x20000070
 8003108:	200002c8 	.word	0x200002c8

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200002c8 	.word	0x200002c8

08003124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7ff ffee 	bl	800310c <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d005      	beq.n	800314a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_Delay+0x44>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800314a:	bf00      	nop
 800314c:	f7ff ffde 	bl	800310c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d8f7      	bhi.n	800314c <HAL_Delay+0x28>
  {
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000070 	.word	0x20000070

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff47 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff5c 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff8e 	bl	8003224 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffb0 	bl	800328c <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e165      	b.n	8003620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	f040 8154 	bne.w	800361a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d005      	beq.n	800338a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	2b02      	cmp	r3, #2
 8003388:	d130      	bne.n	80033ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 0201 	and.w	r2, r3, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d017      	beq.n	8003428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d123      	bne.n	800347c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	08da      	lsrs	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3208      	adds	r2, #8
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80ae 	beq.w	800361a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <HAL_GPIO_Init+0x300>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_GPIO_Init+0x300>)
 80034c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034cc:	6453      	str	r3, [r2, #68]	; 0x44
 80034ce:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_GPIO_Init+0x300>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034da:	4a58      	ldr	r2, [pc, #352]	; (800363c <HAL_GPIO_Init+0x304>)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4f      	ldr	r2, [pc, #316]	; (8003640 <HAL_GPIO_Init+0x308>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d025      	beq.n	8003552 <HAL_GPIO_Init+0x21a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4e      	ldr	r2, [pc, #312]	; (8003644 <HAL_GPIO_Init+0x30c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01f      	beq.n	800354e <HAL_GPIO_Init+0x216>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4d      	ldr	r2, [pc, #308]	; (8003648 <HAL_GPIO_Init+0x310>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d019      	beq.n	800354a <HAL_GPIO_Init+0x212>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4c      	ldr	r2, [pc, #304]	; (800364c <HAL_GPIO_Init+0x314>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_GPIO_Init+0x20e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4b      	ldr	r2, [pc, #300]	; (8003650 <HAL_GPIO_Init+0x318>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00d      	beq.n	8003542 <HAL_GPIO_Init+0x20a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <HAL_GPIO_Init+0x31c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <HAL_GPIO_Init+0x206>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a49      	ldr	r2, [pc, #292]	; (8003658 <HAL_GPIO_Init+0x320>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_GPIO_Init+0x202>
 8003536:	2306      	movs	r3, #6
 8003538:	e00c      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 800353a:	2307      	movs	r3, #7
 800353c:	e00a      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 800353e:	2305      	movs	r3, #5
 8003540:	e008      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 8003542:	2304      	movs	r3, #4
 8003544:	e006      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 8003546:	2303      	movs	r3, #3
 8003548:	e004      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 800354a:	2302      	movs	r3, #2
 800354c:	e002      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x21c>
 8003552:	2300      	movs	r3, #0
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f002 0203 	and.w	r2, r2, #3
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	4093      	lsls	r3, r2
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003564:	4935      	ldr	r1, [pc, #212]	; (800363c <HAL_GPIO_Init+0x304>)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003572:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_GPIO_Init+0x324>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003596:	4a31      	ldr	r2, [pc, #196]	; (800365c <HAL_GPIO_Init+0x324>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_GPIO_Init+0x324>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <HAL_GPIO_Init+0x324>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_GPIO_Init+0x324>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_GPIO_Init+0x324>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_GPIO_Init+0x324>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003614:	4a11      	ldr	r2, [pc, #68]	; (800365c <HAL_GPIO_Init+0x324>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	f67f ae96 	bls.w	8003354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40013800 	.word	0x40013800
 8003640:	40020000 	.word	0x40020000
 8003644:	40020400 	.word	0x40020400
 8003648:	40020800 	.word	0x40020800
 800364c:	40020c00 	.word	0x40020c00
 8003650:	40021000 	.word	0x40021000
 8003654:	40021400 	.word	0x40021400
 8003658:	40021800 	.word	0x40021800
 800365c:	40013c00 	.word	0x40013c00

08003660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e12b      	b.n	80038ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fc2c 	bl	8002ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c4:	f001 f87e 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 80036c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a81      	ldr	r2, [pc, #516]	; (80038d4 <HAL_I2C_Init+0x274>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d807      	bhi.n	80036e4 <HAL_I2C_Init+0x84>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a80      	ldr	r2, [pc, #512]	; (80038d8 <HAL_I2C_Init+0x278>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	bf94      	ite	ls
 80036dc:	2301      	movls	r3, #1
 80036de:	2300      	movhi	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e006      	b.n	80036f2 <HAL_I2C_Init+0x92>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a7d      	ldr	r2, [pc, #500]	; (80038dc <HAL_I2C_Init+0x27c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bf94      	ite	ls
 80036ec:	2301      	movls	r3, #1
 80036ee:	2300      	movhi	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0e7      	b.n	80038ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a78      	ldr	r2, [pc, #480]	; (80038e0 <HAL_I2C_Init+0x280>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0c9b      	lsrs	r3, r3, #18
 8003704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a6a      	ldr	r2, [pc, #424]	; (80038d4 <HAL_I2C_Init+0x274>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d802      	bhi.n	8003734 <HAL_I2C_Init+0xd4>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3301      	adds	r3, #1
 8003732:	e009      	b.n	8003748 <HAL_I2C_Init+0xe8>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	4a69      	ldr	r2, [pc, #420]	; (80038e4 <HAL_I2C_Init+0x284>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	3301      	adds	r3, #1
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	430b      	orrs	r3, r1
 800374e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800375a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	495c      	ldr	r1, [pc, #368]	; (80038d4 <HAL_I2C_Init+0x274>)
 8003764:	428b      	cmp	r3, r1
 8003766:	d819      	bhi.n	800379c <HAL_I2C_Init+0x13c>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e59      	subs	r1, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fbb1 f3f3 	udiv	r3, r1, r3
 8003776:	1c59      	adds	r1, r3, #1
 8003778:	f640 73fc 	movw	r3, #4092	; 0xffc
 800377c:	400b      	ands	r3, r1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_I2C_Init+0x138>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1e59      	subs	r1, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003790:	3301      	adds	r3, #1
 8003792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003796:	e051      	b.n	800383c <HAL_I2C_Init+0x1dc>
 8003798:	2304      	movs	r3, #4
 800379a:	e04f      	b.n	800383c <HAL_I2C_Init+0x1dc>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d111      	bne.n	80037c8 <HAL_I2C_Init+0x168>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e58      	subs	r0, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	440b      	add	r3, r1
 80037b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e012      	b.n	80037ee <HAL_I2C_Init+0x18e>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e58      	subs	r0, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	0099      	lsls	r1, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	fbb0 f3f3 	udiv	r3, r0, r3
 80037de:	3301      	adds	r3, #1
 80037e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Init+0x196>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e022      	b.n	800383c <HAL_I2C_Init+0x1dc>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10e      	bne.n	800381c <HAL_I2C_Init+0x1bc>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1e58      	subs	r0, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	440b      	add	r3, r1
 800380c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381a:	e00f      	b.n	800383c <HAL_I2C_Init+0x1dc>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	0099      	lsls	r1, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	6809      	ldr	r1, [r1, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800386a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6911      	ldr	r1, [r2, #16]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	4311      	orrs	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430b      	orrs	r3, r1
 800387e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	000186a0 	.word	0x000186a0
 80038d8:	001e847f 	.word	0x001e847f
 80038dc:	003d08ff 	.word	0x003d08ff
 80038e0:	431bde83 	.word	0x431bde83
 80038e4:	10624dd3 	.word	0x10624dd3

080038e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003902:	f7ff fc03 	bl	800310c <HAL_GetTick>
 8003906:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 80d9 	bne.w	8003ac8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2319      	movs	r3, #25
 800391c:	2201      	movs	r2, #1
 800391e:	496d      	ldr	r1, [pc, #436]	; (8003ad4 <HAL_I2C_Mem_Write+0x1ec>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fc7f 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	e0cc      	b.n	8003aca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2C_Mem_Write+0x56>
 800393a:	2302      	movs	r3, #2
 800393c:	e0c5      	b.n	8003aca <HAL_I2C_Mem_Write+0x1e2>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d007      	beq.n	8003964 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2221      	movs	r2, #33	; 0x21
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a4d      	ldr	r2, [pc, #308]	; (8003ad8 <HAL_I2C_Mem_Write+0x1f0>)
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fab6 	bl	8003f28 <I2C_RequestMemoryWrite>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d052      	beq.n	8003a68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e081      	b.n	8003aca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fd00 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d107      	bne.n	80039ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06b      	b.n	8003aca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d11b      	bne.n	8003a68 <HAL_I2C_Mem_Write+0x180>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1aa      	bne.n	80039c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fcec 	bl	8004452 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d107      	bne.n	8003a98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e016      	b.n	8003aca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	00100002 	.word	0x00100002
 8003ad8:	ffff0000 	.word	0xffff0000

08003adc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	; 0x30
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	817b      	strh	r3, [r7, #10]
 8003aee:	460b      	mov	r3, r1
 8003af0:	813b      	strh	r3, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af6:	f7ff fb09 	bl	800310c <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	f040 8208 	bne.w	8003f1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2319      	movs	r3, #25
 8003b10:	2201      	movs	r2, #1
 8003b12:	497b      	ldr	r1, [pc, #492]	; (8003d00 <HAL_I2C_Mem_Read+0x224>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fb85 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
 8003b22:	e1fb      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Mem_Read+0x56>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e1f4      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d007      	beq.n	8003b58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2222      	movs	r2, #34	; 0x22
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a5b      	ldr	r2, [pc, #364]	; (8003d04 <HAL_I2C_Mem_Read+0x228>)
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b9a:	88f8      	ldrh	r0, [r7, #6]
 8003b9c:	893a      	ldrh	r2, [r7, #8]
 8003b9e:	8979      	ldrh	r1, [r7, #10]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4603      	mov	r3, r0
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa52 	bl	8004054 <I2C_RequestMemoryRead>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1b0      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d113      	bne.n	8003bea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e184      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d11b      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e164      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d11b      	bne.n	8003c6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	e144      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c80:	e138      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	f200 80f1 	bhi.w	8003e6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d123      	bne.n	8003cdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fc1b 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e139      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cda:	e10b      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d14e      	bne.n	8003d82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	2200      	movs	r2, #0
 8003cec:	4906      	ldr	r1, [pc, #24]	; (8003d08 <HAL_I2C_Mem_Read+0x22c>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa98 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e10e      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
 8003cfe:	bf00      	nop
 8003d00:	00100002 	.word	0x00100002
 8003d04:	ffff0000 	.word	0xffff0000
 8003d08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d80:	e0b8      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4966      	ldr	r1, [pc, #408]	; (8003f24 <HAL_I2C_Mem_Read+0x448>)
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fa49 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0bf      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2200      	movs	r2, #0
 8003de6:	494f      	ldr	r1, [pc, #316]	; (8003f24 <HAL_I2C_Mem_Read+0x448>)
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fa1b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e091      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e6c:	e042      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fb2e 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e04c      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d118      	bne.n	8003ef4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f47f aec2 	bne.w	8003c82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	00010004 	.word	0x00010004

08003f28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	817b      	strh	r3, [r7, #10]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	813b      	strh	r3, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f960 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f78:	d103      	bne.n	8003f82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e05f      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	492d      	ldr	r1, [pc, #180]	; (8004050 <I2C_RequestMemoryWrite+0x128>)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f998 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e04c      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc4:	6a39      	ldr	r1, [r7, #32]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fa02 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d107      	bne.n	8003fea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e02b      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	611a      	str	r2, [r3, #16]
 8003ffe:	e021      	b.n	8004044 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	b29b      	uxth	r3, r3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	6a39      	ldr	r1, [r7, #32]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f9dc 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b04      	cmp	r3, #4
 8004024:	d107      	bne.n	8004036 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004034:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e005      	b.n	8004046 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800403a:	893b      	ldrh	r3, [r7, #8]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	00010002 	.word	0x00010002

08004054 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	460b      	mov	r3, r1
 8004068:	813b      	strh	r3, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2200      	movs	r2, #0
 8004096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f8c2 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b4:	d103      	bne.n	80040be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0aa      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	4952      	ldr	r1, [pc, #328]	; (8004220 <I2C_RequestMemoryRead+0x1cc>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8fa 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e097      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f964 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e076      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	e021      	b.n	8004180 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f93e 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e050      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	6a39      	ldr	r1, [r7, #32]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f923 	bl	80043d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	2b04      	cmp	r3, #4
 8004196:	d107      	bne.n	80041a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e035      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f82b 	bl	8004224 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	d103      	bne.n	80041ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e013      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041f0:	897b      	ldrh	r3, [r7, #10]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	6a3a      	ldr	r2, [r7, #32]
 8004204:	4906      	ldr	r1, [pc, #24]	; (8004220 <I2C_RequestMemoryRead+0x1cc>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f863 	bl	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00010002 	.word	0x00010002

08004224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004234:	e025      	b.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d021      	beq.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe ff65 	bl	800310c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_WaitOnFlagUntilTimeout+0x30>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d116      	bne.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e023      	b.n	80042ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10d      	bne.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	43da      	mvns	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	e00c      	b.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d0b6      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e0:	e051      	b.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d123      	bne.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800430a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0204 	orr.w	r2, r3, #4
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e046      	b.n	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d021      	beq.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe fee3 	bl	800310c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e020      	b.n	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10c      	bne.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e00b      	b.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d18d      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043dc:	e02d      	b.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f8ce 	bl	8004580 <I2C_IsAcknowledgeFailed>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e02d      	b.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d021      	beq.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe fe89 	bl	800310c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d116      	bne.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d1ca      	bne.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800445e:	e02d      	b.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f88d 	bl	8004580 <I2C_IsAcknowledgeFailed>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e02d      	b.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d021      	beq.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004478:	f7fe fe48 	bl	800310c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	d302      	bcc.n	800448e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e007      	b.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d1ca      	bne.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e0:	e042      	b.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d119      	bne.n	8004524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0210 	mvn.w	r2, #16
 80044f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e029      	b.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7fe fdf2 	bl	800310c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d1b5      	bne.n	80044e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d11b      	bne.n	80045d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0204 	orr.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0cc      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d90c      	bls.n	800461c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b63      	ldr	r3, [pc, #396]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b8      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a52      	ldr	r2, [pc, #328]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004658:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	494d      	ldr	r1, [pc, #308]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d044      	beq.n	8004700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d119      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d003      	beq.n	800469e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469a:	2b03      	cmp	r3, #3
 800469c:	d107      	bne.n	80046ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e06f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ae:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e067      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046be:	4b37      	ldr	r3, [pc, #220]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 0203 	bic.w	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4934      	ldr	r1, [pc, #208]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d0:	f7fe fd1c 	bl	800310c <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fe fd18 	bl	800310c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e04f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 020c 	and.w	r2, r3, #12
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1eb      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d20c      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e032      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4916      	ldr	r1, [pc, #88]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f841 	bl	80047ec <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	; (80047a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fc7c 	bl	8003084 <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023c00 	.word	0x40023c00
 800479c:	40023800 	.word	0x40023800
 80047a0:	08006488 	.word	0x08006488
 80047a4:	20000068 	.word	0x20000068
 80047a8:	2000006c 	.word	0x2000006c

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000068 	.word	0x20000068

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff0 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	08006498 	.word	0x08006498

080047ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f0:	b0a6      	sub	sp, #152	; 0x98
 80047f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004812:	4bc8      	ldr	r3, [pc, #800]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b0c      	cmp	r3, #12
 800481c:	f200 817e 	bhi.w	8004b1c <HAL_RCC_GetSysClockFreq+0x330>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800485d 	.word	0x0800485d
 800482c:	08004b1d 	.word	0x08004b1d
 8004830:	08004b1d 	.word	0x08004b1d
 8004834:	08004b1d 	.word	0x08004b1d
 8004838:	08004865 	.word	0x08004865
 800483c:	08004b1d 	.word	0x08004b1d
 8004840:	08004b1d 	.word	0x08004b1d
 8004844:	08004b1d 	.word	0x08004b1d
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004b1d 	.word	0x08004b1d
 8004850:	08004b1d 	.word	0x08004b1d
 8004854:	08004b1d 	.word	0x08004b1d
 8004858:	080049d7 	.word	0x080049d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800485c:	4bb6      	ldr	r3, [pc, #728]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x34c>)
 800485e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004862:	e15f      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004864:	4bb5      	ldr	r3, [pc, #724]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x350>)
 8004866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800486a:	e15b      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800486c:	4bb1      	ldr	r3, [pc, #708]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004878:	4bae      	ldr	r3, [pc, #696]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d031      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4bab      	ldr	r3, [pc, #684]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	2200      	movs	r2, #0
 800488c:	66bb      	str	r3, [r7, #104]	; 0x68
 800488e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	663b      	str	r3, [r7, #96]	; 0x60
 8004898:	2300      	movs	r3, #0
 800489a:	667b      	str	r3, [r7, #100]	; 0x64
 800489c:	4ba7      	ldr	r3, [pc, #668]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x350>)
 800489e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80048a2:	462a      	mov	r2, r5
 80048a4:	fb03 f202 	mul.w	r2, r3, r2
 80048a8:	2300      	movs	r3, #0
 80048aa:	4621      	mov	r1, r4
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	4aa2      	ldr	r2, [pc, #648]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x350>)
 80048b4:	4621      	mov	r1, r4
 80048b6:	fba1 1202 	umull	r1, r2, r1, r2
 80048ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048bc:	460a      	mov	r2, r1
 80048be:	67ba      	str	r2, [r7, #120]	; 0x78
 80048c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80048c2:	4413      	add	r3, r2
 80048c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ca:	2200      	movs	r2, #0
 80048cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80048d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80048d8:	f7fc f9a2 	bl	8000c20 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048e6:	e064      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4b92      	ldr	r3, [pc, #584]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	2200      	movs	r2, #0
 80048f0:	653b      	str	r3, [r7, #80]	; 0x50
 80048f2:	657a      	str	r2, [r7, #84]	; 0x54
 80048f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80048fc:	2300      	movs	r3, #0
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004900:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	f04f 0000 	mov.w	r0, #0
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	0159      	lsls	r1, r3, #5
 8004912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004916:	0150      	lsls	r0, r2, #5
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4621      	mov	r1, r4
 800491e:	1a51      	subs	r1, r2, r1
 8004920:	6139      	str	r1, [r7, #16]
 8004922:	4629      	mov	r1, r5
 8004924:	eb63 0301 	sbc.w	r3, r3, r1
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004936:	4659      	mov	r1, fp
 8004938:	018b      	lsls	r3, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004940:	4651      	mov	r1, sl
 8004942:	018a      	lsls	r2, r1, #6
 8004944:	4651      	mov	r1, sl
 8004946:	ebb2 0801 	subs.w	r8, r2, r1
 800494a:	4659      	mov	r1, fp
 800494c:	eb63 0901 	sbc.w	r9, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800495c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004960:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004964:	4690      	mov	r8, r2
 8004966:	4699      	mov	r9, r3
 8004968:	4623      	mov	r3, r4
 800496a:	eb18 0303 	adds.w	r3, r8, r3
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	462b      	mov	r3, r5
 8004972:	eb49 0303 	adc.w	r3, r9, r3
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004984:	4629      	mov	r1, r5
 8004986:	028b      	lsls	r3, r1, #10
 8004988:	4621      	mov	r1, r4
 800498a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800498e:	4621      	mov	r1, r4
 8004990:	028a      	lsls	r2, r1, #10
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800499a:	2200      	movs	r2, #0
 800499c:	643b      	str	r3, [r7, #64]	; 0x40
 800499e:	647a      	str	r2, [r7, #68]	; 0x44
 80049a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049a4:	f7fc f93c 	bl	8000c20 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4613      	mov	r3, r2
 80049ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b2:	4b60      	ldr	r3, [pc, #384]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	3301      	adds	r3, #1
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80049c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049d4:	e0a6      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d6:	4b57      	ldr	r3, [pc, #348]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e2:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02a      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ee:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	2200      	movs	r2, #0
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a00:	2100      	movs	r1, #0
 8004a02:	4b4e      	ldr	r3, [pc, #312]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x350>)
 8004a04:	fb03 f201 	mul.w	r2, r3, r1
 8004a08:	2300      	movs	r3, #0
 8004a0a:	fb00 f303 	mul.w	r3, r0, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	4a4a      	ldr	r2, [pc, #296]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x350>)
 8004a12:	fba0 1202 	umull	r1, r2, r0, r2
 8004a16:	677a      	str	r2, [r7, #116]	; 0x74
 8004a18:	460a      	mov	r2, r1
 8004a1a:	673a      	str	r2, [r7, #112]	; 0x70
 8004a1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a1e:	4413      	add	r3, r2
 8004a20:	677b      	str	r3, [r7, #116]	; 0x74
 8004a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a26:	2200      	movs	r2, #0
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2a:	637a      	str	r2, [r7, #52]	; 0x34
 8004a2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a30:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a34:	f7fc f8f4 	bl	8000c20 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a42:	e05b      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a44:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	099b      	lsrs	r3, r3, #6
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	f04f 0000 	mov.w	r0, #0
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	0159      	lsls	r1, r3, #5
 8004a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a72:	0150      	lsls	r0, r2, #5
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4641      	mov	r1, r8
 8004a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a7e:	4649      	mov	r1, r9
 8004a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a98:	ebb2 040a 	subs.w	r4, r2, sl
 8004a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	00eb      	lsls	r3, r5, #3
 8004aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aae:	00e2      	lsls	r2, r4, #3
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	461d      	mov	r5, r3
 8004ab4:	4643      	mov	r3, r8
 8004ab6:	18e3      	adds	r3, r4, r3
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	464b      	mov	r3, r9
 8004abc:	eb45 0303 	adc.w	r3, r5, r3
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ace:	4629      	mov	r1, r5
 8004ad0:	028b      	lsls	r3, r1, #10
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad8:	4621      	mov	r1, r4
 8004ada:	028a      	lsls	r2, r1, #10
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	61fa      	str	r2, [r7, #28]
 8004aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aee:	f7fc f897 	bl	8000c20 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4613      	mov	r3, r2
 8004af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x348>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	0f1b      	lsrs	r3, r3, #28
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3798      	adds	r7, #152	; 0x98
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	017d7840 	.word	0x017d7840

08004b40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e28d      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8083 	beq.w	8004c66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b60:	4b94      	ldr	r3, [pc, #592]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d019      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b6c:	4b91      	ldr	r3, [pc, #580]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b78:	4b8e      	ldr	r3, [pc, #568]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b84:	d00c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b86:	4b8b      	ldr	r3, [pc, #556]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d112      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b92:	4b88      	ldr	r3, [pc, #544]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	4b84      	ldr	r3, [pc, #528]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05b      	beq.n	8004c64 <HAL_RCC_OscConfig+0x124>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d157      	bne.n	8004c64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e25a      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x90>
 8004bc2:	4b7c      	ldr	r3, [pc, #496]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7b      	ldr	r2, [pc, #492]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e01d      	b.n	8004c0c <HAL_RCC_OscConfig+0xcc>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xb4>
 8004bda:	4b76      	ldr	r3, [pc, #472]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a75      	ldr	r2, [pc, #468]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	4b73      	ldr	r3, [pc, #460]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a72      	ldr	r2, [pc, #456]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e00b      	b.n	8004c0c <HAL_RCC_OscConfig+0xcc>
 8004bf4:	4b6f      	ldr	r3, [pc, #444]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a6e      	ldr	r2, [pc, #440]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4b6c      	ldr	r3, [pc, #432]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6b      	ldr	r2, [pc, #428]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d013      	beq.n	8004c3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe fa7a 	bl	800310c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fa76 	bl	800310c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e21f      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0xdc>
 8004c3a:	e014      	b.n	8004c66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fa66 	bl	800310c <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fe fa62 	bl	800310c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e20b      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	4b57      	ldr	r3, [pc, #348]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x104>
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d06f      	beq.n	8004d52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c72:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d017      	beq.n	8004cae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c7e:	4b4d      	ldr	r3, [pc, #308]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d11c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca2:	4b44      	ldr	r3, [pc, #272]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d116      	bne.n	8004cdc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cae:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x186>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1d3      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4937      	ldr	r1, [pc, #220]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	e03a      	b.n	8004d52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_RCC_OscConfig+0x278>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fe fa0f 	bl	800310c <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fe fa0b 	bl	800310c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e1b4      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d10:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4925      	ldr	r1, [pc, #148]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]
 8004d24:	e015      	b.n	8004d52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x278>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fe f9ee 	bl	800310c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d34:	f7fe f9ea 	bl	800310c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e193      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d036      	beq.n	8004dcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fe f9ce 	bl	800310c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d74:	f7fe f9ca 	bl	800310c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e173      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x234>
 8004d92:	e01b      	b.n	8004dcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fe f9b7 	bl	800310c <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da0:	e00e      	b.n	8004dc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da2:	f7fe f9b3 	bl	800310c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d907      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e15c      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	42470000 	.word	0x42470000
 8004dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	4b8a      	ldr	r3, [pc, #552]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ea      	bne.n	8004da2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8097 	beq.w	8004f08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dde:	4b83      	ldr	r3, [pc, #524]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	4b7f      	ldr	r3, [pc, #508]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a7e      	ldr	r2, [pc, #504]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	4b7c      	ldr	r3, [pc, #496]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0a:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d118      	bne.n	8004e48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e16:	4b76      	ldr	r3, [pc, #472]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a75      	ldr	r2, [pc, #468]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e22:	f7fe f973 	bl	800310c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2a:	f7fe f96f 	bl	800310c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e118      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	4b6c      	ldr	r3, [pc, #432]	; (8004ff0 <HAL_RCC_OscConfig+0x4b0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x31e>
 8004e50:	4b66      	ldr	r3, [pc, #408]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a65      	ldr	r2, [pc, #404]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	e01c      	b.n	8004e98 <HAL_RCC_OscConfig+0x358>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x340>
 8004e66:	4b61      	ldr	r3, [pc, #388]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a60      	ldr	r2, [pc, #384]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70
 8004e72:	4b5e      	ldr	r3, [pc, #376]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a5d      	ldr	r2, [pc, #372]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0x358>
 8004e80:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a59      	ldr	r2, [pc, #356]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	4b57      	ldr	r3, [pc, #348]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a56      	ldr	r2, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004e92:	f023 0304 	bic.w	r3, r3, #4
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fe f934 	bl	800310c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea8:	f7fe f930 	bl	800310c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e0d7      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	4b4b      	ldr	r3, [pc, #300]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ee      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x368>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fe f91e 	bl	800310c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fe f91a 	bl	800310c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0c1      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ee      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efc:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	4a3a      	ldr	r2, [pc, #232]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80ad 	beq.w	800506c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f12:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d060      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d145      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	4b33      	ldr	r3, [pc, #204]	; (8004ff4 <HAL_RCC_OscConfig+0x4b4>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fe f8ee 	bl	800310c <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fe f8ea 	bl	800310c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e093      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	085b      	lsrs	r3, r3, #1
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	491b      	ldr	r1, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <HAL_RCC_OscConfig+0x4b4>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fe f8bf 	bl	800310c <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fe f8bb 	bl	800310c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e064      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x452>
 8004fb0:	e05c      	b.n	800506c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_RCC_OscConfig+0x4b4>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fe f8a8 	bl	800310c <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fe f8a4 	bl	800310c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e04d      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x480>
 8004fde:	e045      	b.n	800506c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e040      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <HAL_RCC_OscConfig+0x538>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d030      	beq.n	8005068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d129      	bne.n	8005068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d122      	bne.n	8005068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800502e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005030:	4293      	cmp	r3, r2
 8005032:	d119      	bne.n	8005068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	3b01      	subs	r3, #1
 8005042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d10f      	bne.n	8005068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800

0800507c <memset>:
 800507c:	4402      	add	r2, r0
 800507e:	4603      	mov	r3, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <__errno>:
 800508c:	4b01      	ldr	r3, [pc, #4]	; (8005094 <__errno+0x8>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	200000c0 	.word	0x200000c0

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	; (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	; (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	; (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	; (80050dc <__libc_init_array+0x44>)
 80050ac:	f001 f9c0 	bl	8006430 <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	08006548 	.word	0x08006548
 80050d4:	08006548 	.word	0x08006548
 80050d8:	08006548 	.word	0x08006548
 80050dc:	0800654c 	.word	0x0800654c

080050e0 <atan2>:
 80050e0:	f000 b87e 	b.w	80051e0 <__ieee754_atan2>

080050e4 <pow>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	ed2d 8b02 	vpush	{d8}
 80050ea:	eeb0 8a40 	vmov.f32	s16, s0
 80050ee:	eef0 8a60 	vmov.f32	s17, s1
 80050f2:	ec55 4b11 	vmov	r4, r5, d1
 80050f6:	f000 f93b 	bl	8005370 <__ieee754_pow>
 80050fa:	4622      	mov	r2, r4
 80050fc:	462b      	mov	r3, r5
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	ec57 6b10 	vmov	r6, r7, d0
 8005106:	f7fb fcd5 	bl	8000ab4 <__aeabi_dcmpun>
 800510a:	2800      	cmp	r0, #0
 800510c:	d13b      	bne.n	8005186 <pow+0xa2>
 800510e:	ec51 0b18 	vmov	r0, r1, d8
 8005112:	2200      	movs	r2, #0
 8005114:	2300      	movs	r3, #0
 8005116:	f7fb fc9b 	bl	8000a50 <__aeabi_dcmpeq>
 800511a:	b1b8      	cbz	r0, 800514c <pow+0x68>
 800511c:	2200      	movs	r2, #0
 800511e:	2300      	movs	r3, #0
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb fc94 	bl	8000a50 <__aeabi_dcmpeq>
 8005128:	2800      	cmp	r0, #0
 800512a:	d146      	bne.n	80051ba <pow+0xd6>
 800512c:	ec45 4b10 	vmov	d0, r4, r5
 8005130:	f000 f848 	bl	80051c4 <finite>
 8005134:	b338      	cbz	r0, 8005186 <pow+0xa2>
 8005136:	2200      	movs	r2, #0
 8005138:	2300      	movs	r3, #0
 800513a:	4620      	mov	r0, r4
 800513c:	4629      	mov	r1, r5
 800513e:	f7fb fc91 	bl	8000a64 <__aeabi_dcmplt>
 8005142:	b300      	cbz	r0, 8005186 <pow+0xa2>
 8005144:	f7ff ffa2 	bl	800508c <__errno>
 8005148:	2322      	movs	r3, #34	; 0x22
 800514a:	e01b      	b.n	8005184 <pow+0xa0>
 800514c:	ec47 6b10 	vmov	d0, r6, r7
 8005150:	f000 f838 	bl	80051c4 <finite>
 8005154:	b9e0      	cbnz	r0, 8005190 <pow+0xac>
 8005156:	eeb0 0a48 	vmov.f32	s0, s16
 800515a:	eef0 0a68 	vmov.f32	s1, s17
 800515e:	f000 f831 	bl	80051c4 <finite>
 8005162:	b1a8      	cbz	r0, 8005190 <pow+0xac>
 8005164:	ec45 4b10 	vmov	d0, r4, r5
 8005168:	f000 f82c 	bl	80051c4 <finite>
 800516c:	b180      	cbz	r0, 8005190 <pow+0xac>
 800516e:	4632      	mov	r2, r6
 8005170:	463b      	mov	r3, r7
 8005172:	4630      	mov	r0, r6
 8005174:	4639      	mov	r1, r7
 8005176:	f7fb fc9d 	bl	8000ab4 <__aeabi_dcmpun>
 800517a:	2800      	cmp	r0, #0
 800517c:	d0e2      	beq.n	8005144 <pow+0x60>
 800517e:	f7ff ff85 	bl	800508c <__errno>
 8005182:	2321      	movs	r3, #33	; 0x21
 8005184:	6003      	str	r3, [r0, #0]
 8005186:	ecbd 8b02 	vpop	{d8}
 800518a:	ec47 6b10 	vmov	d0, r6, r7
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005190:	2200      	movs	r2, #0
 8005192:	2300      	movs	r3, #0
 8005194:	4630      	mov	r0, r6
 8005196:	4639      	mov	r1, r7
 8005198:	f7fb fc5a 	bl	8000a50 <__aeabi_dcmpeq>
 800519c:	2800      	cmp	r0, #0
 800519e:	d0f2      	beq.n	8005186 <pow+0xa2>
 80051a0:	eeb0 0a48 	vmov.f32	s0, s16
 80051a4:	eef0 0a68 	vmov.f32	s1, s17
 80051a8:	f000 f80c 	bl	80051c4 <finite>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d0ea      	beq.n	8005186 <pow+0xa2>
 80051b0:	ec45 4b10 	vmov	d0, r4, r5
 80051b4:	f000 f806 	bl	80051c4 <finite>
 80051b8:	e7c3      	b.n	8005142 <pow+0x5e>
 80051ba:	4f01      	ldr	r7, [pc, #4]	; (80051c0 <pow+0xdc>)
 80051bc:	2600      	movs	r6, #0
 80051be:	e7e2      	b.n	8005186 <pow+0xa2>
 80051c0:	3ff00000 	.word	0x3ff00000

080051c4 <finite>:
 80051c4:	b082      	sub	sp, #8
 80051c6:	ed8d 0b00 	vstr	d0, [sp]
 80051ca:	9801      	ldr	r0, [sp, #4]
 80051cc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80051d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80051d4:	0fc0      	lsrs	r0, r0, #31
 80051d6:	b002      	add	sp, #8
 80051d8:	4770      	bx	lr
 80051da:	0000      	movs	r0, r0
 80051dc:	0000      	movs	r0, r0
	...

080051e0 <__ieee754_atan2>:
 80051e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e4:	ec57 6b11 	vmov	r6, r7, d1
 80051e8:	4273      	negs	r3, r6
 80051ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005368 <__ieee754_atan2+0x188>
 80051ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80051f2:	4333      	orrs	r3, r6
 80051f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80051f8:	4543      	cmp	r3, r8
 80051fa:	ec51 0b10 	vmov	r0, r1, d0
 80051fe:	ee11 5a10 	vmov	r5, s2
 8005202:	d80a      	bhi.n	800521a <__ieee754_atan2+0x3a>
 8005204:	4244      	negs	r4, r0
 8005206:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800520a:	4304      	orrs	r4, r0
 800520c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005210:	4544      	cmp	r4, r8
 8005212:	ee10 9a10 	vmov	r9, s0
 8005216:	468e      	mov	lr, r1
 8005218:	d907      	bls.n	800522a <__ieee754_atan2+0x4a>
 800521a:	4632      	mov	r2, r6
 800521c:	463b      	mov	r3, r7
 800521e:	f7fa fff9 	bl	8000214 <__adddf3>
 8005222:	ec41 0b10 	vmov	d0, r0, r1
 8005226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800522e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005232:	4334      	orrs	r4, r6
 8005234:	d103      	bne.n	800523e <__ieee754_atan2+0x5e>
 8005236:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523a:	f000 bdc5 	b.w	8005dc8 <atan>
 800523e:	17bc      	asrs	r4, r7, #30
 8005240:	f004 0402 	and.w	r4, r4, #2
 8005244:	ea53 0909 	orrs.w	r9, r3, r9
 8005248:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800524c:	d107      	bne.n	800525e <__ieee754_atan2+0x7e>
 800524e:	2c02      	cmp	r4, #2
 8005250:	d05f      	beq.n	8005312 <__ieee754_atan2+0x132>
 8005252:	2c03      	cmp	r4, #3
 8005254:	d1e5      	bne.n	8005222 <__ieee754_atan2+0x42>
 8005256:	a140      	add	r1, pc, #256	; (adr r1, 8005358 <__ieee754_atan2+0x178>)
 8005258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800525c:	e7e1      	b.n	8005222 <__ieee754_atan2+0x42>
 800525e:	4315      	orrs	r5, r2
 8005260:	d106      	bne.n	8005270 <__ieee754_atan2+0x90>
 8005262:	f1be 0f00 	cmp.w	lr, #0
 8005266:	da5f      	bge.n	8005328 <__ieee754_atan2+0x148>
 8005268:	a13d      	add	r1, pc, #244	; (adr r1, 8005360 <__ieee754_atan2+0x180>)
 800526a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800526e:	e7d8      	b.n	8005222 <__ieee754_atan2+0x42>
 8005270:	4542      	cmp	r2, r8
 8005272:	d10f      	bne.n	8005294 <__ieee754_atan2+0xb4>
 8005274:	4293      	cmp	r3, r2
 8005276:	f104 34ff 	add.w	r4, r4, #4294967295
 800527a:	d107      	bne.n	800528c <__ieee754_atan2+0xac>
 800527c:	2c02      	cmp	r4, #2
 800527e:	d84c      	bhi.n	800531a <__ieee754_atan2+0x13a>
 8005280:	4b33      	ldr	r3, [pc, #204]	; (8005350 <__ieee754_atan2+0x170>)
 8005282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800528a:	e7ca      	b.n	8005222 <__ieee754_atan2+0x42>
 800528c:	2c02      	cmp	r4, #2
 800528e:	d848      	bhi.n	8005322 <__ieee754_atan2+0x142>
 8005290:	4b30      	ldr	r3, [pc, #192]	; (8005354 <__ieee754_atan2+0x174>)
 8005292:	e7f6      	b.n	8005282 <__ieee754_atan2+0xa2>
 8005294:	4543      	cmp	r3, r8
 8005296:	d0e4      	beq.n	8005262 <__ieee754_atan2+0x82>
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800529e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80052a2:	da1e      	bge.n	80052e2 <__ieee754_atan2+0x102>
 80052a4:	2f00      	cmp	r7, #0
 80052a6:	da01      	bge.n	80052ac <__ieee754_atan2+0xcc>
 80052a8:	323c      	adds	r2, #60	; 0x3c
 80052aa:	db1e      	blt.n	80052ea <__ieee754_atan2+0x10a>
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	f7fb fa90 	bl	80007d4 <__aeabi_ddiv>
 80052b4:	ec41 0b10 	vmov	d0, r0, r1
 80052b8:	f000 ff26 	bl	8006108 <fabs>
 80052bc:	f000 fd84 	bl	8005dc8 <atan>
 80052c0:	ec51 0b10 	vmov	r0, r1, d0
 80052c4:	2c01      	cmp	r4, #1
 80052c6:	d013      	beq.n	80052f0 <__ieee754_atan2+0x110>
 80052c8:	2c02      	cmp	r4, #2
 80052ca:	d015      	beq.n	80052f8 <__ieee754_atan2+0x118>
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	d0a8      	beq.n	8005222 <__ieee754_atan2+0x42>
 80052d0:	a317      	add	r3, pc, #92	; (adr r3, 8005330 <__ieee754_atan2+0x150>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fa ff9b 	bl	8000210 <__aeabi_dsub>
 80052da:	a317      	add	r3, pc, #92	; (adr r3, 8005338 <__ieee754_atan2+0x158>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	e014      	b.n	800530c <__ieee754_atan2+0x12c>
 80052e2:	a117      	add	r1, pc, #92	; (adr r1, 8005340 <__ieee754_atan2+0x160>)
 80052e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e8:	e7ec      	b.n	80052c4 <__ieee754_atan2+0xe4>
 80052ea:	2000      	movs	r0, #0
 80052ec:	2100      	movs	r1, #0
 80052ee:	e7e9      	b.n	80052c4 <__ieee754_atan2+0xe4>
 80052f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052f4:	4619      	mov	r1, r3
 80052f6:	e794      	b.n	8005222 <__ieee754_atan2+0x42>
 80052f8:	a30d      	add	r3, pc, #52	; (adr r3, 8005330 <__ieee754_atan2+0x150>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fa ff87 	bl	8000210 <__aeabi_dsub>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	a10c      	add	r1, pc, #48	; (adr r1, 8005338 <__ieee754_atan2+0x158>)
 8005308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530c:	f7fa ff80 	bl	8000210 <__aeabi_dsub>
 8005310:	e787      	b.n	8005222 <__ieee754_atan2+0x42>
 8005312:	a109      	add	r1, pc, #36	; (adr r1, 8005338 <__ieee754_atan2+0x158>)
 8005314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005318:	e783      	b.n	8005222 <__ieee754_atan2+0x42>
 800531a:	a10b      	add	r1, pc, #44	; (adr r1, 8005348 <__ieee754_atan2+0x168>)
 800531c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005320:	e77f      	b.n	8005222 <__ieee754_atan2+0x42>
 8005322:	2000      	movs	r0, #0
 8005324:	2100      	movs	r1, #0
 8005326:	e77c      	b.n	8005222 <__ieee754_atan2+0x42>
 8005328:	a105      	add	r1, pc, #20	; (adr r1, 8005340 <__ieee754_atan2+0x160>)
 800532a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800532e:	e778      	b.n	8005222 <__ieee754_atan2+0x42>
 8005330:	33145c07 	.word	0x33145c07
 8005334:	3ca1a626 	.word	0x3ca1a626
 8005338:	54442d18 	.word	0x54442d18
 800533c:	400921fb 	.word	0x400921fb
 8005340:	54442d18 	.word	0x54442d18
 8005344:	3ff921fb 	.word	0x3ff921fb
 8005348:	54442d18 	.word	0x54442d18
 800534c:	3fe921fb 	.word	0x3fe921fb
 8005350:	080064a0 	.word	0x080064a0
 8005354:	080064b8 	.word	0x080064b8
 8005358:	54442d18 	.word	0x54442d18
 800535c:	c00921fb 	.word	0xc00921fb
 8005360:	54442d18 	.word	0x54442d18
 8005364:	bff921fb 	.word	0xbff921fb
 8005368:	7ff00000 	.word	0x7ff00000
 800536c:	00000000 	.word	0x00000000

08005370 <__ieee754_pow>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	ed2d 8b06 	vpush	{d8-d10}
 8005378:	b089      	sub	sp, #36	; 0x24
 800537a:	ed8d 1b00 	vstr	d1, [sp]
 800537e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005382:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005386:	ea58 0102 	orrs.w	r1, r8, r2
 800538a:	ec57 6b10 	vmov	r6, r7, d0
 800538e:	d115      	bne.n	80053bc <__ieee754_pow+0x4c>
 8005390:	19b3      	adds	r3, r6, r6
 8005392:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005396:	4152      	adcs	r2, r2
 8005398:	4299      	cmp	r1, r3
 800539a:	4b89      	ldr	r3, [pc, #548]	; (80055c0 <__ieee754_pow+0x250>)
 800539c:	4193      	sbcs	r3, r2
 800539e:	f080 84d1 	bcs.w	8005d44 <__ieee754_pow+0x9d4>
 80053a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053a6:	4630      	mov	r0, r6
 80053a8:	4639      	mov	r1, r7
 80053aa:	f7fa ff33 	bl	8000214 <__adddf3>
 80053ae:	ec41 0b10 	vmov	d0, r0, r1
 80053b2:	b009      	add	sp, #36	; 0x24
 80053b4:	ecbd 8b06 	vpop	{d8-d10}
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	4b81      	ldr	r3, [pc, #516]	; (80055c4 <__ieee754_pow+0x254>)
 80053be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80053c2:	429c      	cmp	r4, r3
 80053c4:	ee10 aa10 	vmov	sl, s0
 80053c8:	463d      	mov	r5, r7
 80053ca:	dc06      	bgt.n	80053da <__ieee754_pow+0x6a>
 80053cc:	d101      	bne.n	80053d2 <__ieee754_pow+0x62>
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	d1e7      	bne.n	80053a2 <__ieee754_pow+0x32>
 80053d2:	4598      	cmp	r8, r3
 80053d4:	dc01      	bgt.n	80053da <__ieee754_pow+0x6a>
 80053d6:	d10f      	bne.n	80053f8 <__ieee754_pow+0x88>
 80053d8:	b172      	cbz	r2, 80053f8 <__ieee754_pow+0x88>
 80053da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80053de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80053e2:	ea55 050a 	orrs.w	r5, r5, sl
 80053e6:	d1dc      	bne.n	80053a2 <__ieee754_pow+0x32>
 80053e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80053ec:	18db      	adds	r3, r3, r3
 80053ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80053f2:	4152      	adcs	r2, r2
 80053f4:	429d      	cmp	r5, r3
 80053f6:	e7d0      	b.n	800539a <__ieee754_pow+0x2a>
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	da3b      	bge.n	8005474 <__ieee754_pow+0x104>
 80053fc:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <__ieee754_pow+0x258>)
 80053fe:	4598      	cmp	r8, r3
 8005400:	dc51      	bgt.n	80054a6 <__ieee754_pow+0x136>
 8005402:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005406:	4598      	cmp	r8, r3
 8005408:	f340 84ab 	ble.w	8005d62 <__ieee754_pow+0x9f2>
 800540c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005410:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005414:	2b14      	cmp	r3, #20
 8005416:	dd0f      	ble.n	8005438 <__ieee754_pow+0xc8>
 8005418:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800541c:	fa22 f103 	lsr.w	r1, r2, r3
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	4293      	cmp	r3, r2
 8005426:	f040 849c 	bne.w	8005d62 <__ieee754_pow+0x9f2>
 800542a:	f001 0101 	and.w	r1, r1, #1
 800542e:	f1c1 0302 	rsb	r3, r1, #2
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	b182      	cbz	r2, 8005458 <__ieee754_pow+0xe8>
 8005436:	e05f      	b.n	80054f8 <__ieee754_pow+0x188>
 8005438:	2a00      	cmp	r2, #0
 800543a:	d15b      	bne.n	80054f4 <__ieee754_pow+0x184>
 800543c:	f1c3 0314 	rsb	r3, r3, #20
 8005440:	fa48 f103 	asr.w	r1, r8, r3
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	4543      	cmp	r3, r8
 800544a:	f040 8487 	bne.w	8005d5c <__ieee754_pow+0x9ec>
 800544e:	f001 0101 	and.w	r1, r1, #1
 8005452:	f1c1 0302 	rsb	r3, r1, #2
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	4b5c      	ldr	r3, [pc, #368]	; (80055cc <__ieee754_pow+0x25c>)
 800545a:	4598      	cmp	r8, r3
 800545c:	d132      	bne.n	80054c4 <__ieee754_pow+0x154>
 800545e:	f1b9 0f00 	cmp.w	r9, #0
 8005462:	f280 8477 	bge.w	8005d54 <__ieee754_pow+0x9e4>
 8005466:	4959      	ldr	r1, [pc, #356]	; (80055cc <__ieee754_pow+0x25c>)
 8005468:	4632      	mov	r2, r6
 800546a:	463b      	mov	r3, r7
 800546c:	2000      	movs	r0, #0
 800546e:	f7fb f9b1 	bl	80007d4 <__aeabi_ddiv>
 8005472:	e79c      	b.n	80053ae <__ieee754_pow+0x3e>
 8005474:	2300      	movs	r3, #0
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	2a00      	cmp	r2, #0
 800547a:	d13d      	bne.n	80054f8 <__ieee754_pow+0x188>
 800547c:	4b51      	ldr	r3, [pc, #324]	; (80055c4 <__ieee754_pow+0x254>)
 800547e:	4598      	cmp	r8, r3
 8005480:	d1ea      	bne.n	8005458 <__ieee754_pow+0xe8>
 8005482:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005486:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800548a:	ea53 030a 	orrs.w	r3, r3, sl
 800548e:	f000 8459 	beq.w	8005d44 <__ieee754_pow+0x9d4>
 8005492:	4b4f      	ldr	r3, [pc, #316]	; (80055d0 <__ieee754_pow+0x260>)
 8005494:	429c      	cmp	r4, r3
 8005496:	dd08      	ble.n	80054aa <__ieee754_pow+0x13a>
 8005498:	f1b9 0f00 	cmp.w	r9, #0
 800549c:	f2c0 8456 	blt.w	8005d4c <__ieee754_pow+0x9dc>
 80054a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054a4:	e783      	b.n	80053ae <__ieee754_pow+0x3e>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e7e5      	b.n	8005476 <__ieee754_pow+0x106>
 80054aa:	f1b9 0f00 	cmp.w	r9, #0
 80054ae:	f04f 0000 	mov.w	r0, #0
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	f6bf af7a 	bge.w	80053ae <__ieee754_pow+0x3e>
 80054ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80054be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80054c2:	e774      	b.n	80053ae <__ieee754_pow+0x3e>
 80054c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80054c8:	d106      	bne.n	80054d8 <__ieee754_pow+0x168>
 80054ca:	4632      	mov	r2, r6
 80054cc:	463b      	mov	r3, r7
 80054ce:	4630      	mov	r0, r6
 80054d0:	4639      	mov	r1, r7
 80054d2:	f7fb f855 	bl	8000580 <__aeabi_dmul>
 80054d6:	e76a      	b.n	80053ae <__ieee754_pow+0x3e>
 80054d8:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <__ieee754_pow+0x264>)
 80054da:	4599      	cmp	r9, r3
 80054dc:	d10c      	bne.n	80054f8 <__ieee754_pow+0x188>
 80054de:	2d00      	cmp	r5, #0
 80054e0:	db0a      	blt.n	80054f8 <__ieee754_pow+0x188>
 80054e2:	ec47 6b10 	vmov	d0, r6, r7
 80054e6:	b009      	add	sp, #36	; 0x24
 80054e8:	ecbd 8b06 	vpop	{d8-d10}
 80054ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f0:	f000 bec4 	b.w	800627c <__ieee754_sqrt>
 80054f4:	2300      	movs	r3, #0
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	ec47 6b10 	vmov	d0, r6, r7
 80054fc:	f000 fe04 	bl	8006108 <fabs>
 8005500:	ec51 0b10 	vmov	r0, r1, d0
 8005504:	f1ba 0f00 	cmp.w	sl, #0
 8005508:	d129      	bne.n	800555e <__ieee754_pow+0x1ee>
 800550a:	b124      	cbz	r4, 8005516 <__ieee754_pow+0x1a6>
 800550c:	4b2f      	ldr	r3, [pc, #188]	; (80055cc <__ieee754_pow+0x25c>)
 800550e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005512:	429a      	cmp	r2, r3
 8005514:	d123      	bne.n	800555e <__ieee754_pow+0x1ee>
 8005516:	f1b9 0f00 	cmp.w	r9, #0
 800551a:	da05      	bge.n	8005528 <__ieee754_pow+0x1b8>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	2000      	movs	r0, #0
 8005522:	492a      	ldr	r1, [pc, #168]	; (80055cc <__ieee754_pow+0x25c>)
 8005524:	f7fb f956 	bl	80007d4 <__aeabi_ddiv>
 8005528:	2d00      	cmp	r5, #0
 800552a:	f6bf af40 	bge.w	80053ae <__ieee754_pow+0x3e>
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005534:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005538:	431c      	orrs	r4, r3
 800553a:	d108      	bne.n	800554e <__ieee754_pow+0x1de>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	f7fa fe64 	bl	8000210 <__aeabi_dsub>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	e78f      	b.n	800546e <__ieee754_pow+0xfe>
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	2b01      	cmp	r3, #1
 8005552:	f47f af2c 	bne.w	80053ae <__ieee754_pow+0x3e>
 8005556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800555a:	4619      	mov	r1, r3
 800555c:	e727      	b.n	80053ae <__ieee754_pow+0x3e>
 800555e:	0feb      	lsrs	r3, r5, #31
 8005560:	3b01      	subs	r3, #1
 8005562:	9306      	str	r3, [sp, #24]
 8005564:	9a06      	ldr	r2, [sp, #24]
 8005566:	9b04      	ldr	r3, [sp, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	d102      	bne.n	8005572 <__ieee754_pow+0x202>
 800556c:	4632      	mov	r2, r6
 800556e:	463b      	mov	r3, r7
 8005570:	e7e6      	b.n	8005540 <__ieee754_pow+0x1d0>
 8005572:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <__ieee754_pow+0x268>)
 8005574:	4598      	cmp	r8, r3
 8005576:	f340 80fb 	ble.w	8005770 <__ieee754_pow+0x400>
 800557a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800557e:	4598      	cmp	r8, r3
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <__ieee754_pow+0x260>)
 8005582:	dd0c      	ble.n	800559e <__ieee754_pow+0x22e>
 8005584:	429c      	cmp	r4, r3
 8005586:	dc0f      	bgt.n	80055a8 <__ieee754_pow+0x238>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	da0f      	bge.n	80055ae <__ieee754_pow+0x23e>
 800558e:	2000      	movs	r0, #0
 8005590:	b009      	add	sp, #36	; 0x24
 8005592:	ecbd 8b06 	vpop	{d8-d10}
 8005596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f000 be66 	b.w	800626a <__math_oflow>
 800559e:	429c      	cmp	r4, r3
 80055a0:	dbf2      	blt.n	8005588 <__ieee754_pow+0x218>
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <__ieee754_pow+0x25c>)
 80055a4:	429c      	cmp	r4, r3
 80055a6:	dd19      	ble.n	80055dc <__ieee754_pow+0x26c>
 80055a8:	f1b9 0f00 	cmp.w	r9, #0
 80055ac:	dcef      	bgt.n	800558e <__ieee754_pow+0x21e>
 80055ae:	2000      	movs	r0, #0
 80055b0:	b009      	add	sp, #36	; 0x24
 80055b2:	ecbd 8b06 	vpop	{d8-d10}
 80055b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	f000 be4d 	b.w	8006258 <__math_uflow>
 80055be:	bf00      	nop
 80055c0:	fff00000 	.word	0xfff00000
 80055c4:	7ff00000 	.word	0x7ff00000
 80055c8:	433fffff 	.word	0x433fffff
 80055cc:	3ff00000 	.word	0x3ff00000
 80055d0:	3fefffff 	.word	0x3fefffff
 80055d4:	3fe00000 	.word	0x3fe00000
 80055d8:	41e00000 	.word	0x41e00000
 80055dc:	4b60      	ldr	r3, [pc, #384]	; (8005760 <__ieee754_pow+0x3f0>)
 80055de:	2200      	movs	r2, #0
 80055e0:	f7fa fe16 	bl	8000210 <__aeabi_dsub>
 80055e4:	a354      	add	r3, pc, #336	; (adr r3, 8005738 <__ieee754_pow+0x3c8>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	4604      	mov	r4, r0
 80055ec:	460d      	mov	r5, r1
 80055ee:	f7fa ffc7 	bl	8000580 <__aeabi_dmul>
 80055f2:	a353      	add	r3, pc, #332	; (adr r3, 8005740 <__ieee754_pow+0x3d0>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	4606      	mov	r6, r0
 80055fa:	460f      	mov	r7, r1
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fa ffbe 	bl	8000580 <__aeabi_dmul>
 8005604:	4b57      	ldr	r3, [pc, #348]	; (8005764 <__ieee754_pow+0x3f4>)
 8005606:	4682      	mov	sl, r0
 8005608:	468b      	mov	fp, r1
 800560a:	2200      	movs	r2, #0
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa ffb6 	bl	8000580 <__aeabi_dmul>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	a14b      	add	r1, pc, #300	; (adr r1, 8005748 <__ieee754_pow+0x3d8>)
 800561a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800561e:	f7fa fdf7 	bl	8000210 <__aeabi_dsub>
 8005622:	4622      	mov	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	f7fa ffab 	bl	8000580 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	2000      	movs	r0, #0
 8005630:	494d      	ldr	r1, [pc, #308]	; (8005768 <__ieee754_pow+0x3f8>)
 8005632:	f7fa fded 	bl	8000210 <__aeabi_dsub>
 8005636:	4622      	mov	r2, r4
 8005638:	4680      	mov	r8, r0
 800563a:	4689      	mov	r9, r1
 800563c:	462b      	mov	r3, r5
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f7fa ff9d 	bl	8000580 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4640      	mov	r0, r8
 800564c:	4649      	mov	r1, r9
 800564e:	f7fa ff97 	bl	8000580 <__aeabi_dmul>
 8005652:	a33f      	add	r3, pc, #252	; (adr r3, 8005750 <__ieee754_pow+0x3e0>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa ff92 	bl	8000580 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fa fdd4 	bl	8000210 <__aeabi_dsub>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4680      	mov	r8, r0
 800566e:	4689      	mov	r9, r1
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa fdce 	bl	8000214 <__adddf3>
 8005678:	2000      	movs	r0, #0
 800567a:	4632      	mov	r2, r6
 800567c:	463b      	mov	r3, r7
 800567e:	4604      	mov	r4, r0
 8005680:	460d      	mov	r5, r1
 8005682:	f7fa fdc5 	bl	8000210 <__aeabi_dsub>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4640      	mov	r0, r8
 800568c:	4649      	mov	r1, r9
 800568e:	f7fa fdbf 	bl	8000210 <__aeabi_dsub>
 8005692:	9b04      	ldr	r3, [sp, #16]
 8005694:	9a06      	ldr	r2, [sp, #24]
 8005696:	3b01      	subs	r3, #1
 8005698:	4313      	orrs	r3, r2
 800569a:	4682      	mov	sl, r0
 800569c:	468b      	mov	fp, r1
 800569e:	f040 81e7 	bne.w	8005a70 <__ieee754_pow+0x700>
 80056a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005758 <__ieee754_pow+0x3e8>
 80056a6:	eeb0 8a47 	vmov.f32	s16, s14
 80056aa:	eef0 8a67 	vmov.f32	s17, s15
 80056ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056b2:	2600      	movs	r6, #0
 80056b4:	4632      	mov	r2, r6
 80056b6:	463b      	mov	r3, r7
 80056b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056bc:	f7fa fda8 	bl	8000210 <__aeabi_dsub>
 80056c0:	4622      	mov	r2, r4
 80056c2:	462b      	mov	r3, r5
 80056c4:	f7fa ff5c 	bl	8000580 <__aeabi_dmul>
 80056c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056cc:	4680      	mov	r8, r0
 80056ce:	4689      	mov	r9, r1
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	f7fa ff54 	bl	8000580 <__aeabi_dmul>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	f7fa fd98 	bl	8000214 <__adddf3>
 80056e4:	4632      	mov	r2, r6
 80056e6:	463b      	mov	r3, r7
 80056e8:	4680      	mov	r8, r0
 80056ea:	4689      	mov	r9, r1
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa ff46 	bl	8000580 <__aeabi_dmul>
 80056f4:	460b      	mov	r3, r1
 80056f6:	4604      	mov	r4, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	4602      	mov	r2, r0
 80056fc:	4649      	mov	r1, r9
 80056fe:	4640      	mov	r0, r8
 8005700:	f7fa fd88 	bl	8000214 <__adddf3>
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <__ieee754_pow+0x3fc>)
 8005706:	4299      	cmp	r1, r3
 8005708:	ec45 4b19 	vmov	d9, r4, r5
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	468b      	mov	fp, r1
 8005712:	f340 82f0 	ble.w	8005cf6 <__ieee754_pow+0x986>
 8005716:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800571a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800571e:	4303      	orrs	r3, r0
 8005720:	f000 81e4 	beq.w	8005aec <__ieee754_pow+0x77c>
 8005724:	ec51 0b18 	vmov	r0, r1, d8
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	f7fb f99a 	bl	8000a64 <__aeabi_dcmplt>
 8005730:	3800      	subs	r0, #0
 8005732:	bf18      	it	ne
 8005734:	2001      	movne	r0, #1
 8005736:	e72b      	b.n	8005590 <__ieee754_pow+0x220>
 8005738:	60000000 	.word	0x60000000
 800573c:	3ff71547 	.word	0x3ff71547
 8005740:	f85ddf44 	.word	0xf85ddf44
 8005744:	3e54ae0b 	.word	0x3e54ae0b
 8005748:	55555555 	.word	0x55555555
 800574c:	3fd55555 	.word	0x3fd55555
 8005750:	652b82fe 	.word	0x652b82fe
 8005754:	3ff71547 	.word	0x3ff71547
 8005758:	00000000 	.word	0x00000000
 800575c:	bff00000 	.word	0xbff00000
 8005760:	3ff00000 	.word	0x3ff00000
 8005764:	3fd00000 	.word	0x3fd00000
 8005768:	3fe00000 	.word	0x3fe00000
 800576c:	408fffff 	.word	0x408fffff
 8005770:	4bd5      	ldr	r3, [pc, #852]	; (8005ac8 <__ieee754_pow+0x758>)
 8005772:	402b      	ands	r3, r5
 8005774:	2200      	movs	r2, #0
 8005776:	b92b      	cbnz	r3, 8005784 <__ieee754_pow+0x414>
 8005778:	4bd4      	ldr	r3, [pc, #848]	; (8005acc <__ieee754_pow+0x75c>)
 800577a:	f7fa ff01 	bl	8000580 <__aeabi_dmul>
 800577e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005782:	460c      	mov	r4, r1
 8005784:	1523      	asrs	r3, r4, #20
 8005786:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800578a:	4413      	add	r3, r2
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	4bd0      	ldr	r3, [pc, #832]	; (8005ad0 <__ieee754_pow+0x760>)
 8005790:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005794:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005798:	429c      	cmp	r4, r3
 800579a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800579e:	dd08      	ble.n	80057b2 <__ieee754_pow+0x442>
 80057a0:	4bcc      	ldr	r3, [pc, #816]	; (8005ad4 <__ieee754_pow+0x764>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	f340 8162 	ble.w	8005a6c <__ieee754_pow+0x6fc>
 80057a8:	9b05      	ldr	r3, [sp, #20]
 80057aa:	3301      	adds	r3, #1
 80057ac:	9305      	str	r3, [sp, #20]
 80057ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80057b2:	2400      	movs	r4, #0
 80057b4:	00e3      	lsls	r3, r4, #3
 80057b6:	9307      	str	r3, [sp, #28]
 80057b8:	4bc7      	ldr	r3, [pc, #796]	; (8005ad8 <__ieee754_pow+0x768>)
 80057ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057be:	ed93 7b00 	vldr	d7, [r3]
 80057c2:	4629      	mov	r1, r5
 80057c4:	ec53 2b17 	vmov	r2, r3, d7
 80057c8:	eeb0 9a47 	vmov.f32	s18, s14
 80057cc:	eef0 9a67 	vmov.f32	s19, s15
 80057d0:	4682      	mov	sl, r0
 80057d2:	f7fa fd1d 	bl	8000210 <__aeabi_dsub>
 80057d6:	4652      	mov	r2, sl
 80057d8:	4606      	mov	r6, r0
 80057da:	460f      	mov	r7, r1
 80057dc:	462b      	mov	r3, r5
 80057de:	ec51 0b19 	vmov	r0, r1, d9
 80057e2:	f7fa fd17 	bl	8000214 <__adddf3>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	2000      	movs	r0, #0
 80057ec:	49bb      	ldr	r1, [pc, #748]	; (8005adc <__ieee754_pow+0x76c>)
 80057ee:	f7fa fff1 	bl	80007d4 <__aeabi_ddiv>
 80057f2:	ec41 0b1a 	vmov	d10, r0, r1
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4630      	mov	r0, r6
 80057fc:	4639      	mov	r1, r7
 80057fe:	f7fa febf 	bl	8000580 <__aeabi_dmul>
 8005802:	2300      	movs	r3, #0
 8005804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005808:	9302      	str	r3, [sp, #8]
 800580a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800580e:	46ab      	mov	fp, r5
 8005810:	106d      	asrs	r5, r5, #1
 8005812:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005816:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800581a:	ec41 0b18 	vmov	d8, r0, r1
 800581e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005822:	2200      	movs	r2, #0
 8005824:	4640      	mov	r0, r8
 8005826:	4649      	mov	r1, r9
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	f7fa fea8 	bl	8000580 <__aeabi_dmul>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fa fcea 	bl	8000210 <__aeabi_dsub>
 800583c:	ec53 2b19 	vmov	r2, r3, d9
 8005840:	4606      	mov	r6, r0
 8005842:	460f      	mov	r7, r1
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fa fce2 	bl	8000210 <__aeabi_dsub>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4650      	mov	r0, sl
 8005852:	4659      	mov	r1, fp
 8005854:	f7fa fcdc 	bl	8000210 <__aeabi_dsub>
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	f7fa fe90 	bl	8000580 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fa fcd2 	bl	8000210 <__aeabi_dsub>
 800586c:	ec53 2b1a 	vmov	r2, r3, d10
 8005870:	f7fa fe86 	bl	8000580 <__aeabi_dmul>
 8005874:	ec53 2b18 	vmov	r2, r3, d8
 8005878:	ec41 0b19 	vmov	d9, r0, r1
 800587c:	ec51 0b18 	vmov	r0, r1, d8
 8005880:	f7fa fe7e 	bl	8000580 <__aeabi_dmul>
 8005884:	a37c      	add	r3, pc, #496	; (adr r3, 8005a78 <__ieee754_pow+0x708>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	4604      	mov	r4, r0
 800588c:	460d      	mov	r5, r1
 800588e:	f7fa fe77 	bl	8000580 <__aeabi_dmul>
 8005892:	a37b      	add	r3, pc, #492	; (adr r3, 8005a80 <__ieee754_pow+0x710>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fcbc 	bl	8000214 <__adddf3>
 800589c:	4622      	mov	r2, r4
 800589e:	462b      	mov	r3, r5
 80058a0:	f7fa fe6e 	bl	8000580 <__aeabi_dmul>
 80058a4:	a378      	add	r3, pc, #480	; (adr r3, 8005a88 <__ieee754_pow+0x718>)
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	f7fa fcb3 	bl	8000214 <__adddf3>
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	f7fa fe65 	bl	8000580 <__aeabi_dmul>
 80058b6:	a376      	add	r3, pc, #472	; (adr r3, 8005a90 <__ieee754_pow+0x720>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fcaa 	bl	8000214 <__adddf3>
 80058c0:	4622      	mov	r2, r4
 80058c2:	462b      	mov	r3, r5
 80058c4:	f7fa fe5c 	bl	8000580 <__aeabi_dmul>
 80058c8:	a373      	add	r3, pc, #460	; (adr r3, 8005a98 <__ieee754_pow+0x728>)
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f7fa fca1 	bl	8000214 <__adddf3>
 80058d2:	4622      	mov	r2, r4
 80058d4:	462b      	mov	r3, r5
 80058d6:	f7fa fe53 	bl	8000580 <__aeabi_dmul>
 80058da:	a371      	add	r3, pc, #452	; (adr r3, 8005aa0 <__ieee754_pow+0x730>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fc98 	bl	8000214 <__adddf3>
 80058e4:	4622      	mov	r2, r4
 80058e6:	4606      	mov	r6, r0
 80058e8:	460f      	mov	r7, r1
 80058ea:	462b      	mov	r3, r5
 80058ec:	4620      	mov	r0, r4
 80058ee:	4629      	mov	r1, r5
 80058f0:	f7fa fe46 	bl	8000580 <__aeabi_dmul>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fa fe40 	bl	8000580 <__aeabi_dmul>
 8005900:	4642      	mov	r2, r8
 8005902:	4604      	mov	r4, r0
 8005904:	460d      	mov	r5, r1
 8005906:	464b      	mov	r3, r9
 8005908:	ec51 0b18 	vmov	r0, r1, d8
 800590c:	f7fa fc82 	bl	8000214 <__adddf3>
 8005910:	ec53 2b19 	vmov	r2, r3, d9
 8005914:	f7fa fe34 	bl	8000580 <__aeabi_dmul>
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	f7fa fc7a 	bl	8000214 <__adddf3>
 8005920:	4642      	mov	r2, r8
 8005922:	4682      	mov	sl, r0
 8005924:	468b      	mov	fp, r1
 8005926:	464b      	mov	r3, r9
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fa fe28 	bl	8000580 <__aeabi_dmul>
 8005930:	4b6b      	ldr	r3, [pc, #428]	; (8005ae0 <__ieee754_pow+0x770>)
 8005932:	2200      	movs	r2, #0
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	f7fa fc6c 	bl	8000214 <__adddf3>
 800593c:	4652      	mov	r2, sl
 800593e:	465b      	mov	r3, fp
 8005940:	f7fa fc68 	bl	8000214 <__adddf3>
 8005944:	2000      	movs	r0, #0
 8005946:	4604      	mov	r4, r0
 8005948:	460d      	mov	r5, r1
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4640      	mov	r0, r8
 8005950:	4649      	mov	r1, r9
 8005952:	f7fa fe15 	bl	8000580 <__aeabi_dmul>
 8005956:	4b62      	ldr	r3, [pc, #392]	; (8005ae0 <__ieee754_pow+0x770>)
 8005958:	4680      	mov	r8, r0
 800595a:	4689      	mov	r9, r1
 800595c:	2200      	movs	r2, #0
 800595e:	4620      	mov	r0, r4
 8005960:	4629      	mov	r1, r5
 8005962:	f7fa fc55 	bl	8000210 <__aeabi_dsub>
 8005966:	4632      	mov	r2, r6
 8005968:	463b      	mov	r3, r7
 800596a:	f7fa fc51 	bl	8000210 <__aeabi_dsub>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4650      	mov	r0, sl
 8005974:	4659      	mov	r1, fp
 8005976:	f7fa fc4b 	bl	8000210 <__aeabi_dsub>
 800597a:	ec53 2b18 	vmov	r2, r3, d8
 800597e:	f7fa fdff 	bl	8000580 <__aeabi_dmul>
 8005982:	4622      	mov	r2, r4
 8005984:	4606      	mov	r6, r0
 8005986:	460f      	mov	r7, r1
 8005988:	462b      	mov	r3, r5
 800598a:	ec51 0b19 	vmov	r0, r1, d9
 800598e:	f7fa fdf7 	bl	8000580 <__aeabi_dmul>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4630      	mov	r0, r6
 8005998:	4639      	mov	r1, r7
 800599a:	f7fa fc3b 	bl	8000214 <__adddf3>
 800599e:	4606      	mov	r6, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4640      	mov	r0, r8
 80059a8:	4649      	mov	r1, r9
 80059aa:	f7fa fc33 	bl	8000214 <__adddf3>
 80059ae:	a33e      	add	r3, pc, #248	; (adr r3, 8005aa8 <__ieee754_pow+0x738>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	2000      	movs	r0, #0
 80059b6:	4604      	mov	r4, r0
 80059b8:	460d      	mov	r5, r1
 80059ba:	f7fa fde1 	bl	8000580 <__aeabi_dmul>
 80059be:	4642      	mov	r2, r8
 80059c0:	ec41 0b18 	vmov	d8, r0, r1
 80059c4:	464b      	mov	r3, r9
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa fc21 	bl	8000210 <__aeabi_dsub>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4630      	mov	r0, r6
 80059d4:	4639      	mov	r1, r7
 80059d6:	f7fa fc1b 	bl	8000210 <__aeabi_dsub>
 80059da:	a335      	add	r3, pc, #212	; (adr r3, 8005ab0 <__ieee754_pow+0x740>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fdce 	bl	8000580 <__aeabi_dmul>
 80059e4:	a334      	add	r3, pc, #208	; (adr r3, 8005ab8 <__ieee754_pow+0x748>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	4606      	mov	r6, r0
 80059ec:	460f      	mov	r7, r1
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fa fdc5 	bl	8000580 <__aeabi_dmul>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4630      	mov	r0, r6
 80059fc:	4639      	mov	r1, r7
 80059fe:	f7fa fc09 	bl	8000214 <__adddf3>
 8005a02:	9a07      	ldr	r2, [sp, #28]
 8005a04:	4b37      	ldr	r3, [pc, #220]	; (8005ae4 <__ieee754_pow+0x774>)
 8005a06:	4413      	add	r3, r2
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f7fa fc02 	bl	8000214 <__adddf3>
 8005a10:	4682      	mov	sl, r0
 8005a12:	9805      	ldr	r0, [sp, #20]
 8005a14:	468b      	mov	fp, r1
 8005a16:	f7fa fd49 	bl	80004ac <__aeabi_i2d>
 8005a1a:	9a07      	ldr	r2, [sp, #28]
 8005a1c:	4b32      	ldr	r3, [pc, #200]	; (8005ae8 <__ieee754_pow+0x778>)
 8005a1e:	4413      	add	r3, r2
 8005a20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4652      	mov	r2, sl
 8005a2a:	465b      	mov	r3, fp
 8005a2c:	ec51 0b18 	vmov	r0, r1, d8
 8005a30:	f7fa fbf0 	bl	8000214 <__adddf3>
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	f7fa fbec 	bl	8000214 <__adddf3>
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	463b      	mov	r3, r7
 8005a40:	f7fa fbe8 	bl	8000214 <__adddf3>
 8005a44:	2000      	movs	r0, #0
 8005a46:	4632      	mov	r2, r6
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	f7fa fbdf 	bl	8000210 <__aeabi_dsub>
 8005a52:	4642      	mov	r2, r8
 8005a54:	464b      	mov	r3, r9
 8005a56:	f7fa fbdb 	bl	8000210 <__aeabi_dsub>
 8005a5a:	ec53 2b18 	vmov	r2, r3, d8
 8005a5e:	f7fa fbd7 	bl	8000210 <__aeabi_dsub>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4650      	mov	r0, sl
 8005a68:	4659      	mov	r1, fp
 8005a6a:	e610      	b.n	800568e <__ieee754_pow+0x31e>
 8005a6c:	2401      	movs	r4, #1
 8005a6e:	e6a1      	b.n	80057b4 <__ieee754_pow+0x444>
 8005a70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005ac0 <__ieee754_pow+0x750>
 8005a74:	e617      	b.n	80056a6 <__ieee754_pow+0x336>
 8005a76:	bf00      	nop
 8005a78:	4a454eef 	.word	0x4a454eef
 8005a7c:	3fca7e28 	.word	0x3fca7e28
 8005a80:	93c9db65 	.word	0x93c9db65
 8005a84:	3fcd864a 	.word	0x3fcd864a
 8005a88:	a91d4101 	.word	0xa91d4101
 8005a8c:	3fd17460 	.word	0x3fd17460
 8005a90:	518f264d 	.word	0x518f264d
 8005a94:	3fd55555 	.word	0x3fd55555
 8005a98:	db6fabff 	.word	0xdb6fabff
 8005a9c:	3fdb6db6 	.word	0x3fdb6db6
 8005aa0:	33333303 	.word	0x33333303
 8005aa4:	3fe33333 	.word	0x3fe33333
 8005aa8:	e0000000 	.word	0xe0000000
 8005aac:	3feec709 	.word	0x3feec709
 8005ab0:	dc3a03fd 	.word	0xdc3a03fd
 8005ab4:	3feec709 	.word	0x3feec709
 8005ab8:	145b01f5 	.word	0x145b01f5
 8005abc:	be3e2fe0 	.word	0xbe3e2fe0
 8005ac0:	00000000 	.word	0x00000000
 8005ac4:	3ff00000 	.word	0x3ff00000
 8005ac8:	7ff00000 	.word	0x7ff00000
 8005acc:	43400000 	.word	0x43400000
 8005ad0:	0003988e 	.word	0x0003988e
 8005ad4:	000bb679 	.word	0x000bb679
 8005ad8:	080064d0 	.word	0x080064d0
 8005adc:	3ff00000 	.word	0x3ff00000
 8005ae0:	40080000 	.word	0x40080000
 8005ae4:	080064f0 	.word	0x080064f0
 8005ae8:	080064e0 	.word	0x080064e0
 8005aec:	a3b3      	add	r3, pc, #716	; (adr r3, 8005dbc <__ieee754_pow+0xa4c>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	4640      	mov	r0, r8
 8005af4:	4649      	mov	r1, r9
 8005af6:	f7fa fb8d 	bl	8000214 <__adddf3>
 8005afa:	4622      	mov	r2, r4
 8005afc:	ec41 0b1a 	vmov	d10, r0, r1
 8005b00:	462b      	mov	r3, r5
 8005b02:	4630      	mov	r0, r6
 8005b04:	4639      	mov	r1, r7
 8005b06:	f7fa fb83 	bl	8000210 <__aeabi_dsub>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	ec51 0b1a 	vmov	r0, r1, d10
 8005b12:	f7fa ffc5 	bl	8000aa0 <__aeabi_dcmpgt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f47f ae04 	bne.w	8005724 <__ieee754_pow+0x3b4>
 8005b1c:	4aa2      	ldr	r2, [pc, #648]	; (8005da8 <__ieee754_pow+0xa38>)
 8005b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f340 8107 	ble.w	8005d36 <__ieee754_pow+0x9c6>
 8005b28:	151b      	asrs	r3, r3, #20
 8005b2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005b2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005b32:	fa4a fa03 	asr.w	sl, sl, r3
 8005b36:	44da      	add	sl, fp
 8005b38:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005b3c:	489b      	ldr	r0, [pc, #620]	; (8005dac <__ieee754_pow+0xa3c>)
 8005b3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005b42:	4108      	asrs	r0, r1
 8005b44:	ea00 030a 	and.w	r3, r0, sl
 8005b48:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005b4c:	f1c1 0114 	rsb	r1, r1, #20
 8005b50:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005b54:	fa4a fa01 	asr.w	sl, sl, r1
 8005b58:	f1bb 0f00 	cmp.w	fp, #0
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	4620      	mov	r0, r4
 8005b62:	4629      	mov	r1, r5
 8005b64:	bfb8      	it	lt
 8005b66:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b6a:	f7fa fb51 	bl	8000210 <__aeabi_dsub>
 8005b6e:	ec41 0b19 	vmov	d9, r0, r1
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	ec51 0b19 	vmov	r0, r1, d9
 8005b7a:	f7fa fb4b 	bl	8000214 <__adddf3>
 8005b7e:	a37a      	add	r3, pc, #488	; (adr r3, 8005d68 <__ieee754_pow+0x9f8>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	2000      	movs	r0, #0
 8005b86:	4604      	mov	r4, r0
 8005b88:	460d      	mov	r5, r1
 8005b8a:	f7fa fcf9 	bl	8000580 <__aeabi_dmul>
 8005b8e:	ec53 2b19 	vmov	r2, r3, d9
 8005b92:	4606      	mov	r6, r0
 8005b94:	460f      	mov	r7, r1
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa fb39 	bl	8000210 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	f7fa fb33 	bl	8000210 <__aeabi_dsub>
 8005baa:	a371      	add	r3, pc, #452	; (adr r3, 8005d70 <__ieee754_pow+0xa00>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f7fa fce6 	bl	8000580 <__aeabi_dmul>
 8005bb4:	a370      	add	r3, pc, #448	; (adr r3, 8005d78 <__ieee754_pow+0xa08>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	4680      	mov	r8, r0
 8005bbc:	4689      	mov	r9, r1
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fcdd 	bl	8000580 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fb21 	bl	8000214 <__adddf3>
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa fb19 	bl	8000214 <__adddf3>
 8005be2:	4632      	mov	r2, r6
 8005be4:	463b      	mov	r3, r7
 8005be6:	4680      	mov	r8, r0
 8005be8:	4689      	mov	r9, r1
 8005bea:	f7fa fb11 	bl	8000210 <__aeabi_dsub>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7fa fb0b 	bl	8000210 <__aeabi_dsub>
 8005bfa:	4642      	mov	r2, r8
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	464b      	mov	r3, r9
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa fcbb 	bl	8000580 <__aeabi_dmul>
 8005c0a:	a35d      	add	r3, pc, #372	; (adr r3, 8005d80 <__ieee754_pow+0xa10>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	f7fa fcb4 	bl	8000580 <__aeabi_dmul>
 8005c18:	a35b      	add	r3, pc, #364	; (adr r3, 8005d88 <__ieee754_pow+0xa18>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa faf7 	bl	8000210 <__aeabi_dsub>
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fcab 	bl	8000580 <__aeabi_dmul>
 8005c2a:	a359      	add	r3, pc, #356	; (adr r3, 8005d90 <__ieee754_pow+0xa20>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa faf0 	bl	8000214 <__adddf3>
 8005c34:	4622      	mov	r2, r4
 8005c36:	462b      	mov	r3, r5
 8005c38:	f7fa fca2 	bl	8000580 <__aeabi_dmul>
 8005c3c:	a356      	add	r3, pc, #344	; (adr r3, 8005d98 <__ieee754_pow+0xa28>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fae5 	bl	8000210 <__aeabi_dsub>
 8005c46:	4622      	mov	r2, r4
 8005c48:	462b      	mov	r3, r5
 8005c4a:	f7fa fc99 	bl	8000580 <__aeabi_dmul>
 8005c4e:	a354      	add	r3, pc, #336	; (adr r3, 8005da0 <__ieee754_pow+0xa30>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fade 	bl	8000214 <__adddf3>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	f7fa fc90 	bl	8000580 <__aeabi_dmul>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4640      	mov	r0, r8
 8005c66:	4649      	mov	r1, r9
 8005c68:	f7fa fad2 	bl	8000210 <__aeabi_dsub>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460d      	mov	r5, r1
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4640      	mov	r0, r8
 8005c76:	4649      	mov	r1, r9
 8005c78:	f7fa fc82 	bl	8000580 <__aeabi_dmul>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	ec41 0b19 	vmov	d9, r0, r1
 8005c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa fac1 	bl	8000210 <__aeabi_dsub>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	ec51 0b19 	vmov	r0, r1, d9
 8005c96:	f7fa fd9d 	bl	80007d4 <__aeabi_ddiv>
 8005c9a:	4632      	mov	r2, r6
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	f7fa fc6b 	bl	8000580 <__aeabi_dmul>
 8005caa:	4632      	mov	r2, r6
 8005cac:	463b      	mov	r3, r7
 8005cae:	f7fa fab1 	bl	8000214 <__adddf3>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa faa9 	bl	8000210 <__aeabi_dsub>
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	f7fa faa5 	bl	8000210 <__aeabi_dsub>
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4939      	ldr	r1, [pc, #228]	; (8005db0 <__ieee754_pow+0xa40>)
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7fa fa9f 	bl	8000210 <__aeabi_dsub>
 8005cd2:	ec41 0b10 	vmov	d0, r0, r1
 8005cd6:	ee10 3a90 	vmov	r3, s1
 8005cda:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce2:	da2b      	bge.n	8005d3c <__ieee754_pow+0x9cc>
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	f000 fa1b 	bl	8006120 <scalbn>
 8005cea:	ec51 0b10 	vmov	r0, r1, d0
 8005cee:	ec53 2b18 	vmov	r2, r3, d8
 8005cf2:	f7ff bbee 	b.w	80054d2 <__ieee754_pow+0x162>
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <__ieee754_pow+0xa44>)
 8005cf8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005cfc:	429e      	cmp	r6, r3
 8005cfe:	f77f af0d 	ble.w	8005b1c <__ieee754_pow+0x7ac>
 8005d02:	4b2d      	ldr	r3, [pc, #180]	; (8005db8 <__ieee754_pow+0xa48>)
 8005d04:	440b      	add	r3, r1
 8005d06:	4303      	orrs	r3, r0
 8005d08:	d009      	beq.n	8005d1e <__ieee754_pow+0x9ae>
 8005d0a:	ec51 0b18 	vmov	r0, r1, d8
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f7fa fea7 	bl	8000a64 <__aeabi_dcmplt>
 8005d16:	3800      	subs	r0, #0
 8005d18:	bf18      	it	ne
 8005d1a:	2001      	movne	r0, #1
 8005d1c:	e448      	b.n	80055b0 <__ieee754_pow+0x240>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f7fa fa75 	bl	8000210 <__aeabi_dsub>
 8005d26:	4642      	mov	r2, r8
 8005d28:	464b      	mov	r3, r9
 8005d2a:	f7fa feaf 	bl	8000a8c <__aeabi_dcmpge>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f43f aef4 	beq.w	8005b1c <__ieee754_pow+0x7ac>
 8005d34:	e7e9      	b.n	8005d0a <__ieee754_pow+0x99a>
 8005d36:	f04f 0a00 	mov.w	sl, #0
 8005d3a:	e71a      	b.n	8005b72 <__ieee754_pow+0x802>
 8005d3c:	ec51 0b10 	vmov	r0, r1, d0
 8005d40:	4619      	mov	r1, r3
 8005d42:	e7d4      	b.n	8005cee <__ieee754_pow+0x97e>
 8005d44:	491a      	ldr	r1, [pc, #104]	; (8005db0 <__ieee754_pow+0xa40>)
 8005d46:	2000      	movs	r0, #0
 8005d48:	f7ff bb31 	b.w	80053ae <__ieee754_pow+0x3e>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f7ff bb2d 	b.w	80053ae <__ieee754_pow+0x3e>
 8005d54:	4630      	mov	r0, r6
 8005d56:	4639      	mov	r1, r7
 8005d58:	f7ff bb29 	b.w	80053ae <__ieee754_pow+0x3e>
 8005d5c:	9204      	str	r2, [sp, #16]
 8005d5e:	f7ff bb7b 	b.w	8005458 <__ieee754_pow+0xe8>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f7ff bb65 	b.w	8005432 <__ieee754_pow+0xc2>
 8005d68:	00000000 	.word	0x00000000
 8005d6c:	3fe62e43 	.word	0x3fe62e43
 8005d70:	fefa39ef 	.word	0xfefa39ef
 8005d74:	3fe62e42 	.word	0x3fe62e42
 8005d78:	0ca86c39 	.word	0x0ca86c39
 8005d7c:	be205c61 	.word	0xbe205c61
 8005d80:	72bea4d0 	.word	0x72bea4d0
 8005d84:	3e663769 	.word	0x3e663769
 8005d88:	c5d26bf1 	.word	0xc5d26bf1
 8005d8c:	3ebbbd41 	.word	0x3ebbbd41
 8005d90:	af25de2c 	.word	0xaf25de2c
 8005d94:	3f11566a 	.word	0x3f11566a
 8005d98:	16bebd93 	.word	0x16bebd93
 8005d9c:	3f66c16c 	.word	0x3f66c16c
 8005da0:	5555553e 	.word	0x5555553e
 8005da4:	3fc55555 	.word	0x3fc55555
 8005da8:	3fe00000 	.word	0x3fe00000
 8005dac:	fff00000 	.word	0xfff00000
 8005db0:	3ff00000 	.word	0x3ff00000
 8005db4:	4090cbff 	.word	0x4090cbff
 8005db8:	3f6f3400 	.word	0x3f6f3400
 8005dbc:	652b82fe 	.word	0x652b82fe
 8005dc0:	3c971547 	.word	0x3c971547
 8005dc4:	00000000 	.word	0x00000000

08005dc8 <atan>:
 8005dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	ec55 4b10 	vmov	r4, r5, d0
 8005dd0:	4bc3      	ldr	r3, [pc, #780]	; (80060e0 <atan+0x318>)
 8005dd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005dd6:	429e      	cmp	r6, r3
 8005dd8:	46ab      	mov	fp, r5
 8005dda:	dd18      	ble.n	8005e0e <atan+0x46>
 8005ddc:	4bc1      	ldr	r3, [pc, #772]	; (80060e4 <atan+0x31c>)
 8005dde:	429e      	cmp	r6, r3
 8005de0:	dc01      	bgt.n	8005de6 <atan+0x1e>
 8005de2:	d109      	bne.n	8005df8 <atan+0x30>
 8005de4:	b144      	cbz	r4, 8005df8 <atan+0x30>
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	4620      	mov	r0, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fa fa11 	bl	8000214 <__adddf3>
 8005df2:	4604      	mov	r4, r0
 8005df4:	460d      	mov	r5, r1
 8005df6:	e006      	b.n	8005e06 <atan+0x3e>
 8005df8:	f1bb 0f00 	cmp.w	fp, #0
 8005dfc:	f300 8131 	bgt.w	8006062 <atan+0x29a>
 8005e00:	a59b      	add	r5, pc, #620	; (adr r5, 8006070 <atan+0x2a8>)
 8005e02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e06:	ec45 4b10 	vmov	d0, r4, r5
 8005e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0e:	4bb6      	ldr	r3, [pc, #728]	; (80060e8 <atan+0x320>)
 8005e10:	429e      	cmp	r6, r3
 8005e12:	dc14      	bgt.n	8005e3e <atan+0x76>
 8005e14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005e18:	429e      	cmp	r6, r3
 8005e1a:	dc0d      	bgt.n	8005e38 <atan+0x70>
 8005e1c:	a396      	add	r3, pc, #600	; (adr r3, 8006078 <atan+0x2b0>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	ee10 0a10 	vmov	r0, s0
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa f9f4 	bl	8000214 <__adddf3>
 8005e2c:	4baf      	ldr	r3, [pc, #700]	; (80060ec <atan+0x324>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f7fa fe36 	bl	8000aa0 <__aeabi_dcmpgt>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d1e6      	bne.n	8005e06 <atan+0x3e>
 8005e38:	f04f 3aff 	mov.w	sl, #4294967295
 8005e3c:	e02b      	b.n	8005e96 <atan+0xce>
 8005e3e:	f000 f963 	bl	8006108 <fabs>
 8005e42:	4bab      	ldr	r3, [pc, #684]	; (80060f0 <atan+0x328>)
 8005e44:	429e      	cmp	r6, r3
 8005e46:	ec55 4b10 	vmov	r4, r5, d0
 8005e4a:	f300 80bf 	bgt.w	8005fcc <atan+0x204>
 8005e4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005e52:	429e      	cmp	r6, r3
 8005e54:	f300 80a0 	bgt.w	8005f98 <atan+0x1d0>
 8005e58:	ee10 2a10 	vmov	r2, s0
 8005e5c:	ee10 0a10 	vmov	r0, s0
 8005e60:	462b      	mov	r3, r5
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa f9d6 	bl	8000214 <__adddf3>
 8005e68:	4ba0      	ldr	r3, [pc, #640]	; (80060ec <atan+0x324>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f7fa f9d0 	bl	8000210 <__aeabi_dsub>
 8005e70:	2200      	movs	r2, #0
 8005e72:	4606      	mov	r6, r0
 8005e74:	460f      	mov	r7, r1
 8005e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa f9c9 	bl	8000214 <__adddf3>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fca3 	bl	80007d4 <__aeabi_ddiv>
 8005e8e:	f04f 0a00 	mov.w	sl, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	460d      	mov	r5, r1
 8005e96:	4622      	mov	r2, r4
 8005e98:	462b      	mov	r3, r5
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa fb6f 	bl	8000580 <__aeabi_dmul>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	4689      	mov	r9, r1
 8005eaa:	f7fa fb69 	bl	8000580 <__aeabi_dmul>
 8005eae:	a374      	add	r3, pc, #464	; (adr r3, 8006080 <atan+0x2b8>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	460f      	mov	r7, r1
 8005eb8:	f7fa fb62 	bl	8000580 <__aeabi_dmul>
 8005ebc:	a372      	add	r3, pc, #456	; (adr r3, 8006088 <atan+0x2c0>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa f9a7 	bl	8000214 <__adddf3>
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	463b      	mov	r3, r7
 8005eca:	f7fa fb59 	bl	8000580 <__aeabi_dmul>
 8005ece:	a370      	add	r3, pc, #448	; (adr r3, 8006090 <atan+0x2c8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f7fa f99e 	bl	8000214 <__adddf3>
 8005ed8:	4632      	mov	r2, r6
 8005eda:	463b      	mov	r3, r7
 8005edc:	f7fa fb50 	bl	8000580 <__aeabi_dmul>
 8005ee0:	a36d      	add	r3, pc, #436	; (adr r3, 8006098 <atan+0x2d0>)
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f7fa f995 	bl	8000214 <__adddf3>
 8005eea:	4632      	mov	r2, r6
 8005eec:	463b      	mov	r3, r7
 8005eee:	f7fa fb47 	bl	8000580 <__aeabi_dmul>
 8005ef2:	a36b      	add	r3, pc, #428	; (adr r3, 80060a0 <atan+0x2d8>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa f98c 	bl	8000214 <__adddf3>
 8005efc:	4632      	mov	r2, r6
 8005efe:	463b      	mov	r3, r7
 8005f00:	f7fa fb3e 	bl	8000580 <__aeabi_dmul>
 8005f04:	a368      	add	r3, pc, #416	; (adr r3, 80060a8 <atan+0x2e0>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7fa f983 	bl	8000214 <__adddf3>
 8005f0e:	4642      	mov	r2, r8
 8005f10:	464b      	mov	r3, r9
 8005f12:	f7fa fb35 	bl	8000580 <__aeabi_dmul>
 8005f16:	a366      	add	r3, pc, #408	; (adr r3, 80060b0 <atan+0x2e8>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	4689      	mov	r9, r1
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f7fa fb2c 	bl	8000580 <__aeabi_dmul>
 8005f28:	a363      	add	r3, pc, #396	; (adr r3, 80060b8 <atan+0x2f0>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa f96f 	bl	8000210 <__aeabi_dsub>
 8005f32:	4632      	mov	r2, r6
 8005f34:	463b      	mov	r3, r7
 8005f36:	f7fa fb23 	bl	8000580 <__aeabi_dmul>
 8005f3a:	a361      	add	r3, pc, #388	; (adr r3, 80060c0 <atan+0x2f8>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa f966 	bl	8000210 <__aeabi_dsub>
 8005f44:	4632      	mov	r2, r6
 8005f46:	463b      	mov	r3, r7
 8005f48:	f7fa fb1a 	bl	8000580 <__aeabi_dmul>
 8005f4c:	a35e      	add	r3, pc, #376	; (adr r3, 80060c8 <atan+0x300>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa f95d 	bl	8000210 <__aeabi_dsub>
 8005f56:	4632      	mov	r2, r6
 8005f58:	463b      	mov	r3, r7
 8005f5a:	f7fa fb11 	bl	8000580 <__aeabi_dmul>
 8005f5e:	a35c      	add	r3, pc, #368	; (adr r3, 80060d0 <atan+0x308>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa f954 	bl	8000210 <__aeabi_dsub>
 8005f68:	4632      	mov	r2, r6
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	f7fa fb08 	bl	8000580 <__aeabi_dmul>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4640      	mov	r0, r8
 8005f76:	4649      	mov	r1, r9
 8005f78:	f7fa f94c 	bl	8000214 <__adddf3>
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	462b      	mov	r3, r5
 8005f80:	f7fa fafe 	bl	8000580 <__aeabi_dmul>
 8005f84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	d14b      	bne.n	8006026 <atan+0x25e>
 8005f8e:	4620      	mov	r0, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	f7fa f93d 	bl	8000210 <__aeabi_dsub>
 8005f96:	e72c      	b.n	8005df2 <atan+0x2a>
 8005f98:	ee10 0a10 	vmov	r0, s0
 8005f9c:	4b53      	ldr	r3, [pc, #332]	; (80060ec <atan+0x324>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	f7fa f935 	bl	8000210 <__aeabi_dsub>
 8005fa6:	4b51      	ldr	r3, [pc, #324]	; (80060ec <atan+0x324>)
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	2200      	movs	r2, #0
 8005fae:	4620      	mov	r0, r4
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7fa f92f 	bl	8000214 <__adddf3>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4630      	mov	r0, r6
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f7fa fc09 	bl	80007d4 <__aeabi_ddiv>
 8005fc2:	f04f 0a01 	mov.w	sl, #1
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	460d      	mov	r5, r1
 8005fca:	e764      	b.n	8005e96 <atan+0xce>
 8005fcc:	4b49      	ldr	r3, [pc, #292]	; (80060f4 <atan+0x32c>)
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	da1d      	bge.n	800600e <atan+0x246>
 8005fd2:	ee10 0a10 	vmov	r0, s0
 8005fd6:	4b48      	ldr	r3, [pc, #288]	; (80060f8 <atan+0x330>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f7fa f918 	bl	8000210 <__aeabi_dsub>
 8005fe0:	4b45      	ldr	r3, [pc, #276]	; (80060f8 <atan+0x330>)
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa fac8 	bl	8000580 <__aeabi_dmul>
 8005ff0:	4b3e      	ldr	r3, [pc, #248]	; (80060ec <atan+0x324>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f7fa f90e 	bl	8000214 <__adddf3>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa fbe8 	bl	80007d4 <__aeabi_ddiv>
 8006004:	f04f 0a02 	mov.w	sl, #2
 8006008:	4604      	mov	r4, r0
 800600a:	460d      	mov	r5, r1
 800600c:	e743      	b.n	8005e96 <atan+0xce>
 800600e:	462b      	mov	r3, r5
 8006010:	ee10 2a10 	vmov	r2, s0
 8006014:	4939      	ldr	r1, [pc, #228]	; (80060fc <atan+0x334>)
 8006016:	2000      	movs	r0, #0
 8006018:	f7fa fbdc 	bl	80007d4 <__aeabi_ddiv>
 800601c:	f04f 0a03 	mov.w	sl, #3
 8006020:	4604      	mov	r4, r0
 8006022:	460d      	mov	r5, r1
 8006024:	e737      	b.n	8005e96 <atan+0xce>
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <atan+0x338>)
 8006028:	4e36      	ldr	r6, [pc, #216]	; (8006104 <atan+0x33c>)
 800602a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa f8ed 	bl	8000210 <__aeabi_dsub>
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	f7fa f8e9 	bl	8000210 <__aeabi_dsub>
 800603e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	e9d6 0100 	ldrd	r0, r1, [r6]
 800604a:	f7fa f8e1 	bl	8000210 <__aeabi_dsub>
 800604e:	f1bb 0f00 	cmp.w	fp, #0
 8006052:	4604      	mov	r4, r0
 8006054:	460d      	mov	r5, r1
 8006056:	f6bf aed6 	bge.w	8005e06 <atan+0x3e>
 800605a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800605e:	461d      	mov	r5, r3
 8006060:	e6d1      	b.n	8005e06 <atan+0x3e>
 8006062:	a51d      	add	r5, pc, #116	; (adr r5, 80060d8 <atan+0x310>)
 8006064:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006068:	e6cd      	b.n	8005e06 <atan+0x3e>
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	54442d18 	.word	0x54442d18
 8006074:	bff921fb 	.word	0xbff921fb
 8006078:	8800759c 	.word	0x8800759c
 800607c:	7e37e43c 	.word	0x7e37e43c
 8006080:	e322da11 	.word	0xe322da11
 8006084:	3f90ad3a 	.word	0x3f90ad3a
 8006088:	24760deb 	.word	0x24760deb
 800608c:	3fa97b4b 	.word	0x3fa97b4b
 8006090:	a0d03d51 	.word	0xa0d03d51
 8006094:	3fb10d66 	.word	0x3fb10d66
 8006098:	c54c206e 	.word	0xc54c206e
 800609c:	3fb745cd 	.word	0x3fb745cd
 80060a0:	920083ff 	.word	0x920083ff
 80060a4:	3fc24924 	.word	0x3fc24924
 80060a8:	5555550d 	.word	0x5555550d
 80060ac:	3fd55555 	.word	0x3fd55555
 80060b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80060b4:	bfa2b444 	.word	0xbfa2b444
 80060b8:	52defd9a 	.word	0x52defd9a
 80060bc:	3fadde2d 	.word	0x3fadde2d
 80060c0:	af749a6d 	.word	0xaf749a6d
 80060c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80060c8:	fe231671 	.word	0xfe231671
 80060cc:	3fbc71c6 	.word	0x3fbc71c6
 80060d0:	9998ebc4 	.word	0x9998ebc4
 80060d4:	3fc99999 	.word	0x3fc99999
 80060d8:	54442d18 	.word	0x54442d18
 80060dc:	3ff921fb 	.word	0x3ff921fb
 80060e0:	440fffff 	.word	0x440fffff
 80060e4:	7ff00000 	.word	0x7ff00000
 80060e8:	3fdbffff 	.word	0x3fdbffff
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	3ff2ffff 	.word	0x3ff2ffff
 80060f4:	40038000 	.word	0x40038000
 80060f8:	3ff80000 	.word	0x3ff80000
 80060fc:	bff00000 	.word	0xbff00000
 8006100:	08006520 	.word	0x08006520
 8006104:	08006500 	.word	0x08006500

08006108 <fabs>:
 8006108:	ec51 0b10 	vmov	r0, r1, d0
 800610c:	ee10 2a10 	vmov	r2, s0
 8006110:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006114:	ec43 2b10 	vmov	d0, r2, r3
 8006118:	4770      	bx	lr
 800611a:	0000      	movs	r0, r0
 800611c:	0000      	movs	r0, r0
	...

08006120 <scalbn>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	ec55 4b10 	vmov	r4, r5, d0
 8006126:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800612a:	4606      	mov	r6, r0
 800612c:	462b      	mov	r3, r5
 800612e:	b999      	cbnz	r1, 8006158 <scalbn+0x38>
 8006130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006134:	4323      	orrs	r3, r4
 8006136:	d03f      	beq.n	80061b8 <scalbn+0x98>
 8006138:	4b35      	ldr	r3, [pc, #212]	; (8006210 <scalbn+0xf0>)
 800613a:	4629      	mov	r1, r5
 800613c:	ee10 0a10 	vmov	r0, s0
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa fa1d 	bl	8000580 <__aeabi_dmul>
 8006146:	4b33      	ldr	r3, [pc, #204]	; (8006214 <scalbn+0xf4>)
 8006148:	429e      	cmp	r6, r3
 800614a:	4604      	mov	r4, r0
 800614c:	460d      	mov	r5, r1
 800614e:	da10      	bge.n	8006172 <scalbn+0x52>
 8006150:	a327      	add	r3, pc, #156	; (adr r3, 80061f0 <scalbn+0xd0>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	e01f      	b.n	8006198 <scalbn+0x78>
 8006158:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800615c:	4291      	cmp	r1, r2
 800615e:	d10c      	bne.n	800617a <scalbn+0x5a>
 8006160:	ee10 2a10 	vmov	r2, s0
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa f854 	bl	8000214 <__adddf3>
 800616c:	4604      	mov	r4, r0
 800616e:	460d      	mov	r5, r1
 8006170:	e022      	b.n	80061b8 <scalbn+0x98>
 8006172:	460b      	mov	r3, r1
 8006174:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006178:	3936      	subs	r1, #54	; 0x36
 800617a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800617e:	4296      	cmp	r6, r2
 8006180:	dd0d      	ble.n	800619e <scalbn+0x7e>
 8006182:	2d00      	cmp	r5, #0
 8006184:	a11c      	add	r1, pc, #112	; (adr r1, 80061f8 <scalbn+0xd8>)
 8006186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800618a:	da02      	bge.n	8006192 <scalbn+0x72>
 800618c:	a11c      	add	r1, pc, #112	; (adr r1, 8006200 <scalbn+0xe0>)
 800618e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006192:	a319      	add	r3, pc, #100	; (adr r3, 80061f8 <scalbn+0xd8>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7fa f9f2 	bl	8000580 <__aeabi_dmul>
 800619c:	e7e6      	b.n	800616c <scalbn+0x4c>
 800619e:	1872      	adds	r2, r6, r1
 80061a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061a4:	428a      	cmp	r2, r1
 80061a6:	dcec      	bgt.n	8006182 <scalbn+0x62>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	dd08      	ble.n	80061be <scalbn+0x9e>
 80061ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061b8:	ec45 4b10 	vmov	d0, r4, r5
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
 80061be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061c2:	da08      	bge.n	80061d6 <scalbn+0xb6>
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	a10a      	add	r1, pc, #40	; (adr r1, 80061f0 <scalbn+0xd0>)
 80061c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061cc:	dac0      	bge.n	8006150 <scalbn+0x30>
 80061ce:	a10e      	add	r1, pc, #56	; (adr r1, 8006208 <scalbn+0xe8>)
 80061d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061d4:	e7bc      	b.n	8006150 <scalbn+0x30>
 80061d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061da:	3236      	adds	r2, #54	; 0x36
 80061dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80061e4:	4620      	mov	r0, r4
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <scalbn+0xf8>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	e7d5      	b.n	8006198 <scalbn+0x78>
 80061ec:	f3af 8000 	nop.w
 80061f0:	c2f8f359 	.word	0xc2f8f359
 80061f4:	01a56e1f 	.word	0x01a56e1f
 80061f8:	8800759c 	.word	0x8800759c
 80061fc:	7e37e43c 	.word	0x7e37e43c
 8006200:	8800759c 	.word	0x8800759c
 8006204:	fe37e43c 	.word	0xfe37e43c
 8006208:	c2f8f359 	.word	0xc2f8f359
 800620c:	81a56e1f 	.word	0x81a56e1f
 8006210:	43500000 	.word	0x43500000
 8006214:	ffff3cb0 	.word	0xffff3cb0
 8006218:	3c900000 	.word	0x3c900000

0800621c <with_errno>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4604      	mov	r4, r0
 8006220:	460d      	mov	r5, r1
 8006222:	4616      	mov	r6, r2
 8006224:	f7fe ff32 	bl	800508c <__errno>
 8006228:	4629      	mov	r1, r5
 800622a:	6006      	str	r6, [r0, #0]
 800622c:	4620      	mov	r0, r4
 800622e:	bd70      	pop	{r4, r5, r6, pc}

08006230 <xflow>:
 8006230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006232:	4614      	mov	r4, r2
 8006234:	461d      	mov	r5, r3
 8006236:	b108      	cbz	r0, 800623c <xflow+0xc>
 8006238:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800623c:	e9cd 2300 	strd	r2, r3, [sp]
 8006240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7fa f99a 	bl	8000580 <__aeabi_dmul>
 800624c:	2222      	movs	r2, #34	; 0x22
 800624e:	b003      	add	sp, #12
 8006250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006254:	f7ff bfe2 	b.w	800621c <with_errno>

08006258 <__math_uflow>:
 8006258:	b508      	push	{r3, lr}
 800625a:	2200      	movs	r2, #0
 800625c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006260:	f7ff ffe6 	bl	8006230 <xflow>
 8006264:	ec41 0b10 	vmov	d0, r0, r1
 8006268:	bd08      	pop	{r3, pc}

0800626a <__math_oflow>:
 800626a:	b508      	push	{r3, lr}
 800626c:	2200      	movs	r2, #0
 800626e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006272:	f7ff ffdd 	bl	8006230 <xflow>
 8006276:	ec41 0b10 	vmov	d0, r0, r1
 800627a:	bd08      	pop	{r3, pc}

0800627c <__ieee754_sqrt>:
 800627c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	ec55 4b10 	vmov	r4, r5, d0
 8006284:	4e67      	ldr	r6, [pc, #412]	; (8006424 <__ieee754_sqrt+0x1a8>)
 8006286:	43ae      	bics	r6, r5
 8006288:	ee10 0a10 	vmov	r0, s0
 800628c:	ee10 2a10 	vmov	r2, s0
 8006290:	4629      	mov	r1, r5
 8006292:	462b      	mov	r3, r5
 8006294:	d10d      	bne.n	80062b2 <__ieee754_sqrt+0x36>
 8006296:	f7fa f973 	bl	8000580 <__aeabi_dmul>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4620      	mov	r0, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7f9 ffb7 	bl	8000214 <__adddf3>
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	ec45 4b10 	vmov	d0, r4, r5
 80062ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	dc0b      	bgt.n	80062ce <__ieee754_sqrt+0x52>
 80062b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80062ba:	4326      	orrs	r6, r4
 80062bc:	d0f5      	beq.n	80062aa <__ieee754_sqrt+0x2e>
 80062be:	b135      	cbz	r5, 80062ce <__ieee754_sqrt+0x52>
 80062c0:	f7f9 ffa6 	bl	8000210 <__aeabi_dsub>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	f7fa fa84 	bl	80007d4 <__aeabi_ddiv>
 80062cc:	e7eb      	b.n	80062a6 <__ieee754_sqrt+0x2a>
 80062ce:	1509      	asrs	r1, r1, #20
 80062d0:	f000 808d 	beq.w	80063ee <__ieee754_sqrt+0x172>
 80062d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80062dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e0:	07c9      	lsls	r1, r1, #31
 80062e2:	bf5c      	itt	pl
 80062e4:	005b      	lslpl	r3, r3, #1
 80062e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80062ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062ee:	bf58      	it	pl
 80062f0:	0052      	lslpl	r2, r2, #1
 80062f2:	2500      	movs	r5, #0
 80062f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80062f8:	1076      	asrs	r6, r6, #1
 80062fa:	0052      	lsls	r2, r2, #1
 80062fc:	f04f 0e16 	mov.w	lr, #22
 8006300:	46ac      	mov	ip, r5
 8006302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006306:	eb0c 0001 	add.w	r0, ip, r1
 800630a:	4298      	cmp	r0, r3
 800630c:	bfde      	ittt	le
 800630e:	1a1b      	suble	r3, r3, r0
 8006310:	eb00 0c01 	addle.w	ip, r0, r1
 8006314:	186d      	addle	r5, r5, r1
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	f1be 0e01 	subs.w	lr, lr, #1
 800631c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006320:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006324:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006328:	d1ed      	bne.n	8006306 <__ieee754_sqrt+0x8a>
 800632a:	4674      	mov	r4, lr
 800632c:	2720      	movs	r7, #32
 800632e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006332:	4563      	cmp	r3, ip
 8006334:	eb01 000e 	add.w	r0, r1, lr
 8006338:	dc02      	bgt.n	8006340 <__ieee754_sqrt+0xc4>
 800633a:	d113      	bne.n	8006364 <__ieee754_sqrt+0xe8>
 800633c:	4290      	cmp	r0, r2
 800633e:	d811      	bhi.n	8006364 <__ieee754_sqrt+0xe8>
 8006340:	2800      	cmp	r0, #0
 8006342:	eb00 0e01 	add.w	lr, r0, r1
 8006346:	da57      	bge.n	80063f8 <__ieee754_sqrt+0x17c>
 8006348:	f1be 0f00 	cmp.w	lr, #0
 800634c:	db54      	blt.n	80063f8 <__ieee754_sqrt+0x17c>
 800634e:	f10c 0801 	add.w	r8, ip, #1
 8006352:	eba3 030c 	sub.w	r3, r3, ip
 8006356:	4290      	cmp	r0, r2
 8006358:	bf88      	it	hi
 800635a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800635e:	1a12      	subs	r2, r2, r0
 8006360:	440c      	add	r4, r1
 8006362:	46c4      	mov	ip, r8
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	3f01      	subs	r7, #1
 8006368:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800636c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006370:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006374:	d1dd      	bne.n	8006332 <__ieee754_sqrt+0xb6>
 8006376:	4313      	orrs	r3, r2
 8006378:	d01b      	beq.n	80063b2 <__ieee754_sqrt+0x136>
 800637a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006428 <__ieee754_sqrt+0x1ac>
 800637e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800642c <__ieee754_sqrt+0x1b0>
 8006382:	e9da 0100 	ldrd	r0, r1, [sl]
 8006386:	e9db 2300 	ldrd	r2, r3, [fp]
 800638a:	f7f9 ff41 	bl	8000210 <__aeabi_dsub>
 800638e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7fa fb6d 	bl	8000a78 <__aeabi_dcmple>
 800639e:	b140      	cbz	r0, 80063b2 <__ieee754_sqrt+0x136>
 80063a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80063a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80063a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80063ac:	d126      	bne.n	80063fc <__ieee754_sqrt+0x180>
 80063ae:	3501      	adds	r5, #1
 80063b0:	463c      	mov	r4, r7
 80063b2:	106a      	asrs	r2, r5, #1
 80063b4:	0863      	lsrs	r3, r4, #1
 80063b6:	07e9      	lsls	r1, r5, #31
 80063b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80063bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80063c0:	bf48      	it	mi
 80063c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80063ca:	461c      	mov	r4, r3
 80063cc:	e76d      	b.n	80062aa <__ieee754_sqrt+0x2e>
 80063ce:	0ad3      	lsrs	r3, r2, #11
 80063d0:	3815      	subs	r0, #21
 80063d2:	0552      	lsls	r2, r2, #21
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0fa      	beq.n	80063ce <__ieee754_sqrt+0x152>
 80063d8:	02dc      	lsls	r4, r3, #11
 80063da:	d50a      	bpl.n	80063f2 <__ieee754_sqrt+0x176>
 80063dc:	f1c1 0420 	rsb	r4, r1, #32
 80063e0:	fa22 f404 	lsr.w	r4, r2, r4
 80063e4:	1e4d      	subs	r5, r1, #1
 80063e6:	408a      	lsls	r2, r1
 80063e8:	4323      	orrs	r3, r4
 80063ea:	1b41      	subs	r1, r0, r5
 80063ec:	e772      	b.n	80062d4 <__ieee754_sqrt+0x58>
 80063ee:	4608      	mov	r0, r1
 80063f0:	e7f0      	b.n	80063d4 <__ieee754_sqrt+0x158>
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	3101      	adds	r1, #1
 80063f6:	e7ef      	b.n	80063d8 <__ieee754_sqrt+0x15c>
 80063f8:	46e0      	mov	r8, ip
 80063fa:	e7aa      	b.n	8006352 <__ieee754_sqrt+0xd6>
 80063fc:	f7f9 ff0a 	bl	8000214 <__adddf3>
 8006400:	e9da 8900 	ldrd	r8, r9, [sl]
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	f7fa fb2a 	bl	8000a64 <__aeabi_dcmplt>
 8006410:	b120      	cbz	r0, 800641c <__ieee754_sqrt+0x1a0>
 8006412:	1ca0      	adds	r0, r4, #2
 8006414:	bf08      	it	eq
 8006416:	3501      	addeq	r5, #1
 8006418:	3402      	adds	r4, #2
 800641a:	e7ca      	b.n	80063b2 <__ieee754_sqrt+0x136>
 800641c:	3401      	adds	r4, #1
 800641e:	f024 0401 	bic.w	r4, r4, #1
 8006422:	e7c6      	b.n	80063b2 <__ieee754_sqrt+0x136>
 8006424:	7ff00000 	.word	0x7ff00000
 8006428:	200000c8 	.word	0x200000c8
 800642c:	200000d0 	.word	0x200000d0

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
