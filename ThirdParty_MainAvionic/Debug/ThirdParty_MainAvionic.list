
ThirdParty_MainAvionic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800e1a8  0800e1a8  0001e1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e778  0800e778  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800e778  0800e778  0001e778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e780  0800e780  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e780  0800e780  0001e780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800e788  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004648  20000258  0800e9e0  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200048a0  0800e9e0  000248a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c13d  00000000  00000000  000202cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb6  00000000  00000000  0003c408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b0  00000000  00000000  00041b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260a6  00000000  00000000  00042e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da0c  00000000  00000000  00068eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfc85  00000000  00000000  000868fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007964  00000000  00000000  00166580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016dee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000258 	.word	0x20000258
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e18c 	.word	0x0800e18c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000025c 	.word	0x2000025c
 800020c:	0800e18c 	.word	0x0800e18c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <TrimRead+0x1b8>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4868      	ldr	r0, [pc, #416]	; (800127c <TrimRead+0x1bc>)
 80010dc:	f004 f8c2 	bl	8005264 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <TrimRead+0x1c0>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2207      	movs	r2, #7
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <TrimRead+0x1bc>)
 80010f6:	f004 f8b5 	bl	8005264 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <TrimRead+0x1b8>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TrimRead+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <TrimRead+0x1c4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TrimRead+0x1b8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <TrimRead+0x1b8>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <TrimRead+0x1c8>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <TrimRead+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <TrimRead+0x1b8>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <TrimRead+0x1cc>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <TrimRead+0x1b8>)
 8001140:	79db      	ldrb	r3, [r3, #7]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <TrimRead+0x1b8>)
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <TrimRead+0x1d0>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <TrimRead+0x1b8>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TrimRead+0x1b8>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <TrimRead+0x1d4>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <TrimRead+0x1b8>)
 800116e:	7adb      	ldrb	r3, [r3, #11]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <TrimRead+0x1b8>)
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <TrimRead+0x1d8>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <TrimRead+0x1b8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <TrimRead+0x1b8>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <TrimRead+0x1dc>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <TrimRead+0x1b8>)
 800119a:	7bdb      	ldrb	r3, [r3, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <TrimRead+0x1b8>)
 80011a2:	7b9b      	ldrb	r3, [r3, #14]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <TrimRead+0x1e0>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <TrimRead+0x1b8>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <TrimRead+0x1b8>)
 80011b8:	7c1b      	ldrb	r3, [r3, #16]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <TrimRead+0x1e4>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <TrimRead+0x1b8>)
 80011c6:	7cdb      	ldrb	r3, [r3, #19]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <TrimRead+0x1b8>)
 80011ce:	7c9b      	ldrb	r3, [r3, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <TrimRead+0x1e8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <TrimRead+0x1b8>)
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <TrimRead+0x1b8>)
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TrimRead+0x1ec>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <TrimRead+0x1b8>)
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <TrimRead+0x1b8>)
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TrimRead+0x1f0>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <TrimRead+0x1b8>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <TrimRead+0x1f4>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <TrimRead+0x1b8>)
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <TrimRead+0x1b8>)
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <TrimRead+0x1f8>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <TrimRead+0x1b8>)
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <TrimRead+0x1fc>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <TrimRead+0x1b8>)
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <TrimRead+0x1b8>)
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	b21b      	sxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <TrimRead+0x200>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <TrimRead+0x1b8>)
 800124e:	7f9b      	ldrb	r3, [r3, #30]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TrimRead+0x1b8>)
 8001256:	7f5b      	ldrb	r3, [r3, #29]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <TrimRead+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TrimRead+0x1b8>)
 8001268:	7fdb      	ldrb	r3, [r3, #31]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <TrimRead+0x208>)
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000278 	.word	0x20000278
 800127c:	200005c0 	.word	0x200005c0
 8001280:	20000291 	.word	0x20000291
 8001284:	20000298 	.word	0x20000298
 8001288:	200002a0 	.word	0x200002a0
 800128c:	200002a2 	.word	0x200002a2
 8001290:	2000029a 	.word	0x2000029a
 8001294:	200002a4 	.word	0x200002a4
 8001298:	200002a6 	.word	0x200002a6
 800129c:	200002a8 	.word	0x200002a8
 80012a0:	200002aa 	.word	0x200002aa
 80012a4:	200002ac 	.word	0x200002ac
 80012a8:	200002ae 	.word	0x200002ae
 80012ac:	200002b0 	.word	0x200002b0
 80012b0:	200002b2 	.word	0x200002b2
 80012b4:	2000029c 	.word	0x2000029c
 80012b8:	200002b4 	.word	0x200002b4
 80012bc:	2000029e 	.word	0x2000029e
 80012c0:	200002b6 	.word	0x200002b6
 80012c4:	200002b8 	.word	0x200002b8
 80012c8:	200002ba 	.word	0x200002ba

080012cc <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ea:	f7ff fee9 	bl	80010c0 <TrimRead>

	uint8_t datatowrite = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012f6:	23b6      	movs	r3, #182	; 0xb6
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4858      	ldr	r0, [pc, #352]	; (8001474 <BME280_Config+0x1a8>)
 8001312:	f003 fead 	bl	8005070 <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x56>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a3      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f003 fa1a 	bl	800475c <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f2      	movs	r2, #242	; 0xf2
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <BME280_Config+0x1a8>)
 8001344:	f003 fe94 	bl	8005070 <HAL_I2C_Mem_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BME280_Config+0x88>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e08a      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f003 fa01 	bl	800475c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	22f2      	movs	r2, #242	; 0xf2
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	4840      	ldr	r0, [pc, #256]	; (8001474 <BME280_Config+0x1a8>)
 8001372:	f003 ff77 	bl	8005264 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	429a      	cmp	r2, r3
 800137c:	d002      	beq.n	8001384 <BME280_Config+0xb8>
	{
		return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e072      	b.n	800146a <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f5      	movs	r2, #245	; 0xf5
 80013b0:	21ec      	movs	r1, #236	; 0xec
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <BME280_Config+0x1a8>)
 80013b4:	f003 fe5c 	bl	8005070 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0xf8>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e052      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f003 f9c9 	bl	800475c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f5      	movs	r2, #245	; 0xf5
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <BME280_Config+0x1a8>)
 80013e2:	f003 ff3f 	bl	8005264 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x128>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e03a      	b.n	800146a <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ec      	movs	r1, #236	; 0xec
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <BME280_Config+0x1a8>)
 8001428:	f003 fe22 	bl	8005070 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x16c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e018      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f003 f98f 	bl	800475c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f4      	movs	r2, #244	; 0xf4
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <BME280_Config+0x1a8>)
 8001456:	f003 ff05 	bl	8005264 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0x19c>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e000      	b.n	800146a <BME280_Config+0x19e>
	}
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	200005c0 	.word	0x200005c0

08001478 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <BMEReadRaw+0x8c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	22d0      	movs	r2, #208	; 0xd0
 8001490:	21ec      	movs	r1, #236	; 0xec
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <BMEReadRaw+0x90>)
 8001494:	f003 fee6 	bl	8005264 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BMEReadRaw+0x8c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d12a      	bne.n	80014f6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2308      	movs	r3, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	463b      	mov	r3, r7
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	22f7      	movs	r2, #247	; 0xf7
 80014b2:	21ec      	movs	r1, #236	; 0xec
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <BMEReadRaw+0x90>)
 80014b6:	f003 fed5 	bl	8005264 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	0912      	lsrs	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BMEReadRaw+0x94>)
 80014ce:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	031a      	lsls	r2, r3, #12
 80014d4:	793b      	ldrb	r3, [r7, #4]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4313      	orrs	r3, r2
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	0912      	lsrs	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BMEReadRaw+0x98>)
 80014e4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <BMEReadRaw+0x9c>)
 80014f0:	6013      	str	r3, [r2, #0]

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <BMEReadRaw+0x82>
	}
	else return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000274 	.word	0x20000274
 8001508:	200005c0 	.word	0x200005c0
 800150c:	200002c0 	.word	0x200002c0
 8001510:	200002bc 	.word	0x200002bc
 8001514:	200002c4 	.word	0x200002c4

08001518 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <BME280_compensate_T_int32+0x78>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <BME280_compensate_T_int32+0x74>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <BME280_compensate_T_int32+0x7c>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
	return T;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000298 	.word	0x20000298
 8001590:	200002a0 	.word	0x200002a0
 8001594:	200002a2 	.word	0x200002a2
 8001598:	200002d0 	.word	0x200002d0

0800159c <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b0ca      	sub	sp, #296	; 0x128
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <BME280_compensate_P_int64+0x2cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	461c      	mov	r4, r3
 80015b0:	4615      	mov	r5, r2
 80015b2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015b6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015ba:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015dc:	fba3 8903 	umull	r8, r9, r3, r3
 80015e0:	eb02 0309 	add.w	r3, r2, r9
 80015e4:	4699      	mov	r9, r3
 80015e6:	4ba1      	ldr	r3, [pc, #644]	; (800186c <BME280_compensate_P_int64+0x2d0>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015fc:	4603      	mov	r3, r0
 80015fe:	fb03 f209 	mul.w	r2, r3, r9
 8001602:	460b      	mov	r3, r1
 8001604:	fb08 f303 	mul.w	r3, r8, r3
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	fba8 1202 	umull	r1, r2, r8, r2
 8001610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800161a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001624:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001628:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <BME280_compensate_P_int64+0x2d4>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800163e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800164a:	462a      	mov	r2, r5
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001654:	4621      	mov	r1, r4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001660:	4621      	mov	r1, r4
 8001662:	fba3 1301 	umull	r1, r3, r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	460b      	mov	r3, r1
 800166c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001686:	462b      	mov	r3, r5
 8001688:	0459      	lsls	r1, r3, #17
 800168a:	4623      	mov	r3, r4
 800168c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001690:	4623      	mov	r3, r4
 8001692:	0458      	lsls	r0, r3, #17
 8001694:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001698:	1814      	adds	r4, r2, r0
 800169a:	643c      	str	r4, [r7, #64]	; 0x40
 800169c:	414b      	adcs	r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <BME280_compensate_P_int64+0x2d8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	2000      	movs	r0, #0
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	1814      	adds	r4, r2, r0
 80016d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80016d2:	414b      	adcs	r3, r1
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e6:	fb03 f102 	mul.w	r1, r3, r2
 80016ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	18ca      	adds	r2, r1, r3
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001704:	460b      	mov	r3, r1
 8001706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <BME280_compensate_P_int64+0x2dc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	462b      	mov	r3, r5
 800172c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001730:	4642      	mov	r2, r8
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	464b      	mov	r3, r9
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	4641      	mov	r1, r8
 8001744:	fba2 1201 	umull	r1, r2, r2, r1
 8001748:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800174c:	460a      	mov	r2, r1
 800174e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001752:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001768:	4623      	mov	r3, r4
 800176a:	0a18      	lsrs	r0, r3, #8
 800176c:	462b      	mov	r3, r5
 800176e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001772:	462b      	mov	r3, r5
 8001774:	1219      	asrs	r1, r3, #8
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <BME280_compensate_P_int64+0x2e0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001784:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001790:	464a      	mov	r2, r9
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179a:	4644      	mov	r4, r8
 800179c:	fb04 f303 	mul.w	r3, r4, r3
 80017a0:	441a      	add	r2, r3
 80017a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a6:	4644      	mov	r4, r8
 80017a8:	fba3 4304 	umull	r4, r3, r3, r4
 80017ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b0:	4623      	mov	r3, r4
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017cc:	464c      	mov	r4, r9
 80017ce:	0323      	lsls	r3, r4, #12
 80017d0:	4644      	mov	r4, r8
 80017d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017d6:	4644      	mov	r4, r8
 80017d8:	0322      	lsls	r2, r4, #12
 80017da:	1884      	adds	r4, r0, r2
 80017dc:	633c      	str	r4, [r7, #48]	; 0x30
 80017de:	eb41 0303 	adc.w	r3, r1, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BME280_compensate_P_int64+0x2e4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800180c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001810:	462b      	mov	r3, r5
 8001812:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001816:	4642      	mov	r2, r8
 8001818:	fb02 f203 	mul.w	r2, r2, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	4641      	mov	r1, r8
 800182a:	fba2 1201 	umull	r1, r2, r2, r1
 800182e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001832:	460a      	mov	r2, r1
 8001834:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001838:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800184e:	4629      	mov	r1, r5
 8001850:	104a      	asrs	r2, r1, #1
 8001852:	4629      	mov	r1, r5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800185a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185e:	4313      	orrs	r3, r2
 8001860:	d110      	bne.n	8001884 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001862:	2300      	movs	r3, #0
 8001864:	e154      	b.n	8001b10 <BME280_compensate_P_int64+0x574>
 8001866:	bf00      	nop
 8001868:	200002d0 	.word	0x200002d0
 800186c:	200002ac 	.word	0x200002ac
 8001870:	200002aa 	.word	0x200002aa
 8001874:	200002a8 	.word	0x200002a8
 8001878:	200002a6 	.word	0x200002a6
 800187c:	200002a4 	.word	0x200002a4
 8001880:	2000029a 	.word	0x2000029a
	}
	p = 1048576-adc_P;
 8001884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001888:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001892:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a89      	subs	r1, r1, r2
 80018ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80018bc:	4629      	mov	r1, r5
 80018be:	eb61 0303 	sbc.w	r3, r1, r3
 80018c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018c8:	4622      	mov	r2, r4
 80018ca:	462b      	mov	r3, r5
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6239      	str	r1, [r7, #32]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d8:	4621      	mov	r1, r4
 80018da:	1851      	adds	r1, r2, r1
 80018dc:	61b9      	str	r1, [r7, #24]
 80018de:	4629      	mov	r1, r5
 80018e0:	414b      	adcs	r3, r1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1889      	adds	r1, r1, r2
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4649      	mov	r1, r9
 8001906:	eb43 0101 	adc.w	r1, r3, r1
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	008b      	lsls	r3, r1, #2
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001922:	4641      	mov	r1, r8
 8001924:	008a      	lsls	r2, r1, #2
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	460b      	mov	r3, r1
 8001934:	462a      	mov	r2, r5
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	4603      	mov	r3, r0
 800195c:	4622      	mov	r2, r4
 800195e:	189b      	adds	r3, r3, r2
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
 8001962:	462b      	mov	r3, r5
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001970:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001974:	f7ff f9a0 	bl	8000cb8 <__aeabi_ldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <BME280_compensate_P_int64+0x580>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	17da      	asrs	r2, r3, #31
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
 800198c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0b50      	lsrs	r0, r2, #13
 80019dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e0:	1359      	asrs	r1, r3, #13
 80019e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e6:	462b      	mov	r3, r5
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	4622      	mov	r2, r4
 80019f6:	fba2 1200 	umull	r1, r2, r2, r0
 80019fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	0e4a      	lsrs	r2, r1, #25
 8001a1e:	4629      	mov	r1, r5
 8001a20:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a24:	4629      	mov	r1, r5
 8001a26:	164b      	asrs	r3, r1, #25
 8001a28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <BME280_compensate_P_int64+0x584>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	667a      	str	r2, [r7, #100]	; 0x64
 8001a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a7e:	4621      	mov	r1, r4
 8001a80:	0cca      	lsrs	r2, r1, #19
 8001a82:	4629      	mov	r1, r5
 8001a84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a88:	4629      	mov	r1, r5
 8001a8a:	14cb      	asrs	r3, r1, #19
 8001a8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a90:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a98:	1884      	adds	r4, r0, r2
 8001a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a9c:	eb41 0303 	adc.w	r3, r1, r3
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1889      	adds	r1, r1, r2
 8001aae:	6539      	str	r1, [r7, #80]	; 0x50
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0101 	adc.w	r1, r3, r1
 8001ab6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	0a18      	lsrs	r0, r3, #8
 8001ac8:	462b      	mov	r3, r5
 8001aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ace:	462b      	mov	r3, r5
 8001ad0:	1219      	asrs	r1, r3, #8
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <BME280_compensate_P_int64+0x588>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	17da      	asrs	r2, r3, #31
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aec:	464c      	mov	r4, r9
 8001aee:	0123      	lsls	r3, r4, #4
 8001af0:	4644      	mov	r4, r8
 8001af2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001af6:	4644      	mov	r4, r8
 8001af8:	0122      	lsls	r2, r4, #4
 8001afa:	1884      	adds	r4, r0, r2
 8001afc:	603c      	str	r4, [r7, #0]
 8001afe:	eb41 0303 	adc.w	r3, r1, r3
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	200002b2 	.word	0x200002b2
 8001b20:	200002b0 	.word	0x200002b0
 8001b24:	200002ae 	.word	0x200002ae

08001b28 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <bme280_compensate_H_int32+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	039a      	lsls	r2, r3, #14
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <bme280_compensate_H_int32+0xc0>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <bme280_compensate_H_int32+0xc4>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b5c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <bme280_compensate_H_int32+0xc8>)
 8001b60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b64:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b6c:	1292      	asrs	r2, r2, #10
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <bme280_compensate_H_int32+0xcc>)
 8001b70:	8809      	ldrh	r1, [r1, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	fb00 f101 	mul.w	r1, r0, r1
 8001b7a:	12c9      	asrs	r1, r1, #11
 8001b7c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b84:	1292      	asrs	r2, r2, #10
 8001b86:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <bme280_compensate_H_int32+0xd0>)
 8001b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	13db      	asrs	r3, r3, #15
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	13d2      	asrs	r2, r2, #15
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <bme280_compensate_H_int32+0xd4>)
 8001bb0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bb6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bcc:	bfa8      	it	ge
 8001bce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	131b      	asrs	r3, r3, #12
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200002d0 	.word	0x200002d0
 8001be8:	200002b6 	.word	0x200002b6
 8001bec:	200002b8 	.word	0x200002b8
 8001bf0:	200002ba 	.word	0x200002ba
 8001bf4:	2000029e 	.word	0x2000029e
 8001bf8:	200002b4 	.word	0x200002b4
 8001bfc:	2000029c 	.word	0x2000029c

08001c00 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c04:	f7ff fc38 	bl	8001478 <BMEReadRaw>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BME280_Pressure+0x78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c16:	d104      	bne.n	8001c22 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e01b      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BME280_Pressure+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcb8 	bl	800159c <BME280_compensate_P_int64>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc80 	bl	8000534 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <BME280_Pressure+0x80>)
 8001c3a:	f7fe fe1f 	bl	800087c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e003      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc8a 	bl	8000578 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002c0 	.word	0x200002c0
 8001c7c:	2000076c 	.word	0x2000076c
 8001c80:	40700000 	.word	0x40700000

08001c84 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c88:	f7ff fbf6 	bl	8001478 <BMEReadRaw>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BME280_Humidity+0x78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d104      	bne.n	8001ca6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <BME280_Humidity+0x7c>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <BME280_Humidity+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <bme280_compensate_H_int32>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc3e 	bl	8000534 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <BME280_Humidity+0x80>)
 8001cbe:	f7fe fddd 	bl	800087c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e003      	b.n	8001cde <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BME280_Humidity+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc48 	bl	8000578 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002c4 	.word	0x200002c4
 8001d00:	20000770 	.word	0x20000770
 8001d04:	40900000 	.word	0x40900000

08001d08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001d0c:	f7ff fbb4 	bl	8001478 <BMEReadRaw>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BME280_Temperature+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1e:	d104      	bne.n	8001d2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01b      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BME280_Temperature+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fbf2 	bl	8001518 <BME280_compensate_T_int32>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <BME280_Temperature+0x80>)
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e003      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002bc 	.word	0x200002bc
 8001d84:	20000768 	.word	0x20000768
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001d94:	f7ff ff34 	bl	8001c00 <BME280_Pressure>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <BME280_Altitude+0xa8>)
 8001da8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e3c <BME280_Altitude+0xac>
 8001db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <BME280_Altitude+0xb0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e28 <BME280_Altitude+0x98>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f00b f82f 	bl	800ce44 <pow>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	4915      	ldr	r1, [pc, #84]	; (8001e44 <BME280_Altitude+0xb4>)
 8001df0:	f7fe fa62 	bl	80002b8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8001e30 <BME280_Altitude+0xa0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff03 	bl	8000c18 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e16:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
}
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ccd745e4 	.word	0xccd745e4
 8001e2c:	3fc85b95 	.word	0x3fc85b95
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40e5a540 	.word	0x40e5a540
 8001e38:	200002cc 	.word	0x200002cc
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	200002c8 	.word	0x200002c8

08001e4c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001e56:	f7ff ff9b 	bl	8001d90 <BME280_Altitude>
 8001e5a:	ee10 3a10 	vmov	r3, s0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbc1 	bl	8000628 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <BME280_Kalman_Alt+0x140>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fa02 	bl	80002bc <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fba5 	bl	8000628 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9d7 	bl	80002bc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4920      	ldr	r1, [pc, #128]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fb80 	bl	8000628 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <BME280_Kalman_Alt+0x14c>)
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb70 	bl	8000628 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <BME280_Kalman_Alt+0x150>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002d8 	.word	0x200002d8
 8001f88:	0800e2c0 	.word	0x0800e2c0
 8001f8c:	0800e2c8 	.word	0x0800e2c8
 8001f90:	200002e0 	.word	0x200002e0
 8001f94:	200002e8 	.word	0x200002e8
 8001f98:	3ff00000 	.word	0x3ff00000
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001faa:	f7ff fe29 	bl	8001c00 <BME280_Pressure>
 8001fae:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb27 	bl	8000628 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <BME280_Kalman_Press+0x12c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fc39 	bl	800087c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f7fe f944 	bl	80002b8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <BME280_Kalman_Press+0x130>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe f934 	bl	80002bc <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fadd 	bl	8000628 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <BME280_Kalman_Press+0x138>)
 8002078:	f7fe f91e 	bl	80002b8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe facd 	bl	8000628 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <BME280_Kalman_Press+0x13c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f90e 	bl	80002bc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <BME280_Kalman_Press+0x124>)
 80020a6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BME280_Kalman_Press+0x134>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002f0 	.word	0x200002f0
 80020c8:	0800e2d0 	.word	0x0800e2d0
 80020cc:	0800e2d8 	.word	0x0800e2d8
 80020d0:	200002f8 	.word	0x200002f8
 80020d4:	20000010 	.word	0x20000010
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	20000018 	.word	0x20000018

080020e0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80020ea:	f7ff fdcb 	bl	8001c84 <BME280_Humidity>
 80020ee:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <BME280_Kalman_Hum+0x128>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <BME280_Kalman_Hum+0x124>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa87 	bl	8000628 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <BME280_Kalman_Hum+0x12c>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe fb99 	bl	800087c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <BME280_Kalman_Hum+0x130>)
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa62 	bl	8000628 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	f7fe f8a4 	bl	80002b8 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BME280_Kalman_Hum+0x130>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa53 	bl	8000628 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	491e      	ldr	r1, [pc, #120]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BME280_Kalman_Hum+0x130>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <BME280_Kalman_Hum+0x138>)
 80021b8:	f7fe f87e 	bl	80002b8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <BME280_Kalman_Hum+0x13c>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BME280_Kalman_Hum+0x134>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	20000300 	.word	0x20000300
 8002208:	0800e2e0 	.word	0x0800e2e0
 800220c:	0800e2e8 	.word	0x0800e2e8
 8002210:	20000308 	.word	0x20000308
 8002214:	20000020 	.word	0x20000020
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	20000028 	.word	0x20000028

08002220 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800222a:	f7ff fd6d 	bl	8001d08 <BME280_Temperature>
 800222e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9de 	bl	8000628 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <BME280_Kalman_Temp+0x12c>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f81f 	bl	80002bc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe faf9 	bl	800087c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <BME280_Kalman_Temp+0x130>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe f804 	bl	80002b8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9b3 	bl	8000628 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022da:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BME280_Kalman_Temp+0x128>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f99d 	bl	8000628 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BME280_Kalman_Temp+0x138>)
 80022f8:	f7fd ffde 	bl	80002b8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <BME280_Kalman_Temp+0x13c>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	ec43 2b17 	vmov	d7, r2, r3
}
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	20000310 	.word	0x20000310
 8002348:	0800e2f0 	.word	0x0800e2f0
 800234c:	0800e2f8 	.word	0x0800e2f8
 8002350:	20000318 	.word	0x20000318
 8002354:	20000030 	.word	0x20000030
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	20000038 	.word	0x20000038

08002360 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <vApplicationGetIdleTaskMemory+0x2c>)
 8002370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <vApplicationGetIdleTaskMemory+0x30>)
 8002376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000320 	.word	0x20000320
 8002390:	200003c0 	.word	0x200003c0

08002394 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3371      	adds	r3, #113	; 0x71
 80023ac:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80023ae:	e002      	b.n	80023b6 <prv_parse_number+0x22>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <prv_parse_number+0x30>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d0f5      	beq.n	80023b0 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b2d      	cmp	r3, #45	; 0x2d
 80023ca:	d104      	bne.n	80023d6 <prv_parse_number+0x42>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <prv_parse_number+0x44>
 80023d6:	2300      	movs	r3, #0
 80023d8:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80023da:	e00d      	b.n	80023f8 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	461a      	mov	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3b30      	subs	r3, #48	; 0x30
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <prv_parse_number+0x7a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b2f      	cmp	r3, #47	; 0x2f
 8002404:	d903      	bls.n	800240e <prv_parse_number+0x7a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b39      	cmp	r3, #57	; 0x39
 800240c:	d9e6      	bls.n	80023dc <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <prv_parse_number+0x86>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	425b      	negs	r3, r3
 8002418:	e000      	b.n	800241c <prv_parse_number+0x88>
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3371      	adds	r3, #113	; 0x71
 800243c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800243e:	e002      	b.n	8002446 <prv_parse_float_number+0x1e>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <prv_parse_float_number+0x2c>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b20      	cmp	r3, #32
 8002452:	d0f5      	beq.n	8002440 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002454:	2100      	movs	r1, #0
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f008 fc86 	bl	800ad68 <strtod>
 800245c:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002464:	ec43 2b17 	vmov	d7, r2, r3
}
 8002468:	eeb0 0a47 	vmov.f32	s0, s14
 800246c:	eef0 0a67 	vmov.f32	s1, s15
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002480:	2100      	movs	r1, #0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffd0 	bl	8002428 <prv_parse_float_number>
 8002488:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800248c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002490:	f7fe fb7a 	bl	8000b88 <__aeabi_d2iz>
 8002494:	4603      	mov	r3, r0
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <prv_parse_lat_long+0x94>)
 8002498:	fb82 1203 	smull	r1, r2, r2, r3
 800249c:	1152      	asrs	r2, r2, #5
 800249e:	17db      	asrs	r3, r3, #31
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f856 	bl	8000554 <__aeabi_i2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <prv_parse_lat_long+0x98>)
 80024b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ba:	f7fe f8b5 	bl	8000628 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c6:	f7fd fef7 	bl	80002b8 <__aeabi_dsub>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <prv_parse_lat_long+0x9c>)
 80024d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024dc:	f7fe f9ce 	bl	800087c <__aeabi_ddiv>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024e8:	f7fd fee8 	bl	80002bc <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80024f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80024fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002500:	eef0 0a67 	vmov.f32	s1, s15
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	51eb851f 	.word	0x51eb851f
 8002510:	40590000 	.word	0x40590000
 8002514:	404e0000 	.word	0x404e0000

08002518 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002528:	2900      	cmp	r1, #0
 800252a:	d169      	bne.n	8002600 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3371      	adds	r3, #113	; 0x71
 8002530:	2206      	movs	r2, #6
 8002532:	49ba      	ldr	r1, [pc, #744]	; (800281c <prv_parse_term+0x304>)
 8002534:	4618      	mov	r0, r3
 8002536:	f008 fd30 	bl	800af9a <strncmp>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <prv_parse_term+0x3c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3371      	adds	r3, #113	; 0x71
 8002544:	2206      	movs	r2, #6
 8002546:	49b6      	ldr	r1, [pc, #728]	; (8002820 <prv_parse_term+0x308>)
 8002548:	4618      	mov	r0, r3
 800254a:	f008 fd26 	bl	800af9a <strncmp>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800255c:	e04e      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3371      	adds	r3, #113	; 0x71
 8002562:	2206      	movs	r2, #6
 8002564:	49af      	ldr	r1, [pc, #700]	; (8002824 <prv_parse_term+0x30c>)
 8002566:	4618      	mov	r0, r3
 8002568:	f008 fd17 	bl	800af9a <strncmp>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <prv_parse_term+0x6e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3371      	adds	r3, #113	; 0x71
 8002576:	2206      	movs	r2, #6
 8002578:	49ab      	ldr	r1, [pc, #684]	; (8002828 <prv_parse_term+0x310>)
 800257a:	4618      	mov	r0, r3
 800257c:	f008 fd0d 	bl	800af9a <strncmp>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800258e:	e035      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3371      	adds	r3, #113	; 0x71
 8002594:	2206      	movs	r2, #6
 8002596:	49a5      	ldr	r1, [pc, #660]	; (800282c <prv_parse_term+0x314>)
 8002598:	4618      	mov	r0, r3
 800259a:	f008 fcfe 	bl	800af9a <strncmp>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <prv_parse_term+0xa0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3371      	adds	r3, #113	; 0x71
 80025a8:	2206      	movs	r2, #6
 80025aa:	49a1      	ldr	r1, [pc, #644]	; (8002830 <prv_parse_term+0x318>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f008 fcf4 	bl	800af9a <strncmp>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2203      	movs	r2, #3
 80025bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025c0:	e01c      	b.n	80025fc <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3371      	adds	r3, #113	; 0x71
 80025c6:	2206      	movs	r2, #6
 80025c8:	499a      	ldr	r1, [pc, #616]	; (8002834 <prv_parse_term+0x31c>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f008 fce5 	bl	800af9a <strncmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <prv_parse_term+0xd2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3371      	adds	r3, #113	; 0x71
 80025da:	2206      	movs	r2, #6
 80025dc:	4996      	ldr	r1, [pc, #600]	; (8002838 <prv_parse_term+0x320>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f008 fcdb 	bl	800af9a <strncmp>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2204      	movs	r2, #4
 80025ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025f2:	e003      	b.n	80025fc <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e231      	b.n	8002a64 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002606:	2900      	cmp	r1, #0
 8002608:	f000 822b 	beq.w	8002a62 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002612:	2901      	cmp	r1, #1
 8002614:	f040 80c9 	bne.w	80027aa <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800261e:	3b01      	subs	r3, #1
 8002620:	2b0a      	cmp	r3, #10
 8002622:	f200 8213 	bhi.w	8002a4c <prv_parse_term+0x534>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <prv_parse_term+0x114>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002659 	.word	0x08002659
 8002630:	080026d3 	.word	0x080026d3
 8002634:	080026e9 	.word	0x080026e9
 8002638:	08002713 	.word	0x08002713
 800263c:	08002729 	.word	0x08002729
 8002640:	08002753 	.word	0x08002753
 8002644:	08002767 	.word	0x08002767
 8002648:	08002a4d 	.word	0x08002a4d
 800264c:	0800277b 	.word	0x0800277b
 8002650:	08002a4d 	.word	0x08002a4d
 8002654:	08002793 	.word	0x08002793
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800265e:	3b30      	subs	r3, #48	; 0x30
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002672:	4413      	add	r3, r2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3b30      	subs	r3, #48	; 0x30
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002686:	3b30      	subs	r3, #48	; 0x30
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800269a:	4413      	add	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b30      	subs	r3, #48	; 0x30
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80026ae:	3b30      	subs	r3, #48	; 0x30
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80026c2:	4413      	add	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b30      	subs	r3, #48	; 0x30
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80026d0:	e1c7      	b.n	8002a62 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fed0 	bl	8002478 <prv_parse_lat_long>
 80026d8:	eeb0 7a40 	vmov.f32	s14, s0
 80026dc:	eef0 7a60 	vmov.f32	s15, s1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80026e6:	e1bc      	b.n	8002a62 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026ee:	2b53      	cmp	r3, #83	; 0x53
 80026f0:	d005      	beq.n	80026fe <prv_parse_term+0x1e6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026f8:	2b73      	cmp	r3, #115	; 0x73
 80026fa:	f040 81a9 	bne.w	8002a50 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002704:	4690      	mov	r8, r2
 8002706:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8002710:	e19e      	b.n	8002a50 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff feb0 	bl	8002478 <prv_parse_lat_long>
 8002718:	eeb0 7a40 	vmov.f32	s14, s0
 800271c:	eef0 7a60 	vmov.f32	s15, s1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002726:	e19c      	b.n	8002a62 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800272e:	2b57      	cmp	r3, #87	; 0x57
 8002730:	d005      	beq.n	800273e <prv_parse_term+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002738:	2b77      	cmp	r3, #119	; 0x77
 800273a:	f040 818b 	bne.w	8002a54 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002744:	4614      	mov	r4, r2
 8002746:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002750:	e180      	b.n	8002a54 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002752:	2100      	movs	r1, #0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fe1d 	bl	8002394 <prv_parse_number>
 800275a:	4603      	mov	r3, r0
 800275c:	b2da      	uxtb	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002764:	e17d      	b.n	8002a62 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fe13 	bl	8002394 <prv_parse_number>
 800276e:	4603      	mov	r3, r0
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002778:	e173      	b.n	8002a62 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fe53 	bl	8002428 <prv_parse_float_number>
 8002782:	eeb0 7a40 	vmov.f32	s14, s0
 8002786:	eef0 7a60 	vmov.f32	s15, s1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002790:	e167      	b.n	8002a62 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002792:	2100      	movs	r1, #0
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fe47 	bl	8002428 <prv_parse_float_number>
 800279a:	eeb0 7a40 	vmov.f32	s14, s0
 800279e:	eef0 7a60 	vmov.f32	s15, s1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80027a8:	e15b      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80027b0:	2902      	cmp	r1, #2
 80027b2:	f040 8083 	bne.w	80028bc <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80027bc:	3b02      	subs	r3, #2
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d860      	bhi.n	8002884 <prv_parse_term+0x36c>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <prv_parse_term+0x2b0>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002885 	.word	0x08002885
 80027d0:	08002885 	.word	0x08002885
 80027d4:	08002885 	.word	0x08002885
 80027d8:	08002885 	.word	0x08002885
 80027dc:	08002885 	.word	0x08002885
 80027e0:	08002885 	.word	0x08002885
 80027e4:	08002885 	.word	0x08002885
 80027e8:	08002885 	.word	0x08002885
 80027ec:	08002885 	.word	0x08002885
 80027f0:	08002885 	.word	0x08002885
 80027f4:	08002885 	.word	0x08002885
 80027f8:	08002885 	.word	0x08002885
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	08002855 	.word	0x08002855
 8002804:	0800286d 	.word	0x0800286d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fdc2 	bl	8002394 <prv_parse_number>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 800281a:	e122      	b.n	8002a62 <prv_parse_term+0x54a>
 800281c:	0800e1a8 	.word	0x0800e1a8
 8002820:	0800e1b0 	.word	0x0800e1b0
 8002824:	0800e1b8 	.word	0x0800e1b8
 8002828:	0800e1c0 	.word	0x0800e1c0
 800282c:	0800e1c8 	.word	0x0800e1c8
 8002830:	0800e1d0 	.word	0x0800e1d0
 8002834:	0800e1d8 	.word	0x0800e1d8
 8002838:	0800e1e0 	.word	0x0800e1e0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 800283c:	2100      	movs	r1, #0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fdf2 	bl	8002428 <prv_parse_float_number>
 8002844:	eeb0 7a40 	vmov.f32	s14, s0
 8002848:	eef0 7a60 	vmov.f32	s15, s1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002852:	e106      	b.n	8002a62 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002854:	2100      	movs	r1, #0
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fde6 	bl	8002428 <prv_parse_float_number>
 800285c:	eeb0 7a40 	vmov.f32	s14, s0
 8002860:	eef0 7a60 	vmov.f32	s15, s1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800286a:	e0fa      	b.n	8002a62 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800286c:	2100      	movs	r1, #0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fdda 	bl	8002428 <prv_parse_float_number>
 8002874:	eeb0 7a40 	vmov.f32	s14, s0
 8002878:	eef0 7a60 	vmov.f32	s15, s1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002882:	e0ee      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800288a:	2b02      	cmp	r3, #2
 800288c:	f240 80e4 	bls.w	8002a58 <prv_parse_term+0x540>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002896:	2b0e      	cmp	r3, #14
 8002898:	f200 80de 	bhi.w	8002a58 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800289c:	2100      	movs	r1, #0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fd78 	bl	8002394 <prv_parse_number>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028ac:	3b03      	subs	r3, #3
 80028ae:	b2d1      	uxtb	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80028ba:	e0cd      	b.n	8002a58 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028c2:	2903      	cmp	r1, #3
 80028c4:	d11b      	bne.n	80028fe <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d002      	beq.n	80028d6 <prv_parse_term+0x3be>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d00a      	beq.n	80028ea <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80028d4:	e0c5      	b.n	8002a62 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80028d6:	2100      	movs	r1, #0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fd5b 	bl	8002394 <prv_parse_number>
 80028de:	4603      	mov	r3, r0
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80028e8:	e0bb      	b.n	8002a62 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80028ea:	2100      	movs	r1, #0
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fd51 	bl	8002394 <prv_parse_number>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80028fc:	e0b1      	b.n	8002a62 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002904:	2904      	cmp	r1, #4
 8002906:	f040 80ac 	bne.w	8002a62 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002910:	3902      	subs	r1, #2
 8002912:	2909      	cmp	r1, #9
 8002914:	f200 80a2 	bhi.w	8002a5c <prv_parse_term+0x544>
 8002918:	a001      	add	r0, pc, #4	; (adr r0, 8002920 <prv_parse_term+0x408>)
 800291a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002949 	.word	0x08002949
 8002924:	08002a5d 	.word	0x08002a5d
 8002928:	08002a5d 	.word	0x08002a5d
 800292c:	08002a5d 	.word	0x08002a5d
 8002930:	08002a5d 	.word	0x08002a5d
 8002934:	08002963 	.word	0x08002963
 8002938:	0800297b 	.word	0x0800297b
 800293c:	08002993 	.word	0x08002993
 8002940:	08002a0d 	.word	0x08002a0d
 8002944:	08002a25 	.word	0x08002a25
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800294e:	2b41      	cmp	r3, #65	; 0x41
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002960:	e07f      	b.n	8002a62 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002962:	2100      	movs	r1, #0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fd5f 	bl	8002428 <prv_parse_float_number>
 800296a:	eeb0 7a40 	vmov.f32	s14, s0
 800296e:	eef0 7a60 	vmov.f32	s15, s1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002978:	e073      	b.n	8002a62 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fd53 	bl	8002428 <prv_parse_float_number>
 8002982:	eeb0 7a40 	vmov.f32	s14, s0
 8002986:	eef0 7a60 	vmov.f32	s15, s1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002990:	e067      	b.n	8002a62 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002998:	3b30      	subs	r3, #48	; 0x30
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80029ac:	4413      	add	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3b30      	subs	r3, #48	; 0x30
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80029c0:	3b30      	subs	r3, #48	; 0x30
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029d4:	4413      	add	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3b30      	subs	r3, #48	; 0x30
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80029e8:	3b30      	subs	r3, #48	; 0x30
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80029fc:	4413      	add	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3b30      	subs	r3, #48	; 0x30
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002a0a:	e02a      	b.n	8002a62 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fd0a 	bl	8002428 <prv_parse_float_number>
 8002a14:	eeb0 7a40 	vmov.f32	s14, s0
 8002a18:	eef0 7a60 	vmov.f32	s15, s1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002a22:	e01e      	b.n	8002a62 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a2a:	2957      	cmp	r1, #87	; 0x57
 8002a2c:	d004      	beq.n	8002a38 <prv_parse_term+0x520>
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a34:	2977      	cmp	r1, #119	; 0x77
 8002a36:	d113      	bne.n	8002a60 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002a4a:	e009      	b.n	8002a60 <prv_parse_term+0x548>
                break;
 8002a4c:	bf00      	nop
 8002a4e:	e008      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a50:	bf00      	nop
 8002a52:	e006      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a54:	bf00      	nop
 8002a56:	e004      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <prv_parse_term+0x54a>
            default:
                break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <prv_parse_term+0x54a>
                break;
 8002a60:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a6e:	bf00      	nop

08002a70 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a7e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a80:	d90d      	bls.n	8002a9e <prv_check_crc+0x2e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a88:	2b39      	cmp	r3, #57	; 0x39
 8002a8a:	d808      	bhi.n	8002a9e <prv_check_crc+0x2e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a92:	3b30      	subs	r3, #48	; 0x30
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	b25a      	sxtb	r2, r3
 8002a9c:	e026      	b.n	8002aec <prv_check_crc+0x7c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aa4:	2b60      	cmp	r3, #96	; 0x60
 8002aa6:	d90d      	bls.n	8002ac4 <prv_check_crc+0x54>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aae:	2b7a      	cmp	r3, #122	; 0x7a
 8002ab0:	d808      	bhi.n	8002ac4 <prv_check_crc+0x54>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ab8:	3b57      	subs	r3, #87	; 0x57
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	b25a      	sxtb	r2, r3
 8002ac2:	e013      	b.n	8002aec <prv_check_crc+0x7c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d90d      	bls.n	8002aea <prv_check_crc+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ad4:	2b5a      	cmp	r3, #90	; 0x5a
 8002ad6:	d808      	bhi.n	8002aea <prv_check_crc+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002ade:	3b37      	subs	r3, #55	; 0x37
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	b25a      	sxtb	r2, r3
 8002ae8:	e000      	b.n	8002aec <prv_check_crc+0x7c>
 8002aea:	2200      	movs	r2, #0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002af2:	2b2f      	cmp	r3, #47	; 0x2f
 8002af4:	d90c      	bls.n	8002b10 <prv_check_crc+0xa0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002afc:	2b39      	cmp	r3, #57	; 0x39
 8002afe:	d807      	bhi.n	8002b10 <prv_check_crc+0xa0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	e028      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b16:	2b60      	cmp	r3, #96	; 0x60
 8002b18:	d90e      	bls.n	8002b38 <prv_check_crc+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b20:	2b7a      	cmp	r3, #122	; 0x7a
 8002b22:	d809      	bhi.n	8002b38 <prv_check_crc+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b2a:	3b57      	subs	r3, #87	; 0x57
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	e014      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d90e      	bls.n	8002b60 <prv_check_crc+0xf0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b48:	2b5a      	cmp	r3, #90	; 0x5a
 8002b4a:	d809      	bhi.n	8002b60 <prv_check_crc+0xf0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b52:	3b37      	subs	r3, #55	; 0x37
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	e000      	b.n	8002b62 <prv_check_crc+0xf2>
 8002b60:	2300      	movs	r3, #0
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d136      	bne.n	8002c06 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c04:	e061      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d121      	bne.n	8002c54 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	33a1      	adds	r3, #161	; 0xa1
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f008 fa80 	bl	800b152 <memcpy>
 8002c52:	e03a      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d106      	bne.n	8002c6c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002c6a:	e02e      	b.n	8002cca <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d129      	bne.n	8002cca <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002cdc:	22b0      	movs	r2, #176	; 0xb0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f008 f952 	bl	800af8a <memset>
    return 1;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002d00:	e0ad      	b.n	8002e5e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b24      	cmp	r3, #36	; 0x24
 8002d08:	d128      	bne.n	8002d5c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3370      	adds	r3, #112	; 0x70
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f008 f939 	bl	800af8a <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d1e:	2b0b      	cmp	r3, #11
 8002d20:	f200 8097 	bhi.w	8002e52 <lwgps_process+0x162>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d5a:	e07a      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b2c      	cmp	r3, #44	; 0x2c
 8002d62:	d11d      	bne.n	8002da0 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fbd7 	bl	8002518 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4053      	eors	r3, r2
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002d9e:	e058      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b2a      	cmp	r3, #42	; 0x2a
 8002da6:	d117      	bne.n	8002dd8 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fbb5 	bl	8002518 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002dd6:	e03c      	b.n	8002e52 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0d      	cmp	r3, #13
 8002dde:	d109      	bne.n	8002df4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fe45 	bl	8002a70 <prv_check_crc>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d032      	beq.n	8002e52 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff feca 	bl	8002b86 <prv_copy_from_tmp_memory>
 8002df2:	e02e      	b.n	8002e52 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4053      	eors	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e18:	2b0b      	cmp	r3, #11
 8002e1a:	d81a      	bhi.n	8002e52 <lwgps_process+0x162>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e22:	4619      	mov	r1, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f af4e 	bne.w	8002d02 <lwgps_process+0x12>
        }
    }
    return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_RxCpltCallback>:
typedef union {
	float sayi;
	unsigned char array[4];
} float32toInt8;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_UART_RxCpltCallback+0x68>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d127      	bne.n	8002ed0 <HAL_UART_RxCpltCallback+0x60>
		if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d010      	beq.n	8002eaa <HAL_UART_RxCpltCallback+0x3a>
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	b2d1      	uxtb	r1, r2
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002e9c:	7011      	strb	r1, [r2, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002ea2:	7819      	ldrb	r1, [r3, #0]
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002ea6:	5499      	strb	r1, [r3, r2]
 8002ea8:	e00d      	b.n	8002ec6 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index + 1);
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <HAL_UART_RxCpltCallback+0x74>)
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_UART_RxCpltCallback+0x78>)
 8002eb6:	f7ff ff1b 	bl	8002cf0 <lwgps_process>
			rx_index = 0;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_UART_RxCpltCallback+0x70>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_UART_RxCpltCallback+0x6c>)
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <HAL_UART_RxCpltCallback+0x68>)
 8002ecc:	f004 fa41 	bl	8007352 <HAL_UART_Receive_IT>
	}
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200006a0 	.word	0x200006a0
 8002edc:	20000919 	.word	0x20000919
 8002ee0:	20000918 	.word	0x20000918
 8002ee4:	20000898 	.word	0x20000898
 8002ee8:	200007e8 	.word	0x200007e8

08002eec <initSensorBuffer>:

//roketin aşağı gittiği anlayan verilerin doldurulduğu buffer'i sıfırlayan kod.
void initSensorBuffer() {
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	e009      	b.n	8002f0c <initSensorBuffer+0x20>
		sensorValues[i] = 0.0f;
 8002ef8:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <initSensorBuffer+0x34>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b18      	cmp	r3, #24
 8002f10:	ddf2      	ble.n	8002ef8 <initSensorBuffer+0xc>
	}
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	200006fc 	.word	0x200006fc

08002f24 <processSensorValues>:

//roketin aşağı indiğini anlayan kod (buffer'a veri atıp karşılaştırma yapıyor)
void processSensorValues() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i += 4) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e023      	b.n	8002f78 <processSensorValues+0x54>
		if (i + 24 < BUFFER_SIZE) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	dc18      	bgt.n	8002f68 <processSensorValues+0x44>
			if (sensorValues[i] >= sensorValues[i + 24]) {
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <processSensorValues+0x64>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	ed93 7a00 	vldr	s14, [r3]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3318      	adds	r3, #24
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <processSensorValues+0x64>)
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	db03      	blt.n	8002f62 <processSensorValues+0x3e>
				flagDown = 1;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <processSensorValues+0x68>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e002      	b.n	8002f68 <processSensorValues+0x44>
			} else {
				flagDown = 0;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <processSensorValues+0x68>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
			}
		}

		// Buffer'ı sıfırla
		if (i == BUFFER_SIZE - 4) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b15      	cmp	r3, #21
 8002f6c:	d101      	bne.n	8002f72 <processSensorValues+0x4e>
			initSensorBuffer();
 8002f6e:	f7ff ffbd 	bl	8002eec <initSensorBuffer>
	for (int i = 0; i < BUFFER_SIZE; i += 4) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	ddd8      	ble.n	8002f30 <processSensorValues+0xc>
		}
	}
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200006fc 	.word	0x200006fc
 8002f8c:	200007e4 	.word	0x200007e4

08002f90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b0a8      	sub	sp, #160	; 0xa0
 8002f94:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f96:	f001 fb9f 	bl	80046d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f9a:	f000 f8af 	bl	80030fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f9e:	f000 f9df 	bl	8003360 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002fa2:	f000 f90b 	bl	80031bc <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8002fa6:	f000 f9b1 	bl	800330c <MX_USART6_UART_Init>
	MX_USART2_UART_Init();
 8002faa:	f000 f985 	bl	80032b8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8002fae:	f000 f933 	bl	8003218 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim1);
 8002fb2:	4843      	ldr	r0, [pc, #268]	; (80030c0 <main+0x130>)
 8002fb4:	f003 fc6c 	bl	8006890 <HAL_TIM_Base_Init>
	MPU6050_Init();
 8002fb8:	f000 fb9c 	bl	80036f4 <MPU6050_Init>
	lwgps_init(&gps);
 8002fbc:	4841      	ldr	r0, [pc, #260]	; (80030c4 <main+0x134>)
 8002fbe:	f7ff fe89 	bl	8002cd4 <lwgps_init>
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4940      	ldr	r1, [pc, #256]	; (80030c8 <main+0x138>)
 8002fc6:	4841      	ldr	r0, [pc, #260]	; (80030cc <main+0x13c>)
 8002fc8:	f004 f9c3 	bl	8007352 <HAL_UART_Receive_IT>
	BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002fcc:	2304      	movs	r3, #4
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2105      	movs	r1, #5
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7fe f976 	bl	80012cc <BME280_Config>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of BinSemSep */
	osSemaphoreDef(BinSemSep);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	BinSemSepHandle = osSemaphoreCreate(osSemaphore(BinSemSep), 1);
 8002fec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f005 f9c5 	bl	8008382 <osSemaphoreCreate>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4a35      	ldr	r2, [pc, #212]	; (80030d0 <main+0x140>)
 8002ffc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002ffe:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <main+0x144>)
 8003000:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003004:	461d      	mov	r5, r3
 8003006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800300a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800300e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003012:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f005 f952 	bl	80082c2 <osThreadCreate>
 800301e:	4603      	mov	r3, r0
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <main+0x148>)
 8003022:	6013      	str	r3, [r2, #0]

	/* definition and creation of SeperationTask */
	osThreadDef(SeperationTask, StartSeperationTask, osPriorityAboveNormal, 0,
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <main+0x14c>)
 8003026:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800302a:	461d      	mov	r5, r3
 800302c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			128);
	SeperationTaskHandle = osThreadCreate(osThread(SeperationTask), NULL);
 8003038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f005 f93f 	bl	80082c2 <osThreadCreate>
 8003044:	4603      	mov	r3, r0
 8003046:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <main+0x150>)
 8003048:	6013      	str	r3, [r2, #0]

	/* definition and creation of SepSensorTask */
	osThreadDef(SepSensorTask, StartSepSensorTask, osPriorityNormal, 0, 128);
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <main+0x154>)
 800304c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003050:	461d      	mov	r5, r3
 8003052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800305a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SepSensorTaskHandle = osThreadCreate(osThread(SepSensorTask), NULL);
 800305e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f005 f92c 	bl	80082c2 <osThreadCreate>
 800306a:	4603      	mov	r3, r0
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <main+0x158>)
 800306e:	6013      	str	r3, [r2, #0]

	/* definition and creation of GPSTask */
	osThreadDef(GPSTask, StartGPSTask, osPriorityBelowNormal, 0, 128);
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <main+0x15c>)
 8003072:	f107 0420 	add.w	r4, r7, #32
 8003076:	461d      	mov	r5, r3
 8003078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800307a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800307c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 8003084:	f107 0320 	add.w	r3, r7, #32
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f005 f919 	bl	80082c2 <osThreadCreate>
 8003090:	4603      	mov	r3, r0
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <main+0x160>)
 8003094:	6013      	str	r3, [r2, #0]

	/* definition and creation of CommTask */
	osThreadDef(CommTask, StartCommTask, osPriorityLow, 0, 128);
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <main+0x164>)
 8003098:	1d3c      	adds	r4, r7, #4
 800309a:	461d      	mov	r5, r3
 800309c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800309e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CommTaskHandle = osThreadCreate(osThread(CommTask), NULL);
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f005 f908 	bl	80082c2 <osThreadCreate>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <main+0x168>)
 80030b6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80030b8:	f005 f8fc 	bl	80082b4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80030bc:	e7fe      	b.n	80030bc <main+0x12c>
 80030be:	bf00      	nop
 80030c0:	20000614 	.word	0x20000614
 80030c4:	200007e8 	.word	0x200007e8
 80030c8:	20000919 	.word	0x20000919
 80030cc:	200006a0 	.word	0x200006a0
 80030d0:	200006f8 	.word	0x200006f8
 80030d4:	0800e1f4 	.word	0x0800e1f4
 80030d8:	200006e4 	.word	0x200006e4
 80030dc:	0800e220 	.word	0x0800e220
 80030e0:	200006e8 	.word	0x200006e8
 80030e4:	0800e24c 	.word	0x0800e24c
 80030e8:	200006ec 	.word	0x200006ec
 80030ec:	0800e270 	.word	0x0800e270
 80030f0:	200006f0 	.word	0x200006f0
 80030f4:	0800e298 	.word	0x0800e298
 80030f8:	200006f4 	.word	0x200006f4

080030fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b094      	sub	sp, #80	; 0x50
 8003100:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	2234      	movs	r2, #52	; 0x34
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f007 ff3d 	bl	800af8a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <SystemClock_Config+0xb8>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <SystemClock_Config+0xb8>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6413      	str	r3, [r2, #64]	; 0x40
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <SystemClock_Config+0xb8>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800313c:	2300      	movs	r3, #0
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <SystemClock_Config+0xbc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <SystemClock_Config+0xbc>)
 800314a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <SystemClock_Config+0xbc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800315c:	2302      	movs	r3, #2
 800315e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003160:	2301      	movs	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003164:	2310      	movs	r3, #16
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4618      	mov	r0, r3
 8003172:	f003 f8ef 	bl	8006354 <HAL_RCC_OscConfig>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <SystemClock_Config+0x84>
		Error_Handler();
 800317c:	f000 fab5 	bl	80036ea <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003180:	230f      	movs	r3, #15
 8003182:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fde4 	bl	8005d68 <HAL_RCC_ClockConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <SystemClock_Config+0xae>
		Error_Handler();
 80031a6:	f000 faa0 	bl	80036ea <Error_Handler>
	}
}
 80031aa:	bf00      	nop
 80031ac:	3750      	adds	r7, #80	; 0x50
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000

080031bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <MX_I2C1_Init+0x50>)
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <MX_I2C1_Init+0x54>)
 80031c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <MX_I2C1_Init+0x50>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_I2C1_Init+0x58>)
 80031ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <MX_I2C1_Init+0x50>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MX_I2C1_Init+0x50>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_I2C1_Init+0x50>)
 80031da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_I2C1_Init+0x50>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_I2C1_Init+0x50>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <MX_I2C1_Init+0x50>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_I2C1_Init+0x50>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_I2C1_Init+0x50>)
 80031fa:	f001 fdf5 	bl	8004de8 <HAL_I2C_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003204:	f000 fa71 	bl	80036ea <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200005c0 	.word	0x200005c0
 8003210:	40005400 	.word	0x40005400
 8003214:	000186a0 	.word	0x000186a0

08003218 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800322c:	463b      	mov	r3, r7
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <MX_TIM1_Init+0x9c>)
 8003238:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 90 - 1;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <MX_TIM1_Init+0x98>)
 800323c:	2259      	movs	r2, #89	; 0x59
 800323e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003248:	2263      	movs	r2, #99	; 0x63
 800324a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <MX_TIM1_Init+0x98>)
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <MX_TIM1_Init+0x98>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800325e:	4814      	ldr	r0, [pc, #80]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003260:	f003 fb16 	bl	8006890 <HAL_TIM_Base_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM1_Init+0x56>
		Error_Handler();
 800326a:	f000 fa3e 	bl	80036ea <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003272:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	4619      	mov	r1, r3
 800327a:	480d      	ldr	r0, [pc, #52]	; (80032b0 <MX_TIM1_Init+0x98>)
 800327c:	f003 fcd0 	bl	8006c20 <HAL_TIM_ConfigClockSource>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM1_Init+0x72>
		Error_Handler();
 8003286:	f000 fa30 	bl	80036ea <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003292:	463b      	mov	r3, r7
 8003294:	4619      	mov	r1, r3
 8003296:	4806      	ldr	r0, [pc, #24]	; (80032b0 <MX_TIM1_Init+0x98>)
 8003298:	f003 feec 	bl	8007074 <HAL_TIMEx_MasterConfigSynchronization>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80032a2:	f000 fa22 	bl	80036ea <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000614 	.word	0x20000614
 80032b4:	40010000 	.word	0x40010000

080032b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <MX_USART2_UART_Init+0x50>)
 80032c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_USART2_UART_Init+0x4c>)
 80032f0:	f003 ff50 	bl	8007194 <HAL_UART_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80032fa:	f000 f9f6 	bl	80036ea <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000065c 	.word	0x2000065c
 8003308:	40004400 	.word	0x40004400

0800330c <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <MX_USART6_UART_Init+0x50>)
 8003314:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003318:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800331c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003332:	220c      	movs	r2, #12
 8003334:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_USART6_UART_Init+0x4c>)
 8003344:	f003 ff26 	bl	8007194 <HAL_UART_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800334e:	f000 f9cc 	bl	80036ea <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200006a0 	.word	0x200006a0
 800335c:	40011400 	.word	0x40011400

08003360 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <MX_GPIO_Init+0x9c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <MX_GPIO_Init+0x9c>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <MX_GPIO_Init+0x9c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <MX_GPIO_Init+0x9c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a18      	ldr	r2, [pc, #96]	; (80033fc <MX_GPIO_Init+0x9c>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <MX_GPIO_Init+0x9c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SECOND_SEPERATION_Pin | FIRST_SEPERATION_Pin,
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033d0:	480b      	ldr	r0, [pc, #44]	; (8003400 <MX_GPIO_Init+0xa0>)
 80033d2:	f001 fcef 	bl	8004db4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : SECOND_SEPERATION_Pin FIRST_SEPERATION_Pin */
	GPIO_InitStruct.Pin = SECOND_SEPERATION_Pin | FIRST_SEPERATION_Pin;
 80033d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033dc:	2301      	movs	r3, #1
 80033de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	4619      	mov	r1, r3
 80033ee:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_GPIO_Init+0xa0>)
 80033f0:	f001 fb4c 	bl	8004a8c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000

08003404 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800340c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003410:	f004 ffa3 	bl	800835a <osDelay>
 8003414:	e7fa      	b.n	800340c <StartDefaultTask+0x8>

08003416 <StartSeperationTask>:
 * @brief Function implementing the SeperationTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSeperationTask */
void StartSeperationTask(void const *argument) {
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSeperationTask */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 800341e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003422:	f004 ff9a 	bl	800835a <osDelay>
 8003426:	e7fa      	b.n	800341e <StartSeperationTask+0x8>

08003428 <StartSepSensorTask>:
 * @brief Function implementing the SepSensorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSepSensorTask */
void StartSepSensorTask(void const *argument) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSepSensorTask */
	/* Infinite loop */
	for (;;) {
		acX = MPU6050_Kalman_Accel_X();
 8003430:	f000 fb94 	bl	8003b5c <MPU6050_Kalman_Accel_X>
 8003434:	ec53 2b10 	vmov	r2, r3, d0
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fbec 	bl	8000c18 <__aeabi_d2f>
 8003440:	4603      	mov	r3, r0
 8003442:	4a6d      	ldr	r2, [pc, #436]	; (80035f8 <StartSepSensorTask+0x1d0>)
 8003444:	6013      	str	r3, [r2, #0]
		acY = MPU6050_Kalman_Accel_Y();
 8003446:	f000 fc2b 	bl	8003ca0 <MPU6050_Kalman_Accel_Y>
 800344a:	ec53 2b10 	vmov	r2, r3, d0
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fbe1 	bl	8000c18 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	4a68      	ldr	r2, [pc, #416]	; (80035fc <StartSepSensorTask+0x1d4>)
 800345a:	6013      	str	r3, [r2, #0]
		acZ = MPU6050_Kalman_Accel_Z();
 800345c:	f000 fcc2 	bl	8003de4 <MPU6050_Kalman_Accel_Z>
 8003460:	ec53 2b10 	vmov	r2, r3, d0
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f7fd fbd6 	bl	8000c18 <__aeabi_d2f>
 800346c:	4603      	mov	r3, r0
 800346e:	4a64      	ldr	r2, [pc, #400]	; (8003600 <StartSepSensorTask+0x1d8>)
 8003470:	6013      	str	r3, [r2, #0]
		gyX = MPU6050_Kalman_Gyro_X();
 8003472:	f000 fd59 	bl	8003f28 <MPU6050_Kalman_Gyro_X>
 8003476:	ec53 2b10 	vmov	r2, r3, d0
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f7fd fbcb 	bl	8000c18 <__aeabi_d2f>
 8003482:	4603      	mov	r3, r0
 8003484:	4a5f      	ldr	r2, [pc, #380]	; (8003604 <StartSepSensorTask+0x1dc>)
 8003486:	6013      	str	r3, [r2, #0]
		gyY = MPU6050_Kalman_Gyro_X();
 8003488:	f000 fd4e 	bl	8003f28 <MPU6050_Kalman_Gyro_X>
 800348c:	ec53 2b10 	vmov	r2, r3, d0
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f7fd fbc0 	bl	8000c18 <__aeabi_d2f>
 8003498:	4603      	mov	r3, r0
 800349a:	4a5b      	ldr	r2, [pc, #364]	; (8003608 <StartSepSensorTask+0x1e0>)
 800349c:	6013      	str	r3, [r2, #0]
		gyZ = MPU6050_Kalman_Gyro_X();
 800349e:	f000 fd43 	bl	8003f28 <MPU6050_Kalman_Gyro_X>
 80034a2:	ec53 2b10 	vmov	r2, r3, d0
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7fd fbb5 	bl	8000c18 <__aeabi_d2f>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4a56      	ldr	r2, [pc, #344]	; (800360c <StartSepSensorTask+0x1e4>)
 80034b2:	6013      	str	r3, [r2, #0]
		RollAng = MPU6050_Kalman_Roll_Angle();
 80034b4:	f000 faae 	bl	8003a14 <MPU6050_Kalman_Roll_Angle>
 80034b8:	eef0 7a40 	vmov.f32	s15, s0
 80034bc:	4b54      	ldr	r3, [pc, #336]	; (8003610 <StartSepSensorTask+0x1e8>)
 80034be:	edc3 7a00 	vstr	s15, [r3]
		Temperature = BME280_Temperature();
 80034c2:	f7fe fc21 	bl	8001d08 <BME280_Temperature>
 80034c6:	ec53 2b10 	vmov	r2, r3, d0
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd fba3 	bl	8000c18 <__aeabi_d2f>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <StartSepSensorTask+0x1ec>)
 80034d6:	6013      	str	r3, [r2, #0]
		Pressure = BME280_Pressure();
 80034d8:	f7fe fb92 	bl	8001c00 <BME280_Pressure>
 80034dc:	ec53 2b10 	vmov	r2, r3, d0
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd fb98 	bl	8000c18 <__aeabi_d2f>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <StartSepSensorTask+0x1f0>)
 80034ec:	6013      	str	r3, [r2, #0]
		Humidity = BME280_Humidity();
 80034ee:	f7fe fbc9 	bl	8001c84 <BME280_Humidity>
 80034f2:	ec53 2b10 	vmov	r2, r3, d0
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7fd fb8d 	bl	8000c18 <__aeabi_d2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a46      	ldr	r2, [pc, #280]	; (800361c <StartSepSensorTask+0x1f4>)
 8003502:	6013      	str	r3, [r2, #0]
		T = BME280_Kalman_Temp(Temperature);
 8003504:	4b43      	ldr	r3, [pc, #268]	; (8003614 <StartSepSensorTask+0x1ec>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd f835 	bl	8000578 <__aeabi_f2d>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	ec43 2b10 	vmov	d0, r2, r3
 8003516:	f7fe fe83 	bl	8002220 <BME280_Kalman_Temp>
 800351a:	ec53 2b10 	vmov	r2, r3, d0
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	f7fd fb79 	bl	8000c18 <__aeabi_d2f>
 8003526:	4603      	mov	r3, r0
 8003528:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <StartSepSensorTask+0x1f8>)
 800352a:	6013      	str	r3, [r2, #0]
		P = BME280_Kalman_Press(Pressure);
 800352c:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <StartSepSensorTask+0x1f0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f821 	bl	8000578 <__aeabi_f2d>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	ec43 2b10 	vmov	d0, r2, r3
 800353e:	f7fe fd2f 	bl	8001fa0 <BME280_Kalman_Press>
 8003542:	ec53 2b10 	vmov	r2, r3, d0
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f7fd fb65 	bl	8000c18 <__aeabi_d2f>
 800354e:	4603      	mov	r3, r0
 8003550:	4a34      	ldr	r2, [pc, #208]	; (8003624 <StartSepSensorTask+0x1fc>)
 8003552:	6013      	str	r3, [r2, #0]
		H = BME280_Kalman_Hum(Humidity);
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <StartSepSensorTask+0x1f4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd f80d 	bl	8000578 <__aeabi_f2d>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	ec43 2b10 	vmov	d0, r2, r3
 8003566:	f7fe fdbb 	bl	80020e0 <BME280_Kalman_Hum>
 800356a:	ec53 2b10 	vmov	r2, r3, d0
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	f7fd fb51 	bl	8000c18 <__aeabi_d2f>
 8003576:	4603      	mov	r3, r0
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <StartSepSensorTask+0x200>)
 800357a:	6013      	str	r3, [r2, #0]
		Altitude1 = BME280_Altitude();
 800357c:	f7fe fc08 	bl	8001d90 <BME280_Altitude>
 8003580:	eef0 7a40 	vmov.f32	s15, s0
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <StartSepSensorTask+0x204>)
 8003586:	edc3 7a00 	vstr	s15, [r3]
		Alt = BME280_Kalman_Alt(Altitude1);
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <StartSepSensorTask+0x204>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fc fff2 	bl	8000578 <__aeabi_f2d>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	ec43 2b10 	vmov	d0, r2, r3
 800359c:	f7fe fc56 	bl	8001e4c <BME280_Kalman_Alt>
 80035a0:	eef0 7a40 	vmov.f32	s15, s0
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <StartSepSensorTask+0x208>)
 80035a6:	edc3 7a00 	vstr	s15, [r3]

		for (int i = 0; i < BUFFER_SIZE; i++) {
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e019      	b.n	80035e4 <StartSepSensorTask+0x1bc>
			AltCompare = BME280_Kalman_Alt(Altitude1);
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <StartSepSensorTask+0x204>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ffdf 	bl	8000578 <__aeabi_f2d>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	ec43 2b10 	vmov	d0, r2, r3
 80035c2:	f7fe fc43 	bl	8001e4c <BME280_Kalman_Alt>
 80035c6:	eef0 7a40 	vmov.f32	s15, s0
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <StartSepSensorTask+0x20c>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
			sensorValues[i] = AltCompare;
 80035d0:	4b18      	ldr	r3, [pc, #96]	; (8003634 <StartSepSensorTask+0x20c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4918      	ldr	r1, [pc, #96]	; (8003638 <StartSepSensorTask+0x210>)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3301      	adds	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b18      	cmp	r3, #24
 80035e8:	dde2      	ble.n	80035b0 <StartSepSensorTask+0x188>
		}

		// Sensör değerlerini işle
		processSensorValues();
 80035ea:	f7ff fc9b 	bl	8002f24 <processSensorValues>
		osDelay(500);
 80035ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035f2:	f004 feb2 	bl	800835a <osDelay>
		acX = MPU6050_Kalman_Accel_X();
 80035f6:	e71b      	b.n	8003430 <StartSepSensorTask+0x8>
 80035f8:	20000774 	.word	0x20000774
 80035fc:	20000778 	.word	0x20000778
 8003600:	2000077c 	.word	0x2000077c
 8003604:	20000780 	.word	0x20000780
 8003608:	20000784 	.word	0x20000784
 800360c:	20000788 	.word	0x20000788
 8003610:	20000760 	.word	0x20000760
 8003614:	20000768 	.word	0x20000768
 8003618:	2000076c 	.word	0x2000076c
 800361c:	20000770 	.word	0x20000770
 8003620:	20000790 	.word	0x20000790
 8003624:	20000794 	.word	0x20000794
 8003628:	20000798 	.word	0x20000798
 800362c:	20000764 	.word	0x20000764
 8003630:	2000078c 	.word	0x2000078c
 8003634:	2000079c 	.word	0x2000079c
 8003638:	200006fc 	.word	0x200006fc

0800363c <StartGPSTask>:
 * @brief Function implementing the GPSTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void const *argument) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGPSTask */
	/* Infinite loop */
	for (;;) {
		gpsAlt = gps.altitude;
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <StartGPSTask+0x50>)
 8003646:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd fae3 	bl	8000c18 <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <StartGPSTask+0x54>)
 8003656:	6013      	str	r3, [r2, #0]
		gpsLat = gps.latitude;
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <StartGPSTask+0x50>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f7fd fad9 	bl	8000c18 <__aeabi_d2f>
 8003666:	4603      	mov	r3, r0
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <StartGPSTask+0x58>)
 800366a:	6013      	str	r3, [r2, #0]
		gpsLong = gps.longitude;
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <StartGPSTask+0x50>)
 800366e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f7fd facf 	bl	8000c18 <__aeabi_d2f>
 800367a:	4603      	mov	r3, r0
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <StartGPSTask+0x5c>)
 800367e:	6013      	str	r3, [r2, #0]
		osDelay(500);
 8003680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003684:	f004 fe69 	bl	800835a <osDelay>
		gpsAlt = gps.altitude;
 8003688:	e7dc      	b.n	8003644 <StartGPSTask+0x8>
 800368a:	bf00      	nop
 800368c:	200007e8 	.word	0x200007e8
 8003690:	200007a0 	.word	0x200007a0
 8003694:	200007a4 	.word	0x200007a4
 8003698:	200007a8 	.word	0x200007a8

0800369c <StartCommTask>:
 * @brief Function implementing the CommTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommTask */
void StartCommTask(void const *argument) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	for (;;) {

		//  paket(sayac);
		//sayac = sayac+1;

		HAL_UART_Transmit(&huart2, buff, 54, 500);
 80036a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036a8:	2236      	movs	r2, #54	; 0x36
 80036aa:	4906      	ldr	r1, [pc, #24]	; (80036c4 <StartCommTask+0x28>)
 80036ac:	4806      	ldr	r0, [pc, #24]	; (80036c8 <StartCommTask+0x2c>)
 80036ae:	f003 fdbe 	bl	800722e <HAL_UART_Transmit>
		HAL_Delay(500);
 80036b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036b6:	f001 f851 	bl	800475c <HAL_Delay>

		osDelay(500);
 80036ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036be:	f004 fe4c 	bl	800835a <osDelay>
		HAL_UART_Transmit(&huart2, buff, 54, 500);
 80036c2:	e7ef      	b.n	80036a4 <StartCommTask+0x8>
 80036c4:	200007ac 	.word	0x200007ac
 80036c8:	2000065c 	.word	0x2000065c

080036cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80036de:	f001 f81d 	bl	800471c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ee:	b672      	cpsid	i
}
 80036f0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036f2:	e7fe      	b.n	80036f2 <Error_Handler+0x8>

080036f4 <MPU6050_Init>:
static double Q7 = 10; //initial estimated covariance
static double P7 = 0; //initial error covariance (it must be 0)
static double K7 = 0; //initial kalman gain

void MPU6050_Init (void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80036fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fe:	9302      	str	r3, [sp, #8]
 8003700:	2301      	movs	r3, #1
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	1dfb      	adds	r3, r7, #7
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2301      	movs	r3, #1
 800370a:	2275      	movs	r2, #117	; 0x75
 800370c:	21d0      	movs	r1, #208	; 0xd0
 800370e:	4823      	ldr	r0, [pc, #140]	; (800379c <MPU6050_Init+0xa8>)
 8003710:	f001 fda8 	bl	8005264 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2b68      	cmp	r3, #104	; 0x68
 8003718:	d13b      	bne.n	8003792 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800371e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003722:	9302      	str	r3, [sp, #8]
 8003724:	2301      	movs	r3, #1
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	1dbb      	adds	r3, r7, #6
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2301      	movs	r3, #1
 800372e:	226b      	movs	r2, #107	; 0x6b
 8003730:	21d0      	movs	r1, #208	; 0xd0
 8003732:	481a      	ldr	r0, [pc, #104]	; (800379c <MPU6050_Init+0xa8>)
 8003734:	f001 fc9c 	bl	8005070 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8003738:	2307      	movs	r3, #7
 800373a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800373c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	2301      	movs	r3, #1
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	1dbb      	adds	r3, r7, #6
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2301      	movs	r3, #1
 800374c:	2219      	movs	r2, #25
 800374e:	21d0      	movs	r1, #208	; 0xd0
 8003750:	4812      	ldr	r0, [pc, #72]	; (800379c <MPU6050_Init+0xa8>)
 8003752:	f001 fc8d 	bl	8005070 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Â± 2g
		Data = 0x00;
 8003756:	2300      	movs	r3, #0
 8003758:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800375a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800375e:	9302      	str	r3, [sp, #8]
 8003760:	2301      	movs	r3, #1
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	1dbb      	adds	r3, r7, #6
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2301      	movs	r3, #1
 800376a:	221c      	movs	r2, #28
 800376c:	21d0      	movs	r1, #208	; 0xd0
 800376e:	480b      	ldr	r0, [pc, #44]	; (800379c <MPU6050_Init+0xa8>)
 8003770:	f001 fc7e 	bl	8005070 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> Â± 250 Â°/s
		Data = 0x00;
 8003774:	2300      	movs	r3, #0
 8003776:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8003778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	2301      	movs	r3, #1
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	1dbb      	adds	r3, r7, #6
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2301      	movs	r3, #1
 8003788:	221b      	movs	r2, #27
 800378a:	21d0      	movs	r1, #208	; 0xd0
 800378c:	4803      	ldr	r0, [pc, #12]	; (800379c <MPU6050_Init+0xa8>)
 800378e:	f001 fc6f 	bl	8005070 <HAL_I2C_Mem_Write>
	}

}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200005c0 	.word	0x200005c0

080037a0 <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 80037a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037aa:	9302      	str	r3, [sp, #8]
 80037ac:	2306      	movs	r3, #6
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	463b      	mov	r3, r7
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2301      	movs	r3, #1
 80037b6:	223b      	movs	r2, #59	; 0x3b
 80037b8:	21d0      	movs	r1, #208	; 0xd0
 80037ba:	4811      	ldr	r0, [pc, #68]	; (8003800 <MPU6050_Accel_Config+0x60>)
 80037bc:	f001 fd52 	bl	8005264 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 80037c0:	783b      	ldrb	r3, [r7, #0]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	787b      	ldrb	r3, [r7, #1]
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <MPU6050_Accel_Config+0x64>)
 80037d0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 80037d2:	78bb      	ldrb	r3, [r7, #2]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	b21b      	sxth	r3, r3
 80037dc:	4313      	orrs	r3, r2
 80037de:	b21a      	sxth	r2, r3
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <MPU6050_Accel_Config+0x68>)
 80037e2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 80037e4:	793b      	ldrb	r3, [r7, #4]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	797b      	ldrb	r3, [r7, #5]
 80037ec:	b21b      	sxth	r3, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b21a      	sxth	r2, r3
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <MPU6050_Accel_Config+0x6c>)
 80037f4:	801a      	strh	r2, [r3, #0]
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200005c0 	.word	0x200005c0
 8003804:	2000092c 	.word	0x2000092c
 8003808:	2000092e 	.word	0x2000092e
 800380c:	20000930 	.word	0x20000930

08003810 <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003814:	f7ff ffc4 	bl	80037a0 <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <MPU6050_Read_Accel_X+0x40>)
 800381a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fe98 	bl	8000554 <__aeabi_i2d>
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <MPU6050_Read_Accel_X+0x44>)
 800382a:	f7fd f827 	bl	800087c <__aeabi_ddiv>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f9ef 	bl	8000c18 <__aeabi_d2f>
 800383a:	4603      	mov	r3, r0
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <MPU6050_Read_Accel_X+0x48>)
 800383e:	6013      	str	r3, [r2, #0]
	return Ax;
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <MPU6050_Read_Accel_X+0x48>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	ee07 3a90 	vmov	s15, r3
}
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000092c 	.word	0x2000092c
 8003854:	40d00000 	.word	0x40d00000
 8003858:	2000091c 	.word	0x2000091c

0800385c <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003860:	f7ff ff9e 	bl	80037a0 <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <MPU6050_Read_Accel_Y+0x40>)
 8003866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fe72 	bl	8000554 <__aeabi_i2d>
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <MPU6050_Read_Accel_Y+0x44>)
 8003876:	f7fd f801 	bl	800087c <__aeabi_ddiv>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	f7fd f9c9 	bl	8000c18 <__aeabi_d2f>
 8003886:	4603      	mov	r3, r0
 8003888:	4a06      	ldr	r2, [pc, #24]	; (80038a4 <MPU6050_Read_Accel_Y+0x48>)
 800388a:	6013      	str	r3, [r2, #0]
	return Ay;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <MPU6050_Read_Accel_Y+0x48>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	ee07 3a90 	vmov	s15, r3
}
 8003894:	eeb0 0a67 	vmov.f32	s0, s15
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2000092e 	.word	0x2000092e
 80038a0:	40d00000 	.word	0x40d00000
 80038a4:	20000920 	.word	0x20000920

080038a8 <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80038ac:	f7ff ff78 	bl	80037a0 <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <MPU6050_Read_Accel_Z+0x40>)
 80038b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe4c 	bl	8000554 <__aeabi_i2d>
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <MPU6050_Read_Accel_Z+0x44>)
 80038c2:	f7fc ffdb 	bl	800087c <__aeabi_ddiv>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	f7fd f9a3 	bl	8000c18 <__aeabi_d2f>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <MPU6050_Read_Accel_Z+0x48>)
 80038d6:	6013      	str	r3, [r2, #0]
	return Az;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <MPU6050_Read_Accel_Z+0x48>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	ee07 3a90 	vmov	s15, r3
}
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000930 	.word	0x20000930
 80038ec:	40d00000 	.word	0x40d00000
 80038f0:	20000924 	.word	0x20000924

080038f4 <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 80038fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	2306      	movs	r3, #6
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	463b      	mov	r3, r7
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2301      	movs	r3, #1
 800390a:	2243      	movs	r2, #67	; 0x43
 800390c:	21d0      	movs	r1, #208	; 0xd0
 800390e:	4811      	ldr	r0, [pc, #68]	; (8003954 <MPU6050_Gyro_Config+0x60>)
 8003910:	f001 fca8 	bl	8005264 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 8003914:	783b      	ldrb	r3, [r7, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	b21a      	sxth	r2, r3
 800391a:	787b      	ldrb	r3, [r7, #1]
 800391c:	b21b      	sxth	r3, r3
 800391e:	4313      	orrs	r3, r2
 8003920:	b21a      	sxth	r2, r3
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <MPU6050_Gyro_Config+0x64>)
 8003924:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 8003926:	78bb      	ldrb	r3, [r7, #2]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b21a      	sxth	r2, r3
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	b21b      	sxth	r3, r3
 8003930:	4313      	orrs	r3, r2
 8003932:	b21a      	sxth	r2, r3
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <MPU6050_Gyro_Config+0x68>)
 8003936:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8003938:	793b      	ldrb	r3, [r7, #4]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b21a      	sxth	r2, r3
 800393e:	797b      	ldrb	r3, [r7, #5]
 8003940:	b21b      	sxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b21a      	sxth	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <MPU6050_Gyro_Config+0x6c>)
 8003948:	801a      	strh	r2, [r3, #0]

}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200005c0 	.word	0x200005c0
 8003958:	20000932 	.word	0x20000932
 800395c:	20000934 	.word	0x20000934
 8003960:	20000936 	.word	0x20000936
 8003964:	00000000 	.word	0x00000000

08003968 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 800396c:	f7ff ffc2 	bl	80038f4 <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <MPU6050_Read_Gyro_X+0x48>)
 8003972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fdec 	bl	8000554 <__aeabi_i2d>
 800397c:	a30a      	add	r3, pc, #40	; (adr r3, 80039a8 <MPU6050_Read_Gyro_X+0x40>)
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f7fc ff7b 	bl	800087c <__aeabi_ddiv>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	f7fd f943 	bl	8000c18 <__aeabi_d2f>
 8003992:	4603      	mov	r3, r0
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <MPU6050_Read_Gyro_X+0x4c>)
 8003996:	6013      	str	r3, [r2, #0]
	return Gx;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <MPU6050_Read_Gyro_X+0x4c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	ee07 3a90 	vmov	s15, r3
}
 80039a0:	eeb0 0a67 	vmov.f32	s0, s15
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	00000000 	.word	0x00000000
 80039ac:	40606000 	.word	0x40606000
 80039b0:	20000932 	.word	0x20000932
 80039b4:	20000928 	.word	0x20000928

080039b8 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 80039be:	f000 f96f 	bl	8003ca0 <MPU6050_Kalman_Accel_Y>
 80039c2:	ed87 0b04 	vstr	d0, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 80039c6:	f000 fa0d 	bl	8003de4 <MPU6050_Kalman_Accel_Z>
 80039ca:	ed87 0b02 	vstr	d0, [r7, #8]
	float Roll = 0;
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 80039d4:	ed97 1b02 	vldr	d1, [r7, #8]
 80039d8:	ed97 0b04 	vldr	d0, [r7, #16]
 80039dc:	f009 fa30 	bl	800ce40 <atan2>
 80039e0:	ec51 0b10 	vmov	r0, r1, d0
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <MPU6050_Roll_Angle+0x58>)
 80039ea:	f7fc fe1d 	bl	8000628 <__aeabi_dmul>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f7fd f90f 	bl	8000c18 <__aeabi_d2f>
 80039fa:	4603      	mov	r3, r0
 80039fc:	607b      	str	r3, [r7, #4]
	return Roll;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	ee07 3a90 	vmov	s15, r3
}
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40668000 	.word	0x40668000

08003a14 <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 8003a1a:	f7ff ffcd 	bl	80039b8 <MPU6050_Roll_Angle>
 8003a1e:	ed87 0a01 	vstr	s0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8003a22:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003a2e:	f7fc fdfb 	bl	8000628 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4614      	mov	r4, r2
 8003a38:	461d      	mov	r5, r3
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	4942      	ldr	r1, [pc, #264]	; (8003b48 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003a40:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fdef 	bl	8000628 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003a58:	f7fc fde6 	bl	8000628 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <MPU6050_Kalman_Roll_Angle+0x138>)
 8003a6a:	f7fc fc27 	bl	80002bc <__adddf3>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4620      	mov	r0, r4
 8003a74:	4629      	mov	r1, r5
 8003a76:	f7fc ff01 	bl	800087c <__aeabi_ddiv>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4934      	ldr	r1, [pc, #208]	; (8003b50 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003a80:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fc fd77 	bl	8000578 <__aeabi_f2d>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	f04f 0000 	mov.w	r0, #0
 8003a92:	492d      	ldr	r1, [pc, #180]	; (8003b48 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003a94:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f7fc fdc5 	bl	8000628 <__aeabi_dmul>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	f7fc fc07 	bl	80002b8 <__aeabi_dsub>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fc fdb6 	bl	8000628 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fbf7 	bl	80002bc <__adddf3>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4920      	ldr	r1, [pc, #128]	; (8003b54 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003ad4:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003ae4:	f7fc fda0 	bl	8000628 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	4915      	ldr	r1, [pc, #84]	; (8003b48 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003af2:	f7fc fbe1 	bl	80002b8 <__aeabi_dsub>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fd90 	bl	8000628 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <MPU6050_Kalman_Roll_Angle+0x144>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fbd1 	bl	80002bc <__adddf3>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4909      	ldr	r1, [pc, #36]	; (8003b44 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003b20:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f7fd f873 	bl	8000c18 <__aeabi_d2f>
 8003b32:	4603      	mov	r3, r0
 8003b34:	ee07 3a90 	vmov	s15, r3
}
 8003b38:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bdb0      	pop	{r4, r5, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000938 	.word	0x20000938
 8003b48:	3ff00000 	.word	0x3ff00000
 8003b4c:	40440000 	.word	0x40440000
 8003b50:	20000940 	.word	0x20000940
 8003b54:	20000988 	.word	0x20000988
 8003b58:	20000040 	.word	0x20000040

08003b5c <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 8003b5c:	b5b0      	push	{r4, r5, r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 8003b62:	f7ff fe55 	bl	8003810 <MPU6050_Read_Accel_X>
 8003b66:	ee10 3a10 	vmov	r3, s0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fd04 	bl	8000578 <__aeabi_f2d>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8003b78:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <MPU6050_Kalman_Accel_X+0x12c>)
 8003b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <MPU6050_Kalman_Accel_X+0x130>)
 8003b84:	f7fc fd50 	bl	8000628 <__aeabi_dmul>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	493d      	ldr	r1, [pc, #244]	; (8003c8c <MPU6050_Kalman_Accel_X+0x130>)
 8003b96:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <MPU6050_Kalman_Accel_X+0x12c>)
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f7fc fd44 	bl	8000628 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <MPU6050_Kalman_Accel_X+0x130>)
 8003bae:	f7fc fd3b 	bl	8000628 <__aeabi_dmul>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <MPU6050_Kalman_Accel_X+0x134>)
 8003bc0:	f7fc fb7c 	bl	80002bc <__adddf3>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7fc fe56 	bl	800087c <__aeabi_ddiv>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	492f      	ldr	r1, [pc, #188]	; (8003c94 <MPU6050_Kalman_Accel_X+0x138>)
 8003bd6:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 8003bda:	f04f 0000 	mov.w	r0, #0
 8003bde:	492b      	ldr	r1, [pc, #172]	; (8003c8c <MPU6050_Kalman_Accel_X+0x130>)
 8003be0:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <MPU6050_Kalman_Accel_X+0x13c>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f7fc fd1f 	bl	8000628 <__aeabi_dmul>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bf2:	f7fc fb61 	bl	80002b8 <__aeabi_dsub>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <MPU6050_Kalman_Accel_X+0x138>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f7fc fd10 	bl	8000628 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <MPU6050_Kalman_Accel_X+0x13c>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fb51 	bl	80002bc <__adddf3>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	491e      	ldr	r1, [pc, #120]	; (8003c98 <MPU6050_Kalman_Accel_X+0x13c>)
 8003c20:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <MPU6050_Kalman_Accel_X+0x138>)
 8003c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <MPU6050_Kalman_Accel_X+0x130>)
 8003c30:	f7fc fcfa 	bl	8000628 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	f04f 0000 	mov.w	r0, #0
 8003c3c:	4913      	ldr	r1, [pc, #76]	; (8003c8c <MPU6050_Kalman_Accel_X+0x130>)
 8003c3e:	f7fc fb3b 	bl	80002b8 <__aeabi_dsub>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <MPU6050_Kalman_Accel_X+0x12c>)
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f7fc fcea 	bl	8000628 <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MPU6050_Kalman_Accel_X+0x140>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f7fc fb2b 	bl	80002bc <__adddf3>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4907      	ldr	r1, [pc, #28]	; (8003c88 <MPU6050_Kalman_Accel_X+0x12c>)
 8003c6c:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <MPU6050_Kalman_Accel_X+0x13c>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c7e:	eef0 0a67 	vmov.f32	s1, s15
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bdb0      	pop	{r4, r5, r7, pc}
 8003c88:	20000948 	.word	0x20000948
 8003c8c:	3ff00000 	.word	0x3ff00000
 8003c90:	40440000 	.word	0x40440000
 8003c94:	20000950 	.word	0x20000950
 8003c98:	20000990 	.word	0x20000990
 8003c9c:	20000048 	.word	0x20000048

08003ca0 <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 8003ca0:	b5b0      	push	{r4, r5, r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 8003ca6:	f7ff fdd9 	bl	800385c <MPU6050_Read_Accel_Y>
 8003caa:	ee10 3a10 	vmov	r3, s0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc fc62 	bl	8000578 <__aeabi_f2d>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <MPU6050_Kalman_Accel_Y+0x12c>)
 8003cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <MPU6050_Kalman_Accel_Y+0x130>)
 8003cc8:	f7fc fcae 	bl	8000628 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	493d      	ldr	r1, [pc, #244]	; (8003dd0 <MPU6050_Kalman_Accel_Y+0x130>)
 8003cda:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <MPU6050_Kalman_Accel_Y+0x12c>)
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f7fc fca2 	bl	8000628 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <MPU6050_Kalman_Accel_Y+0x130>)
 8003cf2:	f7fc fc99 	bl	8000628 <__aeabi_dmul>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <MPU6050_Kalman_Accel_Y+0x134>)
 8003d04:	f7fc fada 	bl	80002bc <__adddf3>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc fdb4 	bl	800087c <__aeabi_ddiv>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	492f      	ldr	r1, [pc, #188]	; (8003dd8 <MPU6050_Kalman_Accel_Y+0x138>)
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	492b      	ldr	r1, [pc, #172]	; (8003dd0 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <MPU6050_Kalman_Accel_Y+0x13c>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc7d 	bl	8000628 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d36:	f7fc fabf 	bl	80002b8 <__aeabi_dsub>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <MPU6050_Kalman_Accel_Y+0x138>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fc6e 	bl	8000628 <__aeabi_dmul>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <MPU6050_Kalman_Accel_Y+0x13c>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f7fc faaf 	bl	80002bc <__adddf3>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	491e      	ldr	r1, [pc, #120]	; (8003ddc <MPU6050_Kalman_Accel_Y+0x13c>)
 8003d64:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <MPU6050_Kalman_Accel_Y+0x138>)
 8003d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d74:	f7fc fc58 	bl	8000628 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	f04f 0000 	mov.w	r0, #0
 8003d80:	4913      	ldr	r1, [pc, #76]	; (8003dd0 <MPU6050_Kalman_Accel_Y+0x130>)
 8003d82:	f7fc fa99 	bl	80002b8 <__aeabi_dsub>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <MPU6050_Kalman_Accel_Y+0x12c>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f7fc fc48 	bl	8000628 <__aeabi_dmul>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <MPU6050_Kalman_Accel_Y+0x140>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fa89 	bl	80002bc <__adddf3>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4907      	ldr	r1, [pc, #28]	; (8003dcc <MPU6050_Kalman_Accel_Y+0x12c>)
 8003db0:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <MPU6050_Kalman_Accel_Y+0x13c>)
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	ec43 2b17 	vmov	d7, r2, r3
}
 8003dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8003dc2:	eef0 0a67 	vmov.f32	s1, s15
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bdb0      	pop	{r4, r5, r7, pc}
 8003dcc:	20000958 	.word	0x20000958
 8003dd0:	3ff00000 	.word	0x3ff00000
 8003dd4:	40440000 	.word	0x40440000
 8003dd8:	20000960 	.word	0x20000960
 8003ddc:	20000998 	.word	0x20000998
 8003de0:	20000050 	.word	0x20000050

08003de4 <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8003dea:	f7ff fd5d 	bl	80038a8 <MPU6050_Read_Accel_Z>
 8003dee:	ee10 3a10 	vmov	r3, s0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fbc0 	bl	8000578 <__aeabi_f2d>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	4b42      	ldr	r3, [pc, #264]	; (8003f14 <MPU6050_Kalman_Accel_Z+0x130>)
 8003e0c:	f7fc fc0c 	bl	8000628 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4614      	mov	r4, r2
 8003e16:	461d      	mov	r5, r3
 8003e18:	f04f 0000 	mov.w	r0, #0
 8003e1c:	493d      	ldr	r1, [pc, #244]	; (8003f14 <MPU6050_Kalman_Accel_Z+0x130>)
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fc00 	bl	8000628 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <MPU6050_Kalman_Accel_Z+0x130>)
 8003e36:	f7fc fbf7 	bl	8000628 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <MPU6050_Kalman_Accel_Z+0x134>)
 8003e48:	f7fc fa38 	bl	80002bc <__adddf3>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc fd12 	bl	800087c <__aeabi_ddiv>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	492f      	ldr	r1, [pc, #188]	; (8003f1c <MPU6050_Kalman_Accel_Z+0x138>)
 8003e5e:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	492b      	ldr	r1, [pc, #172]	; (8003f14 <MPU6050_Kalman_Accel_Z+0x130>)
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fbdb 	bl	8000628 <__aeabi_dmul>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e7a:	f7fc fa1d 	bl	80002b8 <__aeabi_dsub>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <MPU6050_Kalman_Accel_Z+0x138>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc fbcc 	bl	8000628 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc fa0d 	bl	80002bc <__adddf3>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	491e      	ldr	r1, [pc, #120]	; (8003f20 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003ea8:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <MPU6050_Kalman_Accel_Z+0x138>)
 8003eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <MPU6050_Kalman_Accel_Z+0x130>)
 8003eb8:	f7fc fbb6 	bl	8000628 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	4913      	ldr	r1, [pc, #76]	; (8003f14 <MPU6050_Kalman_Accel_Z+0x130>)
 8003ec6:	f7fc f9f7 	bl	80002b8 <__aeabi_dsub>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc fba6 	bl	8000628 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <MPU6050_Kalman_Accel_Z+0x140>)
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f7fc f9e7 	bl	80002bc <__adddf3>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4907      	ldr	r1, [pc, #28]	; (8003f10 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003ef4:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f02:	eeb0 0a47 	vmov.f32	s0, s14
 8003f06:	eef0 0a67 	vmov.f32	s1, s15
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f10:	20000968 	.word	0x20000968
 8003f14:	3ff00000 	.word	0x3ff00000
 8003f18:	40440000 	.word	0x40440000
 8003f1c:	20000970 	.word	0x20000970
 8003f20:	200009a0 	.word	0x200009a0
 8003f24:	20000058 	.word	0x20000058

08003f28 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8003f2e:	f7ff fd1b 	bl	8003968 <MPU6050_Read_Gyro_X>
 8003f32:	ee10 3a10 	vmov	r3, s0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc fb1e 	bl	8000578 <__aeabi_f2d>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	4b42      	ldr	r3, [pc, #264]	; (8004058 <MPU6050_Kalman_Gyro_X+0x130>)
 8003f50:	f7fc fb6a 	bl	8000628 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4614      	mov	r4, r2
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	493d      	ldr	r1, [pc, #244]	; (8004058 <MPU6050_Kalman_Gyro_X+0x130>)
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc fb5e 	bl	8000628 <__aeabi_dmul>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	4b37      	ldr	r3, [pc, #220]	; (8004058 <MPU6050_Kalman_Gyro_X+0x130>)
 8003f7a:	f7fc fb55 	bl	8000628 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <MPU6050_Kalman_Gyro_X+0x134>)
 8003f8c:	f7fc f996 	bl	80002bc <__adddf3>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc fc70 	bl	800087c <__aeabi_ddiv>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	492f      	ldr	r1, [pc, #188]	; (8004060 <MPU6050_Kalman_Gyro_X+0x138>)
 8003fa2:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	492b      	ldr	r1, [pc, #172]	; (8004058 <MPU6050_Kalman_Gyro_X+0x130>)
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f7fc fb39 	bl	8000628 <__aeabi_dmul>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fbe:	f7fc f97b 	bl	80002b8 <__aeabi_dsub>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4b25      	ldr	r3, [pc, #148]	; (8004060 <MPU6050_Kalman_Gyro_X+0x138>)
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f7fc fb2a 	bl	8000628 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc f96b 	bl	80002bc <__adddf3>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	491e      	ldr	r1, [pc, #120]	; (8004064 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003fec:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <MPU6050_Kalman_Gyro_X+0x138>)
 8003ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	4b17      	ldr	r3, [pc, #92]	; (8004058 <MPU6050_Kalman_Gyro_X+0x130>)
 8003ffc:	f7fc fb14 	bl	8000628 <__aeabi_dmul>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	4913      	ldr	r1, [pc, #76]	; (8004058 <MPU6050_Kalman_Gyro_X+0x130>)
 800400a:	f7fc f955 	bl	80002b8 <__aeabi_dsub>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <MPU6050_Kalman_Gyro_X+0x12c>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc fb04 	bl	8000628 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <MPU6050_Kalman_Gyro_X+0x140>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc f945 	bl	80002bc <__adddf3>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4907      	ldr	r1, [pc, #28]	; (8004054 <MPU6050_Kalman_Gyro_X+0x12c>)
 8004038:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <MPU6050_Kalman_Gyro_X+0x13c>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	ec43 2b17 	vmov	d7, r2, r3
}
 8004046:	eeb0 0a47 	vmov.f32	s0, s14
 800404a:	eef0 0a67 	vmov.f32	s1, s15
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bdb0      	pop	{r4, r5, r7, pc}
 8004054:	20000978 	.word	0x20000978
 8004058:	3ff00000 	.word	0x3ff00000
 800405c:	40440000 	.word	0x40440000
 8004060:	20000980 	.word	0x20000980
 8004064:	200009a8 	.word	0x200009a8
 8004068:	20000060 	.word	0x20000060

0800406c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_MspInit+0x54>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <HAL_MspInit+0x54>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	6453      	str	r3, [r2, #68]	; 0x44
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_MspInit+0x54>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_MspInit+0x54>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_MspInit+0x54>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_MspInit+0x54>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	210f      	movs	r1, #15
 80040ae:	f06f 0001 	mvn.w	r0, #1
 80040b2:	f000 fc2f 	bl	8004914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a19      	ldr	r2, [pc, #100]	; (8004148 <HAL_I2C_MspInit+0x84>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d12b      	bne.n	800413e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <HAL_I2C_MspInit+0x88>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <HAL_I2C_MspInit+0x88>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_I2C_MspInit+0x88>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004102:	23c0      	movs	r3, #192	; 0xc0
 8004104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004106:	2312      	movs	r3, #18
 8004108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410e:	2303      	movs	r3, #3
 8004110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004112:	2304      	movs	r3, #4
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4619      	mov	r1, r3
 800411c:	480c      	ldr	r0, [pc, #48]	; (8004150 <HAL_I2C_MspInit+0x8c>)
 800411e:	f000 fcb5 	bl	8004a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_I2C_MspInit+0x88>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_I2C_MspInit+0x88>)
 800412c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_I2C_MspInit+0x88>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800413e:	bf00      	nop
 8004140:	3728      	adds	r7, #40	; 0x28
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40005400 	.word	0x40005400
 800414c:	40023800 	.word	0x40023800
 8004150:	40020400 	.word	0x40020400

08004154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0e      	ldr	r2, [pc, #56]	; (800419c <HAL_TIM_Base_MspInit+0x48>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d115      	bne.n	8004192 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <HAL_TIM_Base_MspInit+0x4c>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <HAL_TIM_Base_MspInit+0x4c>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6453      	str	r3, [r2, #68]	; 0x44
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_TIM_Base_MspInit+0x4c>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004182:	2200      	movs	r2, #0
 8004184:	2105      	movs	r1, #5
 8004186:	2019      	movs	r0, #25
 8004188:	f000 fbc4 	bl	8004914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800418c:	2019      	movs	r0, #25
 800418e:	f000 fbdd 	bl	800494c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 031c 	add.w	r3, r7, #28
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a36      	ldr	r2, [pc, #216]	; (800429c <HAL_UART_MspInit+0xf8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d12c      	bne.n	8004220 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a34      	ldr	r2, [pc, #208]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a2d      	ldr	r2, [pc, #180]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041fe:	230c      	movs	r3, #12
 8004200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800420e:	2307      	movs	r3, #7
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	f107 031c 	add.w	r3, r7, #28
 8004216:	4619      	mov	r1, r3
 8004218:	4822      	ldr	r0, [pc, #136]	; (80042a4 <HAL_UART_MspInit+0x100>)
 800421a:	f000 fc37 	bl	8004a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800421e:	e038      	b.n	8004292 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <HAL_UART_MspInit+0x104>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d133      	bne.n	8004292 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 8004234:	f043 0320 	orr.w	r3, r3, #32
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_UART_MspInit+0xfc>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004262:	23c0      	movs	r3, #192	; 0xc0
 8004264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426e:	2303      	movs	r3, #3
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004272:	2308      	movs	r3, #8
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004276:	f107 031c 	add.w	r3, r7, #28
 800427a:	4619      	mov	r1, r3
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <HAL_UART_MspInit+0x108>)
 800427e:	f000 fc05 	bl	8004a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2105      	movs	r1, #5
 8004286:	2047      	movs	r0, #71	; 0x47
 8004288:	f000 fb44 	bl	8004914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800428c:	2047      	movs	r0, #71	; 0x47
 800428e:	f000 fb5d 	bl	800494c <HAL_NVIC_EnableIRQ>
}
 8004292:	bf00      	nop
 8004294:	3730      	adds	r7, #48	; 0x30
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40004400 	.word	0x40004400
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020000 	.word	0x40020000
 80042a8:	40011400 	.word	0x40011400
 80042ac:	40020800 	.word	0x40020800

080042b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_InitTick+0xe8>)
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	4a33      	ldr	r2, [pc, #204]	; (8004398 <HAL_InitTick+0xe8>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6413      	str	r3, [r2, #64]	; 0x40
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_InitTick+0xe8>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042dc:	f107 0210 	add.w	r2, r7, #16
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 fe58 	bl	8005f9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042f6:	f001 fe29 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 80042fa:	6378      	str	r0, [r7, #52]	; 0x34
 80042fc:	e004      	b.n	8004308 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042fe:	f001 fe25 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8004302:	4603      	mov	r3, r0
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_InitTick+0xec>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	0c9b      	lsrs	r3, r3, #18
 8004312:	3b01      	subs	r3, #1
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_InitTick+0xf0>)
 8004318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800431c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_InitTick+0xf0>)
 8004320:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004324:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004326:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <HAL_InitTick+0xf0>)
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_InitTick+0xf0>)
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_InitTick+0xf0>)
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_InitTick+0xf0>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800433e:	4818      	ldr	r0, [pc, #96]	; (80043a0 <HAL_InitTick+0xf0>)
 8004340:	f002 faa6 	bl	8006890 <HAL_TIM_Base_Init>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800434a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11b      	bne.n	800438a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004352:	4813      	ldr	r0, [pc, #76]	; (80043a0 <HAL_InitTick+0xf0>)
 8004354:	f002 faec 	bl	8006930 <HAL_TIM_Base_Start_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800435e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004362:	2b00      	cmp	r3, #0
 8004364:	d111      	bne.n	800438a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004366:	201c      	movs	r0, #28
 8004368:	f000 faf0 	bl	800494c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	d808      	bhi.n	8004384 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004372:	2200      	movs	r2, #0
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	201c      	movs	r0, #28
 8004378:	f000 facc 	bl	8004914 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800437c:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_InitTick+0xf4>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e002      	b.n	800438a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800438a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800438e:	4618      	mov	r0, r3
 8004390:	3738      	adds	r7, #56	; 0x38
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	431bde83 	.word	0x431bde83
 80043a0:	200009b0 	.word	0x200009b0
 80043a4:	20000070 	.word	0x20000070

080043a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <NMI_Handler+0x4>

080043ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043b2:	e7fe      	b.n	80043b2 <HardFault_Handler+0x4>

080043b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <MemManage_Handler+0x4>

080043ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043be:	e7fe      	b.n	80043be <BusFault_Handler+0x4>

080043c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043c4:	e7fe      	b.n	80043c4 <UsageFault_Handler+0x4>

080043c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80043da:	f002 fb19 	bl	8006a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000614 	.word	0x20000614

080043e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <TIM2_IRQHandler+0x10>)
 80043ee:	f002 fb0f 	bl	8006a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200009b0 	.word	0x200009b0

080043fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((RollAng <=15 || RollAng >=-15) && Alt>=2400)
 8004400:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <USART6_IRQHandler+0xb8>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800440a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d909      	bls.n	8004428 <USART6_IRQHandler+0x2c>
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <USART6_IRQHandler+0xb8>)
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 800441e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004426:	db12      	blt.n	800444e <USART6_IRQHandler+0x52>
 8004428:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <USART6_IRQHandler+0xbc>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80044bc <USART6_IRQHandler+0xc0>
 8004432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	db08      	blt.n	800444e <USART6_IRQHandler+0x52>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800443c:	2201      	movs	r2, #1
 800443e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004442:	481f      	ldr	r0, [pc, #124]	; (80044c0 <USART6_IRQHandler+0xc4>)
 8004444:	f000 fcb6 	bl	8004db4 <HAL_GPIO_WritePin>
		flag = 2;
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <USART6_IRQHandler+0xc8>)
 800444a:	2202      	movs	r2, #2
 800444c:	601a      	str	r2, [r3, #0]
	}
	if((Alt <=600 && flag == 1) && flagDown == 1)
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <USART6_IRQHandler+0xbc>)
 8004450:	edd3 7a00 	vldr	s15, [r3]
 8004454:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80044c8 <USART6_IRQHandler+0xcc>
 8004458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004460:	d80b      	bhi.n	800447a <USART6_IRQHandler+0x7e>
 8004462:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <USART6_IRQHandler+0xc8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <USART6_IRQHandler+0x7e>
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <USART6_IRQHandler+0xd0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d103      	bne.n	800447a <USART6_IRQHandler+0x7e>
	{
		flag = 3;
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <USART6_IRQHandler+0xc8>)
 8004474:	2203      	movs	r2, #3
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e016      	b.n	80044a8 <USART6_IRQHandler+0xac>
	}
	else if(Alt <= 600 && flag == 2)
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <USART6_IRQHandler+0xbc>)
 800447c:	edd3 7a00 	vldr	s15, [r3]
 8004480:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80044c8 <USART6_IRQHandler+0xcc>
 8004484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	d80c      	bhi.n	80044a8 <USART6_IRQHandler+0xac>
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <USART6_IRQHandler+0xc8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d108      	bne.n	80044a8 <USART6_IRQHandler+0xac>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8004496:	2201      	movs	r2, #1
 8004498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800449c:	4808      	ldr	r0, [pc, #32]	; (80044c0 <USART6_IRQHandler+0xc4>)
 800449e:	f000 fc89 	bl	8004db4 <HAL_GPIO_WritePin>
		flag = 4;
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <USART6_IRQHandler+0xc8>)
 80044a4:	2204      	movs	r2, #4
 80044a6:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80044a8:	4809      	ldr	r0, [pc, #36]	; (80044d0 <USART6_IRQHandler+0xd4>)
 80044aa:	f002 ff83 	bl	80073b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000760 	.word	0x20000760
 80044b8:	2000078c 	.word	0x2000078c
 80044bc:	45160000 	.word	0x45160000
 80044c0:	40020000 	.word	0x40020000
 80044c4:	20000068 	.word	0x20000068
 80044c8:	44160000 	.word	0x44160000
 80044cc:	200007e4 	.word	0x200007e4
 80044d0:	200006a0 	.word	0x200006a0

080044d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <_kill>:

int _kill(int pid, int sig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ee:	f006 fe03 	bl	800b0f8 <__errno>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2216      	movs	r2, #22
 80044f6:	601a      	str	r2, [r3, #0]
  return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_exit>:

void _exit (int status)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ffe7 	bl	80044e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004516:	e7fe      	b.n	8004516 <_exit+0x12>

08004518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e00a      	b.n	8004540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800452a:	f3af 8000 	nop.w
 800452e:	4601      	mov	r1, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60ba      	str	r2, [r7, #8]
 8004536:	b2ca      	uxtb	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	3301      	adds	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	dbf0      	blt.n	800452a <_read+0x12>
  }

  return len;
 8004548:	687b      	ldr	r3, [r7, #4]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e009      	b.n	8004578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	60ba      	str	r2, [r7, #8]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	3301      	adds	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	dbf1      	blt.n	8004564 <_write+0x12>
  }
  return len;
 8004580:	687b      	ldr	r3, [r7, #4]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <_close>:

int _close(int file)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045b2:	605a      	str	r2, [r3, #4]
  return 0;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_isatty>:

int _isatty(int file)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045fc:	4a14      	ldr	r2, [pc, #80]	; (8004650 <_sbrk+0x5c>)
 80045fe:	4b15      	ldr	r3, [pc, #84]	; (8004654 <_sbrk+0x60>)
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <_sbrk+0x64>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <_sbrk+0x64>)
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <_sbrk+0x68>)
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <_sbrk+0x64>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d207      	bcs.n	8004634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004624:	f006 fd68 	bl	800b0f8 <__errno>
 8004628:	4603      	mov	r3, r0
 800462a:	220c      	movs	r2, #12
 800462c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	e009      	b.n	8004648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <_sbrk+0x64>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <_sbrk+0x64>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <_sbrk+0x64>)
 8004644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20020000 	.word	0x20020000
 8004654:	00000400 	.word	0x00000400
 8004658:	200009f8 	.word	0x200009f8
 800465c:	200048a0 	.word	0x200048a0

08004660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <SystemInit+0x20>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <SystemInit+0x20>)
 800466c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004688:	480d      	ldr	r0, [pc, #52]	; (80046c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800468a:	490e      	ldr	r1, [pc, #56]	; (80046c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800468c:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800468e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004690:	e002      	b.n	8004698 <LoopCopyDataInit>

08004692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004696:	3304      	adds	r3, #4

08004698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800469a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800469c:	d3f9      	bcc.n	8004692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046a0:	4c0b      	ldr	r4, [pc, #44]	; (80046d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046a4:	e001      	b.n	80046aa <LoopFillZerobss>

080046a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a8:	3204      	adds	r2, #4

080046aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046ac:	d3fb      	bcc.n	80046a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046ae:	f7ff ffd7 	bl	8004660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046b2:	f006 fd27 	bl	800b104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046b6:	f7fe fc6b 	bl	8002f90 <main>
  bx  lr    
 80046ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c4:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80046c8:	0800e788 	.word	0x0800e788
  ldr r2, =_sbss
 80046cc:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80046d0:	200048a0 	.word	0x200048a0

080046d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046d4:	e7fe      	b.n	80046d4 <ADC_IRQHandler>
	...

080046d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046dc:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <HAL_Init+0x40>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0d      	ldr	r2, [pc, #52]	; (8004718 <HAL_Init+0x40>)
 80046e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_Init+0x40>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <HAL_Init+0x40>)
 80046ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_Init+0x40>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a07      	ldr	r2, [pc, #28]	; (8004718 <HAL_Init+0x40>)
 80046fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004700:	2003      	movs	r0, #3
 8004702:	f000 f8fc 	bl	80048fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004706:	200f      	movs	r0, #15
 8004708:	f7ff fdd2 	bl	80042b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800470c:	f7ff fcae 	bl	800406c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023c00 	.word	0x40023c00

0800471c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_IncTick+0x20>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_IncTick+0x24>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4413      	add	r3, r2
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_IncTick+0x24>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000074 	.word	0x20000074
 8004740:	200009fc 	.word	0x200009fc

08004744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return uwTick;
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_GetTick+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	200009fc 	.word	0x200009fc

0800475c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004764:	f7ff ffee 	bl	8004744 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d005      	beq.n	8004782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_Delay+0x44>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004782:	bf00      	nop
 8004784:	f7ff ffde 	bl	8004744 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d8f7      	bhi.n	8004784 <HAL_Delay+0x28>
  {
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000074 	.word	0x20000074

080047a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <__NVIC_SetPriorityGrouping+0x44>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047c0:	4013      	ands	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047d6:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <__NVIC_SetPriorityGrouping+0x44>)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	60d3      	str	r3, [r2, #12]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <__NVIC_GetPriorityGrouping+0x18>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	f003 0307 	and.w	r3, r3, #7
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	2b00      	cmp	r3, #0
 8004818:	db0b      	blt.n	8004832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	f003 021f 	and.w	r2, r3, #31
 8004820:	4907      	ldr	r1, [pc, #28]	; (8004840 <__NVIC_EnableIRQ+0x38>)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2001      	movs	r0, #1
 800482a:	fa00 f202 	lsl.w	r2, r0, r2
 800482e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	e000e100 	.word	0xe000e100

08004844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	6039      	str	r1, [r7, #0]
 800484e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db0a      	blt.n	800486e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	490c      	ldr	r1, [pc, #48]	; (8004890 <__NVIC_SetPriority+0x4c>)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	440b      	add	r3, r1
 8004868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800486c:	e00a      	b.n	8004884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4908      	ldr	r1, [pc, #32]	; (8004894 <__NVIC_SetPriority+0x50>)
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	3b04      	subs	r3, #4
 800487c:	0112      	lsls	r2, r2, #4
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	440b      	add	r3, r1
 8004882:	761a      	strb	r2, [r3, #24]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000e100 	.word	0xe000e100
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f1c3 0307 	rsb	r3, r3, #7
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	bf28      	it	cs
 80048b6:	2304      	movcs	r3, #4
 80048b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3304      	adds	r3, #4
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d902      	bls.n	80048c8 <NVIC_EncodePriority+0x30>
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3b03      	subs	r3, #3
 80048c6:	e000      	b.n	80048ca <NVIC_EncodePriority+0x32>
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43da      	mvns	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	401a      	ands	r2, r3
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048e0:	f04f 31ff 	mov.w	r1, #4294967295
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	43d9      	mvns	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f0:	4313      	orrs	r3, r2
         );
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3724      	adds	r7, #36	; 0x24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ff4c 	bl	80047a4 <__NVIC_SetPriorityGrouping>
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004926:	f7ff ff61 	bl	80047ec <__NVIC_GetPriorityGrouping>
 800492a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	6978      	ldr	r0, [r7, #20]
 8004932:	f7ff ffb1 	bl	8004898 <NVIC_EncodePriority>
 8004936:	4602      	mov	r2, r0
 8004938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff80 	bl	8004844 <__NVIC_SetPriority>
}
 8004944:	bf00      	nop
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff54 	bl	8004808 <__NVIC_EnableIRQ>
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004976:	f7ff fee5 	bl	8004744 <HAL_GetTick>
 800497a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d008      	beq.n	800499a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2280      	movs	r2, #128	; 0x80
 800498c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e052      	b.n	8004a40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0216 	bic.w	r2, r2, #22
 80049a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_DMA_Abort+0x62>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0208 	bic.w	r2, r2, #8
 80049d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ea:	e013      	b.n	8004a14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ec:	f7ff feaa 	bl	8004744 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d90c      	bls.n	8004a14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2203      	movs	r2, #3
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e015      	b.n	8004a40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e4      	bne.n	80049ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	223f      	movs	r2, #63	; 0x3f
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d004      	beq.n	8004a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e00c      	b.n	8004a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2205      	movs	r2, #5
 8004a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e165      	b.n	8004d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	f040 8154 	bne.w	8004d6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d005      	beq.n	8004ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d130      	bne.n	8004b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	2203      	movs	r2, #3
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b14:	2201      	movs	r2, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 0201 	and.w	r2, r3, #1
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d017      	beq.n	8004b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	2203      	movs	r2, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d123      	bne.n	8004bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3208      	adds	r2, #8
 8004b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	220f      	movs	r2, #15
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	08da      	lsrs	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3208      	adds	r2, #8
 8004bca:	69b9      	ldr	r1, [r7, #24]
 8004bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	2203      	movs	r2, #3
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0203 	and.w	r2, r3, #3
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80ae 	beq.w	8004d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	4b5d      	ldr	r3, [pc, #372]	; (8004d8c <HAL_GPIO_Init+0x300>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	4a5c      	ldr	r2, [pc, #368]	; (8004d8c <HAL_GPIO_Init+0x300>)
 8004c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c20:	6453      	str	r3, [r2, #68]	; 0x44
 8004c22:	4b5a      	ldr	r3, [pc, #360]	; (8004d8c <HAL_GPIO_Init+0x300>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c2e:	4a58      	ldr	r2, [pc, #352]	; (8004d90 <HAL_GPIO_Init+0x304>)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	3302      	adds	r3, #2
 8004c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	220f      	movs	r2, #15
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4f      	ldr	r2, [pc, #316]	; (8004d94 <HAL_GPIO_Init+0x308>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d025      	beq.n	8004ca6 <HAL_GPIO_Init+0x21a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4e      	ldr	r2, [pc, #312]	; (8004d98 <HAL_GPIO_Init+0x30c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01f      	beq.n	8004ca2 <HAL_GPIO_Init+0x216>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4d      	ldr	r2, [pc, #308]	; (8004d9c <HAL_GPIO_Init+0x310>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d019      	beq.n	8004c9e <HAL_GPIO_Init+0x212>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a4c      	ldr	r2, [pc, #304]	; (8004da0 <HAL_GPIO_Init+0x314>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_GPIO_Init+0x20e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4b      	ldr	r2, [pc, #300]	; (8004da4 <HAL_GPIO_Init+0x318>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00d      	beq.n	8004c96 <HAL_GPIO_Init+0x20a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a4a      	ldr	r2, [pc, #296]	; (8004da8 <HAL_GPIO_Init+0x31c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d007      	beq.n	8004c92 <HAL_GPIO_Init+0x206>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a49      	ldr	r2, [pc, #292]	; (8004dac <HAL_GPIO_Init+0x320>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <HAL_GPIO_Init+0x202>
 8004c8a:	2306      	movs	r3, #6
 8004c8c:	e00c      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004c8e:	2307      	movs	r3, #7
 8004c90:	e00a      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004c92:	2305      	movs	r3, #5
 8004c94:	e008      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004c96:	2304      	movs	r3, #4
 8004c98:	e006      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e004      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e002      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_GPIO_Init+0x21c>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f002 0203 	and.w	r2, r2, #3
 8004cae:	0092      	lsls	r2, r2, #2
 8004cb0:	4093      	lsls	r3, r2
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cb8:	4935      	ldr	r1, [pc, #212]	; (8004d90 <HAL_GPIO_Init+0x304>)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cea:	4a31      	ldr	r2, [pc, #196]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d14:	4a26      	ldr	r2, [pc, #152]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d44:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d68:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	f67f ae96 	bls.w	8004aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3724      	adds	r7, #36	; 0x24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40013800 	.word	0x40013800
 8004d94:	40020000 	.word	0x40020000
 8004d98:	40020400 	.word	0x40020400
 8004d9c:	40020800 	.word	0x40020800
 8004da0:	40020c00 	.word	0x40020c00
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40021400 	.word	0x40021400
 8004dac:	40021800 	.word	0x40021800
 8004db0:	40013c00 	.word	0x40013c00

08004db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dc4:	787b      	ldrb	r3, [r7, #1]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dd0:	e003      	b.n	8004dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	041a      	lsls	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	619a      	str	r2, [r3, #24]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e12b      	b.n	8005052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff f958 	bl	80040c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f001 f87e 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8004e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a81      	ldr	r2, [pc, #516]	; (800505c <HAL_I2C_Init+0x274>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d807      	bhi.n	8004e6c <HAL_I2C_Init+0x84>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a80      	ldr	r2, [pc, #512]	; (8005060 <HAL_I2C_Init+0x278>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	bf94      	ite	ls
 8004e64:	2301      	movls	r3, #1
 8004e66:	2300      	movhi	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e006      	b.n	8004e7a <HAL_I2C_Init+0x92>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a7d      	ldr	r2, [pc, #500]	; (8005064 <HAL_I2C_Init+0x27c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	bf94      	ite	ls
 8004e74:	2301      	movls	r3, #1
 8004e76:	2300      	movhi	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e0e7      	b.n	8005052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a78      	ldr	r2, [pc, #480]	; (8005068 <HAL_I2C_Init+0x280>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0c9b      	lsrs	r3, r3, #18
 8004e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a6a      	ldr	r2, [pc, #424]	; (800505c <HAL_I2C_Init+0x274>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d802      	bhi.n	8004ebc <HAL_I2C_Init+0xd4>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	e009      	b.n	8004ed0 <HAL_I2C_Init+0xe8>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	4a69      	ldr	r2, [pc, #420]	; (800506c <HAL_I2C_Init+0x284>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	3301      	adds	r3, #1
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	495c      	ldr	r1, [pc, #368]	; (800505c <HAL_I2C_Init+0x274>)
 8004eec:	428b      	cmp	r3, r1
 8004eee:	d819      	bhi.n	8004f24 <HAL_I2C_Init+0x13c>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1e59      	subs	r1, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004efe:	1c59      	adds	r1, r3, #1
 8004f00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f04:	400b      	ands	r3, r1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_I2C_Init+0x138>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1e59      	subs	r1, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1e:	e051      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004f20:	2304      	movs	r3, #4
 8004f22:	e04f      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d111      	bne.n	8004f50 <HAL_I2C_Init+0x168>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1e58      	subs	r0, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	440b      	add	r3, r1
 8004f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e012      	b.n	8004f76 <HAL_I2C_Init+0x18e>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1e58      	subs	r0, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6859      	ldr	r1, [r3, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	0099      	lsls	r1, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f66:	3301      	adds	r3, #1
 8004f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Init+0x196>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e022      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10e      	bne.n	8004fa4 <HAL_I2C_Init+0x1bc>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e58      	subs	r0, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	440b      	add	r3, r1
 8004f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	e00f      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1e58      	subs	r0, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	0099      	lsls	r1, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	6809      	ldr	r1, [r1, #0]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6911      	ldr	r1, [r2, #16]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68d2      	ldr	r2, [r2, #12]
 8004ffe:	4311      	orrs	r1, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	430b      	orrs	r3, r1
 8005006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	000186a0 	.word	0x000186a0
 8005060:	001e847f 	.word	0x001e847f
 8005064:	003d08ff 	.word	0x003d08ff
 8005068:	431bde83 	.word	0x431bde83
 800506c:	10624dd3 	.word	0x10624dd3

08005070 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	4608      	mov	r0, r1
 800507a:	4611      	mov	r1, r2
 800507c:	461a      	mov	r2, r3
 800507e:	4603      	mov	r3, r0
 8005080:	817b      	strh	r3, [r7, #10]
 8005082:	460b      	mov	r3, r1
 8005084:	813b      	strh	r3, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800508a:	f7ff fb5b 	bl	8004744 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b20      	cmp	r3, #32
 800509a:	f040 80d9 	bne.w	8005250 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	2319      	movs	r3, #25
 80050a4:	2201      	movs	r2, #1
 80050a6:	496d      	ldr	r1, [pc, #436]	; (800525c <HAL_I2C_Mem_Write+0x1ec>)
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fc7f 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0cc      	b.n	8005252 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_I2C_Mem_Write+0x56>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0c5      	b.n	8005252 <HAL_I2C_Mem_Write+0x1e2>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d007      	beq.n	80050ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2221      	movs	r2, #33	; 0x21
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a4d      	ldr	r2, [pc, #308]	; (8005260 <HAL_I2C_Mem_Write+0x1f0>)
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800512e:	88f8      	ldrh	r0, [r7, #6]
 8005130:	893a      	ldrh	r2, [r7, #8]
 8005132:	8979      	ldrh	r1, [r7, #10]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4603      	mov	r3, r0
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fab6 	bl	80056b0 <I2C_RequestMemoryWrite>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d052      	beq.n	80051f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e081      	b.n	8005252 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fd00 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b04      	cmp	r3, #4
 8005164:	d107      	bne.n	8005176 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06b      	b.n	8005252 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d11b      	bne.n	80051f0 <HAL_I2C_Mem_Write+0x180>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d017      	beq.n	80051f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1aa      	bne.n	800514e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 fcec 	bl	8005bda <I2C_WaitOnBTFFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	2b04      	cmp	r3, #4
 800520e:	d107      	bne.n	8005220 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e016      	b.n	8005252 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	00100002 	.word	0x00100002
 8005260:	ffff0000 	.word	0xffff0000

08005264 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4603      	mov	r3, r0
 8005274:	817b      	strh	r3, [r7, #10]
 8005276:	460b      	mov	r3, r1
 8005278:	813b      	strh	r3, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800527e:	f7ff fa61 	bl	8004744 <HAL_GetTick>
 8005282:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b20      	cmp	r3, #32
 800528e:	f040 8208 	bne.w	80056a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2319      	movs	r3, #25
 8005298:	2201      	movs	r2, #1
 800529a:	497b      	ldr	r1, [pc, #492]	; (8005488 <HAL_I2C_Mem_Read+0x224>)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fb85 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
 80052aa:	e1fb      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_I2C_Mem_Read+0x56>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e1f4      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d007      	beq.n	80052e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2222      	movs	r2, #34	; 0x22
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a5b      	ldr	r2, [pc, #364]	; (800548c <HAL_I2C_Mem_Read+0x228>)
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005322:	88f8      	ldrh	r0, [r7, #6]
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	8979      	ldrh	r1, [r7, #10]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	4603      	mov	r3, r0
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fa52 	bl	80057dc <I2C_RequestMemoryRead>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e1b0      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	d113      	bne.n	8005372 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e184      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	2b01      	cmp	r3, #1
 8005378:	d11b      	bne.n	80053b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e164      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d11b      	bne.n	80053f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	e144      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005408:	e138      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540e:	2b03      	cmp	r3, #3
 8005410:	f200 80f1 	bhi.w	80055f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005418:	2b01      	cmp	r3, #1
 800541a:	d123      	bne.n	8005464 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800541c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fc1b 	bl	8005c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e139      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005462:	e10b      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	2b02      	cmp	r3, #2
 800546a:	d14e      	bne.n	800550a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	2200      	movs	r2, #0
 8005474:	4906      	ldr	r1, [pc, #24]	; (8005490 <HAL_I2C_Mem_Read+0x22c>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa98 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e10e      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
 8005486:	bf00      	nop
 8005488:	00100002 	.word	0x00100002
 800548c:	ffff0000 	.word	0xffff0000
 8005490:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005508:	e0b8      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2200      	movs	r2, #0
 8005512:	4966      	ldr	r1, [pc, #408]	; (80056ac <HAL_I2C_Mem_Read+0x448>)
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fa49 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0bf      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2200      	movs	r2, #0
 800556e:	494f      	ldr	r1, [pc, #316]	; (80056ac <HAL_I2C_Mem_Read+0x448>)
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fa1b 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e091      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055f4:	e042      	b.n	800567c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fb2e 	bl	8005c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e04c      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d118      	bne.n	800567c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005680:	2b00      	cmp	r3, #0
 8005682:	f47f aec2 	bne.w	800540a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3728      	adds	r7, #40	; 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	00010004 	.word	0x00010004

080056b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	460b      	mov	r3, r1
 80056c4:	813b      	strh	r3, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f960 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005700:	d103      	bne.n	800570a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e05f      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800571c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	6a3a      	ldr	r2, [r7, #32]
 8005722:	492d      	ldr	r1, [pc, #180]	; (80057d8 <I2C_RequestMemoryWrite+0x128>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f998 	bl	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e04c      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fa02 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b04      	cmp	r3, #4
 8005760:	d107      	bne.n	8005772 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e02b      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	e021      	b.n	80057cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	b29b      	uxth	r3, r3
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	6a39      	ldr	r1, [r7, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f9dc 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e005      	b.n	80057ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c2:	893b      	ldrh	r3, [r7, #8]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	00010002 	.word	0x00010002

080057dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005804:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2200      	movs	r2, #0
 800581e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f8c2 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583c:	d103      	bne.n	8005846 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0aa      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800584a:	897b      	ldrh	r3, [r7, #10]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	4952      	ldr	r1, [pc, #328]	; (80059a8 <I2C_RequestMemoryRead+0x1cc>)
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8fa 	bl	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e097      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	6a39      	ldr	r1, [r7, #32]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f964 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00d      	beq.n	80058b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b04      	cmp	r3, #4
 800589c:	d107      	bne.n	80058ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e076      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b8:	893b      	ldrh	r3, [r7, #8]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	e021      	b.n	8005908 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058c4:	893b      	ldrh	r3, [r7, #8]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	6a39      	ldr	r1, [r7, #32]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f93e 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d107      	bne.n	80058fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e050      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058fe:	893b      	ldrh	r3, [r7, #8]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	6a39      	ldr	r1, [r7, #32]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f923 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b04      	cmp	r3, #4
 800591e:	d107      	bne.n	8005930 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e035      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005942:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2200      	movs	r2, #0
 800594c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f82b 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596a:	d103      	bne.n	8005974 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e013      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005978:	897b      	ldrh	r3, [r7, #10]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	4906      	ldr	r1, [pc, #24]	; (80059a8 <I2C_RequestMemoryRead+0x1cc>)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f863 	bl	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	00010002 	.word	0x00010002

080059ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059bc:	e025      	b.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d021      	beq.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fe febd 	bl	8004744 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d116      	bne.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e023      	b.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d10d      	bne.n	8005a30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	e00c      	b.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	43da      	mvns	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d0b6      	beq.n	80059be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a68:	e051      	b.n	8005b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a78:	d123      	bne.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e046      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d021      	beq.n	8005b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fe fe3b 	bl	8004744 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d116      	bne.n	8005b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0220 	orr.w	r2, r3, #32
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e020      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d10c      	bne.n	8005b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bf14      	ite	ne
 8005b2a:	2301      	movne	r3, #1
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	e00b      	b.n	8005b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	43da      	mvns	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d18d      	bne.n	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b64:	e02d      	b.n	8005bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f8ce 	bl	8005d08 <I2C_IsAcknowledgeFailed>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e02d      	b.n	8005bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d021      	beq.n	8005bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7e:	f7fe fde1 	bl	8004744 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d302      	bcc.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d116      	bne.n	8005bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f043 0220 	orr.w	r2, r3, #32
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e007      	b.n	8005bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d1ca      	bne.n	8005b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005be6:	e02d      	b.n	8005c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f88d 	bl	8005d08 <I2C_IsAcknowledgeFailed>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e02d      	b.n	8005c54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d021      	beq.n	8005c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c00:	f7fe fda0 	bl	8004744 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d116      	bne.n	8005c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e007      	b.n	8005c54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d1ca      	bne.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c68:	e042      	b.n	8005cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d119      	bne.n	8005cac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0210 	mvn.w	r2, #16
 8005c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e029      	b.n	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cac:	f7fe fd4a 	bl	8004744 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d116      	bne.n	8005cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	f043 0220 	orr.w	r2, r3, #32
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e007      	b.n	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d1b5      	bne.n	8005c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1e:	d11b      	bne.n	8005d58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	f043 0204 	orr.w	r2, r3, #4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0cc      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b68      	ldr	r3, [pc, #416]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d90c      	bls.n	8005da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b65      	ldr	r3, [pc, #404]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	4b63      	ldr	r3, [pc, #396]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0b8      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d020      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dbc:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4a58      	ldr	r2, [pc, #352]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd4:	4b53      	ldr	r3, [pc, #332]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4a52      	ldr	r2, [pc, #328]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de0:	4b50      	ldr	r3, [pc, #320]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	494d      	ldr	r1, [pc, #308]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d044      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e06:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d119      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e07f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e26:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e06f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e36:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e067      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f023 0203 	bic.w	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4934      	ldr	r1, [pc, #208]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e58:	f7fe fc74 	bl	8004744 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e60:	f7fe fc70 	bl	8004744 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e04f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 020c 	and.w	r2, r3, #12
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d1eb      	bne.n	8005e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d20c      	bcs.n	8005eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e032      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4916      	ldr	r1, [pc, #88]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	490e      	ldr	r1, [pc, #56]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eee:	f000 f887 	bl	8006000 <HAL_RCC_GetSysClockFreq>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	490a      	ldr	r1, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	5ccb      	ldrb	r3, [r1, r3]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <HAL_RCC_ClockConfig+0x1c4>)
 8005f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_RCC_ClockConfig+0x1c8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe f9ce 	bl	80042b0 <HAL_InitTick>

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023c00 	.word	0x40023c00
 8005f24:	40023800 	.word	0x40023800
 8005f28:	0800e300 	.word	0x0800e300
 8005f2c:	2000006c 	.word	0x2000006c
 8005f30:	20000070 	.word	0x20000070

08005f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2000006c 	.word	0x2000006c

08005f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f50:	f7ff fff0 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	0a9b      	lsrs	r3, r3, #10
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4903      	ldr	r1, [pc, #12]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	0800e310 	.word	0x0800e310

08005f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f78:	f7ff ffdc 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0b5b      	lsrs	r3, r3, #13
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4903      	ldr	r1, [pc, #12]	; (8005f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40023800 	.word	0x40023800
 8005f98:	0800e310 	.word	0x0800e310

08005f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	220f      	movs	r2, #15
 8005faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fac:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0203 	and.w	r2, r3, #3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fd0:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	08db      	lsrs	r3, r3, #3
 8005fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fde:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <HAL_RCC_GetClockConfig+0x60>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 020f 	and.w	r2, r3, #15
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40023c00 	.word	0x40023c00

08006000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006004:	b0a6      	sub	sp, #152	; 0x98
 8006006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006026:	4bc8      	ldr	r3, [pc, #800]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b0c      	cmp	r3, #12
 8006030:	f200 817e 	bhi.w	8006330 <HAL_RCC_GetSysClockFreq+0x330>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006071 	.word	0x08006071
 8006040:	08006331 	.word	0x08006331
 8006044:	08006331 	.word	0x08006331
 8006048:	08006331 	.word	0x08006331
 800604c:	08006079 	.word	0x08006079
 8006050:	08006331 	.word	0x08006331
 8006054:	08006331 	.word	0x08006331
 8006058:	08006331 	.word	0x08006331
 800605c:	08006081 	.word	0x08006081
 8006060:	08006331 	.word	0x08006331
 8006064:	08006331 	.word	0x08006331
 8006068:	08006331 	.word	0x08006331
 800606c:	080061eb 	.word	0x080061eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4bb6      	ldr	r3, [pc, #728]	; (800634c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006076:	e15f      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006078:	4bb5      	ldr	r3, [pc, #724]	; (8006350 <HAL_RCC_GetSysClockFreq+0x350>)
 800607a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800607e:	e15b      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006080:	4bb1      	ldr	r3, [pc, #708]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800608c:	4bae      	ldr	r3, [pc, #696]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d031      	beq.n	80060fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006098:	4bab      	ldr	r3, [pc, #684]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	099b      	lsrs	r3, r3, #6
 800609e:	2200      	movs	r2, #0
 80060a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	663b      	str	r3, [r7, #96]	; 0x60
 80060ac:	2300      	movs	r3, #0
 80060ae:	667b      	str	r3, [r7, #100]	; 0x64
 80060b0:	4ba7      	ldr	r3, [pc, #668]	; (8006350 <HAL_RCC_GetSysClockFreq+0x350>)
 80060b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80060b6:	462a      	mov	r2, r5
 80060b8:	fb03 f202 	mul.w	r2, r3, r2
 80060bc:	2300      	movs	r3, #0
 80060be:	4621      	mov	r1, r4
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	4aa2      	ldr	r2, [pc, #648]	; (8006350 <HAL_RCC_GetSysClockFreq+0x350>)
 80060c8:	4621      	mov	r1, r4
 80060ca:	fba1 1202 	umull	r1, r2, r1, r2
 80060ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060d0:	460a      	mov	r2, r1
 80060d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80060d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80060d6:	4413      	add	r3, r2
 80060d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060de:	2200      	movs	r2, #0
 80060e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80060e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80060ec:	f7fa fe34 	bl	8000d58 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060fa:	e064      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fc:	4b92      	ldr	r3, [pc, #584]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	2200      	movs	r2, #0
 8006104:	653b      	str	r3, [r7, #80]	; 0x50
 8006106:	657a      	str	r2, [r7, #84]	; 0x54
 8006108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006110:	2300      	movs	r3, #0
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006114:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006118:	4622      	mov	r2, r4
 800611a:	462b      	mov	r3, r5
 800611c:	f04f 0000 	mov.w	r0, #0
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	0159      	lsls	r1, r3, #5
 8006126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800612a:	0150      	lsls	r0, r2, #5
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4621      	mov	r1, r4
 8006132:	1a51      	subs	r1, r2, r1
 8006134:	6139      	str	r1, [r7, #16]
 8006136:	4629      	mov	r1, r5
 8006138:	eb63 0301 	sbc.w	r3, r3, r1
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800614a:	4659      	mov	r1, fp
 800614c:	018b      	lsls	r3, r1, #6
 800614e:	4651      	mov	r1, sl
 8006150:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006154:	4651      	mov	r1, sl
 8006156:	018a      	lsls	r2, r1, #6
 8006158:	4651      	mov	r1, sl
 800615a:	ebb2 0801 	subs.w	r8, r2, r1
 800615e:	4659      	mov	r1, fp
 8006160:	eb63 0901 	sbc.w	r9, r3, r1
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006170:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006174:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006178:	4690      	mov	r8, r2
 800617a:	4699      	mov	r9, r3
 800617c:	4623      	mov	r3, r4
 800617e:	eb18 0303 	adds.w	r3, r8, r3
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	462b      	mov	r3, r5
 8006186:	eb49 0303 	adc.w	r3, r9, r3
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006198:	4629      	mov	r1, r5
 800619a:	028b      	lsls	r3, r1, #10
 800619c:	4621      	mov	r1, r4
 800619e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061a2:	4621      	mov	r1, r4
 80061a4:	028a      	lsls	r2, r1, #10
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ae:	2200      	movs	r2, #0
 80061b0:	643b      	str	r3, [r7, #64]	; 0x40
 80061b2:	647a      	str	r2, [r7, #68]	; 0x44
 80061b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061b8:	f7fa fdce 	bl	8000d58 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4613      	mov	r3, r2
 80061c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061c6:	4b60      	ldr	r3, [pc, #384]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	3301      	adds	r3, #1
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80061d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80061e8:	e0a6      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061ea:	4b57      	ldr	r3, [pc, #348]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061f6:	4b54      	ldr	r3, [pc, #336]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d02a      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006202:	4b51      	ldr	r3, [pc, #324]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	2200      	movs	r2, #0
 800620a:	63bb      	str	r3, [r7, #56]	; 0x38
 800620c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006214:	2100      	movs	r1, #0
 8006216:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <HAL_RCC_GetSysClockFreq+0x350>)
 8006218:	fb03 f201 	mul.w	r2, r3, r1
 800621c:	2300      	movs	r3, #0
 800621e:	fb00 f303 	mul.w	r3, r0, r3
 8006222:	4413      	add	r3, r2
 8006224:	4a4a      	ldr	r2, [pc, #296]	; (8006350 <HAL_RCC_GetSysClockFreq+0x350>)
 8006226:	fba0 1202 	umull	r1, r2, r0, r2
 800622a:	677a      	str	r2, [r7, #116]	; 0x74
 800622c:	460a      	mov	r2, r1
 800622e:	673a      	str	r2, [r7, #112]	; 0x70
 8006230:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006232:	4413      	add	r3, r2
 8006234:	677b      	str	r3, [r7, #116]	; 0x74
 8006236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800623a:	2200      	movs	r2, #0
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
 800623e:	637a      	str	r2, [r7, #52]	; 0x34
 8006240:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006244:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006248:	f7fa fd86 	bl	8000d58 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4613      	mov	r3, r2
 8006252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006256:	e05b      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006258:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	099b      	lsrs	r3, r3, #6
 800625e:	2200      	movs	r2, #0
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
 8006262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	623b      	str	r3, [r7, #32]
 800626c:	2300      	movs	r3, #0
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
 8006270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	f04f 0000 	mov.w	r0, #0
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	0159      	lsls	r1, r3, #5
 8006282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006286:	0150      	lsls	r0, r2, #5
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4641      	mov	r1, r8
 800628e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006292:	4649      	mov	r1, r9
 8006294:	eb63 0b01 	sbc.w	fp, r3, r1
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062ac:	ebb2 040a 	subs.w	r4, r2, sl
 80062b0:	eb63 050b 	sbc.w	r5, r3, fp
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	00eb      	lsls	r3, r5, #3
 80062be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c2:	00e2      	lsls	r2, r4, #3
 80062c4:	4614      	mov	r4, r2
 80062c6:	461d      	mov	r5, r3
 80062c8:	4643      	mov	r3, r8
 80062ca:	18e3      	adds	r3, r4, r3
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	464b      	mov	r3, r9
 80062d0:	eb45 0303 	adc.w	r3, r5, r3
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062e2:	4629      	mov	r1, r5
 80062e4:	028b      	lsls	r3, r1, #10
 80062e6:	4621      	mov	r1, r4
 80062e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062ec:	4621      	mov	r1, r4
 80062ee:	028a      	lsls	r2, r1, #10
 80062f0:	4610      	mov	r0, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062f8:	2200      	movs	r2, #0
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	61fa      	str	r2, [r7, #28]
 80062fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006302:	f7fa fd29 	bl	8000d58 <__aeabi_uldivmod>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4613      	mov	r3, r2
 800630c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006310:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <HAL_RCC_GetSysClockFreq+0x348>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	0f1b      	lsrs	r3, r3, #28
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800631e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800632e:	e003      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006336:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800633c:	4618      	mov	r0, r3
 800633e:	3798      	adds	r7, #152	; 0x98
 8006340:	46bd      	mov	sp, r7
 8006342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800
 800634c:	00f42400 	.word	0x00f42400
 8006350:	017d7840 	.word	0x017d7840

08006354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e28d      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8083 	beq.w	800647a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006374:	4b94      	ldr	r3, [pc, #592]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b04      	cmp	r3, #4
 800637e:	d019      	beq.n	80063b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006380:	4b91      	ldr	r3, [pc, #580]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006388:	2b08      	cmp	r3, #8
 800638a:	d106      	bne.n	800639a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800638c:	4b8e      	ldr	r3, [pc, #568]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006398:	d00c      	beq.n	80063b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639a:	4b8b      	ldr	r3, [pc, #556]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d112      	bne.n	80063cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b2:	d10b      	bne.n	80063cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	4b84      	ldr	r3, [pc, #528]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05b      	beq.n	8006478 <HAL_RCC_OscConfig+0x124>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d157      	bne.n	8006478 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e25a      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d106      	bne.n	80063e4 <HAL_RCC_OscConfig+0x90>
 80063d6:	4b7c      	ldr	r3, [pc, #496]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a7b      	ldr	r2, [pc, #492]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e01d      	b.n	8006420 <HAL_RCC_OscConfig+0xcc>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ec:	d10c      	bne.n	8006408 <HAL_RCC_OscConfig+0xb4>
 80063ee:	4b76      	ldr	r3, [pc, #472]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a75      	ldr	r2, [pc, #468]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	4b73      	ldr	r3, [pc, #460]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a72      	ldr	r2, [pc, #456]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	e00b      	b.n	8006420 <HAL_RCC_OscConfig+0xcc>
 8006408:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a6e      	ldr	r2, [pc, #440]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800640e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a6b      	ldr	r2, [pc, #428]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800641a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800641e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fe f98c 	bl	8004744 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006430:	f7fe f988 	bl	8004744 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e21f      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006442:	4b61      	ldr	r3, [pc, #388]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0xdc>
 800644e:	e014      	b.n	800647a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fe f978 	bl	8004744 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006458:	f7fe f974 	bl	8004744 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b64      	cmp	r3, #100	; 0x64
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e20b      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646a:	4b57      	ldr	r3, [pc, #348]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x104>
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d06f      	beq.n	8006566 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006486:	4b50      	ldr	r3, [pc, #320]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b00      	cmp	r3, #0
 8006490:	d017      	beq.n	80064c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006492:	4b4d      	ldr	r3, [pc, #308]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800649a:	2b08      	cmp	r3, #8
 800649c:	d105      	bne.n	80064aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800649e:	4b4a      	ldr	r3, [pc, #296]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064aa:	4b47      	ldr	r3, [pc, #284]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d11c      	bne.n	80064f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d116      	bne.n	80064f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCC_OscConfig+0x186>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d001      	beq.n	80064da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e1d3      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064da:	4b3b      	ldr	r3, [pc, #236]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4937      	ldr	r1, [pc, #220]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	e03a      	b.n	8006566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d020      	beq.n	800653a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f8:	4b34      	ldr	r3, [pc, #208]	; (80065cc <HAL_RCC_OscConfig+0x278>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fe f921 	bl	8004744 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006506:	f7fe f91d 	bl	8004744 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e1b4      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006518:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	4b28      	ldr	r3, [pc, #160]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4925      	ldr	r1, [pc, #148]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 8006534:	4313      	orrs	r3, r2
 8006536:	600b      	str	r3, [r1, #0]
 8006538:	e015      	b.n	8006566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <HAL_RCC_OscConfig+0x278>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fe f900 	bl	8004744 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006548:	f7fe f8fc 	bl	8004744 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e193      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d036      	beq.n	80065e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <HAL_RCC_OscConfig+0x27c>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fe f8e0 	bl	8004744 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006588:	f7fe f8dc 	bl	8004744 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e173      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_OscConfig+0x274>)
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0f0      	beq.n	8006588 <HAL_RCC_OscConfig+0x234>
 80065a6:	e01b      	b.n	80065e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <HAL_RCC_OscConfig+0x27c>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ae:	f7fe f8c9 	bl	8004744 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b4:	e00e      	b.n	80065d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b6:	f7fe f8c5 	bl	8004744 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d907      	bls.n	80065d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e15c      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
 80065c8:	40023800 	.word	0x40023800
 80065cc:	42470000 	.word	0x42470000
 80065d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d4:	4b8a      	ldr	r3, [pc, #552]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80065d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ea      	bne.n	80065b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8097 	beq.w	800671c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f2:	4b83      	ldr	r3, [pc, #524]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	4b7f      	ldr	r3, [pc, #508]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	4a7e      	ldr	r2, [pc, #504]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	6413      	str	r3, [r2, #64]	; 0x40
 800660e:	4b7c      	ldr	r3, [pc, #496]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661e:	4b79      	ldr	r3, [pc, #484]	; (8006804 <HAL_RCC_OscConfig+0x4b0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d118      	bne.n	800665c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662a:	4b76      	ldr	r3, [pc, #472]	; (8006804 <HAL_RCC_OscConfig+0x4b0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a75      	ldr	r2, [pc, #468]	; (8006804 <HAL_RCC_OscConfig+0x4b0>)
 8006630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006636:	f7fe f885 	bl	8004744 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663e:	f7fe f881 	bl	8004744 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e118      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <HAL_RCC_OscConfig+0x4b0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d106      	bne.n	8006672 <HAL_RCC_OscConfig+0x31e>
 8006664:	4b66      	ldr	r3, [pc, #408]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a65      	ldr	r2, [pc, #404]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	e01c      	b.n	80066ac <HAL_RCC_OscConfig+0x358>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x340>
 800667a:	4b61      	ldr	r3, [pc, #388]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	4a60      	ldr	r2, [pc, #384]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	6713      	str	r3, [r2, #112]	; 0x70
 8006686:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	4a5d      	ldr	r2, [pc, #372]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	6713      	str	r3, [r2, #112]	; 0x70
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0x358>
 8006694:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	4a59      	ldr	r2, [pc, #356]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	6713      	str	r3, [r2, #112]	; 0x70
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	4a56      	ldr	r2, [pc, #344]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80066a6:	f023 0304 	bic.w	r3, r3, #4
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fe f846 	bl	8004744 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ba:	e00a      	b.n	80066d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fe f842 	bl	8004744 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0d7      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0ee      	beq.n	80066bc <HAL_RCC_OscConfig+0x368>
 80066de:	e014      	b.n	800670a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fe f830 	bl	8004744 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fe f82c 	bl	8004744 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0c1      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fe:	4b40      	ldr	r3, [pc, #256]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ee      	bne.n	80066e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006710:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	4a3a      	ldr	r2, [pc, #232]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80ad 	beq.w	8006880 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b08      	cmp	r3, #8
 8006730:	d060      	beq.n	80067f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d145      	bne.n	80067c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673a:	4b33      	ldr	r3, [pc, #204]	; (8006808 <HAL_RCC_OscConfig+0x4b4>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fe f800 	bl	8004744 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006748:	f7fd fffc 	bl	8004744 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e093      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	4b29      	ldr	r3, [pc, #164]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	019b      	lsls	r3, r3, #6
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	491b      	ldr	r1, [pc, #108]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 8006794:	4313      	orrs	r3, r2
 8006796:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006798:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <HAL_RCC_OscConfig+0x4b4>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679e:	f7fd ffd1 	bl	8004744 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a6:	f7fd ffcd 	bl	8004744 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e064      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x452>
 80067c4:	e05c      	b.n	8006880 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <HAL_RCC_OscConfig+0x4b4>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fd ffba 	bl	8004744 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fd ffb6 	bl	8004744 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e04d      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_OscConfig+0x4ac>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x480>
 80067f2:	e045      	b.n	8006880 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e040      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
 8006800:	40023800 	.word	0x40023800
 8006804:	40007000 	.word	0x40007000
 8006808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800680c:	4b1f      	ldr	r3, [pc, #124]	; (800688c <HAL_RCC_OscConfig+0x538>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d030      	beq.n	800687c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d129      	bne.n	800687c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d122      	bne.n	800687c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800683c:	4013      	ands	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006844:	4293      	cmp	r3, r2
 8006846:	d119      	bne.n	800687c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	3b01      	subs	r3, #1
 8006856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d10f      	bne.n	800687c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d107      	bne.n	800687c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800

08006890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e041      	b.n	8006926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fd fc4c 	bl	8004154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f000 fa96 	bl	8006e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d001      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e04e      	b.n	80069e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d022      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d01d      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d018      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <HAL_TIM_Base_Start_IT+0xcc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d013      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <HAL_TIM_Base_Start_IT+0xd0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00e      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <HAL_TIM_Base_Start_IT+0xd4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a19      	ldr	r2, [pc, #100]	; (8006a08 <HAL_TIM_Base_Start_IT+0xd8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_TIM_Base_Start_IT+0xdc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d111      	bne.n	80069d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b06      	cmp	r3, #6
 80069c0:	d010      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d2:	e007      	b.n	80069e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00
 8006a04:	40010400 	.word	0x40010400
 8006a08:	40014000 	.word	0x40014000
 8006a0c:	40001800 	.word	0x40001800

08006a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d122      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d11b      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0202 	mvn.w	r2, #2
 8006a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9b5 	bl	8006dc2 <HAL_TIM_IC_CaptureCallback>
 8006a58:	e005      	b.n	8006a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9a7 	bl	8006dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9b8 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d122      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d11b      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0204 	mvn.w	r2, #4
 8006a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f98b 	bl	8006dc2 <HAL_TIM_IC_CaptureCallback>
 8006aac:	e005      	b.n	8006aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f97d 	bl	8006dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f98e 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d122      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d11b      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0208 	mvn.w	r2, #8
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f961 	bl	8006dc2 <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f953 	bl	8006dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f964 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d122      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d11b      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0210 	mvn.w	r2, #16
 8006b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f937 	bl	8006dc2 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f929 	bl	8006dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f93a 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0201 	mvn.w	r2, #1
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fc fd9c 	bl	80036cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bac:	2b80      	cmp	r3, #128	; 0x80
 8006bae:	d107      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fae0 	bl	8007180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d10e      	bne.n	8006bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d107      	bne.n	8006bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8ff 	bl	8006dea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d10e      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d107      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0220 	mvn.w	r2, #32
 8006c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 faaa 	bl	800716c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e0b4      	b.n	8006da6 <HAL_TIM_ConfigClockSource+0x186>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c74:	d03e      	beq.n	8006cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8006c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7a:	f200 8087 	bhi.w	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	f000 8086 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x172>
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8a:	d87f      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	d01a      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006c90:	2b70      	cmp	r3, #112	; 0x70
 8006c92:	d87b      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b60      	cmp	r3, #96	; 0x60
 8006c96:	d050      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x11a>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d877      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b50      	cmp	r3, #80	; 0x50
 8006c9e:	d03c      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0xfa>
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d873      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d058      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x13a>
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d86f      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d064      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d86b      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d060      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d867      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05c      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d05a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc4:	e062      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6899      	ldr	r1, [r3, #8]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f000 f9ad 	bl	8007034 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	609a      	str	r2, [r3, #8]
      break;
 8006cf2:	e04f      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f000 f996 	bl	8007034 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d16:	609a      	str	r2, [r3, #8]
      break;
 8006d18:	e03c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f000 f90a 	bl	8006f40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2150      	movs	r1, #80	; 0x50
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f963 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006d38:	e02c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f000 f929 	bl	8006f9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2160      	movs	r1, #96	; 0x60
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f953 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006d58:	e01c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f000 f8ea 	bl	8006f40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2140      	movs	r1, #64	; 0x40
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f943 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006d78:	e00c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f000 f93a 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006d8a:	e003      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e000      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a40      	ldr	r2, [pc, #256]	; (8006f14 <TIM_Base_SetConfig+0x114>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1e:	d00f      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a3d      	ldr	r2, [pc, #244]	; (8006f18 <TIM_Base_SetConfig+0x118>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a3c      	ldr	r2, [pc, #240]	; (8006f1c <TIM_Base_SetConfig+0x11c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a3b      	ldr	r2, [pc, #236]	; (8006f20 <TIM_Base_SetConfig+0x120>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a3a      	ldr	r2, [pc, #232]	; (8006f24 <TIM_Base_SetConfig+0x124>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d108      	bne.n	8006e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <TIM_Base_SetConfig+0x114>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d02b      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d027      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <TIM_Base_SetConfig+0x118>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d023      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a2b      	ldr	r2, [pc, #172]	; (8006f1c <TIM_Base_SetConfig+0x11c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01f      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <TIM_Base_SetConfig+0x120>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d01b      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a29      	ldr	r2, [pc, #164]	; (8006f24 <TIM_Base_SetConfig+0x124>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d017      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a28      	ldr	r2, [pc, #160]	; (8006f28 <TIM_Base_SetConfig+0x128>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <TIM_Base_SetConfig+0x12c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00f      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a26      	ldr	r2, [pc, #152]	; (8006f30 <TIM_Base_SetConfig+0x130>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a25      	ldr	r2, [pc, #148]	; (8006f34 <TIM_Base_SetConfig+0x134>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d007      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a24      	ldr	r2, [pc, #144]	; (8006f38 <TIM_Base_SetConfig+0x138>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a23      	ldr	r2, [pc, #140]	; (8006f3c <TIM_Base_SetConfig+0x13c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d108      	bne.n	8006ec4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <TIM_Base_SetConfig+0x114>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_Base_SetConfig+0xf8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <TIM_Base_SetConfig+0x124>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d103      	bne.n	8006f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	615a      	str	r2, [r3, #20]
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40010400 	.word	0x40010400
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800
 8006f34:	40001800 	.word	0x40001800
 8006f38:	40001c00 	.word	0x40001c00
 8006f3c:	40002000 	.word	0x40002000

08006f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f023 0201 	bic.w	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f023 030a 	bic.w	r3, r3, #10
 8006f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	621a      	str	r2, [r3, #32]
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f023 0210 	bic.w	r2, r3, #16
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	031b      	lsls	r3, r3, #12
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	f043 0307 	orr.w	r3, r3, #7
 8007020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800704e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	021a      	lsls	r2, r3, #8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	431a      	orrs	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4313      	orrs	r3, r2
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	609a      	str	r2, [r3, #8]
}
 8007068:	bf00      	nop
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007088:	2302      	movs	r3, #2
 800708a:	e05a      	b.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d022      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d8:	d01d      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d018      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1a      	ldr	r2, [pc, #104]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a18      	ldr	r2, [pc, #96]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a17      	ldr	r2, [pc, #92]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10c      	bne.n	8007130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800711c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4313      	orrs	r3, r2
 8007126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40010000 	.word	0x40010000
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40000c00 	.word	0x40000c00
 8007160:	40010400 	.word	0x40010400
 8007164:	40014000 	.word	0x40014000
 8007168:	40001800 	.word	0x40001800

0800716c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e03f      	b.n	8007226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fc fff2 	bl	80041a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2224      	movs	r2, #36	; 0x24
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fddf 	bl	8007d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800720c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b08a      	sub	sp, #40	; 0x28
 8007232:	af02      	add	r7, sp, #8
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b20      	cmp	r3, #32
 800724c:	d17c      	bne.n	8007348 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_UART_Transmit+0x2c>
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e075      	b.n	800734a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_UART_Transmit+0x3e>
 8007268:	2302      	movs	r3, #2
 800726a:	e06e      	b.n	800734a <HAL_UART_Transmit+0x11c>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2221      	movs	r2, #33	; 0x21
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007282:	f7fd fa5f 	bl	8004744 <HAL_GetTick>
 8007286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729c:	d108      	bne.n	80072b0 <HAL_UART_Transmit+0x82>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e003      	b.n	80072b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072c0:	e02a      	b.n	8007318 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	2180      	movs	r1, #128	; 0x80
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fb1f 	bl	8007910 <UART_WaitOnFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e036      	b.n	800734a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10b      	bne.n	80072fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	3302      	adds	r3, #2
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	e007      	b.n	800730a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	3301      	adds	r3, #1
 8007308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1cf      	bne.n	80072c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2200      	movs	r2, #0
 800732a:	2140      	movs	r1, #64	; 0x40
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 faef 	bl	8007910 <UART_WaitOnFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e006      	b.n	800734a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	e000      	b.n	800734a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007348:	2302      	movs	r3, #2
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	4613      	mov	r3, r2
 800735e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b20      	cmp	r3, #32
 800736a:	d11d      	bne.n	80073a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_UART_Receive_IT+0x26>
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e016      	b.n	80073aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_UART_Receive_IT+0x38>
 8007386:	2302      	movs	r3, #2
 8007388:	e00f      	b.n	80073aa <HAL_UART_Receive_IT+0x58>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	461a      	mov	r2, r3
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fb24 	bl	80079ec <UART_Start_Receive_IT>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e000      	b.n	80073aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073a8:	2302      	movs	r3, #2
  }
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b0ba      	sub	sp, #232	; 0xe8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073da:	2300      	movs	r3, #0
 80073dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10f      	bne.n	800741a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <HAL_UART_IRQHandler+0x66>
 8007406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc07 	bl	8007c26 <UART_Receive_IT>
      return;
 8007418:	e256      	b.n	80078c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800741a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80de 	beq.w	80075e0 <HAL_UART_IRQHandler+0x22c>
 8007424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007434:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80d1 	beq.w	80075e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800743e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <HAL_UART_IRQHandler+0xae>
 800744a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	f043 0201 	orr.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <HAL_UART_IRQHandler+0xd2>
 800746e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d005      	beq.n	8007486 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f043 0202 	orr.w	r2, r3, #2
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <HAL_UART_IRQHandler+0xf6>
 8007492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f043 0204 	orr.w	r2, r3, #4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <HAL_UART_IRQHandler+0x126>
 80074b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f043 0208 	orr.w	r2, r3, #8
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 81ed 	beq.w	80078be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <HAL_UART_IRQHandler+0x14e>
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb92 	bl	8007c26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d103      	bne.n	800752e <HAL_UART_IRQHandler+0x17a>
 8007526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d04f      	beq.n	80075ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa9a 	bl	8007a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d141      	bne.n	80075c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3314      	adds	r3, #20
 800756a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800756e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800757a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1d9      	bne.n	8007542 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	2b00      	cmp	r3, #0
 8007594:	d013      	beq.n	80075be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	4a7d      	ldr	r2, [pc, #500]	; (8007790 <HAL_UART_IRQHandler+0x3dc>)
 800759c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fd fa50 	bl	8004a48 <HAL_DMA_Abort_IT>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d016      	beq.n	80075dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	e00e      	b.n	80075dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f990 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	e00a      	b.n	80075dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f98c 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075cc:	e006      	b.n	80075dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f988 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075da:	e170      	b.n	80078be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075dc:	bf00      	nop
    return;
 80075de:	e16e      	b.n	80078be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f040 814a 	bne.w	800787e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 8143 	beq.w	800787e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 813c 	beq.w	800787e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	f040 80b4 	bne.w	8007794 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007638:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 8140 	beq.w	80078c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800764a:	429a      	cmp	r2, r3
 800764c:	f080 8139 	bcs.w	80078c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007656:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007662:	f000 8088 	beq.w	8007776 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800767c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800769e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1d9      	bne.n	8007666 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3314      	adds	r3, #20
 80076d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e1      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3314      	adds	r3, #20
 800770e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007712:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007714:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e3      	bne.n	80076ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	330c      	adds	r3, #12
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007746:	f023 0310 	bic.w	r3, r3, #16
 800774a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	330c      	adds	r3, #12
 8007754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007758:	65ba      	str	r2, [r7, #88]	; 0x58
 800775a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800775e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e3      	bne.n	8007734 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	4618      	mov	r0, r3
 8007772:	f7fd f8f9 	bl	8004968 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800777e:	b29b      	uxth	r3, r3
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8b6 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800778c:	e099      	b.n	80078c2 <HAL_UART_IRQHandler+0x50e>
 800778e:	bf00      	nop
 8007790:	08007b2f 	.word	0x08007b2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800779c:	b29b      	uxth	r3, r3
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 808b 	beq.w	80078c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8086 	beq.w	80078c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077de:	647a      	str	r2, [r7, #68]	; 0x44
 80077e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e3      	bne.n	80077ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	623b      	str	r3, [r7, #32]
   return(result);
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007816:	633a      	str	r2, [r7, #48]	; 0x30
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800781c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e3      	bne.n	80077f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	60fb      	str	r3, [r7, #12]
   return(result);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0310 	bic.w	r3, r3, #16
 800784e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	330c      	adds	r3, #12
 8007858:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800785c:	61fa      	str	r2, [r7, #28]
 800785e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	617b      	str	r3, [r7, #20]
   return(result);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e3      	bne.n	8007838 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f83e 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800787c:	e023      	b.n	80078c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_UART_IRQHandler+0x4ea>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f95d 	bl	8007b56 <UART_Transmit_IT>
    return;
 800789c:	e014      	b.n	80078c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800789e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00e      	beq.n	80078c8 <HAL_UART_IRQHandler+0x514>
 80078aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f99d 	bl	8007bf6 <UART_EndTransmit_IT>
    return;
 80078bc:	e004      	b.n	80078c8 <HAL_UART_IRQHandler+0x514>
    return;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <HAL_UART_IRQHandler+0x514>
      return;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_UART_IRQHandler+0x514>
      return;
 80078c6:	bf00      	nop
  }
}
 80078c8:	37e8      	adds	r7, #232	; 0xe8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b090      	sub	sp, #64	; 0x40
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007920:	e050      	b.n	80079c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d04c      	beq.n	80079c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800792a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <UART_WaitOnFlagUntilTimeout+0x30>
 8007930:	f7fc ff08 	bl	8004744 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800793c:	429a      	cmp	r2, r3
 800793e:	d241      	bcs.n	80079c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007960:	637a      	str	r2, [r7, #52]	; 0x34
 8007962:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e5      	bne.n	8007940 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3314      	adds	r3, #20
 800797a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	613b      	str	r3, [r7, #16]
   return(result);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	63bb      	str	r3, [r7, #56]	; 0x38
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3314      	adds	r3, #20
 8007992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007994:	623a      	str	r2, [r7, #32]
 8007996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	69f9      	ldr	r1, [r7, #28]
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e5      	bne.n	8007974 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e00f      	b.n	80079e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4013      	ands	r3, r2
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d09f      	beq.n	8007922 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3740      	adds	r7, #64	; 0x40
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	88fa      	ldrh	r2, [r7, #6]
 8007a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2222      	movs	r2, #34	; 0x22
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695a      	ldr	r2, [r3, #20]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0220 	orr.w	r2, r2, #32
 8007a58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b095      	sub	sp, #84	; 0x54
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a90:	643a      	str	r2, [r7, #64]	; 0x40
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3314      	adds	r3, #20
 8007ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e5      	bne.n	8007aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d119      	bne.n	8007b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 0310 	bic.w	r3, r3, #16
 8007af6:	647b      	str	r3, [r7, #68]	; 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b00:	61ba      	str	r2, [r7, #24]
 8007b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6979      	ldr	r1, [r7, #20]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e5      	bne.n	8007ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b22:	bf00      	nop
 8007b24:	3754      	adds	r7, #84	; 0x54
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff fecb 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b21      	cmp	r3, #33	; 0x21
 8007b68:	d13e      	bne.n	8007be8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	d114      	bne.n	8007b9e <UART_Transmit_IT+0x48>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d110      	bne.n	8007b9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	1c9a      	adds	r2, r3, #2
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	621a      	str	r2, [r3, #32]
 8007b9c:	e008      	b.n	8007bb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	1c59      	adds	r1, r3, #1
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6211      	str	r1, [r2, #32]
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10f      	bne.n	8007be4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e000      	b.n	8007bea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fe5a 	bl	80078d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b08c      	sub	sp, #48	; 0x30
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b22      	cmp	r3, #34	; 0x22
 8007c38:	f040 80ab 	bne.w	8007d92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c44:	d117      	bne.n	8007c76 <UART_Receive_IT+0x50>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d113      	bne.n	8007c76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	1c9a      	adds	r2, r3, #2
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	629a      	str	r2, [r3, #40]	; 0x28
 8007c74:	e026      	b.n	8007cc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c88:	d007      	beq.n	8007c9a <UART_Receive_IT+0x74>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <UART_Receive_IT+0x82>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	e008      	b.n	8007cba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d15a      	bne.n	8007d8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0220 	bic.w	r2, r2, #32
 8007ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d135      	bne.n	8007d84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	330c      	adds	r3, #12
 8007d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f023 0310 	bic.w	r3, r3, #16
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3e:	623a      	str	r2, [r7, #32]
 8007d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	69f9      	ldr	r1, [r7, #28]
 8007d44:	6a3a      	ldr	r2, [r7, #32]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e5      	bne.n	8007d1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d10a      	bne.n	8007d76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fdbb 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
 8007d82:	e002      	b.n	8007d8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fb f873 	bl	8002e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e002      	b.n	8007d94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e000      	b.n	8007d94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3730      	adds	r7, #48	; 0x30
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da0:	b0c0      	sub	sp, #256	; 0x100
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db8:	68d9      	ldr	r1, [r3, #12]
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	ea40 0301 	orr.w	r3, r0, r1
 8007dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007df4:	f021 010c 	bic.w	r1, r1, #12
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e02:	430b      	orrs	r3, r1
 8007e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	6999      	ldr	r1, [r3, #24]
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	ea40 0301 	orr.w	r3, r0, r1
 8007e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b8f      	ldr	r3, [pc, #572]	; (8008068 <UART_SetConfig+0x2cc>)
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d005      	beq.n	8007e3c <UART_SetConfig+0xa0>
 8007e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4b8d      	ldr	r3, [pc, #564]	; (800806c <UART_SetConfig+0x2d0>)
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d104      	bne.n	8007e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e3c:	f7fe f89a 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 8007e40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e44:	e003      	b.n	8007e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e46:	f7fe f881 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8007e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e58:	f040 810c 	bne.w	8008074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	1891      	adds	r1, r2, r2
 8007e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e76:	415b      	adcs	r3, r3
 8007e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e7e:	4621      	mov	r1, r4
 8007e80:	eb12 0801 	adds.w	r8, r2, r1
 8007e84:	4629      	mov	r1, r5
 8007e86:	eb43 0901 	adc.w	r9, r3, r1
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	f04f 0300 	mov.w	r3, #0
 8007e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e9e:	4690      	mov	r8, r2
 8007ea0:	4699      	mov	r9, r3
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	eb18 0303 	adds.w	r3, r8, r3
 8007ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007eac:	462b      	mov	r3, r5
 8007eae:	eb49 0303 	adc.w	r3, r9, r3
 8007eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007eca:	460b      	mov	r3, r1
 8007ecc:	18db      	adds	r3, r3, r3
 8007ece:	653b      	str	r3, [r7, #80]	; 0x50
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	eb42 0303 	adc.w	r3, r2, r3
 8007ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ee0:	f7f8 ff3a 	bl	8000d58 <__aeabi_uldivmod>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4b61      	ldr	r3, [pc, #388]	; (8008070 <UART_SetConfig+0x2d4>)
 8007eea:	fba3 2302 	umull	r2, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	011c      	lsls	r4, r3, #4
 8007ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007efc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	1891      	adds	r1, r2, r2
 8007f0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f0c:	415b      	adcs	r3, r3
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f14:	4641      	mov	r1, r8
 8007f16:	eb12 0a01 	adds.w	sl, r2, r1
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f34:	4692      	mov	sl, r2
 8007f36:	469b      	mov	fp, r3
 8007f38:	4643      	mov	r3, r8
 8007f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8007f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f42:	464b      	mov	r3, r9
 8007f44:	eb4b 0303 	adc.w	r3, fp, r3
 8007f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f60:	460b      	mov	r3, r1
 8007f62:	18db      	adds	r3, r3, r3
 8007f64:	643b      	str	r3, [r7, #64]	; 0x40
 8007f66:	4613      	mov	r3, r2
 8007f68:	eb42 0303 	adc.w	r3, r2, r3
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f76:	f7f8 feef 	bl	8000d58 <__aeabi_uldivmod>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4b3b      	ldr	r3, [pc, #236]	; (8008070 <UART_SetConfig+0x2d4>)
 8007f82:	fba3 2301 	umull	r2, r3, r3, r1
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	2264      	movs	r2, #100	; 0x64
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	1acb      	subs	r3, r1, r3
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f96:	4b36      	ldr	r3, [pc, #216]	; (8008070 <UART_SetConfig+0x2d4>)
 8007f98:	fba3 2302 	umull	r2, r3, r3, r2
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fa4:	441c      	add	r4, r3
 8007fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fb8:	4642      	mov	r2, r8
 8007fba:	464b      	mov	r3, r9
 8007fbc:	1891      	adds	r1, r2, r2
 8007fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fc0:	415b      	adcs	r3, r3
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fc8:	4641      	mov	r1, r8
 8007fca:	1851      	adds	r1, r2, r1
 8007fcc:	6339      	str	r1, [r7, #48]	; 0x30
 8007fce:	4649      	mov	r1, r9
 8007fd0:	414b      	adcs	r3, r1
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fe0:	4659      	mov	r1, fp
 8007fe2:	00cb      	lsls	r3, r1, #3
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fea:	4651      	mov	r1, sl
 8007fec:	00ca      	lsls	r2, r1, #3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	189b      	adds	r3, r3, r2
 8007ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	460a      	mov	r2, r1
 8008000:	eb42 0303 	adc.w	r3, r2, r3
 8008004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008014:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800801c:	460b      	mov	r3, r1
 800801e:	18db      	adds	r3, r3, r3
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28
 8008022:	4613      	mov	r3, r2
 8008024:	eb42 0303 	adc.w	r3, r2, r3
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800802a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800802e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008032:	f7f8 fe91 	bl	8000d58 <__aeabi_uldivmod>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <UART_SetConfig+0x2d4>)
 800803c:	fba3 1302 	umull	r1, r3, r3, r2
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	2164      	movs	r1, #100	; 0x64
 8008044:	fb01 f303 	mul.w	r3, r1, r3
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	3332      	adds	r3, #50	; 0x32
 800804e:	4a08      	ldr	r2, [pc, #32]	; (8008070 <UART_SetConfig+0x2d4>)
 8008050:	fba2 2303 	umull	r2, r3, r2, r3
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	f003 0207 	and.w	r2, r3, #7
 800805a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4422      	add	r2, r4
 8008062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008064:	e106      	b.n	8008274 <UART_SetConfig+0x4d8>
 8008066:	bf00      	nop
 8008068:	40011000 	.word	0x40011000
 800806c:	40011400 	.word	0x40011400
 8008070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008078:	2200      	movs	r2, #0
 800807a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800807e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008086:	4642      	mov	r2, r8
 8008088:	464b      	mov	r3, r9
 800808a:	1891      	adds	r1, r2, r2
 800808c:	6239      	str	r1, [r7, #32]
 800808e:	415b      	adcs	r3, r3
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
 8008092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008096:	4641      	mov	r1, r8
 8008098:	1854      	adds	r4, r2, r1
 800809a:	4649      	mov	r1, r9
 800809c:	eb43 0501 	adc.w	r5, r3, r1
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	00eb      	lsls	r3, r5, #3
 80080aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ae:	00e2      	lsls	r2, r4, #3
 80080b0:	4614      	mov	r4, r2
 80080b2:	461d      	mov	r5, r3
 80080b4:	4643      	mov	r3, r8
 80080b6:	18e3      	adds	r3, r4, r3
 80080b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080bc:	464b      	mov	r3, r9
 80080be:	eb45 0303 	adc.w	r3, r5, r3
 80080c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080e2:	4629      	mov	r1, r5
 80080e4:	008b      	lsls	r3, r1, #2
 80080e6:	4621      	mov	r1, r4
 80080e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ec:	4621      	mov	r1, r4
 80080ee:	008a      	lsls	r2, r1, #2
 80080f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080f4:	f7f8 fe30 	bl	8000d58 <__aeabi_uldivmod>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4b60      	ldr	r3, [pc, #384]	; (8008280 <UART_SetConfig+0x4e4>)
 80080fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	011c      	lsls	r4, r3, #4
 8008106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800810a:	2200      	movs	r2, #0
 800810c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	1891      	adds	r1, r2, r2
 800811e:	61b9      	str	r1, [r7, #24]
 8008120:	415b      	adcs	r3, r3
 8008122:	61fb      	str	r3, [r7, #28]
 8008124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008128:	4641      	mov	r1, r8
 800812a:	1851      	adds	r1, r2, r1
 800812c:	6139      	str	r1, [r7, #16]
 800812e:	4649      	mov	r1, r9
 8008130:	414b      	adcs	r3, r1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008140:	4659      	mov	r1, fp
 8008142:	00cb      	lsls	r3, r1, #3
 8008144:	4651      	mov	r1, sl
 8008146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800814a:	4651      	mov	r1, sl
 800814c:	00ca      	lsls	r2, r1, #3
 800814e:	4610      	mov	r0, r2
 8008150:	4619      	mov	r1, r3
 8008152:	4603      	mov	r3, r0
 8008154:	4642      	mov	r2, r8
 8008156:	189b      	adds	r3, r3, r2
 8008158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800815c:	464b      	mov	r3, r9
 800815e:	460a      	mov	r2, r1
 8008160:	eb42 0303 	adc.w	r3, r2, r3
 8008164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	67bb      	str	r3, [r7, #120]	; 0x78
 8008172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008180:	4649      	mov	r1, r9
 8008182:	008b      	lsls	r3, r1, #2
 8008184:	4641      	mov	r1, r8
 8008186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800818a:	4641      	mov	r1, r8
 800818c:	008a      	lsls	r2, r1, #2
 800818e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008192:	f7f8 fde1 	bl	8000d58 <__aeabi_uldivmod>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4611      	mov	r1, r2
 800819c:	4b38      	ldr	r3, [pc, #224]	; (8008280 <UART_SetConfig+0x4e4>)
 800819e:	fba3 2301 	umull	r2, r3, r3, r1
 80081a2:	095b      	lsrs	r3, r3, #5
 80081a4:	2264      	movs	r2, #100	; 0x64
 80081a6:	fb02 f303 	mul.w	r3, r2, r3
 80081aa:	1acb      	subs	r3, r1, r3
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	3332      	adds	r3, #50	; 0x32
 80081b0:	4a33      	ldr	r2, [pc, #204]	; (8008280 <UART_SetConfig+0x4e4>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081bc:	441c      	add	r4, r3
 80081be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c2:	2200      	movs	r2, #0
 80081c4:	673b      	str	r3, [r7, #112]	; 0x70
 80081c6:	677a      	str	r2, [r7, #116]	; 0x74
 80081c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80081cc:	4642      	mov	r2, r8
 80081ce:	464b      	mov	r3, r9
 80081d0:	1891      	adds	r1, r2, r2
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	415b      	adcs	r3, r3
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081dc:	4641      	mov	r1, r8
 80081de:	1851      	adds	r1, r2, r1
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	4649      	mov	r1, r9
 80081e4:	414b      	adcs	r3, r1
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081f4:	4659      	mov	r1, fp
 80081f6:	00cb      	lsls	r3, r1, #3
 80081f8:	4651      	mov	r1, sl
 80081fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081fe:	4651      	mov	r1, sl
 8008200:	00ca      	lsls	r2, r1, #3
 8008202:	4610      	mov	r0, r2
 8008204:	4619      	mov	r1, r3
 8008206:	4603      	mov	r3, r0
 8008208:	4642      	mov	r2, r8
 800820a:	189b      	adds	r3, r3, r2
 800820c:	66bb      	str	r3, [r7, #104]	; 0x68
 800820e:	464b      	mov	r3, r9
 8008210:	460a      	mov	r2, r1
 8008212:	eb42 0303 	adc.w	r3, r2, r3
 8008216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	663b      	str	r3, [r7, #96]	; 0x60
 8008222:	667a      	str	r2, [r7, #100]	; 0x64
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008230:	4649      	mov	r1, r9
 8008232:	008b      	lsls	r3, r1, #2
 8008234:	4641      	mov	r1, r8
 8008236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800823a:	4641      	mov	r1, r8
 800823c:	008a      	lsls	r2, r1, #2
 800823e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008242:	f7f8 fd89 	bl	8000d58 <__aeabi_uldivmod>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <UART_SetConfig+0x4e4>)
 800824c:	fba3 1302 	umull	r1, r3, r3, r2
 8008250:	095b      	lsrs	r3, r3, #5
 8008252:	2164      	movs	r1, #100	; 0x64
 8008254:	fb01 f303 	mul.w	r3, r1, r3
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	3332      	adds	r3, #50	; 0x32
 800825e:	4a08      	ldr	r2, [pc, #32]	; (8008280 <UART_SetConfig+0x4e4>)
 8008260:	fba2 2303 	umull	r2, r3, r2, r3
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	f003 020f 	and.w	r2, r3, #15
 800826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4422      	add	r2, r4
 8008272:	609a      	str	r2, [r3, #8]
}
 8008274:	bf00      	nop
 8008276:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800827a:	46bd      	mov	sp, r7
 800827c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008280:	51eb851f 	.word	0x51eb851f

08008284 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008296:	2b84      	cmp	r3, #132	; 0x84
 8008298:	d005      	beq.n	80082a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800829a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	3303      	adds	r3, #3
 80082a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80082a6:	68fb      	ldr	r3, [r7, #12]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80082b8:	f000 fe34 	bl	8008f24 <vTaskStartScheduler>
  
  return osOK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80082c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c4:	b089      	sub	sp, #36	; 0x24
 80082c6:	af04      	add	r7, sp, #16
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d020      	beq.n	8008316 <osThreadCreate+0x54>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01c      	beq.n	8008316 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685c      	ldr	r4, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691e      	ldr	r6, [r3, #16]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff ffc8 	bl	8008284 <makeFreeRtosPriority>
 80082f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082fe:	9202      	str	r2, [sp, #8]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	9100      	str	r1, [sp, #0]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	4632      	mov	r2, r6
 8008308:	4629      	mov	r1, r5
 800830a:	4620      	mov	r0, r4
 800830c:	f000 fc2c 	bl	8008b68 <xTaskCreateStatic>
 8008310:	4603      	mov	r3, r0
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e01c      	b.n	8008350 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685c      	ldr	r4, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008322:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff ffaa 	bl	8008284 <makeFreeRtosPriority>
 8008330:	4602      	mov	r2, r0
 8008332:	f107 030c 	add.w	r3, r7, #12
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	9200      	str	r2, [sp, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	4632      	mov	r2, r6
 800833e:	4629      	mov	r1, r5
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fc6e 	bl	8008c22 <xTaskCreate>
 8008346:	4603      	mov	r3, r0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d001      	beq.n	8008350 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	e000      	b.n	8008352 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008350:	68fb      	ldr	r3, [r7, #12]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800835a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <osDelay+0x16>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	e000      	b.n	8008372 <osDelay+0x18>
 8008370:	2301      	movs	r3, #1
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fda2 	bl	8008ebc <vTaskDelay>
  
  return osOK;
 8008378:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af02      	add	r7, sp, #8
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00f      	beq.n	80083b4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d10a      	bne.n	80083b0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2203      	movs	r2, #3
 80083a0:	9200      	str	r2, [sp, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2100      	movs	r1, #0
 80083a6:	2001      	movs	r0, #1
 80083a8:	f000 f93a 	bl	8008620 <xQueueGenericCreateStatic>
 80083ac:	4603      	mov	r3, r0
 80083ae:	e016      	b.n	80083de <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e014      	b.n	80083de <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d110      	bne.n	80083dc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80083ba:	2203      	movs	r2, #3
 80083bc:	2100      	movs	r1, #0
 80083be:	2001      	movs	r0, #1
 80083c0:	f000 f9a6 	bl	8008710 <xQueueGenericCreate>
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <osSemaphoreCreate+0x56>
 80083cc:	2300      	movs	r3, #0
 80083ce:	2200      	movs	r2, #0
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 f9f6 	bl	80087c4 <xQueueGenericSend>
      return sema;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e000      	b.n	80083de <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80083dc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f103 0208 	add.w	r2, r3, #8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295
 80083fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f103 0208 	add.w	r2, r3, #8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f103 0208 	add.w	r2, r3, #8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d103      	bne.n	80084a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	e00c      	b.n	80084c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3308      	adds	r3, #8
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e002      	b.n	80084b6 <vListInsert+0x2e>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d2f6      	bcs.n	80084b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	601a      	str	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6892      	ldr	r2, [r2, #8]
 8008510:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6852      	ldr	r2, [r2, #4]
 800851a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	429a      	cmp	r2, r3
 8008524:	d103      	bne.n	800852e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800857a:	f001 fb1b 	bl	8009bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	441a      	add	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	3b01      	subs	r3, #1
 80085ac:	68f9      	ldr	r1, [r7, #12]
 80085ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	441a      	add	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	22ff      	movs	r2, #255	; 0xff
 80085be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d114      	bne.n	80085fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01a      	beq.n	800860e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3310      	adds	r3, #16
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fef3 	bl	80093c8 <xTaskRemoveFromEventList>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <xQueueGenericReset+0xcc>)
 80085ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	e009      	b.n	800860e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3310      	adds	r3, #16
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fef1 	bl	80083e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff feec 	bl	80083e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800860e:	f001 fb01 	bl	8009c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008612:	2301      	movs	r3, #1
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	; 0x38
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <xQueueGenericCreateStatic+0x52>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <xQueueGenericCreateStatic+0x56>
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <xQueueGenericCreateStatic+0x58>
 8008676:	2300      	movs	r3, #0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	623b      	str	r3, [r7, #32]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <xQueueGenericCreateStatic+0x7e>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <xQueueGenericCreateStatic+0x82>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <xQueueGenericCreateStatic+0x84>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086be:	2348      	movs	r3, #72	; 0x48
 80086c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b48      	cmp	r3, #72	; 0x48
 80086c6:	d00a      	beq.n	80086de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61bb      	str	r3, [r7, #24]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f83f 	bl	8008784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008708:	4618      	mov	r0, r3
 800870a:	3730      	adds	r7, #48	; 0x30
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	613b      	str	r3, [r7, #16]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	3348      	adds	r3, #72	; 0x48
 8008748:	4618      	mov	r0, r3
 800874a:	f001 fb15 	bl	8009d78 <pvPortMalloc>
 800874e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	3348      	adds	r3, #72	; 0x48
 800875e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f805 	bl	8008784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800877a:	69bb      	ldr	r3, [r7, #24]
	}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087b2:	2101      	movs	r1, #1
 80087b4:	69b8      	ldr	r0, [r7, #24]
 80087b6:	f7ff fecb 	bl	8008550 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087ba:	bf00      	nop
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08e      	sub	sp, #56	; 0x38
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087d2:	2300      	movs	r3, #0
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <xQueueGenericSend+0x32>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <xQueueGenericSend+0x40>
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <xQueueGenericSend+0x44>
 8008804:	2301      	movs	r3, #1
 8008806:	e000      	b.n	800880a <xQueueGenericSend+0x46>
 8008808:	2300      	movs	r3, #0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <xQueueGenericSend+0x60>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008820:	bf00      	nop
 8008822:	e7fe      	b.n	8008822 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d103      	bne.n	8008832 <xQueueGenericSend+0x6e>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <xQueueGenericSend+0x72>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueGenericSend+0x74>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueGenericSend+0x8e>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	623b      	str	r3, [r7, #32]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008852:	f000 ff79 	bl	8009748 <xTaskGetSchedulerState>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <xQueueGenericSend+0x9e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <xQueueGenericSend+0xa2>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <xQueueGenericSend+0xa4>
 8008866:	2300      	movs	r3, #0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <xQueueGenericSend+0xbe>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	61fb      	str	r3, [r7, #28]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008882:	f001 f997 	bl	8009bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <xQueueGenericSend+0xd4>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b02      	cmp	r3, #2
 8008896:	d129      	bne.n	80088ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800889e:	f000 f88f 	bl	80089c0 <prvCopyDataToQueue>
 80088a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d010      	beq.n	80088ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	3324      	adds	r3, #36	; 0x24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fd89 	bl	80093c8 <xTaskRemoveFromEventList>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d013      	beq.n	80088e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088bc:	4b3f      	ldr	r3, [pc, #252]	; (80089bc <xQueueGenericSend+0x1f8>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	e00a      	b.n	80088e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088d4:	4b39      	ldr	r3, [pc, #228]	; (80089bc <xQueueGenericSend+0x1f8>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088e4:	f001 f996 	bl	8009c14 <vPortExitCritical>
				return pdPASS;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e063      	b.n	80089b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d103      	bne.n	80088fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088f2:	f001 f98f 	bl	8009c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e05c      	b.n	80089b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d106      	bne.n	800890e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fdc1 	bl	800948c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800890e:	f001 f981 	bl	8009c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008912:	f000 fb71 	bl	8008ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008916:	f001 f94d 	bl	8009bb4 <vPortEnterCritical>
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008920:	b25b      	sxtb	r3, r3
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008926:	d103      	bne.n	8008930 <xQueueGenericSend+0x16c>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008936:	b25b      	sxtb	r3, r3
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d103      	bne.n	8008946 <xQueueGenericSend+0x182>
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008946:	f001 f965 	bl	8009c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800894a:	1d3a      	adds	r2, r7, #4
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fdb0 	bl	80094b8 <xTaskCheckForTimeOut>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d124      	bne.n	80089a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800895e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008960:	f000 f8ea 	bl	8008b38 <prvIsQueueFull>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	3310      	adds	r3, #16
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fd04 	bl	8009380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800897a:	f000 f88b 	bl	8008a94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800897e:	f000 fb49 	bl	8009014 <xTaskResumeAll>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	f47f af7c 	bne.w	8008882 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <xQueueGenericSend+0x1f8>)
 800898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	e772      	b.n	8008882 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800899c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800899e:	f000 f879 	bl	8008a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089a2:	f000 fb37 	bl	8009014 <xTaskResumeAll>
 80089a6:	e76c      	b.n	8008882 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089aa:	f000 f873 	bl	8008a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ae:	f000 fb31 	bl	8009014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3738      	adds	r7, #56	; 0x38
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	e000ed04 	.word	0xe000ed04

080089c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10d      	bne.n	80089fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d14d      	bne.n	8008a82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 feca 	bl	8009784 <xTaskPriorityDisinherit>
 80089f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	e043      	b.n	8008a82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d119      	bne.n	8008a34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6858      	ldr	r0, [r3, #4]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	f002 fba1 	bl	800b152 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	441a      	add	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d32b      	bcc.n	8008a82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	605a      	str	r2, [r3, #4]
 8008a32:	e026      	b.n	8008a82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68d8      	ldr	r0, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	f002 fb87 	bl	800b152 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	425b      	negs	r3, r3
 8008a4e:	441a      	add	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d207      	bcs.n	8008a70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	425b      	negs	r3, r3
 8008a6a:	441a      	add	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d105      	bne.n	8008a82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a8a:	697b      	ldr	r3, [r7, #20]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a9c:	f001 f88a 	bl	8009bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aa8:	e011      	b.n	8008ace <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d012      	beq.n	8008ad8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3324      	adds	r3, #36	; 0x24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fc86 	bl	80093c8 <xTaskRemoveFromEventList>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ac2:	f000 fd5b 	bl	800957c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	dce9      	bgt.n	8008aaa <prvUnlockQueue+0x16>
 8008ad6:	e000      	b.n	8008ada <prvUnlockQueue+0x46>
					break;
 8008ad8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	22ff      	movs	r2, #255	; 0xff
 8008ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ae2:	f001 f897 	bl	8009c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ae6:	f001 f865 	bl	8009bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008af0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008af2:	e011      	b.n	8008b18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d012      	beq.n	8008b22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3310      	adds	r3, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 fc61 	bl	80093c8 <xTaskRemoveFromEventList>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b0c:	f000 fd36 	bl	800957c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dce9      	bgt.n	8008af4 <prvUnlockQueue+0x60>
 8008b20:	e000      	b.n	8008b24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	22ff      	movs	r2, #255	; 0xff
 8008b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b2c:	f001 f872 	bl	8009c14 <vPortExitCritical>
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b40:	f001 f838 	bl	8009bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d102      	bne.n	8008b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	e001      	b.n	8008b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b5a:	f001 f85b 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08e      	sub	sp, #56	; 0x38
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	623b      	str	r3, [r7, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10a      	bne.n	8008bae <xTaskCreateStatic+0x46>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	61fb      	str	r3, [r7, #28]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bae:	23a0      	movs	r3, #160	; 0xa0
 8008bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2ba0      	cmp	r3, #160	; 0xa0
 8008bb6:	d00a      	beq.n	8008bce <xTaskCreateStatic+0x66>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	61bb      	str	r3, [r7, #24]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01e      	beq.n	8008c14 <xTaskCreateStatic+0xac>
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01b      	beq.n	8008c14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9303      	str	r3, [sp, #12]
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	f107 0314 	add.w	r3, r7, #20
 8008bfa:	9301      	str	r3, [sp, #4]
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f850 	bl	8008cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c0e:	f000 f8eb 	bl	8008de8 <prvAddNewTaskToReadyList>
 8008c12:	e001      	b.n	8008c18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c18:	697b      	ldr	r3, [r7, #20]
	}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3728      	adds	r7, #40	; 0x28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b08c      	sub	sp, #48	; 0x30
 8008c26:	af04      	add	r7, sp, #16
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 f89e 	bl	8009d78 <pvPortMalloc>
 8008c3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00e      	beq.n	8008c62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c44:	20a0      	movs	r0, #160	; 0xa0
 8008c46:	f001 f897 	bl	8009d78 <pvPortMalloc>
 8008c4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30
 8008c58:	e005      	b.n	8008c66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c5a:	6978      	ldr	r0, [r7, #20]
 8008c5c:	f001 f958 	bl	8009f10 <vPortFree>
 8008c60:	e001      	b.n	8008c66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d017      	beq.n	8008c9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	2300      	movs	r3, #0
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	9302      	str	r3, [sp, #8]
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f80e 	bl	8008cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c90:	69f8      	ldr	r0, [r7, #28]
 8008c92:	f000 f8a9 	bl	8008de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c96:	2301      	movs	r3, #1
 8008c98:	61bb      	str	r3, [r7, #24]
 8008c9a:	e002      	b.n	8008ca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	f023 0307 	bic.w	r3, r3, #7
 8008cd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	617b      	str	r3, [r7, #20]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01f      	beq.n	8008d3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]
 8008cfe:	e012      	b.n	8008d26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	7819      	ldrb	r1, [r3, #0]
 8008d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	3334      	adds	r3, #52	; 0x34
 8008d10:	460a      	mov	r2, r1
 8008d12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3301      	adds	r3, #1
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b0f      	cmp	r3, #15
 8008d2a:	d9e9      	bls.n	8008d00 <prvInitialiseNewTask+0x54>
 8008d2c:	e000      	b.n	8008d30 <prvInitialiseNewTask+0x84>
			{
				break;
 8008d2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d38:	e003      	b.n	8008d42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	2b06      	cmp	r3, #6
 8008d46:	d901      	bls.n	8008d4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d48:	2306      	movs	r3, #6
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	3304      	adds	r3, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fb5f 	bl	8008426 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	3318      	adds	r3, #24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fb5a 	bl	8008426 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	f1c3 0207 	rsb	r2, r3, #7
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	334c      	adds	r3, #76	; 0x4c
 8008d9c:	224c      	movs	r2, #76	; 0x4c
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f002 f8f2 	bl	800af8a <memset>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	4a0c      	ldr	r2, [pc, #48]	; (8008ddc <prvInitialiseNewTask+0x130>)
 8008daa:	651a      	str	r2, [r3, #80]	; 0x50
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	4a0c      	ldr	r2, [pc, #48]	; (8008de0 <prvInitialiseNewTask+0x134>)
 8008db0:	655a      	str	r2, [r3, #84]	; 0x54
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	4a0b      	ldr	r2, [pc, #44]	; (8008de4 <prvInitialiseNewTask+0x138>)
 8008db6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	69b8      	ldr	r0, [r7, #24]
 8008dbe:	f000 fdcd 	bl	800995c <pxPortInitialiseStack>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd4:	bf00      	nop
 8008dd6:	3720      	adds	r7, #32
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20004754 	.word	0x20004754
 8008de0:	200047bc 	.word	0x200047bc
 8008de4:	20004824 	.word	0x20004824

08008de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008df0:	f000 fee0 	bl	8009bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008df4:	4b2a      	ldr	r3, [pc, #168]	; (8008ea0 <prvAddNewTaskToReadyList+0xb8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	4a29      	ldr	r2, [pc, #164]	; (8008ea0 <prvAddNewTaskToReadyList+0xb8>)
 8008dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dfe:	4b29      	ldr	r3, [pc, #164]	; (8008ea4 <prvAddNewTaskToReadyList+0xbc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e06:	4a27      	ldr	r2, [pc, #156]	; (8008ea4 <prvAddNewTaskToReadyList+0xbc>)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e0c:	4b24      	ldr	r3, [pc, #144]	; (8008ea0 <prvAddNewTaskToReadyList+0xb8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d110      	bne.n	8008e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e14:	f000 fbd6 	bl	80095c4 <prvInitialiseTaskLists>
 8008e18:	e00d      	b.n	8008e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <prvAddNewTaskToReadyList+0xc0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e22:	4b20      	ldr	r3, [pc, #128]	; (8008ea4 <prvAddNewTaskToReadyList+0xbc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d802      	bhi.n	8008e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e30:	4a1c      	ldr	r2, [pc, #112]	; (8008ea4 <prvAddNewTaskToReadyList+0xbc>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e36:	4b1d      	ldr	r3, [pc, #116]	; (8008eac <prvAddNewTaskToReadyList+0xc4>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <prvAddNewTaskToReadyList+0xc4>)
 8008e3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	2201      	movs	r2, #1
 8008e46:	409a      	lsls	r2, r3
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <prvAddNewTaskToReadyList+0xc8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	4a18      	ldr	r2, [pc, #96]	; (8008eb0 <prvAddNewTaskToReadyList+0xc8>)
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4a15      	ldr	r2, [pc, #84]	; (8008eb4 <prvAddNewTaskToReadyList+0xcc>)
 8008e60:	441a      	add	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f7ff fae9 	bl	8008440 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e6e:	f000 fed1 	bl	8009c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e72:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <prvAddNewTaskToReadyList+0xc0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <prvAddNewTaskToReadyList+0xbc>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d207      	bcs.n	8008e98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e88:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <prvAddNewTaskToReadyList+0xd0>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000b00 	.word	0x20000b00
 8008ea4:	20000a00 	.word	0x20000a00
 8008ea8:	20000b0c 	.word	0x20000b0c
 8008eac:	20000b1c 	.word	0x20000b1c
 8008eb0:	20000b08 	.word	0x20000b08
 8008eb4:	20000a04 	.word	0x20000a04
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d017      	beq.n	8008efe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <vTaskDelay+0x60>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <vTaskDelay+0x30>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	60bb      	str	r3, [r7, #8]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008eec:	f000 f884 	bl	8008ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fccc 	bl	8009890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ef8:	f000 f88c 	bl	8009014 <xTaskResumeAll>
 8008efc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d107      	bne.n	8008f14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f04:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <vTaskDelay+0x64>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000b28 	.word	0x20000b28
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f32:	463a      	mov	r2, r7
 8008f34:	1d39      	adds	r1, r7, #4
 8008f36:	f107 0308 	add.w	r3, r7, #8
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f9 fa10 	bl	8002360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	9202      	str	r2, [sp, #8]
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	460a      	mov	r2, r1
 8008f52:	4921      	ldr	r1, [pc, #132]	; (8008fd8 <vTaskStartScheduler+0xb4>)
 8008f54:	4821      	ldr	r0, [pc, #132]	; (8008fdc <vTaskStartScheduler+0xb8>)
 8008f56:	f7ff fe07 	bl	8008b68 <xTaskCreateStatic>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4a20      	ldr	r2, [pc, #128]	; (8008fe0 <vTaskStartScheduler+0xbc>)
 8008f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f60:	4b1f      	ldr	r3, [pc, #124]	; (8008fe0 <vTaskStartScheduler+0xbc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e001      	b.n	8008f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d11b      	bne.n	8008fb0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	613b      	str	r3, [r7, #16]
}
 8008f8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f8c:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <vTaskStartScheduler+0xc0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	334c      	adds	r3, #76	; 0x4c
 8008f92:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <vTaskStartScheduler+0xc4>)
 8008f94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f96:	4b15      	ldr	r3, [pc, #84]	; (8008fec <vTaskStartScheduler+0xc8>)
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f9e:	4b14      	ldr	r3, [pc, #80]	; (8008ff0 <vTaskStartScheduler+0xcc>)
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <vTaskStartScheduler+0xd0>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008faa:	f000 fd61 	bl	8009a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fae:	e00e      	b.n	8008fce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d10a      	bne.n	8008fce <vTaskStartScheduler+0xaa>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	60fb      	str	r3, [r7, #12]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <vTaskStartScheduler+0xa8>
}
 8008fce:	bf00      	nop
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	0800e2b4 	.word	0x0800e2b4
 8008fdc:	08009595 	.word	0x08009595
 8008fe0:	20000b24 	.word	0x20000b24
 8008fe4:	20000a00 	.word	0x20000a00
 8008fe8:	20000240 	.word	0x20000240
 8008fec:	20000b20 	.word	0x20000b20
 8008ff0:	20000b0c 	.word	0x20000b0c
 8008ff4:	20000b04 	.word	0x20000b04

08008ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <vTaskSuspendAll+0x18>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3301      	adds	r3, #1
 8009002:	4a03      	ldr	r2, [pc, #12]	; (8009010 <vTaskSuspendAll+0x18>)
 8009004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009006:	bf00      	nop
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20000b28 	.word	0x20000b28

08009014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800901e:	2300      	movs	r3, #0
 8009020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009022:	4b41      	ldr	r3, [pc, #260]	; (8009128 <xTaskResumeAll+0x114>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <xTaskResumeAll+0x2c>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	603b      	str	r3, [r7, #0]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009040:	f000 fdb8 	bl	8009bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009044:	4b38      	ldr	r3, [pc, #224]	; (8009128 <xTaskResumeAll+0x114>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3b01      	subs	r3, #1
 800904a:	4a37      	ldr	r2, [pc, #220]	; (8009128 <xTaskResumeAll+0x114>)
 800904c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904e:	4b36      	ldr	r3, [pc, #216]	; (8009128 <xTaskResumeAll+0x114>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d161      	bne.n	800911a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009056:	4b35      	ldr	r3, [pc, #212]	; (800912c <xTaskResumeAll+0x118>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d05d      	beq.n	800911a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800905e:	e02e      	b.n	80090be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009060:	4b33      	ldr	r3, [pc, #204]	; (8009130 <xTaskResumeAll+0x11c>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3318      	adds	r3, #24
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fa44 	bl	80084fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3304      	adds	r3, #4
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fa3f 	bl	80084fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	2201      	movs	r2, #1
 8009082:	409a      	lsls	r2, r3
 8009084:	4b2b      	ldr	r3, [pc, #172]	; (8009134 <xTaskResumeAll+0x120>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4313      	orrs	r3, r2
 800908a:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <xTaskResumeAll+0x120>)
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a27      	ldr	r2, [pc, #156]	; (8009138 <xTaskResumeAll+0x124>)
 800909c:	441a      	add	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7ff f9cb 	bl	8008440 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ae:	4b23      	ldr	r3, [pc, #140]	; (800913c <xTaskResumeAll+0x128>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d302      	bcc.n	80090be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80090b8:	4b21      	ldr	r3, [pc, #132]	; (8009140 <xTaskResumeAll+0x12c>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090be:	4b1c      	ldr	r3, [pc, #112]	; (8009130 <xTaskResumeAll+0x11c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1cc      	bne.n	8009060 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090cc:	f000 fb1c 	bl	8009708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090d0:	4b1c      	ldr	r3, [pc, #112]	; (8009144 <xTaskResumeAll+0x130>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090dc:	f000 f836 	bl	800914c <xTaskIncrementTick>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80090e6:	4b16      	ldr	r3, [pc, #88]	; (8009140 <xTaskResumeAll+0x12c>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1f1      	bne.n	80090dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80090f8:	4b12      	ldr	r3, [pc, #72]	; (8009144 <xTaskResumeAll+0x130>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090fe:	4b10      	ldr	r3, [pc, #64]	; (8009140 <xTaskResumeAll+0x12c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <xTaskResumeAll+0x134>)
 800910c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800911a:	f000 fd7b 	bl	8009c14 <vPortExitCritical>

	return xAlreadyYielded;
 800911e:	68bb      	ldr	r3, [r7, #8]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000b28 	.word	0x20000b28
 800912c:	20000b00 	.word	0x20000b00
 8009130:	20000ac0 	.word	0x20000ac0
 8009134:	20000b08 	.word	0x20000b08
 8009138:	20000a04 	.word	0x20000a04
 800913c:	20000a00 	.word	0x20000a00
 8009140:	20000b14 	.word	0x20000b14
 8009144:	20000b10 	.word	0x20000b10
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009156:	4b4e      	ldr	r3, [pc, #312]	; (8009290 <xTaskIncrementTick+0x144>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 808e 	bne.w	800927c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009160:	4b4c      	ldr	r3, [pc, #304]	; (8009294 <xTaskIncrementTick+0x148>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009168:	4a4a      	ldr	r2, [pc, #296]	; (8009294 <xTaskIncrementTick+0x148>)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d120      	bne.n	80091b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009174:	4b48      	ldr	r3, [pc, #288]	; (8009298 <xTaskIncrementTick+0x14c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <xTaskIncrementTick+0x48>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	603b      	str	r3, [r7, #0]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <xTaskIncrementTick+0x46>
 8009194:	4b40      	ldr	r3, [pc, #256]	; (8009298 <xTaskIncrementTick+0x14c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	4b40      	ldr	r3, [pc, #256]	; (800929c <xTaskIncrementTick+0x150>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a3e      	ldr	r2, [pc, #248]	; (8009298 <xTaskIncrementTick+0x14c>)
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	4a3e      	ldr	r2, [pc, #248]	; (800929c <xTaskIncrementTick+0x150>)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	4b3d      	ldr	r3, [pc, #244]	; (80092a0 <xTaskIncrementTick+0x154>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	4a3c      	ldr	r2, [pc, #240]	; (80092a0 <xTaskIncrementTick+0x154>)
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	f000 faa9 	bl	8009708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091b6:	4b3b      	ldr	r3, [pc, #236]	; (80092a4 <xTaskIncrementTick+0x158>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d348      	bcc.n	8009252 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c0:	4b35      	ldr	r3, [pc, #212]	; (8009298 <xTaskIncrementTick+0x14c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ca:	4b36      	ldr	r3, [pc, #216]	; (80092a4 <xTaskIncrementTick+0x158>)
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	601a      	str	r2, [r3, #0]
					break;
 80091d2:	e03e      	b.n	8009252 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d4:	4b30      	ldr	r3, [pc, #192]	; (8009298 <xTaskIncrementTick+0x14c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d203      	bcs.n	80091f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091ec:	4a2d      	ldr	r2, [pc, #180]	; (80092a4 <xTaskIncrementTick+0x158>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091f2:	e02e      	b.n	8009252 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	3304      	adds	r3, #4
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff f97e 	bl	80084fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	3318      	adds	r3, #24
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff f975 	bl	80084fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	2201      	movs	r2, #1
 8009216:	409a      	lsls	r2, r3
 8009218:	4b23      	ldr	r3, [pc, #140]	; (80092a8 <xTaskIncrementTick+0x15c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4313      	orrs	r3, r2
 800921e:	4a22      	ldr	r2, [pc, #136]	; (80092a8 <xTaskIncrementTick+0x15c>)
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4a1f      	ldr	r2, [pc, #124]	; (80092ac <xTaskIncrementTick+0x160>)
 8009230:	441a      	add	r2, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3304      	adds	r3, #4
 8009236:	4619      	mov	r1, r3
 8009238:	4610      	mov	r0, r2
 800923a:	f7ff f901 	bl	8008440 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009242:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <xTaskIncrementTick+0x164>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d3b9      	bcc.n	80091c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009250:	e7b6      	b.n	80091c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009252:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <xTaskIncrementTick+0x164>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009258:	4914      	ldr	r1, [pc, #80]	; (80092ac <xTaskIncrementTick+0x160>)
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d901      	bls.n	800926e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800926a:	2301      	movs	r3, #1
 800926c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800926e:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <xTaskIncrementTick+0x168>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d007      	beq.n	8009286 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009276:	2301      	movs	r3, #1
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	e004      	b.n	8009286 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <xTaskIncrementTick+0x16c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <xTaskIncrementTick+0x16c>)
 8009284:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009286:	697b      	ldr	r3, [r7, #20]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000b28 	.word	0x20000b28
 8009294:	20000b04 	.word	0x20000b04
 8009298:	20000ab8 	.word	0x20000ab8
 800929c:	20000abc 	.word	0x20000abc
 80092a0:	20000b18 	.word	0x20000b18
 80092a4:	20000b20 	.word	0x20000b20
 80092a8:	20000b08 	.word	0x20000b08
 80092ac:	20000a04 	.word	0x20000a04
 80092b0:	20000a00 	.word	0x20000a00
 80092b4:	20000b14 	.word	0x20000b14
 80092b8:	20000b10 	.word	0x20000b10

080092bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092c2:	4b29      	ldr	r3, [pc, #164]	; (8009368 <vTaskSwitchContext+0xac>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ca:	4b28      	ldr	r3, [pc, #160]	; (800936c <vTaskSwitchContext+0xb0>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092d0:	e044      	b.n	800935c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80092d2:	4b26      	ldr	r3, [pc, #152]	; (800936c <vTaskSwitchContext+0xb0>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d8:	4b25      	ldr	r3, [pc, #148]	; (8009370 <vTaskSwitchContext+0xb4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	fab3 f383 	clz	r3, r3
 80092e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	f1c3 031f 	rsb	r3, r3, #31
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	4921      	ldr	r1, [pc, #132]	; (8009374 <vTaskSwitchContext+0xb8>)
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10a      	bne.n	8009318 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	607b      	str	r3, [r7, #4]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <vTaskSwitchContext+0x5a>
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4a14      	ldr	r2, [pc, #80]	; (8009374 <vTaskSwitchContext+0xb8>)
 8009324:	4413      	add	r3, r2
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	605a      	str	r2, [r3, #4]
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3308      	adds	r3, #8
 800933a:	429a      	cmp	r2, r3
 800933c:	d104      	bne.n	8009348 <vTaskSwitchContext+0x8c>
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	605a      	str	r2, [r3, #4]
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	4a0a      	ldr	r2, [pc, #40]	; (8009378 <vTaskSwitchContext+0xbc>)
 8009350:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <vTaskSwitchContext+0xbc>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	334c      	adds	r3, #76	; 0x4c
 8009358:	4a08      	ldr	r2, [pc, #32]	; (800937c <vTaskSwitchContext+0xc0>)
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	bf00      	nop
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20000b28 	.word	0x20000b28
 800936c:	20000b14 	.word	0x20000b14
 8009370:	20000b08 	.word	0x20000b08
 8009374:	20000a04 	.word	0x20000a04
 8009378:	20000a00 	.word	0x20000a00
 800937c:	20000240 	.word	0x20000240

08009380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093a6:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <vTaskPlaceOnEventList+0x44>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3318      	adds	r3, #24
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7ff f86a 	bl	8008488 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093b4:	2101      	movs	r1, #1
 80093b6:	6838      	ldr	r0, [r7, #0]
 80093b8:	f000 fa6a 	bl	8009890 <prvAddCurrentTaskToDelayedList>
}
 80093bc:	bf00      	nop
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000a00 	.word	0x20000a00

080093c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60fb      	str	r3, [r7, #12]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	3318      	adds	r3, #24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff f87e 	bl	80084fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093fe:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <xTaskRemoveFromEventList+0xac>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d11c      	bne.n	8009440 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3304      	adds	r3, #4
 800940a:	4618      	mov	r0, r3
 800940c:	f7ff f875 	bl	80084fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	2201      	movs	r2, #1
 8009416:	409a      	lsls	r2, r3
 8009418:	4b17      	ldr	r3, [pc, #92]	; (8009478 <xTaskRemoveFromEventList+0xb0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4313      	orrs	r3, r2
 800941e:	4a16      	ldr	r2, [pc, #88]	; (8009478 <xTaskRemoveFromEventList+0xb0>)
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a13      	ldr	r2, [pc, #76]	; (800947c <xTaskRemoveFromEventList+0xb4>)
 8009430:	441a      	add	r2, r3
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7ff f801 	bl	8008440 <vListInsertEnd>
 800943e:	e005      	b.n	800944c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	3318      	adds	r3, #24
 8009444:	4619      	mov	r1, r3
 8009446:	480e      	ldr	r0, [pc, #56]	; (8009480 <xTaskRemoveFromEventList+0xb8>)
 8009448:	f7fe fffa 	bl	8008440 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <xTaskRemoveFromEventList+0xbc>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009456:	429a      	cmp	r2, r3
 8009458:	d905      	bls.n	8009466 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800945a:	2301      	movs	r3, #1
 800945c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800945e:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <xTaskRemoveFromEventList+0xc0>)
 8009460:	2201      	movs	r2, #1
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	e001      	b.n	800946a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800946a:	697b      	ldr	r3, [r7, #20]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000b28 	.word	0x20000b28
 8009478:	20000b08 	.word	0x20000b08
 800947c:	20000a04 	.word	0x20000a04
 8009480:	20000ac0 	.word	0x20000ac0
 8009484:	20000a00 	.word	0x20000a00
 8009488:	20000b14 	.word	0x20000b14

0800948c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009494:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <vTaskInternalSetTimeOutState+0x24>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <vTaskInternalSetTimeOutState+0x28>)
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	605a      	str	r2, [r3, #4]
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	20000b18 	.word	0x20000b18
 80094b4:	20000b04 	.word	0x20000b04

080094b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	613b      	str	r3, [r7, #16]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	60fb      	str	r3, [r7, #12]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094fa:	f000 fb5b 	bl	8009bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <xTaskCheckForTimeOut+0xbc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d102      	bne.n	800951e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e023      	b.n	8009566 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	4b15      	ldr	r3, [pc, #84]	; (8009578 <xTaskCheckForTimeOut+0xc0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	429a      	cmp	r2, r3
 8009528:	d007      	beq.n	800953a <xTaskCheckForTimeOut+0x82>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	429a      	cmp	r2, r3
 8009532:	d302      	bcc.n	800953a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	e015      	b.n	8009566 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	429a      	cmp	r2, r3
 8009542:	d20b      	bcs.n	800955c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	1ad2      	subs	r2, r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff9b 	bl	800948c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009556:	2300      	movs	r3, #0
 8009558:	61fb      	str	r3, [r7, #28]
 800955a:	e004      	b.n	8009566 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009562:	2301      	movs	r3, #1
 8009564:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009566:	f000 fb55 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 800956a:	69fb      	ldr	r3, [r7, #28]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000b04 	.word	0x20000b04
 8009578:	20000b18 	.word	0x20000b18

0800957c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009580:	4b03      	ldr	r3, [pc, #12]	; (8009590 <vTaskMissedYield+0x14>)
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
}
 8009586:	bf00      	nop
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20000b14 	.word	0x20000b14

08009594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800959c:	f000 f852 	bl	8009644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <prvIdleTask+0x28>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d9f9      	bls.n	800959c <prvIdleTask+0x8>
			{
				taskYIELD();
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <prvIdleTask+0x2c>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095b8:	e7f0      	b.n	800959c <prvIdleTask+0x8>
 80095ba:	bf00      	nop
 80095bc:	20000a04 	.word	0x20000a04
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095ca:	2300      	movs	r3, #0
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	e00c      	b.n	80095ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4a12      	ldr	r2, [pc, #72]	; (8009624 <prvInitialiseTaskLists+0x60>)
 80095dc:	4413      	add	r3, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe ff01 	bl	80083e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3301      	adds	r3, #1
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b06      	cmp	r3, #6
 80095ee:	d9ef      	bls.n	80095d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095f0:	480d      	ldr	r0, [pc, #52]	; (8009628 <prvInitialiseTaskLists+0x64>)
 80095f2:	f7fe fef8 	bl	80083e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095f6:	480d      	ldr	r0, [pc, #52]	; (800962c <prvInitialiseTaskLists+0x68>)
 80095f8:	f7fe fef5 	bl	80083e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095fc:	480c      	ldr	r0, [pc, #48]	; (8009630 <prvInitialiseTaskLists+0x6c>)
 80095fe:	f7fe fef2 	bl	80083e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009602:	480c      	ldr	r0, [pc, #48]	; (8009634 <prvInitialiseTaskLists+0x70>)
 8009604:	f7fe feef 	bl	80083e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009608:	480b      	ldr	r0, [pc, #44]	; (8009638 <prvInitialiseTaskLists+0x74>)
 800960a:	f7fe feec 	bl	80083e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800960e:	4b0b      	ldr	r3, [pc, #44]	; (800963c <prvInitialiseTaskLists+0x78>)
 8009610:	4a05      	ldr	r2, [pc, #20]	; (8009628 <prvInitialiseTaskLists+0x64>)
 8009612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <prvInitialiseTaskLists+0x7c>)
 8009616:	4a05      	ldr	r2, [pc, #20]	; (800962c <prvInitialiseTaskLists+0x68>)
 8009618:	601a      	str	r2, [r3, #0]
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000a04 	.word	0x20000a04
 8009628:	20000a90 	.word	0x20000a90
 800962c:	20000aa4 	.word	0x20000aa4
 8009630:	20000ac0 	.word	0x20000ac0
 8009634:	20000ad4 	.word	0x20000ad4
 8009638:	20000aec 	.word	0x20000aec
 800963c:	20000ab8 	.word	0x20000ab8
 8009640:	20000abc 	.word	0x20000abc

08009644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800964a:	e019      	b.n	8009680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800964c:	f000 fab2 	bl	8009bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009650:	4b10      	ldr	r3, [pc, #64]	; (8009694 <prvCheckTasksWaitingTermination+0x50>)
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3304      	adds	r3, #4
 800965c:	4618      	mov	r0, r3
 800965e:	f7fe ff4c 	bl	80084fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009662:	4b0d      	ldr	r3, [pc, #52]	; (8009698 <prvCheckTasksWaitingTermination+0x54>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3b01      	subs	r3, #1
 8009668:	4a0b      	ldr	r2, [pc, #44]	; (8009698 <prvCheckTasksWaitingTermination+0x54>)
 800966a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800966c:	4b0b      	ldr	r3, [pc, #44]	; (800969c <prvCheckTasksWaitingTermination+0x58>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3b01      	subs	r3, #1
 8009672:	4a0a      	ldr	r2, [pc, #40]	; (800969c <prvCheckTasksWaitingTermination+0x58>)
 8009674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009676:	f000 facd 	bl	8009c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f810 	bl	80096a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <prvCheckTasksWaitingTermination+0x58>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e1      	bne.n	800964c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000ad4 	.word	0x20000ad4
 8009698:	20000b00 	.word	0x20000b00
 800969c:	20000ae8 	.word	0x20000ae8

080096a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	334c      	adds	r3, #76	; 0x4c
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 fc97 	bl	800afe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d108      	bne.n	80096ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fc25 	bl	8009f10 <vPortFree>
				vPortFree( pxTCB );
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fc22 	bl	8009f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096cc:	e018      	b.n	8009700 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d103      	bne.n	80096e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fc19 	bl	8009f10 <vPortFree>
	}
 80096de:	e00f      	b.n	8009700 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d00a      	beq.n	8009700 <prvDeleteTCB+0x60>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	60fb      	str	r3, [r7, #12]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <prvDeleteTCB+0x5e>
	}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970e:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <prvResetNextTaskUnblockTime+0x38>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <prvResetNextTaskUnblockTime+0x3c>)
 800971a:	f04f 32ff 	mov.w	r2, #4294967295
 800971e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009720:	e008      	b.n	8009734 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009722:	4b07      	ldr	r3, [pc, #28]	; (8009740 <prvResetNextTaskUnblockTime+0x38>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	4a04      	ldr	r2, [pc, #16]	; (8009744 <prvResetNextTaskUnblockTime+0x3c>)
 8009732:	6013      	str	r3, [r2, #0]
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	20000ab8 	.word	0x20000ab8
 8009744:	20000b20 	.word	0x20000b20

08009748 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800974e:	4b0b      	ldr	r3, [pc, #44]	; (800977c <xTaskGetSchedulerState+0x34>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009756:	2301      	movs	r3, #1
 8009758:	607b      	str	r3, [r7, #4]
 800975a:	e008      	b.n	800976e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800975c:	4b08      	ldr	r3, [pc, #32]	; (8009780 <xTaskGetSchedulerState+0x38>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009764:	2302      	movs	r3, #2
 8009766:	607b      	str	r3, [r7, #4]
 8009768:	e001      	b.n	800976e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800976e:	687b      	ldr	r3, [r7, #4]
	}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20000b0c 	.word	0x20000b0c
 8009780:	20000b28 	.word	0x20000b28

08009784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06e      	beq.n	8009878 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800979a:	4b3a      	ldr	r3, [pc, #232]	; (8009884 <xTaskPriorityDisinherit+0x100>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d00a      	beq.n	80097ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	60fb      	str	r3, [r7, #12]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097dc:	1e5a      	subs	r2, r3, #1
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d044      	beq.n	8009878 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d140      	bne.n	8009878 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3304      	adds	r3, #4
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fe7d 	bl	80084fa <uxListRemove>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d115      	bne.n	8009832 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980a:	491f      	ldr	r1, [pc, #124]	; (8009888 <xTaskPriorityDisinherit+0x104>)
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <xTaskPriorityDisinherit+0xae>
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	2201      	movs	r2, #1
 8009822:	fa02 f303 	lsl.w	r3, r2, r3
 8009826:	43da      	mvns	r2, r3
 8009828:	4b18      	ldr	r3, [pc, #96]	; (800988c <xTaskPriorityDisinherit+0x108>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4013      	ands	r3, r2
 800982e:	4a17      	ldr	r2, [pc, #92]	; (800988c <xTaskPriorityDisinherit+0x108>)
 8009830:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	f1c3 0207 	rsb	r2, r3, #7
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	2201      	movs	r2, #1
 800984c:	409a      	lsls	r2, r3
 800984e:	4b0f      	ldr	r3, [pc, #60]	; (800988c <xTaskPriorityDisinherit+0x108>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4313      	orrs	r3, r2
 8009854:	4a0d      	ldr	r2, [pc, #52]	; (800988c <xTaskPriorityDisinherit+0x108>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4a08      	ldr	r2, [pc, #32]	; (8009888 <xTaskPriorityDisinherit+0x104>)
 8009866:	441a      	add	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fe fde6 	bl	8008440 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009878:	697b      	ldr	r3, [r7, #20]
	}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000a00 	.word	0x20000a00
 8009888:	20000a04 	.word	0x20000a04
 800988c:	20000b08 	.word	0x20000b08

08009890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800989a:	4b29      	ldr	r3, [pc, #164]	; (8009940 <prvAddCurrentTaskToDelayedList+0xb0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098a0:	4b28      	ldr	r3, [pc, #160]	; (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fe27 	bl	80084fa <uxListRemove>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10b      	bne.n	80098ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80098b2:	4b24      	ldr	r3, [pc, #144]	; (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	2201      	movs	r2, #1
 80098ba:	fa02 f303 	lsl.w	r3, r2, r3
 80098be:	43da      	mvns	r2, r3
 80098c0:	4b21      	ldr	r3, [pc, #132]	; (8009948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4013      	ands	r3, r2
 80098c6:	4a20      	ldr	r2, [pc, #128]	; (8009948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d10a      	bne.n	80098e8 <prvAddCurrentTaskToDelayedList+0x58>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d8:	4b1a      	ldr	r3, [pc, #104]	; (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	481a      	ldr	r0, [pc, #104]	; (800994c <prvAddCurrentTaskToDelayedList+0xbc>)
 80098e2:	f7fe fdad 	bl	8008440 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098e6:	e026      	b.n	8009936 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098f0:	4b14      	ldr	r3, [pc, #80]	; (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d209      	bcs.n	8009914 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009900:	4b13      	ldr	r3, [pc, #76]	; (8009950 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b0f      	ldr	r3, [pc, #60]	; (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3304      	adds	r3, #4
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f7fe fdbb 	bl	8008488 <vListInsert>
}
 8009912:	e010      	b.n	8009936 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3304      	adds	r3, #4
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f7fe fdb1 	bl	8008488 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	429a      	cmp	r2, r3
 800992e:	d202      	bcs.n	8009936 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009930:	4a09      	ldr	r2, [pc, #36]	; (8009958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	6013      	str	r3, [r2, #0]
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000b04 	.word	0x20000b04
 8009944:	20000a00 	.word	0x20000a00
 8009948:	20000b08 	.word	0x20000b08
 800994c:	20000aec 	.word	0x20000aec
 8009950:	20000abc 	.word	0x20000abc
 8009954:	20000ab8 	.word	0x20000ab8
 8009958:	20000b20 	.word	0x20000b20

0800995c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3b04      	subs	r3, #4
 800996c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3b04      	subs	r3, #4
 800997a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f023 0201 	bic.w	r2, r3, #1
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b04      	subs	r3, #4
 800998a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800998c:	4a0c      	ldr	r2, [pc, #48]	; (80099c0 <pxPortInitialiseStack+0x64>)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3b14      	subs	r3, #20
 8009996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3b04      	subs	r3, #4
 80099a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f06f 0202 	mvn.w	r2, #2
 80099aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3b20      	subs	r3, #32
 80099b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099b2:	68fb      	ldr	r3, [r7, #12]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	080099c5 	.word	0x080099c5

080099c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvTaskExitError+0x54>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d00a      	beq.n	80099ee <prvTaskExitError+0x2a>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	60fb      	str	r3, [r7, #12]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <prvTaskExitError+0x28>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60bb      	str	r3, [r7, #8]
}
 8009a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a02:	bf00      	nop
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0fc      	beq.n	8009a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	20000078 	.word	0x20000078
 8009a1c:	00000000 	.word	0x00000000

08009a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <pxCurrentTCBConst2>)
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	f380 8809 	msr	PSP, r0
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8811 	msr	BASEPRI, r0
 8009a3a:	4770      	bx	lr
 8009a3c:	f3af 8000 	nop.w

08009a40 <pxCurrentTCBConst2>:
 8009a40:	20000a00 	.word	0x20000a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <prvPortStartFirstTask+0x24>)
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	f380 8808 	msr	MSP, r0
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8814 	msr	CONTROL, r0
 8009a5a:	b662      	cpsie	i
 8009a5c:	b661      	cpsie	f
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	df00      	svc	0
 8009a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a6a:	bf00      	nop
 8009a6c:	e000ed08 	.word	0xe000ed08

08009a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a76:	4b46      	ldr	r3, [pc, #280]	; (8009b90 <xPortStartScheduler+0x120>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	; (8009b94 <xPortStartScheduler+0x124>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10a      	bne.n	8009a96 <xPortStartScheduler+0x26>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	613b      	str	r3, [r7, #16]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a96:	4b3e      	ldr	r3, [pc, #248]	; (8009b90 <xPortStartScheduler+0x120>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a3f      	ldr	r2, [pc, #252]	; (8009b98 <xPortStartScheduler+0x128>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10a      	bne.n	8009ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ab6:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <xPortStartScheduler+0x12c>)
 8009ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	22ff      	movs	r2, #255	; 0xff
 8009ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	4b31      	ldr	r3, [pc, #196]	; (8009ba0 <xPortStartScheduler+0x130>)
 8009adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ade:	4b31      	ldr	r3, [pc, #196]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ae4:	e009      	b.n	8009afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ae6:	4b2f      	ldr	r3, [pc, #188]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	4a2d      	ldr	r2, [pc, #180]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b02:	2b80      	cmp	r3, #128	; 0x80
 8009b04:	d0ef      	beq.n	8009ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b06:	4b27      	ldr	r3, [pc, #156]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1c3 0307 	rsb	r3, r3, #7
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d00a      	beq.n	8009b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60bb      	str	r3, [r7, #8]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b32:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b46:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b52:	4b15      	ldr	r3, [pc, #84]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a14      	ldr	r2, [pc, #80]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b5e:	f000 f8dd 	bl	8009d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b62:	4b12      	ldr	r3, [pc, #72]	; (8009bac <xPortStartScheduler+0x13c>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b68:	f000 f8fc 	bl	8009d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <xPortStartScheduler+0x140>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a0f      	ldr	r2, [pc, #60]	; (8009bb0 <xPortStartScheduler+0x140>)
 8009b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b78:	f7ff ff66 	bl	8009a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b7c:	f7ff fb9e 	bl	80092bc <vTaskSwitchContext>
	prvTaskExitError();
 8009b80:	f7ff ff20 	bl	80099c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	e000ed00 	.word	0xe000ed00
 8009b94:	410fc271 	.word	0x410fc271
 8009b98:	410fc270 	.word	0x410fc270
 8009b9c:	e000e400 	.word	0xe000e400
 8009ba0:	20000b2c 	.word	0x20000b2c
 8009ba4:	20000b30 	.word	0x20000b30
 8009ba8:	e000ed20 	.word	0xe000ed20
 8009bac:	20000078 	.word	0x20000078
 8009bb0:	e000ef34 	.word	0xe000ef34

08009bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	607b      	str	r3, [r7, #4]
}
 8009bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bce:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a0d      	ldr	r2, [pc, #52]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d10f      	bne.n	8009c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <vPortEnterCritical+0x5c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	603b      	str	r3, [r7, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	e7fe      	b.n	8009bfe <vPortEnterCritical+0x4a>
	}
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	20000078 	.word	0x20000078
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <vPortExitCritical+0x50>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <vPortExitCritical+0x24>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	607b      	str	r3, [r7, #4]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <vPortExitCritical+0x50>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <vPortExitCritical+0x50>)
 8009c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c42:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <vPortExitCritical+0x50>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <vPortExitCritical+0x42>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000078 	.word	0x20000078
	...

08009c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c70:	f3ef 8009 	mrs	r0, PSP
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4b15      	ldr	r3, [pc, #84]	; (8009cd0 <pxCurrentTCBConst>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	f01e 0f10 	tst.w	lr, #16
 8009c80:	bf08      	it	eq
 8009c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	6010      	str	r0, [r2, #0]
 8009c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c94:	f380 8811 	msr	BASEPRI, r0
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f7ff fb0c 	bl	80092bc <vTaskSwitchContext>
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	f380 8811 	msr	BASEPRI, r0
 8009cac:	bc09      	pop	{r0, r3}
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb6:	f01e 0f10 	tst.w	lr, #16
 8009cba:	bf08      	it	eq
 8009cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cc0:	f380 8809 	msr	PSP, r0
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst>:
 8009cd0:	20000a00 	.word	0x20000a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cf2:	f7ff fa2b 	bl	800914c <xTaskIncrementTick>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <SysTick_Handler+0x40>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	2300      	movs	r3, #0
 8009d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f383 8811 	msr	BASEPRI, r3
}
 8009d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <vPortSetupTimerInterrupt+0x38>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <vPortSetupTimerInterrupt+0x3c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <vPortSetupTimerInterrupt+0x40>)
 8009d32:	fba2 2303 	umull	r2, r3, r2, r3
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <vPortSetupTimerInterrupt+0x44>)
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d40:	2207      	movs	r2, #7
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	e000e010 	.word	0xe000e010
 8009d54:	e000e018 	.word	0xe000e018
 8009d58:	2000006c 	.word	0x2000006c
 8009d5c:	10624dd3 	.word	0x10624dd3
 8009d60:	e000e014 	.word	0xe000e014

08009d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d74 <vPortEnableVFP+0x10>
 8009d68:	6801      	ldr	r1, [r0, #0]
 8009d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d6e:	6001      	str	r1, [r0, #0]
 8009d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d72:	bf00      	nop
 8009d74:	e000ed88 	.word	0xe000ed88

08009d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08a      	sub	sp, #40	; 0x28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d84:	f7ff f938 	bl	8008ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d88:	4b5b      	ldr	r3, [pc, #364]	; (8009ef8 <pvPortMalloc+0x180>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d90:	f000 f920 	bl	8009fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d94:	4b59      	ldr	r3, [pc, #356]	; (8009efc <pvPortMalloc+0x184>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8093 	bne.w	8009ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01d      	beq.n	8009de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009da8:	2208      	movs	r2, #8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d014      	beq.n	8009de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f023 0307 	bic.w	r3, r3, #7
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <pvPortMalloc+0x6c>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	617b      	str	r3, [r7, #20]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d06e      	beq.n	8009ec8 <pvPortMalloc+0x150>
 8009dea:	4b45      	ldr	r3, [pc, #276]	; (8009f00 <pvPortMalloc+0x188>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d869      	bhi.n	8009ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009df4:	4b43      	ldr	r3, [pc, #268]	; (8009f04 <pvPortMalloc+0x18c>)
 8009df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009df8:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <pvPortMalloc+0x18c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dfe:	e004      	b.n	8009e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d903      	bls.n	8009e1c <pvPortMalloc+0xa4>
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f1      	bne.n	8009e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e1c:	4b36      	ldr	r3, [pc, #216]	; (8009ef8 <pvPortMalloc+0x180>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d050      	beq.n	8009ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	4413      	add	r3, r2
 8009e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	2308      	movs	r3, #8
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d91f      	bls.n	8009e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <pvPortMalloc+0xf8>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	613b      	str	r3, [r7, #16]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e82:	69b8      	ldr	r0, [r7, #24]
 8009e84:	f000 f908 	bl	800a098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e88:	4b1d      	ldr	r3, [pc, #116]	; (8009f00 <pvPortMalloc+0x188>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <pvPortMalloc+0x188>)
 8009e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <pvPortMalloc+0x188>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <pvPortMalloc+0x190>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d203      	bcs.n	8009eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ea2:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <pvPortMalloc+0x188>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a18      	ldr	r2, [pc, #96]	; (8009f08 <pvPortMalloc+0x190>)
 8009ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <pvPortMalloc+0x184>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <pvPortMalloc+0x194>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	4a11      	ldr	r2, [pc, #68]	; (8009f0c <pvPortMalloc+0x194>)
 8009ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ec8:	f7ff f8a4 	bl	8009014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <pvPortMalloc+0x174>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	60fb      	str	r3, [r7, #12]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <pvPortMalloc+0x172>
	return pvReturn;
 8009eec:	69fb      	ldr	r3, [r7, #28]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	2000473c 	.word	0x2000473c
 8009efc:	20004750 	.word	0x20004750
 8009f00:	20004740 	.word	0x20004740
 8009f04:	20004734 	.word	0x20004734
 8009f08:	20004744 	.word	0x20004744
 8009f0c:	20004748 	.word	0x20004748

08009f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d04d      	beq.n	8009fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f22:	2308      	movs	r3, #8
 8009f24:	425b      	negs	r3, r3
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4413      	add	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <vPortFree+0xb8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4013      	ands	r3, r2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <vPortFree+0x44>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	60fb      	str	r3, [r7, #12]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <vPortFree+0x62>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60bb      	str	r3, [r7, #8]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <vPortFree+0xb8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01e      	beq.n	8009fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11a      	bne.n	8009fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <vPortFree+0xb8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	43db      	mvns	r3, r3
 8009f92:	401a      	ands	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f98:	f7ff f82e 	bl	8008ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <vPortFree+0xbc>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <vPortFree+0xbc>)
 8009fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009faa:	6938      	ldr	r0, [r7, #16]
 8009fac:	f000 f874 	bl	800a098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <vPortFree+0xc0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a06      	ldr	r2, [pc, #24]	; (8009fd0 <vPortFree+0xc0>)
 8009fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fba:	f7ff f82b 	bl	8009014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fbe:	bf00      	nop
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20004750 	.word	0x20004750
 8009fcc:	20004740 	.word	0x20004740
 8009fd0:	2000474c 	.word	0x2000474c

08009fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fe0:	4b27      	ldr	r3, [pc, #156]	; (800a080 <prvHeapInit+0xac>)
 8009fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00c      	beq.n	800a008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0307 	bic.w	r3, r3, #7
 8009ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	4a1f      	ldr	r2, [pc, #124]	; (800a080 <prvHeapInit+0xac>)
 800a004:	4413      	add	r3, r2
 800a006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a00c:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <prvHeapInit+0xb0>)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a012:	4b1c      	ldr	r3, [pc, #112]	; (800a084 <prvHeapInit+0xb0>)
 800a014:	2200      	movs	r2, #0
 800a016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a020:	2208      	movs	r2, #8
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a15      	ldr	r2, [pc, #84]	; (800a088 <prvHeapInit+0xb4>)
 800a034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a036:	4b14      	ldr	r3, [pc, #80]	; (800a088 <prvHeapInit+0xb4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <prvHeapInit+0xb4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	1ad2      	subs	r2, r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <prvHeapInit+0xb4>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <prvHeapInit+0xb8>)
 800a062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <prvHeapInit+0xbc>)
 800a06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <prvHeapInit+0xc0>)
 800a06e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	20000b34 	.word	0x20000b34
 800a084:	20004734 	.word	0x20004734
 800a088:	2000473c 	.word	0x2000473c
 800a08c:	20004744 	.word	0x20004744
 800a090:	20004740 	.word	0x20004740
 800a094:	20004750 	.word	0x20004750

0800a098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <prvInsertBlockIntoFreeList+0xac>)
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e002      	b.n	800a0ac <prvInsertBlockIntoFreeList+0x14>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d8f7      	bhi.n	800a0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d108      	bne.n	800a0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d118      	bne.n	800a120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d00d      	beq.n	800a116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	441a      	add	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e008      	b.n	800a128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvInsertBlockIntoFreeList+0xb0>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	e003      	b.n	800a128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d002      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	20004734 	.word	0x20004734
 800a148:	2000473c 	.word	0x2000473c

0800a14c <sulp>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	4604      	mov	r4, r0
 800a150:	460d      	mov	r5, r1
 800a152:	ec45 4b10 	vmov	d0, r4, r5
 800a156:	4616      	mov	r6, r2
 800a158:	f001 ffe0 	bl	800c11c <__ulp>
 800a15c:	ec51 0b10 	vmov	r0, r1, d0
 800a160:	b17e      	cbz	r6, 800a182 <sulp+0x36>
 800a162:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a166:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dd09      	ble.n	800a182 <sulp+0x36>
 800a16e:	051b      	lsls	r3, r3, #20
 800a170:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a174:	2400      	movs	r4, #0
 800a176:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a17a:	4622      	mov	r2, r4
 800a17c:	462b      	mov	r3, r5
 800a17e:	f7f6 fa53 	bl	8000628 <__aeabi_dmul>
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	0000      	movs	r0, r0
	...

0800a188 <_strtod_l>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b02 	vpush	{d8}
 800a190:	b09b      	sub	sp, #108	; 0x6c
 800a192:	4604      	mov	r4, r0
 800a194:	9213      	str	r2, [sp, #76]	; 0x4c
 800a196:	2200      	movs	r2, #0
 800a198:	9216      	str	r2, [sp, #88]	; 0x58
 800a19a:	460d      	mov	r5, r1
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	f04f 0900 	mov.w	r9, #0
 800a1a4:	460a      	mov	r2, r1
 800a1a6:	9215      	str	r2, [sp, #84]	; 0x54
 800a1a8:	7811      	ldrb	r1, [r2, #0]
 800a1aa:	292b      	cmp	r1, #43	; 0x2b
 800a1ac:	d04c      	beq.n	800a248 <_strtod_l+0xc0>
 800a1ae:	d83a      	bhi.n	800a226 <_strtod_l+0x9e>
 800a1b0:	290d      	cmp	r1, #13
 800a1b2:	d834      	bhi.n	800a21e <_strtod_l+0x96>
 800a1b4:	2908      	cmp	r1, #8
 800a1b6:	d834      	bhi.n	800a222 <_strtod_l+0x9a>
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d03d      	beq.n	800a238 <_strtod_l+0xb0>
 800a1bc:	2200      	movs	r2, #0
 800a1be:	920a      	str	r2, [sp, #40]	; 0x28
 800a1c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a1c2:	7832      	ldrb	r2, [r6, #0]
 800a1c4:	2a30      	cmp	r2, #48	; 0x30
 800a1c6:	f040 80b4 	bne.w	800a332 <_strtod_l+0x1aa>
 800a1ca:	7872      	ldrb	r2, [r6, #1]
 800a1cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a1d0:	2a58      	cmp	r2, #88	; 0x58
 800a1d2:	d170      	bne.n	800a2b6 <_strtod_l+0x12e>
 800a1d4:	9302      	str	r3, [sp, #8]
 800a1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	ab16      	add	r3, sp, #88	; 0x58
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	4a8e      	ldr	r2, [pc, #568]	; (800a418 <_strtod_l+0x290>)
 800a1e0:	ab17      	add	r3, sp, #92	; 0x5c
 800a1e2:	a915      	add	r1, sp, #84	; 0x54
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f001 f87f 	bl	800b2e8 <__gethex>
 800a1ea:	f010 070f 	ands.w	r7, r0, #15
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	d005      	beq.n	800a1fe <_strtod_l+0x76>
 800a1f2:	2f06      	cmp	r7, #6
 800a1f4:	d12a      	bne.n	800a24c <_strtod_l+0xc4>
 800a1f6:	3601      	adds	r6, #1
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9615      	str	r6, [sp, #84]	; 0x54
 800a1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 857f 	bne.w	800ad04 <_strtod_l+0xb7c>
 800a206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a208:	b1db      	cbz	r3, 800a242 <_strtod_l+0xba>
 800a20a:	4642      	mov	r2, r8
 800a20c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a210:	ec43 2b10 	vmov	d0, r2, r3
 800a214:	b01b      	add	sp, #108	; 0x6c
 800a216:	ecbd 8b02 	vpop	{d8}
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	2920      	cmp	r1, #32
 800a220:	d1cc      	bne.n	800a1bc <_strtod_l+0x34>
 800a222:	3201      	adds	r2, #1
 800a224:	e7bf      	b.n	800a1a6 <_strtod_l+0x1e>
 800a226:	292d      	cmp	r1, #45	; 0x2d
 800a228:	d1c8      	bne.n	800a1bc <_strtod_l+0x34>
 800a22a:	2101      	movs	r1, #1
 800a22c:	910a      	str	r1, [sp, #40]	; 0x28
 800a22e:	1c51      	adds	r1, r2, #1
 800a230:	9115      	str	r1, [sp, #84]	; 0x54
 800a232:	7852      	ldrb	r2, [r2, #1]
 800a234:	2a00      	cmp	r2, #0
 800a236:	d1c3      	bne.n	800a1c0 <_strtod_l+0x38>
 800a238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a23a:	9515      	str	r5, [sp, #84]	; 0x54
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f040 855f 	bne.w	800ad00 <_strtod_l+0xb78>
 800a242:	4642      	mov	r2, r8
 800a244:	464b      	mov	r3, r9
 800a246:	e7e3      	b.n	800a210 <_strtod_l+0x88>
 800a248:	2100      	movs	r1, #0
 800a24a:	e7ef      	b.n	800a22c <_strtod_l+0xa4>
 800a24c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a24e:	b13a      	cbz	r2, 800a260 <_strtod_l+0xd8>
 800a250:	2135      	movs	r1, #53	; 0x35
 800a252:	a818      	add	r0, sp, #96	; 0x60
 800a254:	f002 f85f 	bl	800c316 <__copybits>
 800a258:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a25a:	4620      	mov	r0, r4
 800a25c:	f001 fc32 	bl	800bac4 <_Bfree>
 800a260:	3f01      	subs	r7, #1
 800a262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a264:	2f04      	cmp	r7, #4
 800a266:	d806      	bhi.n	800a276 <_strtod_l+0xee>
 800a268:	e8df f007 	tbb	[pc, r7]
 800a26c:	201d0314 	.word	0x201d0314
 800a270:	14          	.byte	0x14
 800a271:	00          	.byte	0x00
 800a272:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a276:	05e9      	lsls	r1, r5, #23
 800a278:	bf48      	it	mi
 800a27a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a27e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a282:	0d1b      	lsrs	r3, r3, #20
 800a284:	051b      	lsls	r3, r3, #20
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1b9      	bne.n	800a1fe <_strtod_l+0x76>
 800a28a:	f000 ff35 	bl	800b0f8 <__errno>
 800a28e:	2322      	movs	r3, #34	; 0x22
 800a290:	6003      	str	r3, [r0, #0]
 800a292:	e7b4      	b.n	800a1fe <_strtod_l+0x76>
 800a294:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a298:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a29c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a2a4:	e7e7      	b.n	800a276 <_strtod_l+0xee>
 800a2a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a420 <_strtod_l+0x298>
 800a2aa:	e7e4      	b.n	800a276 <_strtod_l+0xee>
 800a2ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a2b0:	f04f 38ff 	mov.w	r8, #4294967295
 800a2b4:	e7df      	b.n	800a276 <_strtod_l+0xee>
 800a2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	9215      	str	r2, [sp, #84]	; 0x54
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b30      	cmp	r3, #48	; 0x30
 800a2c0:	d0f9      	beq.n	800a2b6 <_strtod_l+0x12e>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d09b      	beq.n	800a1fe <_strtod_l+0x76>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f04f 0a00 	mov.w	sl, #0
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a2d6:	46d3      	mov	fp, sl
 800a2d8:	220a      	movs	r2, #10
 800a2da:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a2dc:	7806      	ldrb	r6, [r0, #0]
 800a2de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a2e2:	b2d9      	uxtb	r1, r3
 800a2e4:	2909      	cmp	r1, #9
 800a2e6:	d926      	bls.n	800a336 <_strtod_l+0x1ae>
 800a2e8:	494c      	ldr	r1, [pc, #304]	; (800a41c <_strtod_l+0x294>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f000 fe55 	bl	800af9a <strncmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d030      	beq.n	800a356 <_strtod_l+0x1ce>
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	4632      	mov	r2, r6
 800a2f8:	9005      	str	r0, [sp, #20]
 800a2fa:	465e      	mov	r6, fp
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2a65      	cmp	r2, #101	; 0x65
 800a300:	d001      	beq.n	800a306 <_strtod_l+0x17e>
 800a302:	2a45      	cmp	r2, #69	; 0x45
 800a304:	d113      	bne.n	800a32e <_strtod_l+0x1a6>
 800a306:	b91e      	cbnz	r6, 800a310 <_strtod_l+0x188>
 800a308:	9a04      	ldr	r2, [sp, #16]
 800a30a:	4302      	orrs	r2, r0
 800a30c:	d094      	beq.n	800a238 <_strtod_l+0xb0>
 800a30e:	2600      	movs	r6, #0
 800a310:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a312:	1c6a      	adds	r2, r5, #1
 800a314:	9215      	str	r2, [sp, #84]	; 0x54
 800a316:	786a      	ldrb	r2, [r5, #1]
 800a318:	2a2b      	cmp	r2, #43	; 0x2b
 800a31a:	d074      	beq.n	800a406 <_strtod_l+0x27e>
 800a31c:	2a2d      	cmp	r2, #45	; 0x2d
 800a31e:	d078      	beq.n	800a412 <_strtod_l+0x28a>
 800a320:	f04f 0c00 	mov.w	ip, #0
 800a324:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a328:	2909      	cmp	r1, #9
 800a32a:	d97f      	bls.n	800a42c <_strtod_l+0x2a4>
 800a32c:	9515      	str	r5, [sp, #84]	; 0x54
 800a32e:	2700      	movs	r7, #0
 800a330:	e09e      	b.n	800a470 <_strtod_l+0x2e8>
 800a332:	2300      	movs	r3, #0
 800a334:	e7c8      	b.n	800a2c8 <_strtod_l+0x140>
 800a336:	f1bb 0f08 	cmp.w	fp, #8
 800a33a:	bfd8      	it	le
 800a33c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a33e:	f100 0001 	add.w	r0, r0, #1
 800a342:	bfda      	itte	le
 800a344:	fb02 3301 	mlale	r3, r2, r1, r3
 800a348:	9309      	strle	r3, [sp, #36]	; 0x24
 800a34a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a34e:	f10b 0b01 	add.w	fp, fp, #1
 800a352:	9015      	str	r0, [sp, #84]	; 0x54
 800a354:	e7c1      	b.n	800a2da <_strtod_l+0x152>
 800a356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	9215      	str	r2, [sp, #84]	; 0x54
 800a35c:	785a      	ldrb	r2, [r3, #1]
 800a35e:	f1bb 0f00 	cmp.w	fp, #0
 800a362:	d037      	beq.n	800a3d4 <_strtod_l+0x24c>
 800a364:	9005      	str	r0, [sp, #20]
 800a366:	465e      	mov	r6, fp
 800a368:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a36c:	2b09      	cmp	r3, #9
 800a36e:	d912      	bls.n	800a396 <_strtod_l+0x20e>
 800a370:	2301      	movs	r3, #1
 800a372:	e7c4      	b.n	800a2fe <_strtod_l+0x176>
 800a374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	9215      	str	r2, [sp, #84]	; 0x54
 800a37a:	785a      	ldrb	r2, [r3, #1]
 800a37c:	3001      	adds	r0, #1
 800a37e:	2a30      	cmp	r2, #48	; 0x30
 800a380:	d0f8      	beq.n	800a374 <_strtod_l+0x1ec>
 800a382:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a386:	2b08      	cmp	r3, #8
 800a388:	f200 84c1 	bhi.w	800ad0e <_strtod_l+0xb86>
 800a38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a38e:	9005      	str	r0, [sp, #20]
 800a390:	2000      	movs	r0, #0
 800a392:	930b      	str	r3, [sp, #44]	; 0x2c
 800a394:	4606      	mov	r6, r0
 800a396:	3a30      	subs	r2, #48	; 0x30
 800a398:	f100 0301 	add.w	r3, r0, #1
 800a39c:	d014      	beq.n	800a3c8 <_strtod_l+0x240>
 800a39e:	9905      	ldr	r1, [sp, #20]
 800a3a0:	4419      	add	r1, r3
 800a3a2:	9105      	str	r1, [sp, #20]
 800a3a4:	4633      	mov	r3, r6
 800a3a6:	eb00 0c06 	add.w	ip, r0, r6
 800a3aa:	210a      	movs	r1, #10
 800a3ac:	4563      	cmp	r3, ip
 800a3ae:	d113      	bne.n	800a3d8 <_strtod_l+0x250>
 800a3b0:	1833      	adds	r3, r6, r0
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	f106 0601 	add.w	r6, r6, #1
 800a3b8:	4406      	add	r6, r0
 800a3ba:	dc1a      	bgt.n	800a3f2 <_strtod_l+0x26a>
 800a3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3be:	230a      	movs	r3, #10
 800a3c0:	fb03 2301 	mla	r3, r3, r1, r2
 800a3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a3ca:	1c51      	adds	r1, r2, #1
 800a3cc:	9115      	str	r1, [sp, #84]	; 0x54
 800a3ce:	7852      	ldrb	r2, [r2, #1]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	e7c9      	b.n	800a368 <_strtod_l+0x1e0>
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	e7d2      	b.n	800a37e <_strtod_l+0x1f6>
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	f103 0301 	add.w	r3, r3, #1
 800a3de:	dc03      	bgt.n	800a3e8 <_strtod_l+0x260>
 800a3e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3e2:	434f      	muls	r7, r1
 800a3e4:	9709      	str	r7, [sp, #36]	; 0x24
 800a3e6:	e7e1      	b.n	800a3ac <_strtod_l+0x224>
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	bfd8      	it	le
 800a3ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a3f0:	e7dc      	b.n	800a3ac <_strtod_l+0x224>
 800a3f2:	2e10      	cmp	r6, #16
 800a3f4:	bfdc      	itt	le
 800a3f6:	230a      	movle	r3, #10
 800a3f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a3fc:	e7e3      	b.n	800a3c6 <_strtod_l+0x23e>
 800a3fe:	2300      	movs	r3, #0
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	2301      	movs	r3, #1
 800a404:	e780      	b.n	800a308 <_strtod_l+0x180>
 800a406:	f04f 0c00 	mov.w	ip, #0
 800a40a:	1caa      	adds	r2, r5, #2
 800a40c:	9215      	str	r2, [sp, #84]	; 0x54
 800a40e:	78aa      	ldrb	r2, [r5, #2]
 800a410:	e788      	b.n	800a324 <_strtod_l+0x19c>
 800a412:	f04f 0c01 	mov.w	ip, #1
 800a416:	e7f8      	b.n	800a40a <_strtod_l+0x282>
 800a418:	0800e328 	.word	0x0800e328
 800a41c:	0800e318 	.word	0x0800e318
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a426:	1c51      	adds	r1, r2, #1
 800a428:	9115      	str	r1, [sp, #84]	; 0x54
 800a42a:	7852      	ldrb	r2, [r2, #1]
 800a42c:	2a30      	cmp	r2, #48	; 0x30
 800a42e:	d0f9      	beq.n	800a424 <_strtod_l+0x29c>
 800a430:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a434:	2908      	cmp	r1, #8
 800a436:	f63f af7a 	bhi.w	800a32e <_strtod_l+0x1a6>
 800a43a:	3a30      	subs	r2, #48	; 0x30
 800a43c:	9208      	str	r2, [sp, #32]
 800a43e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a440:	920c      	str	r2, [sp, #48]	; 0x30
 800a442:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a444:	1c57      	adds	r7, r2, #1
 800a446:	9715      	str	r7, [sp, #84]	; 0x54
 800a448:	7852      	ldrb	r2, [r2, #1]
 800a44a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a44e:	f1be 0f09 	cmp.w	lr, #9
 800a452:	d938      	bls.n	800a4c6 <_strtod_l+0x33e>
 800a454:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a456:	1a7f      	subs	r7, r7, r1
 800a458:	2f08      	cmp	r7, #8
 800a45a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a45e:	dc03      	bgt.n	800a468 <_strtod_l+0x2e0>
 800a460:	9908      	ldr	r1, [sp, #32]
 800a462:	428f      	cmp	r7, r1
 800a464:	bfa8      	it	ge
 800a466:	460f      	movge	r7, r1
 800a468:	f1bc 0f00 	cmp.w	ip, #0
 800a46c:	d000      	beq.n	800a470 <_strtod_l+0x2e8>
 800a46e:	427f      	negs	r7, r7
 800a470:	2e00      	cmp	r6, #0
 800a472:	d14f      	bne.n	800a514 <_strtod_l+0x38c>
 800a474:	9904      	ldr	r1, [sp, #16]
 800a476:	4301      	orrs	r1, r0
 800a478:	f47f aec1 	bne.w	800a1fe <_strtod_l+0x76>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f47f aedb 	bne.w	800a238 <_strtod_l+0xb0>
 800a482:	2a69      	cmp	r2, #105	; 0x69
 800a484:	d029      	beq.n	800a4da <_strtod_l+0x352>
 800a486:	dc26      	bgt.n	800a4d6 <_strtod_l+0x34e>
 800a488:	2a49      	cmp	r2, #73	; 0x49
 800a48a:	d026      	beq.n	800a4da <_strtod_l+0x352>
 800a48c:	2a4e      	cmp	r2, #78	; 0x4e
 800a48e:	f47f aed3 	bne.w	800a238 <_strtod_l+0xb0>
 800a492:	499b      	ldr	r1, [pc, #620]	; (800a700 <_strtod_l+0x578>)
 800a494:	a815      	add	r0, sp, #84	; 0x54
 800a496:	f001 f967 	bl	800b768 <__match>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f43f aecc 	beq.w	800a238 <_strtod_l+0xb0>
 800a4a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b28      	cmp	r3, #40	; 0x28
 800a4a6:	d12f      	bne.n	800a508 <_strtod_l+0x380>
 800a4a8:	4996      	ldr	r1, [pc, #600]	; (800a704 <_strtod_l+0x57c>)
 800a4aa:	aa18      	add	r2, sp, #96	; 0x60
 800a4ac:	a815      	add	r0, sp, #84	; 0x54
 800a4ae:	f001 f96f 	bl	800b790 <__hexnan>
 800a4b2:	2805      	cmp	r0, #5
 800a4b4:	d128      	bne.n	800a508 <_strtod_l+0x380>
 800a4b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a4c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a4c4:	e69b      	b.n	800a1fe <_strtod_l+0x76>
 800a4c6:	9f08      	ldr	r7, [sp, #32]
 800a4c8:	210a      	movs	r1, #10
 800a4ca:	fb01 2107 	mla	r1, r1, r7, r2
 800a4ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a4d2:	9208      	str	r2, [sp, #32]
 800a4d4:	e7b5      	b.n	800a442 <_strtod_l+0x2ba>
 800a4d6:	2a6e      	cmp	r2, #110	; 0x6e
 800a4d8:	e7d9      	b.n	800a48e <_strtod_l+0x306>
 800a4da:	498b      	ldr	r1, [pc, #556]	; (800a708 <_strtod_l+0x580>)
 800a4dc:	a815      	add	r0, sp, #84	; 0x54
 800a4de:	f001 f943 	bl	800b768 <__match>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	f43f aea8 	beq.w	800a238 <_strtod_l+0xb0>
 800a4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4ea:	4988      	ldr	r1, [pc, #544]	; (800a70c <_strtod_l+0x584>)
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	a815      	add	r0, sp, #84	; 0x54
 800a4f0:	9315      	str	r3, [sp, #84]	; 0x54
 800a4f2:	f001 f939 	bl	800b768 <__match>
 800a4f6:	b910      	cbnz	r0, 800a4fe <_strtod_l+0x376>
 800a4f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	9315      	str	r3, [sp, #84]	; 0x54
 800a4fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a71c <_strtod_l+0x594>
 800a502:	f04f 0800 	mov.w	r8, #0
 800a506:	e67a      	b.n	800a1fe <_strtod_l+0x76>
 800a508:	4881      	ldr	r0, [pc, #516]	; (800a710 <_strtod_l+0x588>)
 800a50a:	f000 fe31 	bl	800b170 <nan>
 800a50e:	ec59 8b10 	vmov	r8, r9, d0
 800a512:	e674      	b.n	800a1fe <_strtod_l+0x76>
 800a514:	9b05      	ldr	r3, [sp, #20]
 800a516:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a518:	1afb      	subs	r3, r7, r3
 800a51a:	f1bb 0f00 	cmp.w	fp, #0
 800a51e:	bf08      	it	eq
 800a520:	46b3      	moveq	fp, r6
 800a522:	2e10      	cmp	r6, #16
 800a524:	9308      	str	r3, [sp, #32]
 800a526:	4635      	mov	r5, r6
 800a528:	bfa8      	it	ge
 800a52a:	2510      	movge	r5, #16
 800a52c:	f7f6 f802 	bl	8000534 <__aeabi_ui2d>
 800a530:	2e09      	cmp	r6, #9
 800a532:	4680      	mov	r8, r0
 800a534:	4689      	mov	r9, r1
 800a536:	dd13      	ble.n	800a560 <_strtod_l+0x3d8>
 800a538:	4b76      	ldr	r3, [pc, #472]	; (800a714 <_strtod_l+0x58c>)
 800a53a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a53e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a542:	f7f6 f871 	bl	8000628 <__aeabi_dmul>
 800a546:	4680      	mov	r8, r0
 800a548:	4650      	mov	r0, sl
 800a54a:	4689      	mov	r9, r1
 800a54c:	f7f5 fff2 	bl	8000534 <__aeabi_ui2d>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4640      	mov	r0, r8
 800a556:	4649      	mov	r1, r9
 800a558:	f7f5 feb0 	bl	80002bc <__adddf3>
 800a55c:	4680      	mov	r8, r0
 800a55e:	4689      	mov	r9, r1
 800a560:	2e0f      	cmp	r6, #15
 800a562:	dc38      	bgt.n	800a5d6 <_strtod_l+0x44e>
 800a564:	9b08      	ldr	r3, [sp, #32]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f43f ae49 	beq.w	800a1fe <_strtod_l+0x76>
 800a56c:	dd24      	ble.n	800a5b8 <_strtod_l+0x430>
 800a56e:	2b16      	cmp	r3, #22
 800a570:	dc0b      	bgt.n	800a58a <_strtod_l+0x402>
 800a572:	4968      	ldr	r1, [pc, #416]	; (800a714 <_strtod_l+0x58c>)
 800a574:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	f7f6 f852 	bl	8000628 <__aeabi_dmul>
 800a584:	4680      	mov	r8, r0
 800a586:	4689      	mov	r9, r1
 800a588:	e639      	b.n	800a1fe <_strtod_l+0x76>
 800a58a:	9a08      	ldr	r2, [sp, #32]
 800a58c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a590:	4293      	cmp	r3, r2
 800a592:	db20      	blt.n	800a5d6 <_strtod_l+0x44e>
 800a594:	4c5f      	ldr	r4, [pc, #380]	; (800a714 <_strtod_l+0x58c>)
 800a596:	f1c6 060f 	rsb	r6, r6, #15
 800a59a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a59e:	4642      	mov	r2, r8
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a6:	f7f6 f83f 	bl	8000628 <__aeabi_dmul>
 800a5aa:	9b08      	ldr	r3, [sp, #32]
 800a5ac:	1b9e      	subs	r6, r3, r6
 800a5ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a5b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5b6:	e7e3      	b.n	800a580 <_strtod_l+0x3f8>
 800a5b8:	9b08      	ldr	r3, [sp, #32]
 800a5ba:	3316      	adds	r3, #22
 800a5bc:	db0b      	blt.n	800a5d6 <_strtod_l+0x44e>
 800a5be:	9b05      	ldr	r3, [sp, #20]
 800a5c0:	1bdf      	subs	r7, r3, r7
 800a5c2:	4b54      	ldr	r3, [pc, #336]	; (800a714 <_strtod_l+0x58c>)
 800a5c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f6 f954 	bl	800087c <__aeabi_ddiv>
 800a5d4:	e7d6      	b.n	800a584 <_strtod_l+0x3fc>
 800a5d6:	9b08      	ldr	r3, [sp, #32]
 800a5d8:	1b75      	subs	r5, r6, r5
 800a5da:	441d      	add	r5, r3
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	dd70      	ble.n	800a6c2 <_strtod_l+0x53a>
 800a5e0:	f015 030f 	ands.w	r3, r5, #15
 800a5e4:	d00a      	beq.n	800a5fc <_strtod_l+0x474>
 800a5e6:	494b      	ldr	r1, [pc, #300]	; (800a714 <_strtod_l+0x58c>)
 800a5e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f4:	f7f6 f818 	bl	8000628 <__aeabi_dmul>
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	4689      	mov	r9, r1
 800a5fc:	f035 050f 	bics.w	r5, r5, #15
 800a600:	d04d      	beq.n	800a69e <_strtod_l+0x516>
 800a602:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a606:	dd22      	ble.n	800a64e <_strtod_l+0x4c6>
 800a608:	2500      	movs	r5, #0
 800a60a:	46ab      	mov	fp, r5
 800a60c:	9509      	str	r5, [sp, #36]	; 0x24
 800a60e:	9505      	str	r5, [sp, #20]
 800a610:	2322      	movs	r3, #34	; 0x22
 800a612:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a71c <_strtod_l+0x594>
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	f04f 0800 	mov.w	r8, #0
 800a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f43f aded 	beq.w	800a1fe <_strtod_l+0x76>
 800a624:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a626:	4620      	mov	r0, r4
 800a628:	f001 fa4c 	bl	800bac4 <_Bfree>
 800a62c:	9905      	ldr	r1, [sp, #20]
 800a62e:	4620      	mov	r0, r4
 800a630:	f001 fa48 	bl	800bac4 <_Bfree>
 800a634:	4659      	mov	r1, fp
 800a636:	4620      	mov	r0, r4
 800a638:	f001 fa44 	bl	800bac4 <_Bfree>
 800a63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a63e:	4620      	mov	r0, r4
 800a640:	f001 fa40 	bl	800bac4 <_Bfree>
 800a644:	4629      	mov	r1, r5
 800a646:	4620      	mov	r0, r4
 800a648:	f001 fa3c 	bl	800bac4 <_Bfree>
 800a64c:	e5d7      	b.n	800a1fe <_strtod_l+0x76>
 800a64e:	4b32      	ldr	r3, [pc, #200]	; (800a718 <_strtod_l+0x590>)
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	2300      	movs	r3, #0
 800a654:	112d      	asrs	r5, r5, #4
 800a656:	4640      	mov	r0, r8
 800a658:	4649      	mov	r1, r9
 800a65a:	469a      	mov	sl, r3
 800a65c:	2d01      	cmp	r5, #1
 800a65e:	dc21      	bgt.n	800a6a4 <_strtod_l+0x51c>
 800a660:	b10b      	cbz	r3, 800a666 <_strtod_l+0x4de>
 800a662:	4680      	mov	r8, r0
 800a664:	4689      	mov	r9, r1
 800a666:	492c      	ldr	r1, [pc, #176]	; (800a718 <_strtod_l+0x590>)
 800a668:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a66c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a678:	f7f5 ffd6 	bl	8000628 <__aeabi_dmul>
 800a67c:	4b27      	ldr	r3, [pc, #156]	; (800a71c <_strtod_l+0x594>)
 800a67e:	460a      	mov	r2, r1
 800a680:	400b      	ands	r3, r1
 800a682:	4927      	ldr	r1, [pc, #156]	; (800a720 <_strtod_l+0x598>)
 800a684:	428b      	cmp	r3, r1
 800a686:	4680      	mov	r8, r0
 800a688:	d8be      	bhi.n	800a608 <_strtod_l+0x480>
 800a68a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a68e:	428b      	cmp	r3, r1
 800a690:	bf86      	itte	hi
 800a692:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a724 <_strtod_l+0x59c>
 800a696:	f04f 38ff 	movhi.w	r8, #4294967295
 800a69a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	e07b      	b.n	800a79c <_strtod_l+0x614>
 800a6a4:	07ea      	lsls	r2, r5, #31
 800a6a6:	d505      	bpl.n	800a6b4 <_strtod_l+0x52c>
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 ffbb 	bl	8000628 <__aeabi_dmul>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	3208      	adds	r2, #8
 800a6b8:	f10a 0a01 	add.w	sl, sl, #1
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	9204      	str	r2, [sp, #16]
 800a6c0:	e7cc      	b.n	800a65c <_strtod_l+0x4d4>
 800a6c2:	d0ec      	beq.n	800a69e <_strtod_l+0x516>
 800a6c4:	426d      	negs	r5, r5
 800a6c6:	f015 020f 	ands.w	r2, r5, #15
 800a6ca:	d00a      	beq.n	800a6e2 <_strtod_l+0x55a>
 800a6cc:	4b11      	ldr	r3, [pc, #68]	; (800a714 <_strtod_l+0x58c>)
 800a6ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f6 f8cf 	bl	800087c <__aeabi_ddiv>
 800a6de:	4680      	mov	r8, r0
 800a6e0:	4689      	mov	r9, r1
 800a6e2:	112d      	asrs	r5, r5, #4
 800a6e4:	d0db      	beq.n	800a69e <_strtod_l+0x516>
 800a6e6:	2d1f      	cmp	r5, #31
 800a6e8:	dd1e      	ble.n	800a728 <_strtod_l+0x5a0>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	46ab      	mov	fp, r5
 800a6ee:	9509      	str	r5, [sp, #36]	; 0x24
 800a6f0:	9505      	str	r5, [sp, #20]
 800a6f2:	2322      	movs	r3, #34	; 0x22
 800a6f4:	f04f 0800 	mov.w	r8, #0
 800a6f8:	f04f 0900 	mov.w	r9, #0
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	e78d      	b.n	800a61c <_strtod_l+0x494>
 800a700:	0800e323 	.word	0x0800e323
 800a704:	0800e33c 	.word	0x0800e33c
 800a708:	0800e31a 	.word	0x0800e31a
 800a70c:	0800e31d 	.word	0x0800e31d
 800a710:	0800e6a0 	.word	0x0800e6a0
 800a714:	0800e490 	.word	0x0800e490
 800a718:	0800e468 	.word	0x0800e468
 800a71c:	7ff00000 	.word	0x7ff00000
 800a720:	7ca00000 	.word	0x7ca00000
 800a724:	7fefffff 	.word	0x7fefffff
 800a728:	f015 0310 	ands.w	r3, r5, #16
 800a72c:	bf18      	it	ne
 800a72e:	236a      	movne	r3, #106	; 0x6a
 800a730:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800aad4 <_strtod_l+0x94c>
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	4640      	mov	r0, r8
 800a738:	4649      	mov	r1, r9
 800a73a:	2300      	movs	r3, #0
 800a73c:	07ea      	lsls	r2, r5, #31
 800a73e:	d504      	bpl.n	800a74a <_strtod_l+0x5c2>
 800a740:	e9da 2300 	ldrd	r2, r3, [sl]
 800a744:	f7f5 ff70 	bl	8000628 <__aeabi_dmul>
 800a748:	2301      	movs	r3, #1
 800a74a:	106d      	asrs	r5, r5, #1
 800a74c:	f10a 0a08 	add.w	sl, sl, #8
 800a750:	d1f4      	bne.n	800a73c <_strtod_l+0x5b4>
 800a752:	b10b      	cbz	r3, 800a758 <_strtod_l+0x5d0>
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	9b04      	ldr	r3, [sp, #16]
 800a75a:	b1bb      	cbz	r3, 800a78c <_strtod_l+0x604>
 800a75c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a760:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a764:	2b00      	cmp	r3, #0
 800a766:	4649      	mov	r1, r9
 800a768:	dd10      	ble.n	800a78c <_strtod_l+0x604>
 800a76a:	2b1f      	cmp	r3, #31
 800a76c:	f340 811e 	ble.w	800a9ac <_strtod_l+0x824>
 800a770:	2b34      	cmp	r3, #52	; 0x34
 800a772:	bfde      	ittt	le
 800a774:	f04f 33ff 	movle.w	r3, #4294967295
 800a778:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a77c:	4093      	lslle	r3, r2
 800a77e:	f04f 0800 	mov.w	r8, #0
 800a782:	bfcc      	ite	gt
 800a784:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a788:	ea03 0901 	andle.w	r9, r3, r1
 800a78c:	2200      	movs	r2, #0
 800a78e:	2300      	movs	r3, #0
 800a790:	4640      	mov	r0, r8
 800a792:	4649      	mov	r1, r9
 800a794:	f7f6 f9b0 	bl	8000af8 <__aeabi_dcmpeq>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1a6      	bne.n	800a6ea <_strtod_l+0x562>
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7a2:	4633      	mov	r3, r6
 800a7a4:	465a      	mov	r2, fp
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f001 f9f4 	bl	800bb94 <__s2b>
 800a7ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f43f af2a 	beq.w	800a608 <_strtod_l+0x480>
 800a7b4:	9a08      	ldr	r2, [sp, #32]
 800a7b6:	9b05      	ldr	r3, [sp, #20]
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	eba3 0307 	sub.w	r3, r3, r7
 800a7be:	bfa8      	it	ge
 800a7c0:	2300      	movge	r3, #0
 800a7c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a7cc:	46ab      	mov	fp, r5
 800a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	6859      	ldr	r1, [r3, #4]
 800a7d4:	f001 f936 	bl	800ba44 <_Balloc>
 800a7d8:	9005      	str	r0, [sp, #20]
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f43f af18 	beq.w	800a610 <_strtod_l+0x488>
 800a7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	3202      	adds	r2, #2
 800a7e6:	f103 010c 	add.w	r1, r3, #12
 800a7ea:	0092      	lsls	r2, r2, #2
 800a7ec:	300c      	adds	r0, #12
 800a7ee:	f000 fcb0 	bl	800b152 <memcpy>
 800a7f2:	ec49 8b10 	vmov	d0, r8, r9
 800a7f6:	aa18      	add	r2, sp, #96	; 0x60
 800a7f8:	a917      	add	r1, sp, #92	; 0x5c
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f001 fcfe 	bl	800c1fc <__d2b>
 800a800:	ec49 8b18 	vmov	d8, r8, r9
 800a804:	9016      	str	r0, [sp, #88]	; 0x58
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f af02 	beq.w	800a610 <_strtod_l+0x488>
 800a80c:	2101      	movs	r1, #1
 800a80e:	4620      	mov	r0, r4
 800a810:	f001 fa58 	bl	800bcc4 <__i2b>
 800a814:	4683      	mov	fp, r0
 800a816:	2800      	cmp	r0, #0
 800a818:	f43f aefa 	beq.w	800a610 <_strtod_l+0x488>
 800a81c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a81e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a820:	2e00      	cmp	r6, #0
 800a822:	bfab      	itete	ge
 800a824:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a826:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a828:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a82a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a82e:	bfac      	ite	ge
 800a830:	eb06 0a03 	addge.w	sl, r6, r3
 800a834:	1b9f      	sublt	r7, r3, r6
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	1af6      	subs	r6, r6, r3
 800a83a:	4416      	add	r6, r2
 800a83c:	4ba0      	ldr	r3, [pc, #640]	; (800aac0 <_strtod_l+0x938>)
 800a83e:	3e01      	subs	r6, #1
 800a840:	429e      	cmp	r6, r3
 800a842:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a846:	f280 80c4 	bge.w	800a9d2 <_strtod_l+0x84a>
 800a84a:	1b9b      	subs	r3, r3, r6
 800a84c:	2b1f      	cmp	r3, #31
 800a84e:	eba2 0203 	sub.w	r2, r2, r3
 800a852:	f04f 0101 	mov.w	r1, #1
 800a856:	f300 80b0 	bgt.w	800a9ba <_strtod_l+0x832>
 800a85a:	fa01 f303 	lsl.w	r3, r1, r3
 800a85e:	930e      	str	r3, [sp, #56]	; 0x38
 800a860:	2300      	movs	r3, #0
 800a862:	930d      	str	r3, [sp, #52]	; 0x34
 800a864:	eb0a 0602 	add.w	r6, sl, r2
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	45b2      	cmp	sl, r6
 800a86c:	4417      	add	r7, r2
 800a86e:	441f      	add	r7, r3
 800a870:	4653      	mov	r3, sl
 800a872:	bfa8      	it	ge
 800a874:	4633      	movge	r3, r6
 800a876:	42bb      	cmp	r3, r7
 800a878:	bfa8      	it	ge
 800a87a:	463b      	movge	r3, r7
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bfc2      	ittt	gt
 800a880:	1af6      	subgt	r6, r6, r3
 800a882:	1aff      	subgt	r7, r7, r3
 800a884:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dd17      	ble.n	800a8be <_strtod_l+0x736>
 800a88e:	4659      	mov	r1, fp
 800a890:	461a      	mov	r2, r3
 800a892:	4620      	mov	r0, r4
 800a894:	f001 fad6 	bl	800be44 <__pow5mult>
 800a898:	4683      	mov	fp, r0
 800a89a:	2800      	cmp	r0, #0
 800a89c:	f43f aeb8 	beq.w	800a610 <_strtod_l+0x488>
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f001 fa23 	bl	800bcf0 <__multiply>
 800a8aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f43f aeaf 	beq.w	800a610 <_strtod_l+0x488>
 800a8b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f001 f905 	bl	800bac4 <_Bfree>
 800a8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8bc:	9316      	str	r3, [sp, #88]	; 0x58
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	f300 808c 	bgt.w	800a9dc <_strtod_l+0x854>
 800a8c4:	9b08      	ldr	r3, [sp, #32]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dd08      	ble.n	800a8dc <_strtod_l+0x754>
 800a8ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8cc:	9905      	ldr	r1, [sp, #20]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f001 fab8 	bl	800be44 <__pow5mult>
 800a8d4:	9005      	str	r0, [sp, #20]
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f43f ae9a 	beq.w	800a610 <_strtod_l+0x488>
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	dd08      	ble.n	800a8f2 <_strtod_l+0x76a>
 800a8e0:	9905      	ldr	r1, [sp, #20]
 800a8e2:	463a      	mov	r2, r7
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f001 fb07 	bl	800bef8 <__lshift>
 800a8ea:	9005      	str	r0, [sp, #20]
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	f43f ae8f 	beq.w	800a610 <_strtod_l+0x488>
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	dd08      	ble.n	800a90a <_strtod_l+0x782>
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f001 fafb 	bl	800bef8 <__lshift>
 800a902:	4683      	mov	fp, r0
 800a904:	2800      	cmp	r0, #0
 800a906:	f43f ae83 	beq.w	800a610 <_strtod_l+0x488>
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a90e:	4620      	mov	r0, r4
 800a910:	f001 fb7a 	bl	800c008 <__mdiff>
 800a914:	4605      	mov	r5, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f ae7a 	beq.w	800a610 <_strtod_l+0x488>
 800a91c:	68c3      	ldr	r3, [r0, #12]
 800a91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a920:	2300      	movs	r3, #0
 800a922:	60c3      	str	r3, [r0, #12]
 800a924:	4659      	mov	r1, fp
 800a926:	f001 fb53 	bl	800bfd0 <__mcmp>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	da60      	bge.n	800a9f0 <_strtod_l+0x868>
 800a92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a930:	ea53 0308 	orrs.w	r3, r3, r8
 800a934:	f040 8084 	bne.w	800aa40 <_strtod_l+0x8b8>
 800a938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d17f      	bne.n	800aa40 <_strtod_l+0x8b8>
 800a940:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a944:	0d1b      	lsrs	r3, r3, #20
 800a946:	051b      	lsls	r3, r3, #20
 800a948:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a94c:	d978      	bls.n	800aa40 <_strtod_l+0x8b8>
 800a94e:	696b      	ldr	r3, [r5, #20]
 800a950:	b913      	cbnz	r3, 800a958 <_strtod_l+0x7d0>
 800a952:	692b      	ldr	r3, [r5, #16]
 800a954:	2b01      	cmp	r3, #1
 800a956:	dd73      	ble.n	800aa40 <_strtod_l+0x8b8>
 800a958:	4629      	mov	r1, r5
 800a95a:	2201      	movs	r2, #1
 800a95c:	4620      	mov	r0, r4
 800a95e:	f001 facb 	bl	800bef8 <__lshift>
 800a962:	4659      	mov	r1, fp
 800a964:	4605      	mov	r5, r0
 800a966:	f001 fb33 	bl	800bfd0 <__mcmp>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	dd68      	ble.n	800aa40 <_strtod_l+0x8b8>
 800a96e:	9904      	ldr	r1, [sp, #16]
 800a970:	4a54      	ldr	r2, [pc, #336]	; (800aac4 <_strtod_l+0x93c>)
 800a972:	464b      	mov	r3, r9
 800a974:	2900      	cmp	r1, #0
 800a976:	f000 8084 	beq.w	800aa82 <_strtod_l+0x8fa>
 800a97a:	ea02 0109 	and.w	r1, r2, r9
 800a97e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a982:	dc7e      	bgt.n	800aa82 <_strtod_l+0x8fa>
 800a984:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a988:	f77f aeb3 	ble.w	800a6f2 <_strtod_l+0x56a>
 800a98c:	4b4e      	ldr	r3, [pc, #312]	; (800aac8 <_strtod_l+0x940>)
 800a98e:	4640      	mov	r0, r8
 800a990:	4649      	mov	r1, r9
 800a992:	2200      	movs	r2, #0
 800a994:	f7f5 fe48 	bl	8000628 <__aeabi_dmul>
 800a998:	4b4a      	ldr	r3, [pc, #296]	; (800aac4 <_strtod_l+0x93c>)
 800a99a:	400b      	ands	r3, r1
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f47f ae3f 	bne.w	800a624 <_strtod_l+0x49c>
 800a9a6:	2322      	movs	r3, #34	; 0x22
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	e63b      	b.n	800a624 <_strtod_l+0x49c>
 800a9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b4:	ea03 0808 	and.w	r8, r3, r8
 800a9b8:	e6e8      	b.n	800a78c <_strtod_l+0x604>
 800a9ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a9be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a9c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a9c6:	36e2      	adds	r6, #226	; 0xe2
 800a9c8:	fa01 f306 	lsl.w	r3, r1, r6
 800a9cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a9d0:	e748      	b.n	800a864 <_strtod_l+0x6dc>
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a9da:	e743      	b.n	800a864 <_strtod_l+0x6dc>
 800a9dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f001 fa89 	bl	800bef8 <__lshift>
 800a9e6:	9016      	str	r0, [sp, #88]	; 0x58
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f47f af6b 	bne.w	800a8c4 <_strtod_l+0x73c>
 800a9ee:	e60f      	b.n	800a610 <_strtod_l+0x488>
 800a9f0:	46ca      	mov	sl, r9
 800a9f2:	d171      	bne.n	800aad8 <_strtod_l+0x950>
 800a9f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9fa:	b352      	cbz	r2, 800aa52 <_strtod_l+0x8ca>
 800a9fc:	4a33      	ldr	r2, [pc, #204]	; (800aacc <_strtod_l+0x944>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d12a      	bne.n	800aa58 <_strtod_l+0x8d0>
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	4641      	mov	r1, r8
 800aa06:	b1fb      	cbz	r3, 800aa48 <_strtod_l+0x8c0>
 800aa08:	4b2e      	ldr	r3, [pc, #184]	; (800aac4 <_strtod_l+0x93c>)
 800aa0a:	ea09 0303 	and.w	r3, r9, r3
 800aa0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa12:	f04f 32ff 	mov.w	r2, #4294967295
 800aa16:	d81a      	bhi.n	800aa4e <_strtod_l+0x8c6>
 800aa18:	0d1b      	lsrs	r3, r3, #20
 800aa1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa22:	4299      	cmp	r1, r3
 800aa24:	d118      	bne.n	800aa58 <_strtod_l+0x8d0>
 800aa26:	4b2a      	ldr	r3, [pc, #168]	; (800aad0 <_strtod_l+0x948>)
 800aa28:	459a      	cmp	sl, r3
 800aa2a:	d102      	bne.n	800aa32 <_strtod_l+0x8aa>
 800aa2c:	3101      	adds	r1, #1
 800aa2e:	f43f adef 	beq.w	800a610 <_strtod_l+0x488>
 800aa32:	4b24      	ldr	r3, [pc, #144]	; (800aac4 <_strtod_l+0x93c>)
 800aa34:	ea0a 0303 	and.w	r3, sl, r3
 800aa38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aa3c:	f04f 0800 	mov.w	r8, #0
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1a2      	bne.n	800a98c <_strtod_l+0x804>
 800aa46:	e5ed      	b.n	800a624 <_strtod_l+0x49c>
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	e7e9      	b.n	800aa22 <_strtod_l+0x89a>
 800aa4e:	4613      	mov	r3, r2
 800aa50:	e7e7      	b.n	800aa22 <_strtod_l+0x89a>
 800aa52:	ea53 0308 	orrs.w	r3, r3, r8
 800aa56:	d08a      	beq.n	800a96e <_strtod_l+0x7e6>
 800aa58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa5a:	b1e3      	cbz	r3, 800aa96 <_strtod_l+0x90e>
 800aa5c:	ea13 0f0a 	tst.w	r3, sl
 800aa60:	d0ee      	beq.n	800aa40 <_strtod_l+0x8b8>
 800aa62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa64:	9a04      	ldr	r2, [sp, #16]
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	b1c3      	cbz	r3, 800aa9e <_strtod_l+0x916>
 800aa6c:	f7ff fb6e 	bl	800a14c <sulp>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	ec51 0b18 	vmov	r0, r1, d8
 800aa78:	f7f5 fc20 	bl	80002bc <__adddf3>
 800aa7c:	4680      	mov	r8, r0
 800aa7e:	4689      	mov	r9, r1
 800aa80:	e7de      	b.n	800aa40 <_strtod_l+0x8b8>
 800aa82:	4013      	ands	r3, r2
 800aa84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aa88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800aa8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aa90:	f04f 38ff 	mov.w	r8, #4294967295
 800aa94:	e7d4      	b.n	800aa40 <_strtod_l+0x8b8>
 800aa96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa98:	ea13 0f08 	tst.w	r3, r8
 800aa9c:	e7e0      	b.n	800aa60 <_strtod_l+0x8d8>
 800aa9e:	f7ff fb55 	bl	800a14c <sulp>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	ec51 0b18 	vmov	r0, r1, d8
 800aaaa:	f7f5 fc05 	bl	80002b8 <__aeabi_dsub>
 800aaae:	2200      	movs	r2, #0
 800aab0:	2300      	movs	r3, #0
 800aab2:	4680      	mov	r8, r0
 800aab4:	4689      	mov	r9, r1
 800aab6:	f7f6 f81f 	bl	8000af8 <__aeabi_dcmpeq>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d0c0      	beq.n	800aa40 <_strtod_l+0x8b8>
 800aabe:	e618      	b.n	800a6f2 <_strtod_l+0x56a>
 800aac0:	fffffc02 	.word	0xfffffc02
 800aac4:	7ff00000 	.word	0x7ff00000
 800aac8:	39500000 	.word	0x39500000
 800aacc:	000fffff 	.word	0x000fffff
 800aad0:	7fefffff 	.word	0x7fefffff
 800aad4:	0800e350 	.word	0x0800e350
 800aad8:	4659      	mov	r1, fp
 800aada:	4628      	mov	r0, r5
 800aadc:	f001 fbe8 	bl	800c2b0 <__ratio>
 800aae0:	ec57 6b10 	vmov	r6, r7, d0
 800aae4:	ee10 0a10 	vmov	r0, s0
 800aae8:	2200      	movs	r2, #0
 800aaea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f6 f816 	bl	8000b20 <__aeabi_dcmple>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d071      	beq.n	800abdc <_strtod_l+0xa54>
 800aaf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d17c      	bne.n	800abf8 <_strtod_l+0xa70>
 800aafe:	f1b8 0f00 	cmp.w	r8, #0
 800ab02:	d15a      	bne.n	800abba <_strtod_l+0xa32>
 800ab04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d15d      	bne.n	800abc8 <_strtod_l+0xa40>
 800ab0c:	4b90      	ldr	r3, [pc, #576]	; (800ad50 <_strtod_l+0xbc8>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4630      	mov	r0, r6
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 fffa 	bl	8000b0c <__aeabi_dcmplt>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d15c      	bne.n	800abd6 <_strtod_l+0xa4e>
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4b8c      	ldr	r3, [pc, #560]	; (800ad54 <_strtod_l+0xbcc>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	f7f5 fd80 	bl	8000628 <__aeabi_dmul>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ab30:	9606      	str	r6, [sp, #24]
 800ab32:	9307      	str	r3, [sp, #28]
 800ab34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ab3c:	4b86      	ldr	r3, [pc, #536]	; (800ad58 <_strtod_l+0xbd0>)
 800ab3e:	ea0a 0303 	and.w	r3, sl, r3
 800ab42:	930d      	str	r3, [sp, #52]	; 0x34
 800ab44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab46:	4b85      	ldr	r3, [pc, #532]	; (800ad5c <_strtod_l+0xbd4>)
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	f040 8090 	bne.w	800ac6e <_strtod_l+0xae6>
 800ab4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ab52:	ec49 8b10 	vmov	d0, r8, r9
 800ab56:	f001 fae1 	bl	800c11c <__ulp>
 800ab5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab5e:	ec51 0b10 	vmov	r0, r1, d0
 800ab62:	f7f5 fd61 	bl	8000628 <__aeabi_dmul>
 800ab66:	4642      	mov	r2, r8
 800ab68:	464b      	mov	r3, r9
 800ab6a:	f7f5 fba7 	bl	80002bc <__adddf3>
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4979      	ldr	r1, [pc, #484]	; (800ad58 <_strtod_l+0xbd0>)
 800ab72:	4a7b      	ldr	r2, [pc, #492]	; (800ad60 <_strtod_l+0xbd8>)
 800ab74:	4019      	ands	r1, r3
 800ab76:	4291      	cmp	r1, r2
 800ab78:	4680      	mov	r8, r0
 800ab7a:	d944      	bls.n	800ac06 <_strtod_l+0xa7e>
 800ab7c:	ee18 2a90 	vmov	r2, s17
 800ab80:	4b78      	ldr	r3, [pc, #480]	; (800ad64 <_strtod_l+0xbdc>)
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d104      	bne.n	800ab90 <_strtod_l+0xa08>
 800ab86:	ee18 3a10 	vmov	r3, s16
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f43f ad40 	beq.w	800a610 <_strtod_l+0x488>
 800ab90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ad64 <_strtod_l+0xbdc>
 800ab94:	f04f 38ff 	mov.w	r8, #4294967295
 800ab98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 ff92 	bl	800bac4 <_Bfree>
 800aba0:	9905      	ldr	r1, [sp, #20]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 ff8e 	bl	800bac4 <_Bfree>
 800aba8:	4659      	mov	r1, fp
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 ff8a 	bl	800bac4 <_Bfree>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 ff86 	bl	800bac4 <_Bfree>
 800abb8:	e609      	b.n	800a7ce <_strtod_l+0x646>
 800abba:	f1b8 0f01 	cmp.w	r8, #1
 800abbe:	d103      	bne.n	800abc8 <_strtod_l+0xa40>
 800abc0:	f1b9 0f00 	cmp.w	r9, #0
 800abc4:	f43f ad95 	beq.w	800a6f2 <_strtod_l+0x56a>
 800abc8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ad20 <_strtod_l+0xb98>
 800abcc:	4f60      	ldr	r7, [pc, #384]	; (800ad50 <_strtod_l+0xbc8>)
 800abce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abd2:	2600      	movs	r6, #0
 800abd4:	e7ae      	b.n	800ab34 <_strtod_l+0x9ac>
 800abd6:	4f5f      	ldr	r7, [pc, #380]	; (800ad54 <_strtod_l+0xbcc>)
 800abd8:	2600      	movs	r6, #0
 800abda:	e7a7      	b.n	800ab2c <_strtod_l+0x9a4>
 800abdc:	4b5d      	ldr	r3, [pc, #372]	; (800ad54 <_strtod_l+0xbcc>)
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fd20 	bl	8000628 <__aeabi_dmul>
 800abe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d09c      	beq.n	800ab2c <_strtod_l+0x9a4>
 800abf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abf6:	e79d      	b.n	800ab34 <_strtod_l+0x9ac>
 800abf8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ad28 <_strtod_l+0xba0>
 800abfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac00:	ec57 6b17 	vmov	r6, r7, d7
 800ac04:	e796      	b.n	800ab34 <_strtod_l+0x9ac>
 800ac06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	46ca      	mov	sl, r9
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1c2      	bne.n	800ab98 <_strtod_l+0xa10>
 800ac12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac18:	0d1b      	lsrs	r3, r3, #20
 800ac1a:	051b      	lsls	r3, r3, #20
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d1bb      	bne.n	800ab98 <_strtod_l+0xa10>
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f6 f8b0 	bl	8000d88 <__aeabi_d2lz>
 800ac28:	f7f5 fcd0 	bl	80005cc <__aeabi_l2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fb40 	bl	80002b8 <__aeabi_dsub>
 800ac38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac3e:	ea43 0308 	orr.w	r3, r3, r8
 800ac42:	4313      	orrs	r3, r2
 800ac44:	4606      	mov	r6, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	d054      	beq.n	800acf4 <_strtod_l+0xb6c>
 800ac4a:	a339      	add	r3, pc, #228	; (adr r3, 800ad30 <_strtod_l+0xba8>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	f7f5 ff5c 	bl	8000b0c <__aeabi_dcmplt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f47f ace5 	bne.w	800a624 <_strtod_l+0x49c>
 800ac5a:	a337      	add	r3, pc, #220	; (adr r3, 800ad38 <_strtod_l+0xbb0>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 ff70 	bl	8000b48 <__aeabi_dcmpgt>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d095      	beq.n	800ab98 <_strtod_l+0xa10>
 800ac6c:	e4da      	b.n	800a624 <_strtod_l+0x49c>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	b333      	cbz	r3, 800acc0 <_strtod_l+0xb38>
 800ac72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac78:	d822      	bhi.n	800acc0 <_strtod_l+0xb38>
 800ac7a:	a331      	add	r3, pc, #196	; (adr r3, 800ad40 <_strtod_l+0xbb8>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 ff4c 	bl	8000b20 <__aeabi_dcmple>
 800ac88:	b1a0      	cbz	r0, 800acb4 <_strtod_l+0xb2c>
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7f5 ffa3 	bl	8000bd8 <__aeabi_d2uiz>
 800ac92:	2801      	cmp	r0, #1
 800ac94:	bf38      	it	cc
 800ac96:	2001      	movcc	r0, #1
 800ac98:	f7f5 fc4c 	bl	8000534 <__aeabi_ui2d>
 800ac9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460f      	mov	r7, r1
 800aca2:	bb23      	cbnz	r3, 800acee <_strtod_l+0xb66>
 800aca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aca8:	9010      	str	r0, [sp, #64]	; 0x40
 800acaa:	9311      	str	r3, [sp, #68]	; 0x44
 800acac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800acb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acc4:	eeb0 0a48 	vmov.f32	s0, s16
 800acc8:	eef0 0a68 	vmov.f32	s1, s17
 800accc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800acd0:	f001 fa24 	bl	800c11c <__ulp>
 800acd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800acd8:	ec53 2b10 	vmov	r2, r3, d0
 800acdc:	f7f5 fca4 	bl	8000628 <__aeabi_dmul>
 800ace0:	ec53 2b18 	vmov	r2, r3, d8
 800ace4:	f7f5 faea 	bl	80002bc <__adddf3>
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	e78d      	b.n	800ac0a <_strtod_l+0xa82>
 800acee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800acf2:	e7db      	b.n	800acac <_strtod_l+0xb24>
 800acf4:	a314      	add	r3, pc, #80	; (adr r3, 800ad48 <_strtod_l+0xbc0>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 ff07 	bl	8000b0c <__aeabi_dcmplt>
 800acfe:	e7b3      	b.n	800ac68 <_strtod_l+0xae0>
 800ad00:	2300      	movs	r3, #0
 800ad02:	930a      	str	r3, [sp, #40]	; 0x28
 800ad04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	f7ff ba7c 	b.w	800a206 <_strtod_l+0x7e>
 800ad0e:	2a65      	cmp	r2, #101	; 0x65
 800ad10:	f43f ab75 	beq.w	800a3fe <_strtod_l+0x276>
 800ad14:	2a45      	cmp	r2, #69	; 0x45
 800ad16:	f43f ab72 	beq.w	800a3fe <_strtod_l+0x276>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f7ff bbaa 	b.w	800a474 <_strtod_l+0x2ec>
 800ad20:	00000000 	.word	0x00000000
 800ad24:	bff00000 	.word	0xbff00000
 800ad28:	00000000 	.word	0x00000000
 800ad2c:	3ff00000 	.word	0x3ff00000
 800ad30:	94a03595 	.word	0x94a03595
 800ad34:	3fdfffff 	.word	0x3fdfffff
 800ad38:	35afe535 	.word	0x35afe535
 800ad3c:	3fe00000 	.word	0x3fe00000
 800ad40:	ffc00000 	.word	0xffc00000
 800ad44:	41dfffff 	.word	0x41dfffff
 800ad48:	94a03595 	.word	0x94a03595
 800ad4c:	3fcfffff 	.word	0x3fcfffff
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	3fe00000 	.word	0x3fe00000
 800ad58:	7ff00000 	.word	0x7ff00000
 800ad5c:	7fe00000 	.word	0x7fe00000
 800ad60:	7c9fffff 	.word	0x7c9fffff
 800ad64:	7fefffff 	.word	0x7fefffff

0800ad68 <strtod>:
 800ad68:	460a      	mov	r2, r1
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4802      	ldr	r0, [pc, #8]	; (800ad78 <strtod+0x10>)
 800ad6e:	4b03      	ldr	r3, [pc, #12]	; (800ad7c <strtod+0x14>)
 800ad70:	6800      	ldr	r0, [r0, #0]
 800ad72:	f7ff ba09 	b.w	800a188 <_strtod_l>
 800ad76:	bf00      	nop
 800ad78:	20000240 	.word	0x20000240
 800ad7c:	20000088 	.word	0x20000088

0800ad80 <std>:
 800ad80:	2300      	movs	r3, #0
 800ad82:	b510      	push	{r4, lr}
 800ad84:	4604      	mov	r4, r0
 800ad86:	e9c0 3300 	strd	r3, r3, [r0]
 800ad8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad8e:	6083      	str	r3, [r0, #8]
 800ad90:	8181      	strh	r1, [r0, #12]
 800ad92:	6643      	str	r3, [r0, #100]	; 0x64
 800ad94:	81c2      	strh	r2, [r0, #14]
 800ad96:	6183      	str	r3, [r0, #24]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	2208      	movs	r2, #8
 800ad9c:	305c      	adds	r0, #92	; 0x5c
 800ad9e:	f000 f8f4 	bl	800af8a <memset>
 800ada2:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <std+0x58>)
 800ada4:	6263      	str	r3, [r4, #36]	; 0x24
 800ada6:	4b0d      	ldr	r3, [pc, #52]	; (800addc <std+0x5c>)
 800ada8:	62a3      	str	r3, [r4, #40]	; 0x28
 800adaa:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <std+0x60>)
 800adac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adae:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <std+0x64>)
 800adb0:	6323      	str	r3, [r4, #48]	; 0x30
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <std+0x68>)
 800adb4:	6224      	str	r4, [r4, #32]
 800adb6:	429c      	cmp	r4, r3
 800adb8:	d006      	beq.n	800adc8 <std+0x48>
 800adba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800adbe:	4294      	cmp	r4, r2
 800adc0:	d002      	beq.n	800adc8 <std+0x48>
 800adc2:	33d0      	adds	r3, #208	; 0xd0
 800adc4:	429c      	cmp	r4, r3
 800adc6:	d105      	bne.n	800add4 <std+0x54>
 800adc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add0:	f000 b9bc 	b.w	800b14c <__retarget_lock_init_recursive>
 800add4:	bd10      	pop	{r4, pc}
 800add6:	bf00      	nop
 800add8:	0800af05 	.word	0x0800af05
 800addc:	0800af27 	.word	0x0800af27
 800ade0:	0800af5f 	.word	0x0800af5f
 800ade4:	0800af83 	.word	0x0800af83
 800ade8:	20004754 	.word	0x20004754

0800adec <stdio_exit_handler>:
 800adec:	4a02      	ldr	r2, [pc, #8]	; (800adf8 <stdio_exit_handler+0xc>)
 800adee:	4903      	ldr	r1, [pc, #12]	; (800adfc <stdio_exit_handler+0x10>)
 800adf0:	4803      	ldr	r0, [pc, #12]	; (800ae00 <stdio_exit_handler+0x14>)
 800adf2:	f000 b869 	b.w	800aec8 <_fwalk_sglue>
 800adf6:	bf00      	nop
 800adf8:	2000007c 	.word	0x2000007c
 800adfc:	0800c4c5 	.word	0x0800c4c5
 800ae00:	200001f4 	.word	0x200001f4

0800ae04 <cleanup_stdio>:
 800ae04:	6841      	ldr	r1, [r0, #4]
 800ae06:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <cleanup_stdio+0x34>)
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	d001      	beq.n	800ae14 <cleanup_stdio+0x10>
 800ae10:	f001 fb58 	bl	800c4c4 <_fflush_r>
 800ae14:	68a1      	ldr	r1, [r4, #8]
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <cleanup_stdio+0x38>)
 800ae18:	4299      	cmp	r1, r3
 800ae1a:	d002      	beq.n	800ae22 <cleanup_stdio+0x1e>
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f001 fb51 	bl	800c4c4 <_fflush_r>
 800ae22:	68e1      	ldr	r1, [r4, #12]
 800ae24:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <cleanup_stdio+0x3c>)
 800ae26:	4299      	cmp	r1, r3
 800ae28:	d004      	beq.n	800ae34 <cleanup_stdio+0x30>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae30:	f001 bb48 	b.w	800c4c4 <_fflush_r>
 800ae34:	bd10      	pop	{r4, pc}
 800ae36:	bf00      	nop
 800ae38:	20004754 	.word	0x20004754
 800ae3c:	200047bc 	.word	0x200047bc
 800ae40:	20004824 	.word	0x20004824

0800ae44 <global_stdio_init.part.0>:
 800ae44:	b510      	push	{r4, lr}
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <global_stdio_init.part.0+0x30>)
 800ae48:	4c0b      	ldr	r4, [pc, #44]	; (800ae78 <global_stdio_init.part.0+0x34>)
 800ae4a:	4a0c      	ldr	r2, [pc, #48]	; (800ae7c <global_stdio_init.part.0+0x38>)
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	2200      	movs	r2, #0
 800ae52:	2104      	movs	r1, #4
 800ae54:	f7ff ff94 	bl	800ad80 <std>
 800ae58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	2109      	movs	r1, #9
 800ae60:	f7ff ff8e 	bl	800ad80 <std>
 800ae64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ae68:	2202      	movs	r2, #2
 800ae6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6e:	2112      	movs	r1, #18
 800ae70:	f7ff bf86 	b.w	800ad80 <std>
 800ae74:	2000488c 	.word	0x2000488c
 800ae78:	20004754 	.word	0x20004754
 800ae7c:	0800aded 	.word	0x0800aded

0800ae80 <__sfp_lock_acquire>:
 800ae80:	4801      	ldr	r0, [pc, #4]	; (800ae88 <__sfp_lock_acquire+0x8>)
 800ae82:	f000 b964 	b.w	800b14e <__retarget_lock_acquire_recursive>
 800ae86:	bf00      	nop
 800ae88:	20004895 	.word	0x20004895

0800ae8c <__sfp_lock_release>:
 800ae8c:	4801      	ldr	r0, [pc, #4]	; (800ae94 <__sfp_lock_release+0x8>)
 800ae8e:	f000 b95f 	b.w	800b150 <__retarget_lock_release_recursive>
 800ae92:	bf00      	nop
 800ae94:	20004895 	.word	0x20004895

0800ae98 <__sinit>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	f7ff fff0 	bl	800ae80 <__sfp_lock_acquire>
 800aea0:	6a23      	ldr	r3, [r4, #32]
 800aea2:	b11b      	cbz	r3, 800aeac <__sinit+0x14>
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f7ff bff0 	b.w	800ae8c <__sfp_lock_release>
 800aeac:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <__sinit+0x28>)
 800aeae:	6223      	str	r3, [r4, #32]
 800aeb0:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <__sinit+0x2c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1f5      	bne.n	800aea4 <__sinit+0xc>
 800aeb8:	f7ff ffc4 	bl	800ae44 <global_stdio_init.part.0>
 800aebc:	e7f2      	b.n	800aea4 <__sinit+0xc>
 800aebe:	bf00      	nop
 800aec0:	0800ae05 	.word	0x0800ae05
 800aec4:	2000488c 	.word	0x2000488c

0800aec8 <_fwalk_sglue>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	4607      	mov	r7, r0
 800aece:	4688      	mov	r8, r1
 800aed0:	4614      	mov	r4, r2
 800aed2:	2600      	movs	r6, #0
 800aed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aed8:	f1b9 0901 	subs.w	r9, r9, #1
 800aedc:	d505      	bpl.n	800aeea <_fwalk_sglue+0x22>
 800aede:	6824      	ldr	r4, [r4, #0]
 800aee0:	2c00      	cmp	r4, #0
 800aee2:	d1f7      	bne.n	800aed4 <_fwalk_sglue+0xc>
 800aee4:	4630      	mov	r0, r6
 800aee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d907      	bls.n	800af00 <_fwalk_sglue+0x38>
 800aef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aef4:	3301      	adds	r3, #1
 800aef6:	d003      	beq.n	800af00 <_fwalk_sglue+0x38>
 800aef8:	4629      	mov	r1, r5
 800aefa:	4638      	mov	r0, r7
 800aefc:	47c0      	blx	r8
 800aefe:	4306      	orrs	r6, r0
 800af00:	3568      	adds	r5, #104	; 0x68
 800af02:	e7e9      	b.n	800aed8 <_fwalk_sglue+0x10>

0800af04 <__sread>:
 800af04:	b510      	push	{r4, lr}
 800af06:	460c      	mov	r4, r1
 800af08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0c:	f000 f8d0 	bl	800b0b0 <_read_r>
 800af10:	2800      	cmp	r0, #0
 800af12:	bfab      	itete	ge
 800af14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af16:	89a3      	ldrhlt	r3, [r4, #12]
 800af18:	181b      	addge	r3, r3, r0
 800af1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af1e:	bfac      	ite	ge
 800af20:	6563      	strge	r3, [r4, #84]	; 0x54
 800af22:	81a3      	strhlt	r3, [r4, #12]
 800af24:	bd10      	pop	{r4, pc}

0800af26 <__swrite>:
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	461f      	mov	r7, r3
 800af2c:	898b      	ldrh	r3, [r1, #12]
 800af2e:	05db      	lsls	r3, r3, #23
 800af30:	4605      	mov	r5, r0
 800af32:	460c      	mov	r4, r1
 800af34:	4616      	mov	r6, r2
 800af36:	d505      	bpl.n	800af44 <__swrite+0x1e>
 800af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3c:	2302      	movs	r3, #2
 800af3e:	2200      	movs	r2, #0
 800af40:	f000 f8a4 	bl	800b08c <_lseek_r>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	4632      	mov	r2, r6
 800af52:	463b      	mov	r3, r7
 800af54:	4628      	mov	r0, r5
 800af56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af5a:	f000 b8bb 	b.w	800b0d4 <_write_r>

0800af5e <__sseek>:
 800af5e:	b510      	push	{r4, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af66:	f000 f891 	bl	800b08c <_lseek_r>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	bf15      	itete	ne
 800af70:	6560      	strne	r0, [r4, #84]	; 0x54
 800af72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af7a:	81a3      	strheq	r3, [r4, #12]
 800af7c:	bf18      	it	ne
 800af7e:	81a3      	strhne	r3, [r4, #12]
 800af80:	bd10      	pop	{r4, pc}

0800af82 <__sclose>:
 800af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af86:	f000 b81b 	b.w	800afc0 <_close_r>

0800af8a <memset>:
 800af8a:	4402      	add	r2, r0
 800af8c:	4603      	mov	r3, r0
 800af8e:	4293      	cmp	r3, r2
 800af90:	d100      	bne.n	800af94 <memset+0xa>
 800af92:	4770      	bx	lr
 800af94:	f803 1b01 	strb.w	r1, [r3], #1
 800af98:	e7f9      	b.n	800af8e <memset+0x4>

0800af9a <strncmp>:
 800af9a:	b510      	push	{r4, lr}
 800af9c:	b16a      	cbz	r2, 800afba <strncmp+0x20>
 800af9e:	3901      	subs	r1, #1
 800afa0:	1884      	adds	r4, r0, r2
 800afa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800afaa:	429a      	cmp	r2, r3
 800afac:	d103      	bne.n	800afb6 <strncmp+0x1c>
 800afae:	42a0      	cmp	r0, r4
 800afb0:	d001      	beq.n	800afb6 <strncmp+0x1c>
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	d1f5      	bne.n	800afa2 <strncmp+0x8>
 800afb6:	1ad0      	subs	r0, r2, r3
 800afb8:	bd10      	pop	{r4, pc}
 800afba:	4610      	mov	r0, r2
 800afbc:	e7fc      	b.n	800afb8 <strncmp+0x1e>
	...

0800afc0 <_close_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d06      	ldr	r5, [pc, #24]	; (800afdc <_close_r+0x1c>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	f7f9 fadd 	bl	800458a <_close>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_close_r+0x1a>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_close_r+0x1a>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	20004890 	.word	0x20004890

0800afe0 <_reclaim_reent>:
 800afe0:	4b29      	ldr	r3, [pc, #164]	; (800b088 <_reclaim_reent+0xa8>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4283      	cmp	r3, r0
 800afe6:	b570      	push	{r4, r5, r6, lr}
 800afe8:	4604      	mov	r4, r0
 800afea:	d04b      	beq.n	800b084 <_reclaim_reent+0xa4>
 800afec:	69c3      	ldr	r3, [r0, #28]
 800afee:	b143      	cbz	r3, 800b002 <_reclaim_reent+0x22>
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d144      	bne.n	800b080 <_reclaim_reent+0xa0>
 800aff6:	69e3      	ldr	r3, [r4, #28]
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	b111      	cbz	r1, 800b002 <_reclaim_reent+0x22>
 800affc:	4620      	mov	r0, r4
 800affe:	f000 f8bf 	bl	800b180 <_free_r>
 800b002:	6961      	ldr	r1, [r4, #20]
 800b004:	b111      	cbz	r1, 800b00c <_reclaim_reent+0x2c>
 800b006:	4620      	mov	r0, r4
 800b008:	f000 f8ba 	bl	800b180 <_free_r>
 800b00c:	69e1      	ldr	r1, [r4, #28]
 800b00e:	b111      	cbz	r1, 800b016 <_reclaim_reent+0x36>
 800b010:	4620      	mov	r0, r4
 800b012:	f000 f8b5 	bl	800b180 <_free_r>
 800b016:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b018:	b111      	cbz	r1, 800b020 <_reclaim_reent+0x40>
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 f8b0 	bl	800b180 <_free_r>
 800b020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b022:	b111      	cbz	r1, 800b02a <_reclaim_reent+0x4a>
 800b024:	4620      	mov	r0, r4
 800b026:	f000 f8ab 	bl	800b180 <_free_r>
 800b02a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b02c:	b111      	cbz	r1, 800b034 <_reclaim_reent+0x54>
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 f8a6 	bl	800b180 <_free_r>
 800b034:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b036:	b111      	cbz	r1, 800b03e <_reclaim_reent+0x5e>
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 f8a1 	bl	800b180 <_free_r>
 800b03e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b040:	b111      	cbz	r1, 800b048 <_reclaim_reent+0x68>
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f89c 	bl	800b180 <_free_r>
 800b048:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b04a:	b111      	cbz	r1, 800b052 <_reclaim_reent+0x72>
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 f897 	bl	800b180 <_free_r>
 800b052:	6a23      	ldr	r3, [r4, #32]
 800b054:	b1b3      	cbz	r3, 800b084 <_reclaim_reent+0xa4>
 800b056:	4620      	mov	r0, r4
 800b058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b05c:	4718      	bx	r3
 800b05e:	5949      	ldr	r1, [r1, r5]
 800b060:	b941      	cbnz	r1, 800b074 <_reclaim_reent+0x94>
 800b062:	3504      	adds	r5, #4
 800b064:	69e3      	ldr	r3, [r4, #28]
 800b066:	2d80      	cmp	r5, #128	; 0x80
 800b068:	68d9      	ldr	r1, [r3, #12]
 800b06a:	d1f8      	bne.n	800b05e <_reclaim_reent+0x7e>
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 f887 	bl	800b180 <_free_r>
 800b072:	e7c0      	b.n	800aff6 <_reclaim_reent+0x16>
 800b074:	680e      	ldr	r6, [r1, #0]
 800b076:	4620      	mov	r0, r4
 800b078:	f000 f882 	bl	800b180 <_free_r>
 800b07c:	4631      	mov	r1, r6
 800b07e:	e7ef      	b.n	800b060 <_reclaim_reent+0x80>
 800b080:	2500      	movs	r5, #0
 800b082:	e7ef      	b.n	800b064 <_reclaim_reent+0x84>
 800b084:	bd70      	pop	{r4, r5, r6, pc}
 800b086:	bf00      	nop
 800b088:	20000240 	.word	0x20000240

0800b08c <_lseek_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4d07      	ldr	r5, [pc, #28]	; (800b0ac <_lseek_r+0x20>)
 800b090:	4604      	mov	r4, r0
 800b092:	4608      	mov	r0, r1
 800b094:	4611      	mov	r1, r2
 800b096:	2200      	movs	r2, #0
 800b098:	602a      	str	r2, [r5, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f7f9 fa9c 	bl	80045d8 <_lseek>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_lseek_r+0x1e>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_lseek_r+0x1e>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	20004890 	.word	0x20004890

0800b0b0 <_read_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4d07      	ldr	r5, [pc, #28]	; (800b0d0 <_read_r+0x20>)
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	602a      	str	r2, [r5, #0]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f7f9 fa2a 	bl	8004518 <_read>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_read_r+0x1e>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_read_r+0x1e>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20004890 	.word	0x20004890

0800b0d4 <_write_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4d07      	ldr	r5, [pc, #28]	; (800b0f4 <_write_r+0x20>)
 800b0d8:	4604      	mov	r4, r0
 800b0da:	4608      	mov	r0, r1
 800b0dc:	4611      	mov	r1, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	602a      	str	r2, [r5, #0]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f7f9 fa35 	bl	8004552 <_write>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_write_r+0x1e>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_write_r+0x1e>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	20004890 	.word	0x20004890

0800b0f8 <__errno>:
 800b0f8:	4b01      	ldr	r3, [pc, #4]	; (800b100 <__errno+0x8>)
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20000240 	.word	0x20000240

0800b104 <__libc_init_array>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	4d0d      	ldr	r5, [pc, #52]	; (800b13c <__libc_init_array+0x38>)
 800b108:	4c0d      	ldr	r4, [pc, #52]	; (800b140 <__libc_init_array+0x3c>)
 800b10a:	1b64      	subs	r4, r4, r5
 800b10c:	10a4      	asrs	r4, r4, #2
 800b10e:	2600      	movs	r6, #0
 800b110:	42a6      	cmp	r6, r4
 800b112:	d109      	bne.n	800b128 <__libc_init_array+0x24>
 800b114:	4d0b      	ldr	r5, [pc, #44]	; (800b144 <__libc_init_array+0x40>)
 800b116:	4c0c      	ldr	r4, [pc, #48]	; (800b148 <__libc_init_array+0x44>)
 800b118:	f003 f838 	bl	800e18c <_init>
 800b11c:	1b64      	subs	r4, r4, r5
 800b11e:	10a4      	asrs	r4, r4, #2
 800b120:	2600      	movs	r6, #0
 800b122:	42a6      	cmp	r6, r4
 800b124:	d105      	bne.n	800b132 <__libc_init_array+0x2e>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12c:	4798      	blx	r3
 800b12e:	3601      	adds	r6, #1
 800b130:	e7ee      	b.n	800b110 <__libc_init_array+0xc>
 800b132:	f855 3b04 	ldr.w	r3, [r5], #4
 800b136:	4798      	blx	r3
 800b138:	3601      	adds	r6, #1
 800b13a:	e7f2      	b.n	800b122 <__libc_init_array+0x1e>
 800b13c:	0800e780 	.word	0x0800e780
 800b140:	0800e780 	.word	0x0800e780
 800b144:	0800e780 	.word	0x0800e780
 800b148:	0800e784 	.word	0x0800e784

0800b14c <__retarget_lock_init_recursive>:
 800b14c:	4770      	bx	lr

0800b14e <__retarget_lock_acquire_recursive>:
 800b14e:	4770      	bx	lr

0800b150 <__retarget_lock_release_recursive>:
 800b150:	4770      	bx	lr

0800b152 <memcpy>:
 800b152:	440a      	add	r2, r1
 800b154:	4291      	cmp	r1, r2
 800b156:	f100 33ff 	add.w	r3, r0, #4294967295
 800b15a:	d100      	bne.n	800b15e <memcpy+0xc>
 800b15c:	4770      	bx	lr
 800b15e:	b510      	push	{r4, lr}
 800b160:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b164:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b168:	4291      	cmp	r1, r2
 800b16a:	d1f9      	bne.n	800b160 <memcpy+0xe>
 800b16c:	bd10      	pop	{r4, pc}
	...

0800b170 <nan>:
 800b170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b178 <nan+0x8>
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	00000000 	.word	0x00000000
 800b17c:	7ff80000 	.word	0x7ff80000

0800b180 <_free_r>:
 800b180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b182:	2900      	cmp	r1, #0
 800b184:	d044      	beq.n	800b210 <_free_r+0x90>
 800b186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b18a:	9001      	str	r0, [sp, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f1a1 0404 	sub.w	r4, r1, #4
 800b192:	bfb8      	it	lt
 800b194:	18e4      	addlt	r4, r4, r3
 800b196:	f000 fc49 	bl	800ba2c <__malloc_lock>
 800b19a:	4a1e      	ldr	r2, [pc, #120]	; (800b214 <_free_r+0x94>)
 800b19c:	9801      	ldr	r0, [sp, #4]
 800b19e:	6813      	ldr	r3, [r2, #0]
 800b1a0:	b933      	cbnz	r3, 800b1b0 <_free_r+0x30>
 800b1a2:	6063      	str	r3, [r4, #4]
 800b1a4:	6014      	str	r4, [r2, #0]
 800b1a6:	b003      	add	sp, #12
 800b1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1ac:	f000 bc44 	b.w	800ba38 <__malloc_unlock>
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	d908      	bls.n	800b1c6 <_free_r+0x46>
 800b1b4:	6825      	ldr	r5, [r4, #0]
 800b1b6:	1961      	adds	r1, r4, r5
 800b1b8:	428b      	cmp	r3, r1
 800b1ba:	bf01      	itttt	eq
 800b1bc:	6819      	ldreq	r1, [r3, #0]
 800b1be:	685b      	ldreq	r3, [r3, #4]
 800b1c0:	1949      	addeq	r1, r1, r5
 800b1c2:	6021      	streq	r1, [r4, #0]
 800b1c4:	e7ed      	b.n	800b1a2 <_free_r+0x22>
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	b10b      	cbz	r3, 800b1d0 <_free_r+0x50>
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	d9fa      	bls.n	800b1c6 <_free_r+0x46>
 800b1d0:	6811      	ldr	r1, [r2, #0]
 800b1d2:	1855      	adds	r5, r2, r1
 800b1d4:	42a5      	cmp	r5, r4
 800b1d6:	d10b      	bne.n	800b1f0 <_free_r+0x70>
 800b1d8:	6824      	ldr	r4, [r4, #0]
 800b1da:	4421      	add	r1, r4
 800b1dc:	1854      	adds	r4, r2, r1
 800b1de:	42a3      	cmp	r3, r4
 800b1e0:	6011      	str	r1, [r2, #0]
 800b1e2:	d1e0      	bne.n	800b1a6 <_free_r+0x26>
 800b1e4:	681c      	ldr	r4, [r3, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	6053      	str	r3, [r2, #4]
 800b1ea:	440c      	add	r4, r1
 800b1ec:	6014      	str	r4, [r2, #0]
 800b1ee:	e7da      	b.n	800b1a6 <_free_r+0x26>
 800b1f0:	d902      	bls.n	800b1f8 <_free_r+0x78>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	e7d6      	b.n	800b1a6 <_free_r+0x26>
 800b1f8:	6825      	ldr	r5, [r4, #0]
 800b1fa:	1961      	adds	r1, r4, r5
 800b1fc:	428b      	cmp	r3, r1
 800b1fe:	bf04      	itt	eq
 800b200:	6819      	ldreq	r1, [r3, #0]
 800b202:	685b      	ldreq	r3, [r3, #4]
 800b204:	6063      	str	r3, [r4, #4]
 800b206:	bf04      	itt	eq
 800b208:	1949      	addeq	r1, r1, r5
 800b20a:	6021      	streq	r1, [r4, #0]
 800b20c:	6054      	str	r4, [r2, #4]
 800b20e:	e7ca      	b.n	800b1a6 <_free_r+0x26>
 800b210:	b003      	add	sp, #12
 800b212:	bd30      	pop	{r4, r5, pc}
 800b214:	20004898 	.word	0x20004898

0800b218 <rshift>:
 800b218:	6903      	ldr	r3, [r0, #16]
 800b21a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b21e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b222:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b226:	f100 0414 	add.w	r4, r0, #20
 800b22a:	dd45      	ble.n	800b2b8 <rshift+0xa0>
 800b22c:	f011 011f 	ands.w	r1, r1, #31
 800b230:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b234:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b238:	d10c      	bne.n	800b254 <rshift+0x3c>
 800b23a:	f100 0710 	add.w	r7, r0, #16
 800b23e:	4629      	mov	r1, r5
 800b240:	42b1      	cmp	r1, r6
 800b242:	d334      	bcc.n	800b2ae <rshift+0x96>
 800b244:	1a9b      	subs	r3, r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	1eea      	subs	r2, r5, #3
 800b24a:	4296      	cmp	r6, r2
 800b24c:	bf38      	it	cc
 800b24e:	2300      	movcc	r3, #0
 800b250:	4423      	add	r3, r4
 800b252:	e015      	b.n	800b280 <rshift+0x68>
 800b254:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b258:	f1c1 0820 	rsb	r8, r1, #32
 800b25c:	40cf      	lsrs	r7, r1
 800b25e:	f105 0e04 	add.w	lr, r5, #4
 800b262:	46a1      	mov	r9, r4
 800b264:	4576      	cmp	r6, lr
 800b266:	46f4      	mov	ip, lr
 800b268:	d815      	bhi.n	800b296 <rshift+0x7e>
 800b26a:	1a9a      	subs	r2, r3, r2
 800b26c:	0092      	lsls	r2, r2, #2
 800b26e:	3a04      	subs	r2, #4
 800b270:	3501      	adds	r5, #1
 800b272:	42ae      	cmp	r6, r5
 800b274:	bf38      	it	cc
 800b276:	2200      	movcc	r2, #0
 800b278:	18a3      	adds	r3, r4, r2
 800b27a:	50a7      	str	r7, [r4, r2]
 800b27c:	b107      	cbz	r7, 800b280 <rshift+0x68>
 800b27e:	3304      	adds	r3, #4
 800b280:	1b1a      	subs	r2, r3, r4
 800b282:	42a3      	cmp	r3, r4
 800b284:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b288:	bf08      	it	eq
 800b28a:	2300      	moveq	r3, #0
 800b28c:	6102      	str	r2, [r0, #16]
 800b28e:	bf08      	it	eq
 800b290:	6143      	streq	r3, [r0, #20]
 800b292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b296:	f8dc c000 	ldr.w	ip, [ip]
 800b29a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b29e:	ea4c 0707 	orr.w	r7, ip, r7
 800b2a2:	f849 7b04 	str.w	r7, [r9], #4
 800b2a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2aa:	40cf      	lsrs	r7, r1
 800b2ac:	e7da      	b.n	800b264 <rshift+0x4c>
 800b2ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2b6:	e7c3      	b.n	800b240 <rshift+0x28>
 800b2b8:	4623      	mov	r3, r4
 800b2ba:	e7e1      	b.n	800b280 <rshift+0x68>

0800b2bc <__hexdig_fun>:
 800b2bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b2c0:	2b09      	cmp	r3, #9
 800b2c2:	d802      	bhi.n	800b2ca <__hexdig_fun+0xe>
 800b2c4:	3820      	subs	r0, #32
 800b2c6:	b2c0      	uxtb	r0, r0
 800b2c8:	4770      	bx	lr
 800b2ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b2ce:	2b05      	cmp	r3, #5
 800b2d0:	d801      	bhi.n	800b2d6 <__hexdig_fun+0x1a>
 800b2d2:	3847      	subs	r0, #71	; 0x47
 800b2d4:	e7f7      	b.n	800b2c6 <__hexdig_fun+0xa>
 800b2d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b2da:	2b05      	cmp	r3, #5
 800b2dc:	d801      	bhi.n	800b2e2 <__hexdig_fun+0x26>
 800b2de:	3827      	subs	r0, #39	; 0x27
 800b2e0:	e7f1      	b.n	800b2c6 <__hexdig_fun+0xa>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	4770      	bx	lr
	...

0800b2e8 <__gethex>:
 800b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	4617      	mov	r7, r2
 800b2ee:	680a      	ldr	r2, [r1, #0]
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	f102 0b02 	add.w	fp, r2, #2
 800b2f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2fe:	4681      	mov	r9, r0
 800b300:	468a      	mov	sl, r1
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	32fe      	adds	r2, #254	; 0xfe
 800b306:	eb02 030b 	add.w	r3, r2, fp
 800b30a:	46d8      	mov	r8, fp
 800b30c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	2830      	cmp	r0, #48	; 0x30
 800b314:	d0f7      	beq.n	800b306 <__gethex+0x1e>
 800b316:	f7ff ffd1 	bl	800b2bc <__hexdig_fun>
 800b31a:	4604      	mov	r4, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d138      	bne.n	800b392 <__gethex+0xaa>
 800b320:	49a7      	ldr	r1, [pc, #668]	; (800b5c0 <__gethex+0x2d8>)
 800b322:	2201      	movs	r2, #1
 800b324:	4640      	mov	r0, r8
 800b326:	f7ff fe38 	bl	800af9a <strncmp>
 800b32a:	4606      	mov	r6, r0
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d169      	bne.n	800b404 <__gethex+0x11c>
 800b330:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b334:	465d      	mov	r5, fp
 800b336:	f7ff ffc1 	bl	800b2bc <__hexdig_fun>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d064      	beq.n	800b408 <__gethex+0x120>
 800b33e:	465a      	mov	r2, fp
 800b340:	7810      	ldrb	r0, [r2, #0]
 800b342:	2830      	cmp	r0, #48	; 0x30
 800b344:	4690      	mov	r8, r2
 800b346:	f102 0201 	add.w	r2, r2, #1
 800b34a:	d0f9      	beq.n	800b340 <__gethex+0x58>
 800b34c:	f7ff ffb6 	bl	800b2bc <__hexdig_fun>
 800b350:	2301      	movs	r3, #1
 800b352:	fab0 f480 	clz	r4, r0
 800b356:	0964      	lsrs	r4, r4, #5
 800b358:	465e      	mov	r6, fp
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	4642      	mov	r2, r8
 800b35e:	4615      	mov	r5, r2
 800b360:	3201      	adds	r2, #1
 800b362:	7828      	ldrb	r0, [r5, #0]
 800b364:	f7ff ffaa 	bl	800b2bc <__hexdig_fun>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d1f8      	bne.n	800b35e <__gethex+0x76>
 800b36c:	4994      	ldr	r1, [pc, #592]	; (800b5c0 <__gethex+0x2d8>)
 800b36e:	2201      	movs	r2, #1
 800b370:	4628      	mov	r0, r5
 800b372:	f7ff fe12 	bl	800af9a <strncmp>
 800b376:	b978      	cbnz	r0, 800b398 <__gethex+0xb0>
 800b378:	b946      	cbnz	r6, 800b38c <__gethex+0xa4>
 800b37a:	1c6e      	adds	r6, r5, #1
 800b37c:	4632      	mov	r2, r6
 800b37e:	4615      	mov	r5, r2
 800b380:	3201      	adds	r2, #1
 800b382:	7828      	ldrb	r0, [r5, #0]
 800b384:	f7ff ff9a 	bl	800b2bc <__hexdig_fun>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d1f8      	bne.n	800b37e <__gethex+0x96>
 800b38c:	1b73      	subs	r3, r6, r5
 800b38e:	009e      	lsls	r6, r3, #2
 800b390:	e004      	b.n	800b39c <__gethex+0xb4>
 800b392:	2400      	movs	r4, #0
 800b394:	4626      	mov	r6, r4
 800b396:	e7e1      	b.n	800b35c <__gethex+0x74>
 800b398:	2e00      	cmp	r6, #0
 800b39a:	d1f7      	bne.n	800b38c <__gethex+0xa4>
 800b39c:	782b      	ldrb	r3, [r5, #0]
 800b39e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3a2:	2b50      	cmp	r3, #80	; 0x50
 800b3a4:	d13d      	bne.n	800b422 <__gethex+0x13a>
 800b3a6:	786b      	ldrb	r3, [r5, #1]
 800b3a8:	2b2b      	cmp	r3, #43	; 0x2b
 800b3aa:	d02f      	beq.n	800b40c <__gethex+0x124>
 800b3ac:	2b2d      	cmp	r3, #45	; 0x2d
 800b3ae:	d031      	beq.n	800b414 <__gethex+0x12c>
 800b3b0:	1c69      	adds	r1, r5, #1
 800b3b2:	f04f 0b00 	mov.w	fp, #0
 800b3b6:	7808      	ldrb	r0, [r1, #0]
 800b3b8:	f7ff ff80 	bl	800b2bc <__hexdig_fun>
 800b3bc:	1e42      	subs	r2, r0, #1
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	2a18      	cmp	r2, #24
 800b3c2:	d82e      	bhi.n	800b422 <__gethex+0x13a>
 800b3c4:	f1a0 0210 	sub.w	r2, r0, #16
 800b3c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3cc:	f7ff ff76 	bl	800b2bc <__hexdig_fun>
 800b3d0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b3d4:	fa5f fc8c 	uxtb.w	ip, ip
 800b3d8:	f1bc 0f18 	cmp.w	ip, #24
 800b3dc:	d91d      	bls.n	800b41a <__gethex+0x132>
 800b3de:	f1bb 0f00 	cmp.w	fp, #0
 800b3e2:	d000      	beq.n	800b3e6 <__gethex+0xfe>
 800b3e4:	4252      	negs	r2, r2
 800b3e6:	4416      	add	r6, r2
 800b3e8:	f8ca 1000 	str.w	r1, [sl]
 800b3ec:	b1dc      	cbz	r4, 800b426 <__gethex+0x13e>
 800b3ee:	9b01      	ldr	r3, [sp, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bf14      	ite	ne
 800b3f4:	f04f 0800 	movne.w	r8, #0
 800b3f8:	f04f 0806 	moveq.w	r8, #6
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	b005      	add	sp, #20
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b404:	4645      	mov	r5, r8
 800b406:	4626      	mov	r6, r4
 800b408:	2401      	movs	r4, #1
 800b40a:	e7c7      	b.n	800b39c <__gethex+0xb4>
 800b40c:	f04f 0b00 	mov.w	fp, #0
 800b410:	1ca9      	adds	r1, r5, #2
 800b412:	e7d0      	b.n	800b3b6 <__gethex+0xce>
 800b414:	f04f 0b01 	mov.w	fp, #1
 800b418:	e7fa      	b.n	800b410 <__gethex+0x128>
 800b41a:	230a      	movs	r3, #10
 800b41c:	fb03 0002 	mla	r0, r3, r2, r0
 800b420:	e7d0      	b.n	800b3c4 <__gethex+0xdc>
 800b422:	4629      	mov	r1, r5
 800b424:	e7e0      	b.n	800b3e8 <__gethex+0x100>
 800b426:	eba5 0308 	sub.w	r3, r5, r8
 800b42a:	3b01      	subs	r3, #1
 800b42c:	4621      	mov	r1, r4
 800b42e:	2b07      	cmp	r3, #7
 800b430:	dc0a      	bgt.n	800b448 <__gethex+0x160>
 800b432:	4648      	mov	r0, r9
 800b434:	f000 fb06 	bl	800ba44 <_Balloc>
 800b438:	4604      	mov	r4, r0
 800b43a:	b940      	cbnz	r0, 800b44e <__gethex+0x166>
 800b43c:	4b61      	ldr	r3, [pc, #388]	; (800b5c4 <__gethex+0x2dc>)
 800b43e:	4602      	mov	r2, r0
 800b440:	21e4      	movs	r1, #228	; 0xe4
 800b442:	4861      	ldr	r0, [pc, #388]	; (800b5c8 <__gethex+0x2e0>)
 800b444:	f001 f876 	bl	800c534 <__assert_func>
 800b448:	3101      	adds	r1, #1
 800b44a:	105b      	asrs	r3, r3, #1
 800b44c:	e7ef      	b.n	800b42e <__gethex+0x146>
 800b44e:	f100 0a14 	add.w	sl, r0, #20
 800b452:	2300      	movs	r3, #0
 800b454:	495a      	ldr	r1, [pc, #360]	; (800b5c0 <__gethex+0x2d8>)
 800b456:	f8cd a004 	str.w	sl, [sp, #4]
 800b45a:	469b      	mov	fp, r3
 800b45c:	45a8      	cmp	r8, r5
 800b45e:	d342      	bcc.n	800b4e6 <__gethex+0x1fe>
 800b460:	9801      	ldr	r0, [sp, #4]
 800b462:	f840 bb04 	str.w	fp, [r0], #4
 800b466:	eba0 000a 	sub.w	r0, r0, sl
 800b46a:	1080      	asrs	r0, r0, #2
 800b46c:	6120      	str	r0, [r4, #16]
 800b46e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b472:	4658      	mov	r0, fp
 800b474:	f000 fbd8 	bl	800bc28 <__hi0bits>
 800b478:	683d      	ldr	r5, [r7, #0]
 800b47a:	eba8 0000 	sub.w	r0, r8, r0
 800b47e:	42a8      	cmp	r0, r5
 800b480:	dd59      	ble.n	800b536 <__gethex+0x24e>
 800b482:	eba0 0805 	sub.w	r8, r0, r5
 800b486:	4641      	mov	r1, r8
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 ff67 	bl	800c35c <__any_on>
 800b48e:	4683      	mov	fp, r0
 800b490:	b1b8      	cbz	r0, 800b4c2 <__gethex+0x1da>
 800b492:	f108 33ff 	add.w	r3, r8, #4294967295
 800b496:	1159      	asrs	r1, r3, #5
 800b498:	f003 021f 	and.w	r2, r3, #31
 800b49c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4a0:	f04f 0b01 	mov.w	fp, #1
 800b4a4:	fa0b f202 	lsl.w	r2, fp, r2
 800b4a8:	420a      	tst	r2, r1
 800b4aa:	d00a      	beq.n	800b4c2 <__gethex+0x1da>
 800b4ac:	455b      	cmp	r3, fp
 800b4ae:	dd06      	ble.n	800b4be <__gethex+0x1d6>
 800b4b0:	f1a8 0102 	sub.w	r1, r8, #2
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 ff51 	bl	800c35c <__any_on>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d138      	bne.n	800b530 <__gethex+0x248>
 800b4be:	f04f 0b02 	mov.w	fp, #2
 800b4c2:	4641      	mov	r1, r8
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7ff fea7 	bl	800b218 <rshift>
 800b4ca:	4446      	add	r6, r8
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	42b3      	cmp	r3, r6
 800b4d0:	da41      	bge.n	800b556 <__gethex+0x26e>
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4648      	mov	r0, r9
 800b4d6:	f000 faf5 	bl	800bac4 <_Bfree>
 800b4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4dc:	2300      	movs	r3, #0
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b4e4:	e78a      	b.n	800b3fc <__gethex+0x114>
 800b4e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b4ea:	2a2e      	cmp	r2, #46	; 0x2e
 800b4ec:	d014      	beq.n	800b518 <__gethex+0x230>
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	d106      	bne.n	800b500 <__gethex+0x218>
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	f843 bb04 	str.w	fp, [r3], #4
 800b4f8:	f04f 0b00 	mov.w	fp, #0
 800b4fc:	9301      	str	r3, [sp, #4]
 800b4fe:	465b      	mov	r3, fp
 800b500:	7828      	ldrb	r0, [r5, #0]
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	f7ff feda 	bl	800b2bc <__hexdig_fun>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	f000 000f 	and.w	r0, r0, #15
 800b50e:	4098      	lsls	r0, r3
 800b510:	ea4b 0b00 	orr.w	fp, fp, r0
 800b514:	3304      	adds	r3, #4
 800b516:	e7a1      	b.n	800b45c <__gethex+0x174>
 800b518:	45a8      	cmp	r8, r5
 800b51a:	d8e8      	bhi.n	800b4ee <__gethex+0x206>
 800b51c:	2201      	movs	r2, #1
 800b51e:	4628      	mov	r0, r5
 800b520:	9303      	str	r3, [sp, #12]
 800b522:	f7ff fd3a 	bl	800af9a <strncmp>
 800b526:	4926      	ldr	r1, [pc, #152]	; (800b5c0 <__gethex+0x2d8>)
 800b528:	9b03      	ldr	r3, [sp, #12]
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d1df      	bne.n	800b4ee <__gethex+0x206>
 800b52e:	e795      	b.n	800b45c <__gethex+0x174>
 800b530:	f04f 0b03 	mov.w	fp, #3
 800b534:	e7c5      	b.n	800b4c2 <__gethex+0x1da>
 800b536:	da0b      	bge.n	800b550 <__gethex+0x268>
 800b538:	eba5 0800 	sub.w	r8, r5, r0
 800b53c:	4621      	mov	r1, r4
 800b53e:	4642      	mov	r2, r8
 800b540:	4648      	mov	r0, r9
 800b542:	f000 fcd9 	bl	800bef8 <__lshift>
 800b546:	eba6 0608 	sub.w	r6, r6, r8
 800b54a:	4604      	mov	r4, r0
 800b54c:	f100 0a14 	add.w	sl, r0, #20
 800b550:	f04f 0b00 	mov.w	fp, #0
 800b554:	e7ba      	b.n	800b4cc <__gethex+0x1e4>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	42b3      	cmp	r3, r6
 800b55a:	dd73      	ble.n	800b644 <__gethex+0x35c>
 800b55c:	1b9e      	subs	r6, r3, r6
 800b55e:	42b5      	cmp	r5, r6
 800b560:	dc34      	bgt.n	800b5cc <__gethex+0x2e4>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d023      	beq.n	800b5b0 <__gethex+0x2c8>
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d025      	beq.n	800b5b8 <__gethex+0x2d0>
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d115      	bne.n	800b59c <__gethex+0x2b4>
 800b570:	42b5      	cmp	r5, r6
 800b572:	d113      	bne.n	800b59c <__gethex+0x2b4>
 800b574:	2d01      	cmp	r5, #1
 800b576:	d10b      	bne.n	800b590 <__gethex+0x2a8>
 800b578:	9a02      	ldr	r2, [sp, #8]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	2301      	movs	r3, #1
 800b580:	6123      	str	r3, [r4, #16]
 800b582:	f8ca 3000 	str.w	r3, [sl]
 800b586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b588:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b58c:	601c      	str	r4, [r3, #0]
 800b58e:	e735      	b.n	800b3fc <__gethex+0x114>
 800b590:	1e69      	subs	r1, r5, #1
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fee2 	bl	800c35c <__any_on>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d1ed      	bne.n	800b578 <__gethex+0x290>
 800b59c:	4621      	mov	r1, r4
 800b59e:	4648      	mov	r0, r9
 800b5a0:	f000 fa90 	bl	800bac4 <_Bfree>
 800b5a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b5ae:	e725      	b.n	800b3fc <__gethex+0x114>
 800b5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1f2      	bne.n	800b59c <__gethex+0x2b4>
 800b5b6:	e7df      	b.n	800b578 <__gethex+0x290>
 800b5b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1dc      	bne.n	800b578 <__gethex+0x290>
 800b5be:	e7ed      	b.n	800b59c <__gethex+0x2b4>
 800b5c0:	0800e318 	.word	0x0800e318
 800b5c4:	0800e380 	.word	0x0800e380
 800b5c8:	0800e391 	.word	0x0800e391
 800b5cc:	f106 38ff 	add.w	r8, r6, #4294967295
 800b5d0:	f1bb 0f00 	cmp.w	fp, #0
 800b5d4:	d133      	bne.n	800b63e <__gethex+0x356>
 800b5d6:	f1b8 0f00 	cmp.w	r8, #0
 800b5da:	d004      	beq.n	800b5e6 <__gethex+0x2fe>
 800b5dc:	4641      	mov	r1, r8
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 febc 	bl	800c35c <__any_on>
 800b5e4:	4683      	mov	fp, r0
 800b5e6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b5f0:	f008 081f 	and.w	r8, r8, #31
 800b5f4:	fa03 f308 	lsl.w	r3, r3, r8
 800b5f8:	4213      	tst	r3, r2
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bf18      	it	ne
 800b600:	f04b 0b02 	orrne.w	fp, fp, #2
 800b604:	1bad      	subs	r5, r5, r6
 800b606:	f7ff fe07 	bl	800b218 <rshift>
 800b60a:	687e      	ldr	r6, [r7, #4]
 800b60c:	f04f 0802 	mov.w	r8, #2
 800b610:	f1bb 0f00 	cmp.w	fp, #0
 800b614:	d04a      	beq.n	800b6ac <__gethex+0x3c4>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d016      	beq.n	800b64a <__gethex+0x362>
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d018      	beq.n	800b652 <__gethex+0x36a>
 800b620:	2b01      	cmp	r3, #1
 800b622:	d109      	bne.n	800b638 <__gethex+0x350>
 800b624:	f01b 0f02 	tst.w	fp, #2
 800b628:	d006      	beq.n	800b638 <__gethex+0x350>
 800b62a:	f8da 3000 	ldr.w	r3, [sl]
 800b62e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b632:	f01b 0f01 	tst.w	fp, #1
 800b636:	d10f      	bne.n	800b658 <__gethex+0x370>
 800b638:	f048 0810 	orr.w	r8, r8, #16
 800b63c:	e036      	b.n	800b6ac <__gethex+0x3c4>
 800b63e:	f04f 0b01 	mov.w	fp, #1
 800b642:	e7d0      	b.n	800b5e6 <__gethex+0x2fe>
 800b644:	f04f 0801 	mov.w	r8, #1
 800b648:	e7e2      	b.n	800b610 <__gethex+0x328>
 800b64a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b64c:	f1c3 0301 	rsb	r3, r3, #1
 800b650:	930f      	str	r3, [sp, #60]	; 0x3c
 800b652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0ef      	beq.n	800b638 <__gethex+0x350>
 800b658:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b65c:	f104 0214 	add.w	r2, r4, #20
 800b660:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b66a:	2300      	movs	r3, #0
 800b66c:	4694      	mov	ip, r2
 800b66e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b672:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b676:	d01e      	beq.n	800b6b6 <__gethex+0x3ce>
 800b678:	3101      	adds	r1, #1
 800b67a:	f8cc 1000 	str.w	r1, [ip]
 800b67e:	f1b8 0f02 	cmp.w	r8, #2
 800b682:	f104 0214 	add.w	r2, r4, #20
 800b686:	d13d      	bne.n	800b704 <__gethex+0x41c>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	d10b      	bne.n	800b6a8 <__gethex+0x3c0>
 800b690:	1169      	asrs	r1, r5, #5
 800b692:	2301      	movs	r3, #1
 800b694:	f005 051f 	and.w	r5, r5, #31
 800b698:	fa03 f505 	lsl.w	r5, r3, r5
 800b69c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6a0:	421d      	tst	r5, r3
 800b6a2:	bf18      	it	ne
 800b6a4:	f04f 0801 	movne.w	r8, #1
 800b6a8:	f048 0820 	orr.w	r8, r8, #32
 800b6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6ae:	601c      	str	r4, [r3, #0]
 800b6b0:	9b02      	ldr	r3, [sp, #8]
 800b6b2:	601e      	str	r6, [r3, #0]
 800b6b4:	e6a2      	b.n	800b3fc <__gethex+0x114>
 800b6b6:	4290      	cmp	r0, r2
 800b6b8:	f842 3c04 	str.w	r3, [r2, #-4]
 800b6bc:	d8d6      	bhi.n	800b66c <__gethex+0x384>
 800b6be:	68a2      	ldr	r2, [r4, #8]
 800b6c0:	4593      	cmp	fp, r2
 800b6c2:	db17      	blt.n	800b6f4 <__gethex+0x40c>
 800b6c4:	6861      	ldr	r1, [r4, #4]
 800b6c6:	4648      	mov	r0, r9
 800b6c8:	3101      	adds	r1, #1
 800b6ca:	f000 f9bb 	bl	800ba44 <_Balloc>
 800b6ce:	4682      	mov	sl, r0
 800b6d0:	b918      	cbnz	r0, 800b6da <__gethex+0x3f2>
 800b6d2:	4b1b      	ldr	r3, [pc, #108]	; (800b740 <__gethex+0x458>)
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	2184      	movs	r1, #132	; 0x84
 800b6d8:	e6b3      	b.n	800b442 <__gethex+0x15a>
 800b6da:	6922      	ldr	r2, [r4, #16]
 800b6dc:	3202      	adds	r2, #2
 800b6de:	f104 010c 	add.w	r1, r4, #12
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	300c      	adds	r0, #12
 800b6e6:	f7ff fd34 	bl	800b152 <memcpy>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4648      	mov	r0, r9
 800b6ee:	f000 f9e9 	bl	800bac4 <_Bfree>
 800b6f2:	4654      	mov	r4, sl
 800b6f4:	6922      	ldr	r2, [r4, #16]
 800b6f6:	1c51      	adds	r1, r2, #1
 800b6f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b6fc:	6121      	str	r1, [r4, #16]
 800b6fe:	2101      	movs	r1, #1
 800b700:	6151      	str	r1, [r2, #20]
 800b702:	e7bc      	b.n	800b67e <__gethex+0x396>
 800b704:	6921      	ldr	r1, [r4, #16]
 800b706:	4559      	cmp	r1, fp
 800b708:	dd0b      	ble.n	800b722 <__gethex+0x43a>
 800b70a:	2101      	movs	r1, #1
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff fd83 	bl	800b218 <rshift>
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	3601      	adds	r6, #1
 800b716:	42b3      	cmp	r3, r6
 800b718:	f6ff aedb 	blt.w	800b4d2 <__gethex+0x1ea>
 800b71c:	f04f 0801 	mov.w	r8, #1
 800b720:	e7c2      	b.n	800b6a8 <__gethex+0x3c0>
 800b722:	f015 051f 	ands.w	r5, r5, #31
 800b726:	d0f9      	beq.n	800b71c <__gethex+0x434>
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	441a      	add	r2, r3
 800b72c:	f1c5 0520 	rsb	r5, r5, #32
 800b730:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b734:	f000 fa78 	bl	800bc28 <__hi0bits>
 800b738:	42a8      	cmp	r0, r5
 800b73a:	dbe6      	blt.n	800b70a <__gethex+0x422>
 800b73c:	e7ee      	b.n	800b71c <__gethex+0x434>
 800b73e:	bf00      	nop
 800b740:	0800e380 	.word	0x0800e380

0800b744 <L_shift>:
 800b744:	f1c2 0208 	rsb	r2, r2, #8
 800b748:	0092      	lsls	r2, r2, #2
 800b74a:	b570      	push	{r4, r5, r6, lr}
 800b74c:	f1c2 0620 	rsb	r6, r2, #32
 800b750:	6843      	ldr	r3, [r0, #4]
 800b752:	6804      	ldr	r4, [r0, #0]
 800b754:	fa03 f506 	lsl.w	r5, r3, r6
 800b758:	432c      	orrs	r4, r5
 800b75a:	40d3      	lsrs	r3, r2
 800b75c:	6004      	str	r4, [r0, #0]
 800b75e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b762:	4288      	cmp	r0, r1
 800b764:	d3f4      	bcc.n	800b750 <L_shift+0xc>
 800b766:	bd70      	pop	{r4, r5, r6, pc}

0800b768 <__match>:
 800b768:	b530      	push	{r4, r5, lr}
 800b76a:	6803      	ldr	r3, [r0, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b772:	b914      	cbnz	r4, 800b77a <__match+0x12>
 800b774:	6003      	str	r3, [r0, #0]
 800b776:	2001      	movs	r0, #1
 800b778:	bd30      	pop	{r4, r5, pc}
 800b77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b782:	2d19      	cmp	r5, #25
 800b784:	bf98      	it	ls
 800b786:	3220      	addls	r2, #32
 800b788:	42a2      	cmp	r2, r4
 800b78a:	d0f0      	beq.n	800b76e <__match+0x6>
 800b78c:	2000      	movs	r0, #0
 800b78e:	e7f3      	b.n	800b778 <__match+0x10>

0800b790 <__hexnan>:
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	680b      	ldr	r3, [r1, #0]
 800b796:	6801      	ldr	r1, [r0, #0]
 800b798:	115e      	asrs	r6, r3, #5
 800b79a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b79e:	f013 031f 	ands.w	r3, r3, #31
 800b7a2:	b087      	sub	sp, #28
 800b7a4:	bf18      	it	ne
 800b7a6:	3604      	addne	r6, #4
 800b7a8:	2500      	movs	r5, #0
 800b7aa:	1f37      	subs	r7, r6, #4
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	4690      	mov	r8, r2
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7b6:	46b9      	mov	r9, r7
 800b7b8:	463c      	mov	r4, r7
 800b7ba:	9502      	str	r5, [sp, #8]
 800b7bc:	46ab      	mov	fp, r5
 800b7be:	784a      	ldrb	r2, [r1, #1]
 800b7c0:	1c4b      	adds	r3, r1, #1
 800b7c2:	9303      	str	r3, [sp, #12]
 800b7c4:	b342      	cbz	r2, 800b818 <__hexnan+0x88>
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	9105      	str	r1, [sp, #20]
 800b7ca:	9204      	str	r2, [sp, #16]
 800b7cc:	f7ff fd76 	bl	800b2bc <__hexdig_fun>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d14f      	bne.n	800b874 <__hexnan+0xe4>
 800b7d4:	9a04      	ldr	r2, [sp, #16]
 800b7d6:	9905      	ldr	r1, [sp, #20]
 800b7d8:	2a20      	cmp	r2, #32
 800b7da:	d818      	bhi.n	800b80e <__hexnan+0x7e>
 800b7dc:	9b02      	ldr	r3, [sp, #8]
 800b7de:	459b      	cmp	fp, r3
 800b7e0:	dd13      	ble.n	800b80a <__hexnan+0x7a>
 800b7e2:	454c      	cmp	r4, r9
 800b7e4:	d206      	bcs.n	800b7f4 <__hexnan+0x64>
 800b7e6:	2d07      	cmp	r5, #7
 800b7e8:	dc04      	bgt.n	800b7f4 <__hexnan+0x64>
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7ff ffa8 	bl	800b744 <L_shift>
 800b7f4:	4544      	cmp	r4, r8
 800b7f6:	d950      	bls.n	800b89a <__hexnan+0x10a>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b7fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b802:	f8cd b008 	str.w	fp, [sp, #8]
 800b806:	464c      	mov	r4, r9
 800b808:	461d      	mov	r5, r3
 800b80a:	9903      	ldr	r1, [sp, #12]
 800b80c:	e7d7      	b.n	800b7be <__hexnan+0x2e>
 800b80e:	2a29      	cmp	r2, #41	; 0x29
 800b810:	d155      	bne.n	800b8be <__hexnan+0x12e>
 800b812:	3102      	adds	r1, #2
 800b814:	f8ca 1000 	str.w	r1, [sl]
 800b818:	f1bb 0f00 	cmp.w	fp, #0
 800b81c:	d04f      	beq.n	800b8be <__hexnan+0x12e>
 800b81e:	454c      	cmp	r4, r9
 800b820:	d206      	bcs.n	800b830 <__hexnan+0xa0>
 800b822:	2d07      	cmp	r5, #7
 800b824:	dc04      	bgt.n	800b830 <__hexnan+0xa0>
 800b826:	462a      	mov	r2, r5
 800b828:	4649      	mov	r1, r9
 800b82a:	4620      	mov	r0, r4
 800b82c:	f7ff ff8a 	bl	800b744 <L_shift>
 800b830:	4544      	cmp	r4, r8
 800b832:	d934      	bls.n	800b89e <__hexnan+0x10e>
 800b834:	f1a8 0204 	sub.w	r2, r8, #4
 800b838:	4623      	mov	r3, r4
 800b83a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b83e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b842:	429f      	cmp	r7, r3
 800b844:	d2f9      	bcs.n	800b83a <__hexnan+0xaa>
 800b846:	1b3b      	subs	r3, r7, r4
 800b848:	f023 0303 	bic.w	r3, r3, #3
 800b84c:	3304      	adds	r3, #4
 800b84e:	3e03      	subs	r6, #3
 800b850:	3401      	adds	r4, #1
 800b852:	42a6      	cmp	r6, r4
 800b854:	bf38      	it	cc
 800b856:	2304      	movcc	r3, #4
 800b858:	4443      	add	r3, r8
 800b85a:	2200      	movs	r2, #0
 800b85c:	f843 2b04 	str.w	r2, [r3], #4
 800b860:	429f      	cmp	r7, r3
 800b862:	d2fb      	bcs.n	800b85c <__hexnan+0xcc>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	b91b      	cbnz	r3, 800b870 <__hexnan+0xe0>
 800b868:	4547      	cmp	r7, r8
 800b86a:	d126      	bne.n	800b8ba <__hexnan+0x12a>
 800b86c:	2301      	movs	r3, #1
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	2005      	movs	r0, #5
 800b872:	e025      	b.n	800b8c0 <__hexnan+0x130>
 800b874:	3501      	adds	r5, #1
 800b876:	2d08      	cmp	r5, #8
 800b878:	f10b 0b01 	add.w	fp, fp, #1
 800b87c:	dd06      	ble.n	800b88c <__hexnan+0xfc>
 800b87e:	4544      	cmp	r4, r8
 800b880:	d9c3      	bls.n	800b80a <__hexnan+0x7a>
 800b882:	2300      	movs	r3, #0
 800b884:	f844 3c04 	str.w	r3, [r4, #-4]
 800b888:	2501      	movs	r5, #1
 800b88a:	3c04      	subs	r4, #4
 800b88c:	6822      	ldr	r2, [r4, #0]
 800b88e:	f000 000f 	and.w	r0, r0, #15
 800b892:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b896:	6020      	str	r0, [r4, #0]
 800b898:	e7b7      	b.n	800b80a <__hexnan+0x7a>
 800b89a:	2508      	movs	r5, #8
 800b89c:	e7b5      	b.n	800b80a <__hexnan+0x7a>
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d0df      	beq.n	800b864 <__hexnan+0xd4>
 800b8a4:	f1c3 0320 	rsb	r3, r3, #32
 800b8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ac:	40da      	lsrs	r2, r3
 800b8ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8b8:	e7d4      	b.n	800b864 <__hexnan+0xd4>
 800b8ba:	3f04      	subs	r7, #4
 800b8bc:	e7d2      	b.n	800b864 <__hexnan+0xd4>
 800b8be:	2004      	movs	r0, #4
 800b8c0:	b007      	add	sp, #28
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b8c8 <sbrk_aligned>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	4e0e      	ldr	r6, [pc, #56]	; (800b904 <sbrk_aligned+0x3c>)
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	6831      	ldr	r1, [r6, #0]
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	b911      	cbnz	r1, 800b8da <sbrk_aligned+0x12>
 800b8d4:	f000 fe1e 	bl	800c514 <_sbrk_r>
 800b8d8:	6030      	str	r0, [r6, #0]
 800b8da:	4621      	mov	r1, r4
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f000 fe19 	bl	800c514 <_sbrk_r>
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	d00a      	beq.n	800b8fc <sbrk_aligned+0x34>
 800b8e6:	1cc4      	adds	r4, r0, #3
 800b8e8:	f024 0403 	bic.w	r4, r4, #3
 800b8ec:	42a0      	cmp	r0, r4
 800b8ee:	d007      	beq.n	800b900 <sbrk_aligned+0x38>
 800b8f0:	1a21      	subs	r1, r4, r0
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f000 fe0e 	bl	800c514 <_sbrk_r>
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d101      	bne.n	800b900 <sbrk_aligned+0x38>
 800b8fc:	f04f 34ff 	mov.w	r4, #4294967295
 800b900:	4620      	mov	r0, r4
 800b902:	bd70      	pop	{r4, r5, r6, pc}
 800b904:	2000489c 	.word	0x2000489c

0800b908 <_malloc_r>:
 800b908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b90c:	1ccd      	adds	r5, r1, #3
 800b90e:	f025 0503 	bic.w	r5, r5, #3
 800b912:	3508      	adds	r5, #8
 800b914:	2d0c      	cmp	r5, #12
 800b916:	bf38      	it	cc
 800b918:	250c      	movcc	r5, #12
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	4607      	mov	r7, r0
 800b91e:	db01      	blt.n	800b924 <_malloc_r+0x1c>
 800b920:	42a9      	cmp	r1, r5
 800b922:	d905      	bls.n	800b930 <_malloc_r+0x28>
 800b924:	230c      	movs	r3, #12
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	2600      	movs	r6, #0
 800b92a:	4630      	mov	r0, r6
 800b92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b930:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba04 <_malloc_r+0xfc>
 800b934:	f000 f87a 	bl	800ba2c <__malloc_lock>
 800b938:	f8d8 3000 	ldr.w	r3, [r8]
 800b93c:	461c      	mov	r4, r3
 800b93e:	bb5c      	cbnz	r4, 800b998 <_malloc_r+0x90>
 800b940:	4629      	mov	r1, r5
 800b942:	4638      	mov	r0, r7
 800b944:	f7ff ffc0 	bl	800b8c8 <sbrk_aligned>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	4604      	mov	r4, r0
 800b94c:	d155      	bne.n	800b9fa <_malloc_r+0xf2>
 800b94e:	f8d8 4000 	ldr.w	r4, [r8]
 800b952:	4626      	mov	r6, r4
 800b954:	2e00      	cmp	r6, #0
 800b956:	d145      	bne.n	800b9e4 <_malloc_r+0xdc>
 800b958:	2c00      	cmp	r4, #0
 800b95a:	d048      	beq.n	800b9ee <_malloc_r+0xe6>
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	4631      	mov	r1, r6
 800b960:	4638      	mov	r0, r7
 800b962:	eb04 0903 	add.w	r9, r4, r3
 800b966:	f000 fdd5 	bl	800c514 <_sbrk_r>
 800b96a:	4581      	cmp	r9, r0
 800b96c:	d13f      	bne.n	800b9ee <_malloc_r+0xe6>
 800b96e:	6821      	ldr	r1, [r4, #0]
 800b970:	1a6d      	subs	r5, r5, r1
 800b972:	4629      	mov	r1, r5
 800b974:	4638      	mov	r0, r7
 800b976:	f7ff ffa7 	bl	800b8c8 <sbrk_aligned>
 800b97a:	3001      	adds	r0, #1
 800b97c:	d037      	beq.n	800b9ee <_malloc_r+0xe6>
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	442b      	add	r3, r5
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	f8d8 3000 	ldr.w	r3, [r8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d038      	beq.n	800b9fe <_malloc_r+0xf6>
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	42a2      	cmp	r2, r4
 800b990:	d12b      	bne.n	800b9ea <_malloc_r+0xe2>
 800b992:	2200      	movs	r2, #0
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	e00f      	b.n	800b9b8 <_malloc_r+0xb0>
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	1b52      	subs	r2, r2, r5
 800b99c:	d41f      	bmi.n	800b9de <_malloc_r+0xd6>
 800b99e:	2a0b      	cmp	r2, #11
 800b9a0:	d917      	bls.n	800b9d2 <_malloc_r+0xca>
 800b9a2:	1961      	adds	r1, r4, r5
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	6025      	str	r5, [r4, #0]
 800b9a8:	bf18      	it	ne
 800b9aa:	6059      	strne	r1, [r3, #4]
 800b9ac:	6863      	ldr	r3, [r4, #4]
 800b9ae:	bf08      	it	eq
 800b9b0:	f8c8 1000 	streq.w	r1, [r8]
 800b9b4:	5162      	str	r2, [r4, r5]
 800b9b6:	604b      	str	r3, [r1, #4]
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f104 060b 	add.w	r6, r4, #11
 800b9be:	f000 f83b 	bl	800ba38 <__malloc_unlock>
 800b9c2:	f026 0607 	bic.w	r6, r6, #7
 800b9c6:	1d23      	adds	r3, r4, #4
 800b9c8:	1af2      	subs	r2, r6, r3
 800b9ca:	d0ae      	beq.n	800b92a <_malloc_r+0x22>
 800b9cc:	1b9b      	subs	r3, r3, r6
 800b9ce:	50a3      	str	r3, [r4, r2]
 800b9d0:	e7ab      	b.n	800b92a <_malloc_r+0x22>
 800b9d2:	42a3      	cmp	r3, r4
 800b9d4:	6862      	ldr	r2, [r4, #4]
 800b9d6:	d1dd      	bne.n	800b994 <_malloc_r+0x8c>
 800b9d8:	f8c8 2000 	str.w	r2, [r8]
 800b9dc:	e7ec      	b.n	800b9b8 <_malloc_r+0xb0>
 800b9de:	4623      	mov	r3, r4
 800b9e0:	6864      	ldr	r4, [r4, #4]
 800b9e2:	e7ac      	b.n	800b93e <_malloc_r+0x36>
 800b9e4:	4634      	mov	r4, r6
 800b9e6:	6876      	ldr	r6, [r6, #4]
 800b9e8:	e7b4      	b.n	800b954 <_malloc_r+0x4c>
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	e7cc      	b.n	800b988 <_malloc_r+0x80>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	603b      	str	r3, [r7, #0]
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	f000 f820 	bl	800ba38 <__malloc_unlock>
 800b9f8:	e797      	b.n	800b92a <_malloc_r+0x22>
 800b9fa:	6025      	str	r5, [r4, #0]
 800b9fc:	e7dc      	b.n	800b9b8 <_malloc_r+0xb0>
 800b9fe:	605b      	str	r3, [r3, #4]
 800ba00:	deff      	udf	#255	; 0xff
 800ba02:	bf00      	nop
 800ba04:	20004898 	.word	0x20004898

0800ba08 <__ascii_mbtowc>:
 800ba08:	b082      	sub	sp, #8
 800ba0a:	b901      	cbnz	r1, 800ba0e <__ascii_mbtowc+0x6>
 800ba0c:	a901      	add	r1, sp, #4
 800ba0e:	b142      	cbz	r2, 800ba22 <__ascii_mbtowc+0x1a>
 800ba10:	b14b      	cbz	r3, 800ba26 <__ascii_mbtowc+0x1e>
 800ba12:	7813      	ldrb	r3, [r2, #0]
 800ba14:	600b      	str	r3, [r1, #0]
 800ba16:	7812      	ldrb	r2, [r2, #0]
 800ba18:	1e10      	subs	r0, r2, #0
 800ba1a:	bf18      	it	ne
 800ba1c:	2001      	movne	r0, #1
 800ba1e:	b002      	add	sp, #8
 800ba20:	4770      	bx	lr
 800ba22:	4610      	mov	r0, r2
 800ba24:	e7fb      	b.n	800ba1e <__ascii_mbtowc+0x16>
 800ba26:	f06f 0001 	mvn.w	r0, #1
 800ba2a:	e7f8      	b.n	800ba1e <__ascii_mbtowc+0x16>

0800ba2c <__malloc_lock>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__malloc_lock+0x8>)
 800ba2e:	f7ff bb8e 	b.w	800b14e <__retarget_lock_acquire_recursive>
 800ba32:	bf00      	nop
 800ba34:	20004894 	.word	0x20004894

0800ba38 <__malloc_unlock>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__malloc_unlock+0x8>)
 800ba3a:	f7ff bb89 	b.w	800b150 <__retarget_lock_release_recursive>
 800ba3e:	bf00      	nop
 800ba40:	20004894 	.word	0x20004894

0800ba44 <_Balloc>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	69c6      	ldr	r6, [r0, #28]
 800ba48:	4604      	mov	r4, r0
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	b976      	cbnz	r6, 800ba6c <_Balloc+0x28>
 800ba4e:	2010      	movs	r0, #16
 800ba50:	f000 fda4 	bl	800c59c <malloc>
 800ba54:	4602      	mov	r2, r0
 800ba56:	61e0      	str	r0, [r4, #28]
 800ba58:	b920      	cbnz	r0, 800ba64 <_Balloc+0x20>
 800ba5a:	4b18      	ldr	r3, [pc, #96]	; (800babc <_Balloc+0x78>)
 800ba5c:	4818      	ldr	r0, [pc, #96]	; (800bac0 <_Balloc+0x7c>)
 800ba5e:	216b      	movs	r1, #107	; 0x6b
 800ba60:	f000 fd68 	bl	800c534 <__assert_func>
 800ba64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba68:	6006      	str	r6, [r0, #0]
 800ba6a:	60c6      	str	r6, [r0, #12]
 800ba6c:	69e6      	ldr	r6, [r4, #28]
 800ba6e:	68f3      	ldr	r3, [r6, #12]
 800ba70:	b183      	cbz	r3, 800ba94 <_Balloc+0x50>
 800ba72:	69e3      	ldr	r3, [r4, #28]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba7a:	b9b8      	cbnz	r0, 800baac <_Balloc+0x68>
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba82:	1d72      	adds	r2, r6, #5
 800ba84:	0092      	lsls	r2, r2, #2
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fd72 	bl	800c570 <_calloc_r>
 800ba8c:	b160      	cbz	r0, 800baa8 <_Balloc+0x64>
 800ba8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba92:	e00e      	b.n	800bab2 <_Balloc+0x6e>
 800ba94:	2221      	movs	r2, #33	; 0x21
 800ba96:	2104      	movs	r1, #4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fd69 	bl	800c570 <_calloc_r>
 800ba9e:	69e3      	ldr	r3, [r4, #28]
 800baa0:	60f0      	str	r0, [r6, #12]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e4      	bne.n	800ba72 <_Balloc+0x2e>
 800baa8:	2000      	movs	r0, #0
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	6802      	ldr	r2, [r0, #0]
 800baae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bab2:	2300      	movs	r3, #0
 800bab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bab8:	e7f7      	b.n	800baaa <_Balloc+0x66>
 800baba:	bf00      	nop
 800babc:	0800e3f1 	.word	0x0800e3f1
 800bac0:	0800e408 	.word	0x0800e408

0800bac4 <_Bfree>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	69c6      	ldr	r6, [r0, #28]
 800bac8:	4605      	mov	r5, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	b976      	cbnz	r6, 800baec <_Bfree+0x28>
 800bace:	2010      	movs	r0, #16
 800bad0:	f000 fd64 	bl	800c59c <malloc>
 800bad4:	4602      	mov	r2, r0
 800bad6:	61e8      	str	r0, [r5, #28]
 800bad8:	b920      	cbnz	r0, 800bae4 <_Bfree+0x20>
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <_Bfree+0x3c>)
 800badc:	4809      	ldr	r0, [pc, #36]	; (800bb04 <_Bfree+0x40>)
 800bade:	218f      	movs	r1, #143	; 0x8f
 800bae0:	f000 fd28 	bl	800c534 <__assert_func>
 800bae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bae8:	6006      	str	r6, [r0, #0]
 800baea:	60c6      	str	r6, [r0, #12]
 800baec:	b13c      	cbz	r4, 800bafe <_Bfree+0x3a>
 800baee:	69eb      	ldr	r3, [r5, #28]
 800baf0:	6862      	ldr	r2, [r4, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baf8:	6021      	str	r1, [r4, #0]
 800bafa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	0800e3f1 	.word	0x0800e3f1
 800bb04:	0800e408 	.word	0x0800e408

0800bb08 <__multadd>:
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	690d      	ldr	r5, [r1, #16]
 800bb0e:	4607      	mov	r7, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	461e      	mov	r6, r3
 800bb14:	f101 0c14 	add.w	ip, r1, #20
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb1e:	b299      	uxth	r1, r3
 800bb20:	fb02 6101 	mla	r1, r2, r1, r6
 800bb24:	0c1e      	lsrs	r6, r3, #16
 800bb26:	0c0b      	lsrs	r3, r1, #16
 800bb28:	fb02 3306 	mla	r3, r2, r6, r3
 800bb2c:	b289      	uxth	r1, r1
 800bb2e:	3001      	adds	r0, #1
 800bb30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb34:	4285      	cmp	r5, r0
 800bb36:	f84c 1b04 	str.w	r1, [ip], #4
 800bb3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb3e:	dcec      	bgt.n	800bb1a <__multadd+0x12>
 800bb40:	b30e      	cbz	r6, 800bb86 <__multadd+0x7e>
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	dc19      	bgt.n	800bb7c <__multadd+0x74>
 800bb48:	6861      	ldr	r1, [r4, #4]
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	3101      	adds	r1, #1
 800bb4e:	f7ff ff79 	bl	800ba44 <_Balloc>
 800bb52:	4680      	mov	r8, r0
 800bb54:	b928      	cbnz	r0, 800bb62 <__multadd+0x5a>
 800bb56:	4602      	mov	r2, r0
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <__multadd+0x84>)
 800bb5a:	480d      	ldr	r0, [pc, #52]	; (800bb90 <__multadd+0x88>)
 800bb5c:	21ba      	movs	r1, #186	; 0xba
 800bb5e:	f000 fce9 	bl	800c534 <__assert_func>
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	3202      	adds	r2, #2
 800bb66:	f104 010c 	add.w	r1, r4, #12
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	300c      	adds	r0, #12
 800bb6e:	f7ff faf0 	bl	800b152 <memcpy>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff ffa5 	bl	800bac4 <_Bfree>
 800bb7a:	4644      	mov	r4, r8
 800bb7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb80:	3501      	adds	r5, #1
 800bb82:	615e      	str	r6, [r3, #20]
 800bb84:	6125      	str	r5, [r4, #16]
 800bb86:	4620      	mov	r0, r4
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8c:	0800e380 	.word	0x0800e380
 800bb90:	0800e408 	.word	0x0800e408

0800bb94 <__s2b>:
 800bb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb98:	460c      	mov	r4, r1
 800bb9a:	4615      	mov	r5, r2
 800bb9c:	461f      	mov	r7, r3
 800bb9e:	2209      	movs	r2, #9
 800bba0:	3308      	adds	r3, #8
 800bba2:	4606      	mov	r6, r0
 800bba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bba8:	2100      	movs	r1, #0
 800bbaa:	2201      	movs	r2, #1
 800bbac:	429a      	cmp	r2, r3
 800bbae:	db09      	blt.n	800bbc4 <__s2b+0x30>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff ff47 	bl	800ba44 <_Balloc>
 800bbb6:	b940      	cbnz	r0, 800bbca <__s2b+0x36>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	4b19      	ldr	r3, [pc, #100]	; (800bc20 <__s2b+0x8c>)
 800bbbc:	4819      	ldr	r0, [pc, #100]	; (800bc24 <__s2b+0x90>)
 800bbbe:	21d3      	movs	r1, #211	; 0xd3
 800bbc0:	f000 fcb8 	bl	800c534 <__assert_func>
 800bbc4:	0052      	lsls	r2, r2, #1
 800bbc6:	3101      	adds	r1, #1
 800bbc8:	e7f0      	b.n	800bbac <__s2b+0x18>
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	6143      	str	r3, [r0, #20]
 800bbce:	2d09      	cmp	r5, #9
 800bbd0:	f04f 0301 	mov.w	r3, #1
 800bbd4:	6103      	str	r3, [r0, #16]
 800bbd6:	dd16      	ble.n	800bc06 <__s2b+0x72>
 800bbd8:	f104 0909 	add.w	r9, r4, #9
 800bbdc:	46c8      	mov	r8, r9
 800bbde:	442c      	add	r4, r5
 800bbe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbe4:	4601      	mov	r1, r0
 800bbe6:	3b30      	subs	r3, #48	; 0x30
 800bbe8:	220a      	movs	r2, #10
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff8c 	bl	800bb08 <__multadd>
 800bbf0:	45a0      	cmp	r8, r4
 800bbf2:	d1f5      	bne.n	800bbe0 <__s2b+0x4c>
 800bbf4:	f1a5 0408 	sub.w	r4, r5, #8
 800bbf8:	444c      	add	r4, r9
 800bbfa:	1b2d      	subs	r5, r5, r4
 800bbfc:	1963      	adds	r3, r4, r5
 800bbfe:	42bb      	cmp	r3, r7
 800bc00:	db04      	blt.n	800bc0c <__s2b+0x78>
 800bc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc06:	340a      	adds	r4, #10
 800bc08:	2509      	movs	r5, #9
 800bc0a:	e7f6      	b.n	800bbfa <__s2b+0x66>
 800bc0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc10:	4601      	mov	r1, r0
 800bc12:	3b30      	subs	r3, #48	; 0x30
 800bc14:	220a      	movs	r2, #10
 800bc16:	4630      	mov	r0, r6
 800bc18:	f7ff ff76 	bl	800bb08 <__multadd>
 800bc1c:	e7ee      	b.n	800bbfc <__s2b+0x68>
 800bc1e:	bf00      	nop
 800bc20:	0800e380 	.word	0x0800e380
 800bc24:	0800e408 	.word	0x0800e408

0800bc28 <__hi0bits>:
 800bc28:	0c03      	lsrs	r3, r0, #16
 800bc2a:	041b      	lsls	r3, r3, #16
 800bc2c:	b9d3      	cbnz	r3, 800bc64 <__hi0bits+0x3c>
 800bc2e:	0400      	lsls	r0, r0, #16
 800bc30:	2310      	movs	r3, #16
 800bc32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc36:	bf04      	itt	eq
 800bc38:	0200      	lsleq	r0, r0, #8
 800bc3a:	3308      	addeq	r3, #8
 800bc3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc40:	bf04      	itt	eq
 800bc42:	0100      	lsleq	r0, r0, #4
 800bc44:	3304      	addeq	r3, #4
 800bc46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc4a:	bf04      	itt	eq
 800bc4c:	0080      	lsleq	r0, r0, #2
 800bc4e:	3302      	addeq	r3, #2
 800bc50:	2800      	cmp	r0, #0
 800bc52:	db05      	blt.n	800bc60 <__hi0bits+0x38>
 800bc54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc58:	f103 0301 	add.w	r3, r3, #1
 800bc5c:	bf08      	it	eq
 800bc5e:	2320      	moveq	r3, #32
 800bc60:	4618      	mov	r0, r3
 800bc62:	4770      	bx	lr
 800bc64:	2300      	movs	r3, #0
 800bc66:	e7e4      	b.n	800bc32 <__hi0bits+0xa>

0800bc68 <__lo0bits>:
 800bc68:	6803      	ldr	r3, [r0, #0]
 800bc6a:	f013 0207 	ands.w	r2, r3, #7
 800bc6e:	d00c      	beq.n	800bc8a <__lo0bits+0x22>
 800bc70:	07d9      	lsls	r1, r3, #31
 800bc72:	d422      	bmi.n	800bcba <__lo0bits+0x52>
 800bc74:	079a      	lsls	r2, r3, #30
 800bc76:	bf49      	itett	mi
 800bc78:	085b      	lsrmi	r3, r3, #1
 800bc7a:	089b      	lsrpl	r3, r3, #2
 800bc7c:	6003      	strmi	r3, [r0, #0]
 800bc7e:	2201      	movmi	r2, #1
 800bc80:	bf5c      	itt	pl
 800bc82:	6003      	strpl	r3, [r0, #0]
 800bc84:	2202      	movpl	r2, #2
 800bc86:	4610      	mov	r0, r2
 800bc88:	4770      	bx	lr
 800bc8a:	b299      	uxth	r1, r3
 800bc8c:	b909      	cbnz	r1, 800bc92 <__lo0bits+0x2a>
 800bc8e:	0c1b      	lsrs	r3, r3, #16
 800bc90:	2210      	movs	r2, #16
 800bc92:	b2d9      	uxtb	r1, r3
 800bc94:	b909      	cbnz	r1, 800bc9a <__lo0bits+0x32>
 800bc96:	3208      	adds	r2, #8
 800bc98:	0a1b      	lsrs	r3, r3, #8
 800bc9a:	0719      	lsls	r1, r3, #28
 800bc9c:	bf04      	itt	eq
 800bc9e:	091b      	lsreq	r3, r3, #4
 800bca0:	3204      	addeq	r2, #4
 800bca2:	0799      	lsls	r1, r3, #30
 800bca4:	bf04      	itt	eq
 800bca6:	089b      	lsreq	r3, r3, #2
 800bca8:	3202      	addeq	r2, #2
 800bcaa:	07d9      	lsls	r1, r3, #31
 800bcac:	d403      	bmi.n	800bcb6 <__lo0bits+0x4e>
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	f102 0201 	add.w	r2, r2, #1
 800bcb4:	d003      	beq.n	800bcbe <__lo0bits+0x56>
 800bcb6:	6003      	str	r3, [r0, #0]
 800bcb8:	e7e5      	b.n	800bc86 <__lo0bits+0x1e>
 800bcba:	2200      	movs	r2, #0
 800bcbc:	e7e3      	b.n	800bc86 <__lo0bits+0x1e>
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	e7e1      	b.n	800bc86 <__lo0bits+0x1e>
	...

0800bcc4 <__i2b>:
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	2101      	movs	r1, #1
 800bcca:	f7ff febb 	bl	800ba44 <_Balloc>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	b928      	cbnz	r0, 800bcde <__i2b+0x1a>
 800bcd2:	4b05      	ldr	r3, [pc, #20]	; (800bce8 <__i2b+0x24>)
 800bcd4:	4805      	ldr	r0, [pc, #20]	; (800bcec <__i2b+0x28>)
 800bcd6:	f240 1145 	movw	r1, #325	; 0x145
 800bcda:	f000 fc2b 	bl	800c534 <__assert_func>
 800bcde:	2301      	movs	r3, #1
 800bce0:	6144      	str	r4, [r0, #20]
 800bce2:	6103      	str	r3, [r0, #16]
 800bce4:	bd10      	pop	{r4, pc}
 800bce6:	bf00      	nop
 800bce8:	0800e380 	.word	0x0800e380
 800bcec:	0800e408 	.word	0x0800e408

0800bcf0 <__multiply>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	4691      	mov	r9, r2
 800bcf6:	690a      	ldr	r2, [r1, #16]
 800bcf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	bfb8      	it	lt
 800bd00:	460b      	movlt	r3, r1
 800bd02:	460c      	mov	r4, r1
 800bd04:	bfbc      	itt	lt
 800bd06:	464c      	movlt	r4, r9
 800bd08:	4699      	movlt	r9, r3
 800bd0a:	6927      	ldr	r7, [r4, #16]
 800bd0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	6861      	ldr	r1, [r4, #4]
 800bd14:	eb07 060a 	add.w	r6, r7, sl
 800bd18:	42b3      	cmp	r3, r6
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	bfb8      	it	lt
 800bd1e:	3101      	addlt	r1, #1
 800bd20:	f7ff fe90 	bl	800ba44 <_Balloc>
 800bd24:	b930      	cbnz	r0, 800bd34 <__multiply+0x44>
 800bd26:	4602      	mov	r2, r0
 800bd28:	4b44      	ldr	r3, [pc, #272]	; (800be3c <__multiply+0x14c>)
 800bd2a:	4845      	ldr	r0, [pc, #276]	; (800be40 <__multiply+0x150>)
 800bd2c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd30:	f000 fc00 	bl	800c534 <__assert_func>
 800bd34:	f100 0514 	add.w	r5, r0, #20
 800bd38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4543      	cmp	r3, r8
 800bd42:	d321      	bcc.n	800bd88 <__multiply+0x98>
 800bd44:	f104 0314 	add.w	r3, r4, #20
 800bd48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd4c:	f109 0314 	add.w	r3, r9, #20
 800bd50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd54:	9202      	str	r2, [sp, #8]
 800bd56:	1b3a      	subs	r2, r7, r4
 800bd58:	3a15      	subs	r2, #21
 800bd5a:	f022 0203 	bic.w	r2, r2, #3
 800bd5e:	3204      	adds	r2, #4
 800bd60:	f104 0115 	add.w	r1, r4, #21
 800bd64:	428f      	cmp	r7, r1
 800bd66:	bf38      	it	cc
 800bd68:	2204      	movcc	r2, #4
 800bd6a:	9201      	str	r2, [sp, #4]
 800bd6c:	9a02      	ldr	r2, [sp, #8]
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d80c      	bhi.n	800bd8e <__multiply+0x9e>
 800bd74:	2e00      	cmp	r6, #0
 800bd76:	dd03      	ble.n	800bd80 <__multiply+0x90>
 800bd78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d05b      	beq.n	800be38 <__multiply+0x148>
 800bd80:	6106      	str	r6, [r0, #16]
 800bd82:	b005      	add	sp, #20
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd88:	f843 2b04 	str.w	r2, [r3], #4
 800bd8c:	e7d8      	b.n	800bd40 <__multiply+0x50>
 800bd8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd92:	f1ba 0f00 	cmp.w	sl, #0
 800bd96:	d024      	beq.n	800bde2 <__multiply+0xf2>
 800bd98:	f104 0e14 	add.w	lr, r4, #20
 800bd9c:	46a9      	mov	r9, r5
 800bd9e:	f04f 0c00 	mov.w	ip, #0
 800bda2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bda6:	f8d9 1000 	ldr.w	r1, [r9]
 800bdaa:	fa1f fb82 	uxth.w	fp, r2
 800bdae:	b289      	uxth	r1, r1
 800bdb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdb8:	f8d9 2000 	ldr.w	r2, [r9]
 800bdbc:	4461      	add	r1, ip
 800bdbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdca:	b289      	uxth	r1, r1
 800bdcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdd0:	4577      	cmp	r7, lr
 800bdd2:	f849 1b04 	str.w	r1, [r9], #4
 800bdd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdda:	d8e2      	bhi.n	800bda2 <__multiply+0xb2>
 800bddc:	9a01      	ldr	r2, [sp, #4]
 800bdde:	f845 c002 	str.w	ip, [r5, r2]
 800bde2:	9a03      	ldr	r2, [sp, #12]
 800bde4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bde8:	3304      	adds	r3, #4
 800bdea:	f1b9 0f00 	cmp.w	r9, #0
 800bdee:	d021      	beq.n	800be34 <__multiply+0x144>
 800bdf0:	6829      	ldr	r1, [r5, #0]
 800bdf2:	f104 0c14 	add.w	ip, r4, #20
 800bdf6:	46ae      	mov	lr, r5
 800bdf8:	f04f 0a00 	mov.w	sl, #0
 800bdfc:	f8bc b000 	ldrh.w	fp, [ip]
 800be00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be04:	fb09 220b 	mla	r2, r9, fp, r2
 800be08:	4452      	add	r2, sl
 800be0a:	b289      	uxth	r1, r1
 800be0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be10:	f84e 1b04 	str.w	r1, [lr], #4
 800be14:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be1c:	f8be 1000 	ldrh.w	r1, [lr]
 800be20:	fb09 110a 	mla	r1, r9, sl, r1
 800be24:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be28:	4567      	cmp	r7, ip
 800be2a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be2e:	d8e5      	bhi.n	800bdfc <__multiply+0x10c>
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	50a9      	str	r1, [r5, r2]
 800be34:	3504      	adds	r5, #4
 800be36:	e799      	b.n	800bd6c <__multiply+0x7c>
 800be38:	3e01      	subs	r6, #1
 800be3a:	e79b      	b.n	800bd74 <__multiply+0x84>
 800be3c:	0800e380 	.word	0x0800e380
 800be40:	0800e408 	.word	0x0800e408

0800be44 <__pow5mult>:
 800be44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be48:	4615      	mov	r5, r2
 800be4a:	f012 0203 	ands.w	r2, r2, #3
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	d007      	beq.n	800be64 <__pow5mult+0x20>
 800be54:	4c25      	ldr	r4, [pc, #148]	; (800beec <__pow5mult+0xa8>)
 800be56:	3a01      	subs	r2, #1
 800be58:	2300      	movs	r3, #0
 800be5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be5e:	f7ff fe53 	bl	800bb08 <__multadd>
 800be62:	4607      	mov	r7, r0
 800be64:	10ad      	asrs	r5, r5, #2
 800be66:	d03d      	beq.n	800bee4 <__pow5mult+0xa0>
 800be68:	69f4      	ldr	r4, [r6, #28]
 800be6a:	b97c      	cbnz	r4, 800be8c <__pow5mult+0x48>
 800be6c:	2010      	movs	r0, #16
 800be6e:	f000 fb95 	bl	800c59c <malloc>
 800be72:	4602      	mov	r2, r0
 800be74:	61f0      	str	r0, [r6, #28]
 800be76:	b928      	cbnz	r0, 800be84 <__pow5mult+0x40>
 800be78:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <__pow5mult+0xac>)
 800be7a:	481e      	ldr	r0, [pc, #120]	; (800bef4 <__pow5mult+0xb0>)
 800be7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be80:	f000 fb58 	bl	800c534 <__assert_func>
 800be84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be88:	6004      	str	r4, [r0, #0]
 800be8a:	60c4      	str	r4, [r0, #12]
 800be8c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be94:	b94c      	cbnz	r4, 800beaa <__pow5mult+0x66>
 800be96:	f240 2171 	movw	r1, #625	; 0x271
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7ff ff12 	bl	800bcc4 <__i2b>
 800bea0:	2300      	movs	r3, #0
 800bea2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bea6:	4604      	mov	r4, r0
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	f04f 0900 	mov.w	r9, #0
 800beae:	07eb      	lsls	r3, r5, #31
 800beb0:	d50a      	bpl.n	800bec8 <__pow5mult+0x84>
 800beb2:	4639      	mov	r1, r7
 800beb4:	4622      	mov	r2, r4
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7ff ff1a 	bl	800bcf0 <__multiply>
 800bebc:	4639      	mov	r1, r7
 800bebe:	4680      	mov	r8, r0
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff fdff 	bl	800bac4 <_Bfree>
 800bec6:	4647      	mov	r7, r8
 800bec8:	106d      	asrs	r5, r5, #1
 800beca:	d00b      	beq.n	800bee4 <__pow5mult+0xa0>
 800becc:	6820      	ldr	r0, [r4, #0]
 800bece:	b938      	cbnz	r0, 800bee0 <__pow5mult+0x9c>
 800bed0:	4622      	mov	r2, r4
 800bed2:	4621      	mov	r1, r4
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff ff0b 	bl	800bcf0 <__multiply>
 800beda:	6020      	str	r0, [r4, #0]
 800bedc:	f8c0 9000 	str.w	r9, [r0]
 800bee0:	4604      	mov	r4, r0
 800bee2:	e7e4      	b.n	800beae <__pow5mult+0x6a>
 800bee4:	4638      	mov	r0, r7
 800bee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beea:	bf00      	nop
 800beec:	0800e558 	.word	0x0800e558
 800bef0:	0800e3f1 	.word	0x0800e3f1
 800bef4:	0800e408 	.word	0x0800e408

0800bef8 <__lshift>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	460c      	mov	r4, r1
 800befe:	6849      	ldr	r1, [r1, #4]
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf06:	68a3      	ldr	r3, [r4, #8]
 800bf08:	4607      	mov	r7, r0
 800bf0a:	4691      	mov	r9, r2
 800bf0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf10:	f108 0601 	add.w	r6, r8, #1
 800bf14:	42b3      	cmp	r3, r6
 800bf16:	db0b      	blt.n	800bf30 <__lshift+0x38>
 800bf18:	4638      	mov	r0, r7
 800bf1a:	f7ff fd93 	bl	800ba44 <_Balloc>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b948      	cbnz	r0, 800bf36 <__lshift+0x3e>
 800bf22:	4602      	mov	r2, r0
 800bf24:	4b28      	ldr	r3, [pc, #160]	; (800bfc8 <__lshift+0xd0>)
 800bf26:	4829      	ldr	r0, [pc, #164]	; (800bfcc <__lshift+0xd4>)
 800bf28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf2c:	f000 fb02 	bl	800c534 <__assert_func>
 800bf30:	3101      	adds	r1, #1
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	e7ee      	b.n	800bf14 <__lshift+0x1c>
 800bf36:	2300      	movs	r3, #0
 800bf38:	f100 0114 	add.w	r1, r0, #20
 800bf3c:	f100 0210 	add.w	r2, r0, #16
 800bf40:	4618      	mov	r0, r3
 800bf42:	4553      	cmp	r3, sl
 800bf44:	db33      	blt.n	800bfae <__lshift+0xb6>
 800bf46:	6920      	ldr	r0, [r4, #16]
 800bf48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf4c:	f104 0314 	add.w	r3, r4, #20
 800bf50:	f019 091f 	ands.w	r9, r9, #31
 800bf54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf5c:	d02b      	beq.n	800bfb6 <__lshift+0xbe>
 800bf5e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf62:	468a      	mov	sl, r1
 800bf64:	2200      	movs	r2, #0
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	fa00 f009 	lsl.w	r0, r0, r9
 800bf6c:	4310      	orrs	r0, r2
 800bf6e:	f84a 0b04 	str.w	r0, [sl], #4
 800bf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf76:	459c      	cmp	ip, r3
 800bf78:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf7c:	d8f3      	bhi.n	800bf66 <__lshift+0x6e>
 800bf7e:	ebac 0304 	sub.w	r3, ip, r4
 800bf82:	3b15      	subs	r3, #21
 800bf84:	f023 0303 	bic.w	r3, r3, #3
 800bf88:	3304      	adds	r3, #4
 800bf8a:	f104 0015 	add.w	r0, r4, #21
 800bf8e:	4584      	cmp	ip, r0
 800bf90:	bf38      	it	cc
 800bf92:	2304      	movcc	r3, #4
 800bf94:	50ca      	str	r2, [r1, r3]
 800bf96:	b10a      	cbz	r2, 800bf9c <__lshift+0xa4>
 800bf98:	f108 0602 	add.w	r6, r8, #2
 800bf9c:	3e01      	subs	r6, #1
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	612e      	str	r6, [r5, #16]
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	f7ff fd8e 	bl	800bac4 <_Bfree>
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfae:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	e7c5      	b.n	800bf42 <__lshift+0x4a>
 800bfb6:	3904      	subs	r1, #4
 800bfb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfc0:	459c      	cmp	ip, r3
 800bfc2:	d8f9      	bhi.n	800bfb8 <__lshift+0xc0>
 800bfc4:	e7ea      	b.n	800bf9c <__lshift+0xa4>
 800bfc6:	bf00      	nop
 800bfc8:	0800e380 	.word	0x0800e380
 800bfcc:	0800e408 	.word	0x0800e408

0800bfd0 <__mcmp>:
 800bfd0:	b530      	push	{r4, r5, lr}
 800bfd2:	6902      	ldr	r2, [r0, #16]
 800bfd4:	690c      	ldr	r4, [r1, #16]
 800bfd6:	1b12      	subs	r2, r2, r4
 800bfd8:	d10e      	bne.n	800bff8 <__mcmp+0x28>
 800bfda:	f100 0314 	add.w	r3, r0, #20
 800bfde:	3114      	adds	r1, #20
 800bfe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bff0:	42a5      	cmp	r5, r4
 800bff2:	d003      	beq.n	800bffc <__mcmp+0x2c>
 800bff4:	d305      	bcc.n	800c002 <__mcmp+0x32>
 800bff6:	2201      	movs	r2, #1
 800bff8:	4610      	mov	r0, r2
 800bffa:	bd30      	pop	{r4, r5, pc}
 800bffc:	4283      	cmp	r3, r0
 800bffe:	d3f3      	bcc.n	800bfe8 <__mcmp+0x18>
 800c000:	e7fa      	b.n	800bff8 <__mcmp+0x28>
 800c002:	f04f 32ff 	mov.w	r2, #4294967295
 800c006:	e7f7      	b.n	800bff8 <__mcmp+0x28>

0800c008 <__mdiff>:
 800c008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	460c      	mov	r4, r1
 800c00e:	4606      	mov	r6, r0
 800c010:	4611      	mov	r1, r2
 800c012:	4620      	mov	r0, r4
 800c014:	4690      	mov	r8, r2
 800c016:	f7ff ffdb 	bl	800bfd0 <__mcmp>
 800c01a:	1e05      	subs	r5, r0, #0
 800c01c:	d110      	bne.n	800c040 <__mdiff+0x38>
 800c01e:	4629      	mov	r1, r5
 800c020:	4630      	mov	r0, r6
 800c022:	f7ff fd0f 	bl	800ba44 <_Balloc>
 800c026:	b930      	cbnz	r0, 800c036 <__mdiff+0x2e>
 800c028:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <__mdiff+0x10c>)
 800c02a:	4602      	mov	r2, r0
 800c02c:	f240 2137 	movw	r1, #567	; 0x237
 800c030:	4839      	ldr	r0, [pc, #228]	; (800c118 <__mdiff+0x110>)
 800c032:	f000 fa7f 	bl	800c534 <__assert_func>
 800c036:	2301      	movs	r3, #1
 800c038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c03c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	bfa4      	itt	ge
 800c042:	4643      	movge	r3, r8
 800c044:	46a0      	movge	r8, r4
 800c046:	4630      	mov	r0, r6
 800c048:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c04c:	bfa6      	itte	ge
 800c04e:	461c      	movge	r4, r3
 800c050:	2500      	movge	r5, #0
 800c052:	2501      	movlt	r5, #1
 800c054:	f7ff fcf6 	bl	800ba44 <_Balloc>
 800c058:	b920      	cbnz	r0, 800c064 <__mdiff+0x5c>
 800c05a:	4b2e      	ldr	r3, [pc, #184]	; (800c114 <__mdiff+0x10c>)
 800c05c:	4602      	mov	r2, r0
 800c05e:	f240 2145 	movw	r1, #581	; 0x245
 800c062:	e7e5      	b.n	800c030 <__mdiff+0x28>
 800c064:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c068:	6926      	ldr	r6, [r4, #16]
 800c06a:	60c5      	str	r5, [r0, #12]
 800c06c:	f104 0914 	add.w	r9, r4, #20
 800c070:	f108 0514 	add.w	r5, r8, #20
 800c074:	f100 0e14 	add.w	lr, r0, #20
 800c078:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c07c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c080:	f108 0210 	add.w	r2, r8, #16
 800c084:	46f2      	mov	sl, lr
 800c086:	2100      	movs	r1, #0
 800c088:	f859 3b04 	ldr.w	r3, [r9], #4
 800c08c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c090:	fa11 f88b 	uxtah	r8, r1, fp
 800c094:	b299      	uxth	r1, r3
 800c096:	0c1b      	lsrs	r3, r3, #16
 800c098:	eba8 0801 	sub.w	r8, r8, r1
 800c09c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0a4:	fa1f f888 	uxth.w	r8, r8
 800c0a8:	1419      	asrs	r1, r3, #16
 800c0aa:	454e      	cmp	r6, r9
 800c0ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0b0:	f84a 3b04 	str.w	r3, [sl], #4
 800c0b4:	d8e8      	bhi.n	800c088 <__mdiff+0x80>
 800c0b6:	1b33      	subs	r3, r6, r4
 800c0b8:	3b15      	subs	r3, #21
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	3304      	adds	r3, #4
 800c0c0:	3415      	adds	r4, #21
 800c0c2:	42a6      	cmp	r6, r4
 800c0c4:	bf38      	it	cc
 800c0c6:	2304      	movcc	r3, #4
 800c0c8:	441d      	add	r5, r3
 800c0ca:	4473      	add	r3, lr
 800c0cc:	469e      	mov	lr, r3
 800c0ce:	462e      	mov	r6, r5
 800c0d0:	4566      	cmp	r6, ip
 800c0d2:	d30e      	bcc.n	800c0f2 <__mdiff+0xea>
 800c0d4:	f10c 0203 	add.w	r2, ip, #3
 800c0d8:	1b52      	subs	r2, r2, r5
 800c0da:	f022 0203 	bic.w	r2, r2, #3
 800c0de:	3d03      	subs	r5, #3
 800c0e0:	45ac      	cmp	ip, r5
 800c0e2:	bf38      	it	cc
 800c0e4:	2200      	movcc	r2, #0
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0ec:	b17a      	cbz	r2, 800c10e <__mdiff+0x106>
 800c0ee:	6107      	str	r7, [r0, #16]
 800c0f0:	e7a4      	b.n	800c03c <__mdiff+0x34>
 800c0f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0f6:	fa11 f288 	uxtah	r2, r1, r8
 800c0fa:	1414      	asrs	r4, r2, #16
 800c0fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c100:	b292      	uxth	r2, r2
 800c102:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c106:	f84e 2b04 	str.w	r2, [lr], #4
 800c10a:	1421      	asrs	r1, r4, #16
 800c10c:	e7e0      	b.n	800c0d0 <__mdiff+0xc8>
 800c10e:	3f01      	subs	r7, #1
 800c110:	e7ea      	b.n	800c0e8 <__mdiff+0xe0>
 800c112:	bf00      	nop
 800c114:	0800e380 	.word	0x0800e380
 800c118:	0800e408 	.word	0x0800e408

0800c11c <__ulp>:
 800c11c:	b082      	sub	sp, #8
 800c11e:	ed8d 0b00 	vstr	d0, [sp]
 800c122:	9a01      	ldr	r2, [sp, #4]
 800c124:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <__ulp+0x48>)
 800c126:	4013      	ands	r3, r2
 800c128:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dc08      	bgt.n	800c142 <__ulp+0x26>
 800c130:	425b      	negs	r3, r3
 800c132:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c136:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c13a:	da04      	bge.n	800c146 <__ulp+0x2a>
 800c13c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c140:	4113      	asrs	r3, r2
 800c142:	2200      	movs	r2, #0
 800c144:	e008      	b.n	800c158 <__ulp+0x3c>
 800c146:	f1a2 0314 	sub.w	r3, r2, #20
 800c14a:	2b1e      	cmp	r3, #30
 800c14c:	bfda      	itte	le
 800c14e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c152:	40da      	lsrle	r2, r3
 800c154:	2201      	movgt	r2, #1
 800c156:	2300      	movs	r3, #0
 800c158:	4619      	mov	r1, r3
 800c15a:	4610      	mov	r0, r2
 800c15c:	ec41 0b10 	vmov	d0, r0, r1
 800c160:	b002      	add	sp, #8
 800c162:	4770      	bx	lr
 800c164:	7ff00000 	.word	0x7ff00000

0800c168 <__b2d>:
 800c168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16c:	6906      	ldr	r6, [r0, #16]
 800c16e:	f100 0814 	add.w	r8, r0, #20
 800c172:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c176:	1f37      	subs	r7, r6, #4
 800c178:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c17c:	4610      	mov	r0, r2
 800c17e:	f7ff fd53 	bl	800bc28 <__hi0bits>
 800c182:	f1c0 0320 	rsb	r3, r0, #32
 800c186:	280a      	cmp	r0, #10
 800c188:	600b      	str	r3, [r1, #0]
 800c18a:	491b      	ldr	r1, [pc, #108]	; (800c1f8 <__b2d+0x90>)
 800c18c:	dc15      	bgt.n	800c1ba <__b2d+0x52>
 800c18e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c192:	fa22 f30c 	lsr.w	r3, r2, ip
 800c196:	45b8      	cmp	r8, r7
 800c198:	ea43 0501 	orr.w	r5, r3, r1
 800c19c:	bf34      	ite	cc
 800c19e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1a2:	2300      	movcs	r3, #0
 800c1a4:	3015      	adds	r0, #21
 800c1a6:	fa02 f000 	lsl.w	r0, r2, r0
 800c1aa:	fa23 f30c 	lsr.w	r3, r3, ip
 800c1ae:	4303      	orrs	r3, r0
 800c1b0:	461c      	mov	r4, r3
 800c1b2:	ec45 4b10 	vmov	d0, r4, r5
 800c1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ba:	45b8      	cmp	r8, r7
 800c1bc:	bf3a      	itte	cc
 800c1be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1c2:	f1a6 0708 	subcc.w	r7, r6, #8
 800c1c6:	2300      	movcs	r3, #0
 800c1c8:	380b      	subs	r0, #11
 800c1ca:	d012      	beq.n	800c1f2 <__b2d+0x8a>
 800c1cc:	f1c0 0120 	rsb	r1, r0, #32
 800c1d0:	fa23 f401 	lsr.w	r4, r3, r1
 800c1d4:	4082      	lsls	r2, r0
 800c1d6:	4322      	orrs	r2, r4
 800c1d8:	4547      	cmp	r7, r8
 800c1da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c1de:	bf8c      	ite	hi
 800c1e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c1e4:	2200      	movls	r2, #0
 800c1e6:	4083      	lsls	r3, r0
 800c1e8:	40ca      	lsrs	r2, r1
 800c1ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	e7de      	b.n	800c1b0 <__b2d+0x48>
 800c1f2:	ea42 0501 	orr.w	r5, r2, r1
 800c1f6:	e7db      	b.n	800c1b0 <__b2d+0x48>
 800c1f8:	3ff00000 	.word	0x3ff00000

0800c1fc <__d2b>:
 800c1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c200:	460f      	mov	r7, r1
 800c202:	2101      	movs	r1, #1
 800c204:	ec59 8b10 	vmov	r8, r9, d0
 800c208:	4616      	mov	r6, r2
 800c20a:	f7ff fc1b 	bl	800ba44 <_Balloc>
 800c20e:	4604      	mov	r4, r0
 800c210:	b930      	cbnz	r0, 800c220 <__d2b+0x24>
 800c212:	4602      	mov	r2, r0
 800c214:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <__d2b+0xac>)
 800c216:	4825      	ldr	r0, [pc, #148]	; (800c2ac <__d2b+0xb0>)
 800c218:	f240 310f 	movw	r1, #783	; 0x30f
 800c21c:	f000 f98a 	bl	800c534 <__assert_func>
 800c220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c228:	bb2d      	cbnz	r5, 800c276 <__d2b+0x7a>
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	f1b8 0300 	subs.w	r3, r8, #0
 800c230:	d026      	beq.n	800c280 <__d2b+0x84>
 800c232:	4668      	mov	r0, sp
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	f7ff fd17 	bl	800bc68 <__lo0bits>
 800c23a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c23e:	b1e8      	cbz	r0, 800c27c <__d2b+0x80>
 800c240:	f1c0 0320 	rsb	r3, r0, #32
 800c244:	fa02 f303 	lsl.w	r3, r2, r3
 800c248:	430b      	orrs	r3, r1
 800c24a:	40c2      	lsrs	r2, r0
 800c24c:	6163      	str	r3, [r4, #20]
 800c24e:	9201      	str	r2, [sp, #4]
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	61a3      	str	r3, [r4, #24]
 800c254:	2b00      	cmp	r3, #0
 800c256:	bf14      	ite	ne
 800c258:	2202      	movne	r2, #2
 800c25a:	2201      	moveq	r2, #1
 800c25c:	6122      	str	r2, [r4, #16]
 800c25e:	b1bd      	cbz	r5, 800c290 <__d2b+0x94>
 800c260:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c264:	4405      	add	r5, r0
 800c266:	603d      	str	r5, [r7, #0]
 800c268:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c26c:	6030      	str	r0, [r6, #0]
 800c26e:	4620      	mov	r0, r4
 800c270:	b003      	add	sp, #12
 800c272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c27a:	e7d6      	b.n	800c22a <__d2b+0x2e>
 800c27c:	6161      	str	r1, [r4, #20]
 800c27e:	e7e7      	b.n	800c250 <__d2b+0x54>
 800c280:	a801      	add	r0, sp, #4
 800c282:	f7ff fcf1 	bl	800bc68 <__lo0bits>
 800c286:	9b01      	ldr	r3, [sp, #4]
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	3020      	adds	r0, #32
 800c28c:	2201      	movs	r2, #1
 800c28e:	e7e5      	b.n	800c25c <__d2b+0x60>
 800c290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c298:	6038      	str	r0, [r7, #0]
 800c29a:	6918      	ldr	r0, [r3, #16]
 800c29c:	f7ff fcc4 	bl	800bc28 <__hi0bits>
 800c2a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2a4:	e7e2      	b.n	800c26c <__d2b+0x70>
 800c2a6:	bf00      	nop
 800c2a8:	0800e380 	.word	0x0800e380
 800c2ac:	0800e408 	.word	0x0800e408

0800c2b0 <__ratio>:
 800c2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	4688      	mov	r8, r1
 800c2b6:	4669      	mov	r1, sp
 800c2b8:	4681      	mov	r9, r0
 800c2ba:	f7ff ff55 	bl	800c168 <__b2d>
 800c2be:	a901      	add	r1, sp, #4
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	ec55 4b10 	vmov	r4, r5, d0
 800c2c6:	f7ff ff4f 	bl	800c168 <__b2d>
 800c2ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2d2:	eba3 0c02 	sub.w	ip, r3, r2
 800c2d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2da:	1a9b      	subs	r3, r3, r2
 800c2dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2e0:	ec51 0b10 	vmov	r0, r1, d0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	bfd6      	itet	le
 800c2e8:	460a      	movle	r2, r1
 800c2ea:	462a      	movgt	r2, r5
 800c2ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2f0:	468b      	mov	fp, r1
 800c2f2:	462f      	mov	r7, r5
 800c2f4:	bfd4      	ite	le
 800c2f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2fe:	4620      	mov	r0, r4
 800c300:	ee10 2a10 	vmov	r2, s0
 800c304:	465b      	mov	r3, fp
 800c306:	4639      	mov	r1, r7
 800c308:	f7f4 fab8 	bl	800087c <__aeabi_ddiv>
 800c30c:	ec41 0b10 	vmov	d0, r0, r1
 800c310:	b003      	add	sp, #12
 800c312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c316 <__copybits>:
 800c316:	3901      	subs	r1, #1
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	1149      	asrs	r1, r1, #5
 800c31c:	6914      	ldr	r4, [r2, #16]
 800c31e:	3101      	adds	r1, #1
 800c320:	f102 0314 	add.w	r3, r2, #20
 800c324:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c328:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c32c:	1f05      	subs	r5, r0, #4
 800c32e:	42a3      	cmp	r3, r4
 800c330:	d30c      	bcc.n	800c34c <__copybits+0x36>
 800c332:	1aa3      	subs	r3, r4, r2
 800c334:	3b11      	subs	r3, #17
 800c336:	f023 0303 	bic.w	r3, r3, #3
 800c33a:	3211      	adds	r2, #17
 800c33c:	42a2      	cmp	r2, r4
 800c33e:	bf88      	it	hi
 800c340:	2300      	movhi	r3, #0
 800c342:	4418      	add	r0, r3
 800c344:	2300      	movs	r3, #0
 800c346:	4288      	cmp	r0, r1
 800c348:	d305      	bcc.n	800c356 <__copybits+0x40>
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
 800c34c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c350:	f845 6f04 	str.w	r6, [r5, #4]!
 800c354:	e7eb      	b.n	800c32e <__copybits+0x18>
 800c356:	f840 3b04 	str.w	r3, [r0], #4
 800c35a:	e7f4      	b.n	800c346 <__copybits+0x30>

0800c35c <__any_on>:
 800c35c:	f100 0214 	add.w	r2, r0, #20
 800c360:	6900      	ldr	r0, [r0, #16]
 800c362:	114b      	asrs	r3, r1, #5
 800c364:	4298      	cmp	r0, r3
 800c366:	b510      	push	{r4, lr}
 800c368:	db11      	blt.n	800c38e <__any_on+0x32>
 800c36a:	dd0a      	ble.n	800c382 <__any_on+0x26>
 800c36c:	f011 011f 	ands.w	r1, r1, #31
 800c370:	d007      	beq.n	800c382 <__any_on+0x26>
 800c372:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c376:	fa24 f001 	lsr.w	r0, r4, r1
 800c37a:	fa00 f101 	lsl.w	r1, r0, r1
 800c37e:	428c      	cmp	r4, r1
 800c380:	d10b      	bne.n	800c39a <__any_on+0x3e>
 800c382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c386:	4293      	cmp	r3, r2
 800c388:	d803      	bhi.n	800c392 <__any_on+0x36>
 800c38a:	2000      	movs	r0, #0
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	4603      	mov	r3, r0
 800c390:	e7f7      	b.n	800c382 <__any_on+0x26>
 800c392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c396:	2900      	cmp	r1, #0
 800c398:	d0f5      	beq.n	800c386 <__any_on+0x2a>
 800c39a:	2001      	movs	r0, #1
 800c39c:	e7f6      	b.n	800c38c <__any_on+0x30>

0800c39e <__ascii_wctomb>:
 800c39e:	b149      	cbz	r1, 800c3b4 <__ascii_wctomb+0x16>
 800c3a0:	2aff      	cmp	r2, #255	; 0xff
 800c3a2:	bf85      	ittet	hi
 800c3a4:	238a      	movhi	r3, #138	; 0x8a
 800c3a6:	6003      	strhi	r3, [r0, #0]
 800c3a8:	700a      	strbls	r2, [r1, #0]
 800c3aa:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3ae:	bf98      	it	ls
 800c3b0:	2001      	movls	r0, #1
 800c3b2:	4770      	bx	lr
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	4770      	bx	lr

0800c3b8 <__sflush_r>:
 800c3b8:	898a      	ldrh	r2, [r1, #12]
 800c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3be:	4605      	mov	r5, r0
 800c3c0:	0710      	lsls	r0, r2, #28
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	d458      	bmi.n	800c478 <__sflush_r+0xc0>
 800c3c6:	684b      	ldr	r3, [r1, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dc05      	bgt.n	800c3d8 <__sflush_r+0x20>
 800c3cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	dc02      	bgt.n	800c3d8 <__sflush_r+0x20>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	d0f9      	beq.n	800c3d2 <__sflush_r+0x1a>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3e4:	682f      	ldr	r7, [r5, #0]
 800c3e6:	6a21      	ldr	r1, [r4, #32]
 800c3e8:	602b      	str	r3, [r5, #0]
 800c3ea:	d032      	beq.n	800c452 <__sflush_r+0x9a>
 800c3ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	075a      	lsls	r2, r3, #29
 800c3f2:	d505      	bpl.n	800c400 <__sflush_r+0x48>
 800c3f4:	6863      	ldr	r3, [r4, #4]
 800c3f6:	1ac0      	subs	r0, r0, r3
 800c3f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3fa:	b10b      	cbz	r3, 800c400 <__sflush_r+0x48>
 800c3fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3fe:	1ac0      	subs	r0, r0, r3
 800c400:	2300      	movs	r3, #0
 800c402:	4602      	mov	r2, r0
 800c404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c406:	6a21      	ldr	r1, [r4, #32]
 800c408:	4628      	mov	r0, r5
 800c40a:	47b0      	blx	r6
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	d106      	bne.n	800c420 <__sflush_r+0x68>
 800c412:	6829      	ldr	r1, [r5, #0]
 800c414:	291d      	cmp	r1, #29
 800c416:	d82b      	bhi.n	800c470 <__sflush_r+0xb8>
 800c418:	4a29      	ldr	r2, [pc, #164]	; (800c4c0 <__sflush_r+0x108>)
 800c41a:	410a      	asrs	r2, r1
 800c41c:	07d6      	lsls	r6, r2, #31
 800c41e:	d427      	bmi.n	800c470 <__sflush_r+0xb8>
 800c420:	2200      	movs	r2, #0
 800c422:	6062      	str	r2, [r4, #4]
 800c424:	04d9      	lsls	r1, r3, #19
 800c426:	6922      	ldr	r2, [r4, #16]
 800c428:	6022      	str	r2, [r4, #0]
 800c42a:	d504      	bpl.n	800c436 <__sflush_r+0x7e>
 800c42c:	1c42      	adds	r2, r0, #1
 800c42e:	d101      	bne.n	800c434 <__sflush_r+0x7c>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b903      	cbnz	r3, 800c436 <__sflush_r+0x7e>
 800c434:	6560      	str	r0, [r4, #84]	; 0x54
 800c436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c438:	602f      	str	r7, [r5, #0]
 800c43a:	2900      	cmp	r1, #0
 800c43c:	d0c9      	beq.n	800c3d2 <__sflush_r+0x1a>
 800c43e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c442:	4299      	cmp	r1, r3
 800c444:	d002      	beq.n	800c44c <__sflush_r+0x94>
 800c446:	4628      	mov	r0, r5
 800c448:	f7fe fe9a 	bl	800b180 <_free_r>
 800c44c:	2000      	movs	r0, #0
 800c44e:	6360      	str	r0, [r4, #52]	; 0x34
 800c450:	e7c0      	b.n	800c3d4 <__sflush_r+0x1c>
 800c452:	2301      	movs	r3, #1
 800c454:	4628      	mov	r0, r5
 800c456:	47b0      	blx	r6
 800c458:	1c41      	adds	r1, r0, #1
 800c45a:	d1c8      	bne.n	800c3ee <__sflush_r+0x36>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0c5      	beq.n	800c3ee <__sflush_r+0x36>
 800c462:	2b1d      	cmp	r3, #29
 800c464:	d001      	beq.n	800c46a <__sflush_r+0xb2>
 800c466:	2b16      	cmp	r3, #22
 800c468:	d101      	bne.n	800c46e <__sflush_r+0xb6>
 800c46a:	602f      	str	r7, [r5, #0]
 800c46c:	e7b1      	b.n	800c3d2 <__sflush_r+0x1a>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	e7ad      	b.n	800c3d4 <__sflush_r+0x1c>
 800c478:	690f      	ldr	r7, [r1, #16]
 800c47a:	2f00      	cmp	r7, #0
 800c47c:	d0a9      	beq.n	800c3d2 <__sflush_r+0x1a>
 800c47e:	0793      	lsls	r3, r2, #30
 800c480:	680e      	ldr	r6, [r1, #0]
 800c482:	bf08      	it	eq
 800c484:	694b      	ldreq	r3, [r1, #20]
 800c486:	600f      	str	r7, [r1, #0]
 800c488:	bf18      	it	ne
 800c48a:	2300      	movne	r3, #0
 800c48c:	eba6 0807 	sub.w	r8, r6, r7
 800c490:	608b      	str	r3, [r1, #8]
 800c492:	f1b8 0f00 	cmp.w	r8, #0
 800c496:	dd9c      	ble.n	800c3d2 <__sflush_r+0x1a>
 800c498:	6a21      	ldr	r1, [r4, #32]
 800c49a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c49c:	4643      	mov	r3, r8
 800c49e:	463a      	mov	r2, r7
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	47b0      	blx	r6
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	dc06      	bgt.n	800c4b6 <__sflush_r+0xfe>
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ae:	81a3      	strh	r3, [r4, #12]
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b4:	e78e      	b.n	800c3d4 <__sflush_r+0x1c>
 800c4b6:	4407      	add	r7, r0
 800c4b8:	eba8 0800 	sub.w	r8, r8, r0
 800c4bc:	e7e9      	b.n	800c492 <__sflush_r+0xda>
 800c4be:	bf00      	nop
 800c4c0:	dfbffffe 	.word	0xdfbffffe

0800c4c4 <_fflush_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	690b      	ldr	r3, [r1, #16]
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	b913      	cbnz	r3, 800c4d4 <_fflush_r+0x10>
 800c4ce:	2500      	movs	r5, #0
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	b118      	cbz	r0, 800c4de <_fflush_r+0x1a>
 800c4d6:	6a03      	ldr	r3, [r0, #32]
 800c4d8:	b90b      	cbnz	r3, 800c4de <_fflush_r+0x1a>
 800c4da:	f7fe fcdd 	bl	800ae98 <__sinit>
 800c4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0f3      	beq.n	800c4ce <_fflush_r+0xa>
 800c4e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4e8:	07d0      	lsls	r0, r2, #31
 800c4ea:	d404      	bmi.n	800c4f6 <_fflush_r+0x32>
 800c4ec:	0599      	lsls	r1, r3, #22
 800c4ee:	d402      	bmi.n	800c4f6 <_fflush_r+0x32>
 800c4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4f2:	f7fe fe2c 	bl	800b14e <__retarget_lock_acquire_recursive>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	f7ff ff5d 	bl	800c3b8 <__sflush_r>
 800c4fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c500:	07da      	lsls	r2, r3, #31
 800c502:	4605      	mov	r5, r0
 800c504:	d4e4      	bmi.n	800c4d0 <_fflush_r+0xc>
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	059b      	lsls	r3, r3, #22
 800c50a:	d4e1      	bmi.n	800c4d0 <_fflush_r+0xc>
 800c50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c50e:	f7fe fe1f 	bl	800b150 <__retarget_lock_release_recursive>
 800c512:	e7dd      	b.n	800c4d0 <_fflush_r+0xc>

0800c514 <_sbrk_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d06      	ldr	r5, [pc, #24]	; (800c530 <_sbrk_r+0x1c>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	f7f8 f868 	bl	80045f4 <_sbrk>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_sbrk_r+0x1a>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_sbrk_r+0x1a>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20004890 	.word	0x20004890

0800c534 <__assert_func>:
 800c534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c536:	4614      	mov	r4, r2
 800c538:	461a      	mov	r2, r3
 800c53a:	4b09      	ldr	r3, [pc, #36]	; (800c560 <__assert_func+0x2c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4605      	mov	r5, r0
 800c540:	68d8      	ldr	r0, [r3, #12]
 800c542:	b14c      	cbz	r4, 800c558 <__assert_func+0x24>
 800c544:	4b07      	ldr	r3, [pc, #28]	; (800c564 <__assert_func+0x30>)
 800c546:	9100      	str	r1, [sp, #0]
 800c548:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c54c:	4906      	ldr	r1, [pc, #24]	; (800c568 <__assert_func+0x34>)
 800c54e:	462b      	mov	r3, r5
 800c550:	f000 f82c 	bl	800c5ac <fiprintf>
 800c554:	f000 f83c 	bl	800c5d0 <abort>
 800c558:	4b04      	ldr	r3, [pc, #16]	; (800c56c <__assert_func+0x38>)
 800c55a:	461c      	mov	r4, r3
 800c55c:	e7f3      	b.n	800c546 <__assert_func+0x12>
 800c55e:	bf00      	nop
 800c560:	20000240 	.word	0x20000240
 800c564:	0800e665 	.word	0x0800e665
 800c568:	0800e672 	.word	0x0800e672
 800c56c:	0800e6a0 	.word	0x0800e6a0

0800c570 <_calloc_r>:
 800c570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c572:	fba1 2402 	umull	r2, r4, r1, r2
 800c576:	b94c      	cbnz	r4, 800c58c <_calloc_r+0x1c>
 800c578:	4611      	mov	r1, r2
 800c57a:	9201      	str	r2, [sp, #4]
 800c57c:	f7ff f9c4 	bl	800b908 <_malloc_r>
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	4605      	mov	r5, r0
 800c584:	b930      	cbnz	r0, 800c594 <_calloc_r+0x24>
 800c586:	4628      	mov	r0, r5
 800c588:	b003      	add	sp, #12
 800c58a:	bd30      	pop	{r4, r5, pc}
 800c58c:	220c      	movs	r2, #12
 800c58e:	6002      	str	r2, [r0, #0]
 800c590:	2500      	movs	r5, #0
 800c592:	e7f8      	b.n	800c586 <_calloc_r+0x16>
 800c594:	4621      	mov	r1, r4
 800c596:	f7fe fcf8 	bl	800af8a <memset>
 800c59a:	e7f4      	b.n	800c586 <_calloc_r+0x16>

0800c59c <malloc>:
 800c59c:	4b02      	ldr	r3, [pc, #8]	; (800c5a8 <malloc+0xc>)
 800c59e:	4601      	mov	r1, r0
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	f7ff b9b1 	b.w	800b908 <_malloc_r>
 800c5a6:	bf00      	nop
 800c5a8:	20000240 	.word	0x20000240

0800c5ac <fiprintf>:
 800c5ac:	b40e      	push	{r1, r2, r3}
 800c5ae:	b503      	push	{r0, r1, lr}
 800c5b0:	4601      	mov	r1, r0
 800c5b2:	ab03      	add	r3, sp, #12
 800c5b4:	4805      	ldr	r0, [pc, #20]	; (800c5cc <fiprintf+0x20>)
 800c5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ba:	6800      	ldr	r0, [r0, #0]
 800c5bc:	9301      	str	r3, [sp, #4]
 800c5be:	f000 f837 	bl	800c630 <_vfiprintf_r>
 800c5c2:	b002      	add	sp, #8
 800c5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5c8:	b003      	add	sp, #12
 800c5ca:	4770      	bx	lr
 800c5cc:	20000240 	.word	0x20000240

0800c5d0 <abort>:
 800c5d0:	b508      	push	{r3, lr}
 800c5d2:	2006      	movs	r0, #6
 800c5d4:	f000 fb94 	bl	800cd00 <raise>
 800c5d8:	2001      	movs	r0, #1
 800c5da:	f7f7 ff93 	bl	8004504 <_exit>

0800c5de <__sfputc_r>:
 800c5de:	6893      	ldr	r3, [r2, #8]
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	b410      	push	{r4}
 800c5e6:	6093      	str	r3, [r2, #8]
 800c5e8:	da08      	bge.n	800c5fc <__sfputc_r+0x1e>
 800c5ea:	6994      	ldr	r4, [r2, #24]
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	db01      	blt.n	800c5f4 <__sfputc_r+0x16>
 800c5f0:	290a      	cmp	r1, #10
 800c5f2:	d103      	bne.n	800c5fc <__sfputc_r+0x1e>
 800c5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f8:	f000 bac4 	b.w	800cb84 <__swbuf_r>
 800c5fc:	6813      	ldr	r3, [r2, #0]
 800c5fe:	1c58      	adds	r0, r3, #1
 800c600:	6010      	str	r0, [r2, #0]
 800c602:	7019      	strb	r1, [r3, #0]
 800c604:	4608      	mov	r0, r1
 800c606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <__sfputs_r>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	4606      	mov	r6, r0
 800c610:	460f      	mov	r7, r1
 800c612:	4614      	mov	r4, r2
 800c614:	18d5      	adds	r5, r2, r3
 800c616:	42ac      	cmp	r4, r5
 800c618:	d101      	bne.n	800c61e <__sfputs_r+0x12>
 800c61a:	2000      	movs	r0, #0
 800c61c:	e007      	b.n	800c62e <__sfputs_r+0x22>
 800c61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c622:	463a      	mov	r2, r7
 800c624:	4630      	mov	r0, r6
 800c626:	f7ff ffda 	bl	800c5de <__sfputc_r>
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	d1f3      	bne.n	800c616 <__sfputs_r+0xa>
 800c62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c630 <_vfiprintf_r>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	460d      	mov	r5, r1
 800c636:	b09d      	sub	sp, #116	; 0x74
 800c638:	4614      	mov	r4, r2
 800c63a:	4698      	mov	r8, r3
 800c63c:	4606      	mov	r6, r0
 800c63e:	b118      	cbz	r0, 800c648 <_vfiprintf_r+0x18>
 800c640:	6a03      	ldr	r3, [r0, #32]
 800c642:	b90b      	cbnz	r3, 800c648 <_vfiprintf_r+0x18>
 800c644:	f7fe fc28 	bl	800ae98 <__sinit>
 800c648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c64a:	07d9      	lsls	r1, r3, #31
 800c64c:	d405      	bmi.n	800c65a <_vfiprintf_r+0x2a>
 800c64e:	89ab      	ldrh	r3, [r5, #12]
 800c650:	059a      	lsls	r2, r3, #22
 800c652:	d402      	bmi.n	800c65a <_vfiprintf_r+0x2a>
 800c654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c656:	f7fe fd7a 	bl	800b14e <__retarget_lock_acquire_recursive>
 800c65a:	89ab      	ldrh	r3, [r5, #12]
 800c65c:	071b      	lsls	r3, r3, #28
 800c65e:	d501      	bpl.n	800c664 <_vfiprintf_r+0x34>
 800c660:	692b      	ldr	r3, [r5, #16]
 800c662:	b99b      	cbnz	r3, 800c68c <_vfiprintf_r+0x5c>
 800c664:	4629      	mov	r1, r5
 800c666:	4630      	mov	r0, r6
 800c668:	f000 faca 	bl	800cc00 <__swsetup_r>
 800c66c:	b170      	cbz	r0, 800c68c <_vfiprintf_r+0x5c>
 800c66e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c670:	07dc      	lsls	r4, r3, #31
 800c672:	d504      	bpl.n	800c67e <_vfiprintf_r+0x4e>
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	b01d      	add	sp, #116	; 0x74
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67e:	89ab      	ldrh	r3, [r5, #12]
 800c680:	0598      	lsls	r0, r3, #22
 800c682:	d4f7      	bmi.n	800c674 <_vfiprintf_r+0x44>
 800c684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c686:	f7fe fd63 	bl	800b150 <__retarget_lock_release_recursive>
 800c68a:	e7f3      	b.n	800c674 <_vfiprintf_r+0x44>
 800c68c:	2300      	movs	r3, #0
 800c68e:	9309      	str	r3, [sp, #36]	; 0x24
 800c690:	2320      	movs	r3, #32
 800c692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c696:	f8cd 800c 	str.w	r8, [sp, #12]
 800c69a:	2330      	movs	r3, #48	; 0x30
 800c69c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c850 <_vfiprintf_r+0x220>
 800c6a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6a4:	f04f 0901 	mov.w	r9, #1
 800c6a8:	4623      	mov	r3, r4
 800c6aa:	469a      	mov	sl, r3
 800c6ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6b0:	b10a      	cbz	r2, 800c6b6 <_vfiprintf_r+0x86>
 800c6b2:	2a25      	cmp	r2, #37	; 0x25
 800c6b4:	d1f9      	bne.n	800c6aa <_vfiprintf_r+0x7a>
 800c6b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c6ba:	d00b      	beq.n	800c6d4 <_vfiprintf_r+0xa4>
 800c6bc:	465b      	mov	r3, fp
 800c6be:	4622      	mov	r2, r4
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f7ff ffa2 	bl	800c60c <__sfputs_r>
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	f000 80a9 	beq.w	800c820 <_vfiprintf_r+0x1f0>
 800c6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d0:	445a      	add	r2, fp
 800c6d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 80a1 	beq.w	800c820 <_vfiprintf_r+0x1f0>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6e8:	f10a 0a01 	add.w	sl, sl, #1
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	9307      	str	r3, [sp, #28]
 800c6f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6f4:	931a      	str	r3, [sp, #104]	; 0x68
 800c6f6:	4654      	mov	r4, sl
 800c6f8:	2205      	movs	r2, #5
 800c6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fe:	4854      	ldr	r0, [pc, #336]	; (800c850 <_vfiprintf_r+0x220>)
 800c700:	f7f3 fd86 	bl	8000210 <memchr>
 800c704:	9a04      	ldr	r2, [sp, #16]
 800c706:	b9d8      	cbnz	r0, 800c740 <_vfiprintf_r+0x110>
 800c708:	06d1      	lsls	r1, r2, #27
 800c70a:	bf44      	itt	mi
 800c70c:	2320      	movmi	r3, #32
 800c70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c712:	0713      	lsls	r3, r2, #28
 800c714:	bf44      	itt	mi
 800c716:	232b      	movmi	r3, #43	; 0x2b
 800c718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c71c:	f89a 3000 	ldrb.w	r3, [sl]
 800c720:	2b2a      	cmp	r3, #42	; 0x2a
 800c722:	d015      	beq.n	800c750 <_vfiprintf_r+0x120>
 800c724:	9a07      	ldr	r2, [sp, #28]
 800c726:	4654      	mov	r4, sl
 800c728:	2000      	movs	r0, #0
 800c72a:	f04f 0c0a 	mov.w	ip, #10
 800c72e:	4621      	mov	r1, r4
 800c730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c734:	3b30      	subs	r3, #48	; 0x30
 800c736:	2b09      	cmp	r3, #9
 800c738:	d94d      	bls.n	800c7d6 <_vfiprintf_r+0x1a6>
 800c73a:	b1b0      	cbz	r0, 800c76a <_vfiprintf_r+0x13a>
 800c73c:	9207      	str	r2, [sp, #28]
 800c73e:	e014      	b.n	800c76a <_vfiprintf_r+0x13a>
 800c740:	eba0 0308 	sub.w	r3, r0, r8
 800c744:	fa09 f303 	lsl.w	r3, r9, r3
 800c748:	4313      	orrs	r3, r2
 800c74a:	9304      	str	r3, [sp, #16]
 800c74c:	46a2      	mov	sl, r4
 800c74e:	e7d2      	b.n	800c6f6 <_vfiprintf_r+0xc6>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	1d19      	adds	r1, r3, #4
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	9103      	str	r1, [sp, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfbb      	ittet	lt
 800c75c:	425b      	neglt	r3, r3
 800c75e:	f042 0202 	orrlt.w	r2, r2, #2
 800c762:	9307      	strge	r3, [sp, #28]
 800c764:	9307      	strlt	r3, [sp, #28]
 800c766:	bfb8      	it	lt
 800c768:	9204      	strlt	r2, [sp, #16]
 800c76a:	7823      	ldrb	r3, [r4, #0]
 800c76c:	2b2e      	cmp	r3, #46	; 0x2e
 800c76e:	d10c      	bne.n	800c78a <_vfiprintf_r+0x15a>
 800c770:	7863      	ldrb	r3, [r4, #1]
 800c772:	2b2a      	cmp	r3, #42	; 0x2a
 800c774:	d134      	bne.n	800c7e0 <_vfiprintf_r+0x1b0>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	1d1a      	adds	r2, r3, #4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	9203      	str	r2, [sp, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfb8      	it	lt
 800c782:	f04f 33ff 	movlt.w	r3, #4294967295
 800c786:	3402      	adds	r4, #2
 800c788:	9305      	str	r3, [sp, #20]
 800c78a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c860 <_vfiprintf_r+0x230>
 800c78e:	7821      	ldrb	r1, [r4, #0]
 800c790:	2203      	movs	r2, #3
 800c792:	4650      	mov	r0, sl
 800c794:	f7f3 fd3c 	bl	8000210 <memchr>
 800c798:	b138      	cbz	r0, 800c7aa <_vfiprintf_r+0x17a>
 800c79a:	9b04      	ldr	r3, [sp, #16]
 800c79c:	eba0 000a 	sub.w	r0, r0, sl
 800c7a0:	2240      	movs	r2, #64	; 0x40
 800c7a2:	4082      	lsls	r2, r0
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	3401      	adds	r4, #1
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ae:	4829      	ldr	r0, [pc, #164]	; (800c854 <_vfiprintf_r+0x224>)
 800c7b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7b4:	2206      	movs	r2, #6
 800c7b6:	f7f3 fd2b 	bl	8000210 <memchr>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d03f      	beq.n	800c83e <_vfiprintf_r+0x20e>
 800c7be:	4b26      	ldr	r3, [pc, #152]	; (800c858 <_vfiprintf_r+0x228>)
 800c7c0:	bb1b      	cbnz	r3, 800c80a <_vfiprintf_r+0x1da>
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	f023 0307 	bic.w	r3, r3, #7
 800c7ca:	3308      	adds	r3, #8
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d0:	443b      	add	r3, r7
 800c7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d4:	e768      	b.n	800c6a8 <_vfiprintf_r+0x78>
 800c7d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7da:	460c      	mov	r4, r1
 800c7dc:	2001      	movs	r0, #1
 800c7de:	e7a6      	b.n	800c72e <_vfiprintf_r+0xfe>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	3401      	adds	r4, #1
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	f04f 0c0a 	mov.w	ip, #10
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7f2:	3a30      	subs	r2, #48	; 0x30
 800c7f4:	2a09      	cmp	r2, #9
 800c7f6:	d903      	bls.n	800c800 <_vfiprintf_r+0x1d0>
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0c6      	beq.n	800c78a <_vfiprintf_r+0x15a>
 800c7fc:	9105      	str	r1, [sp, #20]
 800c7fe:	e7c4      	b.n	800c78a <_vfiprintf_r+0x15a>
 800c800:	fb0c 2101 	mla	r1, ip, r1, r2
 800c804:	4604      	mov	r4, r0
 800c806:	2301      	movs	r3, #1
 800c808:	e7f0      	b.n	800c7ec <_vfiprintf_r+0x1bc>
 800c80a:	ab03      	add	r3, sp, #12
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	462a      	mov	r2, r5
 800c810:	4b12      	ldr	r3, [pc, #72]	; (800c85c <_vfiprintf_r+0x22c>)
 800c812:	a904      	add	r1, sp, #16
 800c814:	4630      	mov	r0, r6
 800c816:	f3af 8000 	nop.w
 800c81a:	4607      	mov	r7, r0
 800c81c:	1c78      	adds	r0, r7, #1
 800c81e:	d1d6      	bne.n	800c7ce <_vfiprintf_r+0x19e>
 800c820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c822:	07d9      	lsls	r1, r3, #31
 800c824:	d405      	bmi.n	800c832 <_vfiprintf_r+0x202>
 800c826:	89ab      	ldrh	r3, [r5, #12]
 800c828:	059a      	lsls	r2, r3, #22
 800c82a:	d402      	bmi.n	800c832 <_vfiprintf_r+0x202>
 800c82c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82e:	f7fe fc8f 	bl	800b150 <__retarget_lock_release_recursive>
 800c832:	89ab      	ldrh	r3, [r5, #12]
 800c834:	065b      	lsls	r3, r3, #25
 800c836:	f53f af1d 	bmi.w	800c674 <_vfiprintf_r+0x44>
 800c83a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c83c:	e71c      	b.n	800c678 <_vfiprintf_r+0x48>
 800c83e:	ab03      	add	r3, sp, #12
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	462a      	mov	r2, r5
 800c844:	4b05      	ldr	r3, [pc, #20]	; (800c85c <_vfiprintf_r+0x22c>)
 800c846:	a904      	add	r1, sp, #16
 800c848:	4630      	mov	r0, r6
 800c84a:	f000 f879 	bl	800c940 <_printf_i>
 800c84e:	e7e4      	b.n	800c81a <_vfiprintf_r+0x1ea>
 800c850:	0800e6a1 	.word	0x0800e6a1
 800c854:	0800e6ab 	.word	0x0800e6ab
 800c858:	00000000 	.word	0x00000000
 800c85c:	0800c60d 	.word	0x0800c60d
 800c860:	0800e6a7 	.word	0x0800e6a7

0800c864 <_printf_common>:
 800c864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c868:	4616      	mov	r6, r2
 800c86a:	4699      	mov	r9, r3
 800c86c:	688a      	ldr	r2, [r1, #8]
 800c86e:	690b      	ldr	r3, [r1, #16]
 800c870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c874:	4293      	cmp	r3, r2
 800c876:	bfb8      	it	lt
 800c878:	4613      	movlt	r3, r2
 800c87a:	6033      	str	r3, [r6, #0]
 800c87c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c880:	4607      	mov	r7, r0
 800c882:	460c      	mov	r4, r1
 800c884:	b10a      	cbz	r2, 800c88a <_printf_common+0x26>
 800c886:	3301      	adds	r3, #1
 800c888:	6033      	str	r3, [r6, #0]
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	0699      	lsls	r1, r3, #26
 800c88e:	bf42      	ittt	mi
 800c890:	6833      	ldrmi	r3, [r6, #0]
 800c892:	3302      	addmi	r3, #2
 800c894:	6033      	strmi	r3, [r6, #0]
 800c896:	6825      	ldr	r5, [r4, #0]
 800c898:	f015 0506 	ands.w	r5, r5, #6
 800c89c:	d106      	bne.n	800c8ac <_printf_common+0x48>
 800c89e:	f104 0a19 	add.w	sl, r4, #25
 800c8a2:	68e3      	ldr	r3, [r4, #12]
 800c8a4:	6832      	ldr	r2, [r6, #0]
 800c8a6:	1a9b      	subs	r3, r3, r2
 800c8a8:	42ab      	cmp	r3, r5
 800c8aa:	dc26      	bgt.n	800c8fa <_printf_common+0x96>
 800c8ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8b0:	1e13      	subs	r3, r2, #0
 800c8b2:	6822      	ldr	r2, [r4, #0]
 800c8b4:	bf18      	it	ne
 800c8b6:	2301      	movne	r3, #1
 800c8b8:	0692      	lsls	r2, r2, #26
 800c8ba:	d42b      	bmi.n	800c914 <_printf_common+0xb0>
 800c8bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	47c0      	blx	r8
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d01e      	beq.n	800c908 <_printf_common+0xa4>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	6922      	ldr	r2, [r4, #16]
 800c8ce:	f003 0306 	and.w	r3, r3, #6
 800c8d2:	2b04      	cmp	r3, #4
 800c8d4:	bf02      	ittt	eq
 800c8d6:	68e5      	ldreq	r5, [r4, #12]
 800c8d8:	6833      	ldreq	r3, [r6, #0]
 800c8da:	1aed      	subeq	r5, r5, r3
 800c8dc:	68a3      	ldr	r3, [r4, #8]
 800c8de:	bf0c      	ite	eq
 800c8e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8e4:	2500      	movne	r5, #0
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	bfc4      	itt	gt
 800c8ea:	1a9b      	subgt	r3, r3, r2
 800c8ec:	18ed      	addgt	r5, r5, r3
 800c8ee:	2600      	movs	r6, #0
 800c8f0:	341a      	adds	r4, #26
 800c8f2:	42b5      	cmp	r5, r6
 800c8f4:	d11a      	bne.n	800c92c <_printf_common+0xc8>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	e008      	b.n	800c90c <_printf_common+0xa8>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	4652      	mov	r2, sl
 800c8fe:	4649      	mov	r1, r9
 800c900:	4638      	mov	r0, r7
 800c902:	47c0      	blx	r8
 800c904:	3001      	adds	r0, #1
 800c906:	d103      	bne.n	800c910 <_printf_common+0xac>
 800c908:	f04f 30ff 	mov.w	r0, #4294967295
 800c90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c910:	3501      	adds	r5, #1
 800c912:	e7c6      	b.n	800c8a2 <_printf_common+0x3e>
 800c914:	18e1      	adds	r1, r4, r3
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	2030      	movs	r0, #48	; 0x30
 800c91a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c91e:	4422      	add	r2, r4
 800c920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c928:	3302      	adds	r3, #2
 800c92a:	e7c7      	b.n	800c8bc <_printf_common+0x58>
 800c92c:	2301      	movs	r3, #1
 800c92e:	4622      	mov	r2, r4
 800c930:	4649      	mov	r1, r9
 800c932:	4638      	mov	r0, r7
 800c934:	47c0      	blx	r8
 800c936:	3001      	adds	r0, #1
 800c938:	d0e6      	beq.n	800c908 <_printf_common+0xa4>
 800c93a:	3601      	adds	r6, #1
 800c93c:	e7d9      	b.n	800c8f2 <_printf_common+0x8e>
	...

0800c940 <_printf_i>:
 800c940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c944:	7e0f      	ldrb	r7, [r1, #24]
 800c946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c948:	2f78      	cmp	r7, #120	; 0x78
 800c94a:	4691      	mov	r9, r2
 800c94c:	4680      	mov	r8, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	469a      	mov	sl, r3
 800c952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c956:	d807      	bhi.n	800c968 <_printf_i+0x28>
 800c958:	2f62      	cmp	r7, #98	; 0x62
 800c95a:	d80a      	bhi.n	800c972 <_printf_i+0x32>
 800c95c:	2f00      	cmp	r7, #0
 800c95e:	f000 80d4 	beq.w	800cb0a <_printf_i+0x1ca>
 800c962:	2f58      	cmp	r7, #88	; 0x58
 800c964:	f000 80c0 	beq.w	800cae8 <_printf_i+0x1a8>
 800c968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c96c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c970:	e03a      	b.n	800c9e8 <_printf_i+0xa8>
 800c972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c976:	2b15      	cmp	r3, #21
 800c978:	d8f6      	bhi.n	800c968 <_printf_i+0x28>
 800c97a:	a101      	add	r1, pc, #4	; (adr r1, 800c980 <_printf_i+0x40>)
 800c97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c980:	0800c9d9 	.word	0x0800c9d9
 800c984:	0800c9ed 	.word	0x0800c9ed
 800c988:	0800c969 	.word	0x0800c969
 800c98c:	0800c969 	.word	0x0800c969
 800c990:	0800c969 	.word	0x0800c969
 800c994:	0800c969 	.word	0x0800c969
 800c998:	0800c9ed 	.word	0x0800c9ed
 800c99c:	0800c969 	.word	0x0800c969
 800c9a0:	0800c969 	.word	0x0800c969
 800c9a4:	0800c969 	.word	0x0800c969
 800c9a8:	0800c969 	.word	0x0800c969
 800c9ac:	0800caf1 	.word	0x0800caf1
 800c9b0:	0800ca19 	.word	0x0800ca19
 800c9b4:	0800caab 	.word	0x0800caab
 800c9b8:	0800c969 	.word	0x0800c969
 800c9bc:	0800c969 	.word	0x0800c969
 800c9c0:	0800cb13 	.word	0x0800cb13
 800c9c4:	0800c969 	.word	0x0800c969
 800c9c8:	0800ca19 	.word	0x0800ca19
 800c9cc:	0800c969 	.word	0x0800c969
 800c9d0:	0800c969 	.word	0x0800c969
 800c9d4:	0800cab3 	.word	0x0800cab3
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	1d1a      	adds	r2, r3, #4
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	602a      	str	r2, [r5, #0]
 800c9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e09f      	b.n	800cb2c <_printf_i+0x1ec>
 800c9ec:	6820      	ldr	r0, [r4, #0]
 800c9ee:	682b      	ldr	r3, [r5, #0]
 800c9f0:	0607      	lsls	r7, r0, #24
 800c9f2:	f103 0104 	add.w	r1, r3, #4
 800c9f6:	6029      	str	r1, [r5, #0]
 800c9f8:	d501      	bpl.n	800c9fe <_printf_i+0xbe>
 800c9fa:	681e      	ldr	r6, [r3, #0]
 800c9fc:	e003      	b.n	800ca06 <_printf_i+0xc6>
 800c9fe:	0646      	lsls	r6, r0, #25
 800ca00:	d5fb      	bpl.n	800c9fa <_printf_i+0xba>
 800ca02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca06:	2e00      	cmp	r6, #0
 800ca08:	da03      	bge.n	800ca12 <_printf_i+0xd2>
 800ca0a:	232d      	movs	r3, #45	; 0x2d
 800ca0c:	4276      	negs	r6, r6
 800ca0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca12:	485a      	ldr	r0, [pc, #360]	; (800cb7c <_printf_i+0x23c>)
 800ca14:	230a      	movs	r3, #10
 800ca16:	e012      	b.n	800ca3e <_printf_i+0xfe>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	6820      	ldr	r0, [r4, #0]
 800ca1c:	1d19      	adds	r1, r3, #4
 800ca1e:	6029      	str	r1, [r5, #0]
 800ca20:	0605      	lsls	r5, r0, #24
 800ca22:	d501      	bpl.n	800ca28 <_printf_i+0xe8>
 800ca24:	681e      	ldr	r6, [r3, #0]
 800ca26:	e002      	b.n	800ca2e <_printf_i+0xee>
 800ca28:	0641      	lsls	r1, r0, #25
 800ca2a:	d5fb      	bpl.n	800ca24 <_printf_i+0xe4>
 800ca2c:	881e      	ldrh	r6, [r3, #0]
 800ca2e:	4853      	ldr	r0, [pc, #332]	; (800cb7c <_printf_i+0x23c>)
 800ca30:	2f6f      	cmp	r7, #111	; 0x6f
 800ca32:	bf0c      	ite	eq
 800ca34:	2308      	moveq	r3, #8
 800ca36:	230a      	movne	r3, #10
 800ca38:	2100      	movs	r1, #0
 800ca3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca3e:	6865      	ldr	r5, [r4, #4]
 800ca40:	60a5      	str	r5, [r4, #8]
 800ca42:	2d00      	cmp	r5, #0
 800ca44:	bfa2      	ittt	ge
 800ca46:	6821      	ldrge	r1, [r4, #0]
 800ca48:	f021 0104 	bicge.w	r1, r1, #4
 800ca4c:	6021      	strge	r1, [r4, #0]
 800ca4e:	b90e      	cbnz	r6, 800ca54 <_printf_i+0x114>
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	d04b      	beq.n	800caec <_printf_i+0x1ac>
 800ca54:	4615      	mov	r5, r2
 800ca56:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca5a:	fb03 6711 	mls	r7, r3, r1, r6
 800ca5e:	5dc7      	ldrb	r7, [r0, r7]
 800ca60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca64:	4637      	mov	r7, r6
 800ca66:	42bb      	cmp	r3, r7
 800ca68:	460e      	mov	r6, r1
 800ca6a:	d9f4      	bls.n	800ca56 <_printf_i+0x116>
 800ca6c:	2b08      	cmp	r3, #8
 800ca6e:	d10b      	bne.n	800ca88 <_printf_i+0x148>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	07de      	lsls	r6, r3, #31
 800ca74:	d508      	bpl.n	800ca88 <_printf_i+0x148>
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	6861      	ldr	r1, [r4, #4]
 800ca7a:	4299      	cmp	r1, r3
 800ca7c:	bfde      	ittt	le
 800ca7e:	2330      	movle	r3, #48	; 0x30
 800ca80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca88:	1b52      	subs	r2, r2, r5
 800ca8a:	6122      	str	r2, [r4, #16]
 800ca8c:	f8cd a000 	str.w	sl, [sp]
 800ca90:	464b      	mov	r3, r9
 800ca92:	aa03      	add	r2, sp, #12
 800ca94:	4621      	mov	r1, r4
 800ca96:	4640      	mov	r0, r8
 800ca98:	f7ff fee4 	bl	800c864 <_printf_common>
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d14a      	bne.n	800cb36 <_printf_i+0x1f6>
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	b004      	add	sp, #16
 800caa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	f043 0320 	orr.w	r3, r3, #32
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	4833      	ldr	r0, [pc, #204]	; (800cb80 <_printf_i+0x240>)
 800cab4:	2778      	movs	r7, #120	; 0x78
 800cab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	6829      	ldr	r1, [r5, #0]
 800cabe:	061f      	lsls	r7, r3, #24
 800cac0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cac4:	d402      	bmi.n	800cacc <_printf_i+0x18c>
 800cac6:	065f      	lsls	r7, r3, #25
 800cac8:	bf48      	it	mi
 800caca:	b2b6      	uxthmi	r6, r6
 800cacc:	07df      	lsls	r7, r3, #31
 800cace:	bf48      	it	mi
 800cad0:	f043 0320 	orrmi.w	r3, r3, #32
 800cad4:	6029      	str	r1, [r5, #0]
 800cad6:	bf48      	it	mi
 800cad8:	6023      	strmi	r3, [r4, #0]
 800cada:	b91e      	cbnz	r6, 800cae4 <_printf_i+0x1a4>
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	f023 0320 	bic.w	r3, r3, #32
 800cae2:	6023      	str	r3, [r4, #0]
 800cae4:	2310      	movs	r3, #16
 800cae6:	e7a7      	b.n	800ca38 <_printf_i+0xf8>
 800cae8:	4824      	ldr	r0, [pc, #144]	; (800cb7c <_printf_i+0x23c>)
 800caea:	e7e4      	b.n	800cab6 <_printf_i+0x176>
 800caec:	4615      	mov	r5, r2
 800caee:	e7bd      	b.n	800ca6c <_printf_i+0x12c>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	6826      	ldr	r6, [r4, #0]
 800caf4:	6961      	ldr	r1, [r4, #20]
 800caf6:	1d18      	adds	r0, r3, #4
 800caf8:	6028      	str	r0, [r5, #0]
 800cafa:	0635      	lsls	r5, r6, #24
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	d501      	bpl.n	800cb04 <_printf_i+0x1c4>
 800cb00:	6019      	str	r1, [r3, #0]
 800cb02:	e002      	b.n	800cb0a <_printf_i+0x1ca>
 800cb04:	0670      	lsls	r0, r6, #25
 800cb06:	d5fb      	bpl.n	800cb00 <_printf_i+0x1c0>
 800cb08:	8019      	strh	r1, [r3, #0]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	6123      	str	r3, [r4, #16]
 800cb0e:	4615      	mov	r5, r2
 800cb10:	e7bc      	b.n	800ca8c <_printf_i+0x14c>
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	1d1a      	adds	r2, r3, #4
 800cb16:	602a      	str	r2, [r5, #0]
 800cb18:	681d      	ldr	r5, [r3, #0]
 800cb1a:	6862      	ldr	r2, [r4, #4]
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f7f3 fb76 	bl	8000210 <memchr>
 800cb24:	b108      	cbz	r0, 800cb2a <_printf_i+0x1ea>
 800cb26:	1b40      	subs	r0, r0, r5
 800cb28:	6060      	str	r0, [r4, #4]
 800cb2a:	6863      	ldr	r3, [r4, #4]
 800cb2c:	6123      	str	r3, [r4, #16]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb34:	e7aa      	b.n	800ca8c <_printf_i+0x14c>
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	462a      	mov	r2, r5
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	47d0      	blx	sl
 800cb40:	3001      	adds	r0, #1
 800cb42:	d0ad      	beq.n	800caa0 <_printf_i+0x160>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	079b      	lsls	r3, r3, #30
 800cb48:	d413      	bmi.n	800cb72 <_printf_i+0x232>
 800cb4a:	68e0      	ldr	r0, [r4, #12]
 800cb4c:	9b03      	ldr	r3, [sp, #12]
 800cb4e:	4298      	cmp	r0, r3
 800cb50:	bfb8      	it	lt
 800cb52:	4618      	movlt	r0, r3
 800cb54:	e7a6      	b.n	800caa4 <_printf_i+0x164>
 800cb56:	2301      	movs	r3, #1
 800cb58:	4632      	mov	r2, r6
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	4640      	mov	r0, r8
 800cb5e:	47d0      	blx	sl
 800cb60:	3001      	adds	r0, #1
 800cb62:	d09d      	beq.n	800caa0 <_printf_i+0x160>
 800cb64:	3501      	adds	r5, #1
 800cb66:	68e3      	ldr	r3, [r4, #12]
 800cb68:	9903      	ldr	r1, [sp, #12]
 800cb6a:	1a5b      	subs	r3, r3, r1
 800cb6c:	42ab      	cmp	r3, r5
 800cb6e:	dcf2      	bgt.n	800cb56 <_printf_i+0x216>
 800cb70:	e7eb      	b.n	800cb4a <_printf_i+0x20a>
 800cb72:	2500      	movs	r5, #0
 800cb74:	f104 0619 	add.w	r6, r4, #25
 800cb78:	e7f5      	b.n	800cb66 <_printf_i+0x226>
 800cb7a:	bf00      	nop
 800cb7c:	0800e6b2 	.word	0x0800e6b2
 800cb80:	0800e6c3 	.word	0x0800e6c3

0800cb84 <__swbuf_r>:
 800cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb86:	460e      	mov	r6, r1
 800cb88:	4614      	mov	r4, r2
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	b118      	cbz	r0, 800cb96 <__swbuf_r+0x12>
 800cb8e:	6a03      	ldr	r3, [r0, #32]
 800cb90:	b90b      	cbnz	r3, 800cb96 <__swbuf_r+0x12>
 800cb92:	f7fe f981 	bl	800ae98 <__sinit>
 800cb96:	69a3      	ldr	r3, [r4, #24]
 800cb98:	60a3      	str	r3, [r4, #8]
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	071a      	lsls	r2, r3, #28
 800cb9e:	d525      	bpl.n	800cbec <__swbuf_r+0x68>
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	b31b      	cbz	r3, 800cbec <__swbuf_r+0x68>
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	6922      	ldr	r2, [r4, #16]
 800cba8:	1a98      	subs	r0, r3, r2
 800cbaa:	6963      	ldr	r3, [r4, #20]
 800cbac:	b2f6      	uxtb	r6, r6
 800cbae:	4283      	cmp	r3, r0
 800cbb0:	4637      	mov	r7, r6
 800cbb2:	dc04      	bgt.n	800cbbe <__swbuf_r+0x3a>
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f7ff fc84 	bl	800c4c4 <_fflush_r>
 800cbbc:	b9e0      	cbnz	r0, 800cbf8 <__swbuf_r+0x74>
 800cbbe:	68a3      	ldr	r3, [r4, #8]
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	60a3      	str	r3, [r4, #8]
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	6022      	str	r2, [r4, #0]
 800cbca:	701e      	strb	r6, [r3, #0]
 800cbcc:	6962      	ldr	r2, [r4, #20]
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d004      	beq.n	800cbde <__swbuf_r+0x5a>
 800cbd4:	89a3      	ldrh	r3, [r4, #12]
 800cbd6:	07db      	lsls	r3, r3, #31
 800cbd8:	d506      	bpl.n	800cbe8 <__swbuf_r+0x64>
 800cbda:	2e0a      	cmp	r6, #10
 800cbdc:	d104      	bne.n	800cbe8 <__swbuf_r+0x64>
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f7ff fc6f 	bl	800c4c4 <_fflush_r>
 800cbe6:	b938      	cbnz	r0, 800cbf8 <__swbuf_r+0x74>
 800cbe8:	4638      	mov	r0, r7
 800cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbec:	4621      	mov	r1, r4
 800cbee:	4628      	mov	r0, r5
 800cbf0:	f000 f806 	bl	800cc00 <__swsetup_r>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d0d5      	beq.n	800cba4 <__swbuf_r+0x20>
 800cbf8:	f04f 37ff 	mov.w	r7, #4294967295
 800cbfc:	e7f4      	b.n	800cbe8 <__swbuf_r+0x64>
	...

0800cc00 <__swsetup_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4b2a      	ldr	r3, [pc, #168]	; (800ccac <__swsetup_r+0xac>)
 800cc04:	4605      	mov	r5, r0
 800cc06:	6818      	ldr	r0, [r3, #0]
 800cc08:	460c      	mov	r4, r1
 800cc0a:	b118      	cbz	r0, 800cc14 <__swsetup_r+0x14>
 800cc0c:	6a03      	ldr	r3, [r0, #32]
 800cc0e:	b90b      	cbnz	r3, 800cc14 <__swsetup_r+0x14>
 800cc10:	f7fe f942 	bl	800ae98 <__sinit>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc1a:	0718      	lsls	r0, r3, #28
 800cc1c:	d422      	bmi.n	800cc64 <__swsetup_r+0x64>
 800cc1e:	06d9      	lsls	r1, r3, #27
 800cc20:	d407      	bmi.n	800cc32 <__swsetup_r+0x32>
 800cc22:	2309      	movs	r3, #9
 800cc24:	602b      	str	r3, [r5, #0]
 800cc26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc2a:	81a3      	strh	r3, [r4, #12]
 800cc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc30:	e034      	b.n	800cc9c <__swsetup_r+0x9c>
 800cc32:	0758      	lsls	r0, r3, #29
 800cc34:	d512      	bpl.n	800cc5c <__swsetup_r+0x5c>
 800cc36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc38:	b141      	cbz	r1, 800cc4c <__swsetup_r+0x4c>
 800cc3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc3e:	4299      	cmp	r1, r3
 800cc40:	d002      	beq.n	800cc48 <__swsetup_r+0x48>
 800cc42:	4628      	mov	r0, r5
 800cc44:	f7fe fa9c 	bl	800b180 <_free_r>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	6363      	str	r3, [r4, #52]	; 0x34
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	2300      	movs	r3, #0
 800cc56:	6063      	str	r3, [r4, #4]
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	f043 0308 	orr.w	r3, r3, #8
 800cc62:	81a3      	strh	r3, [r4, #12]
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	b94b      	cbnz	r3, 800cc7c <__swsetup_r+0x7c>
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc72:	d003      	beq.n	800cc7c <__swsetup_r+0x7c>
 800cc74:	4621      	mov	r1, r4
 800cc76:	4628      	mov	r0, r5
 800cc78:	f000 f884 	bl	800cd84 <__smakebuf_r>
 800cc7c:	89a0      	ldrh	r0, [r4, #12]
 800cc7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc82:	f010 0301 	ands.w	r3, r0, #1
 800cc86:	d00a      	beq.n	800cc9e <__swsetup_r+0x9e>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	60a3      	str	r3, [r4, #8]
 800cc8c:	6963      	ldr	r3, [r4, #20]
 800cc8e:	425b      	negs	r3, r3
 800cc90:	61a3      	str	r3, [r4, #24]
 800cc92:	6923      	ldr	r3, [r4, #16]
 800cc94:	b943      	cbnz	r3, 800cca8 <__swsetup_r+0xa8>
 800cc96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc9a:	d1c4      	bne.n	800cc26 <__swsetup_r+0x26>
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	0781      	lsls	r1, r0, #30
 800cca0:	bf58      	it	pl
 800cca2:	6963      	ldrpl	r3, [r4, #20]
 800cca4:	60a3      	str	r3, [r4, #8]
 800cca6:	e7f4      	b.n	800cc92 <__swsetup_r+0x92>
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e7f7      	b.n	800cc9c <__swsetup_r+0x9c>
 800ccac:	20000240 	.word	0x20000240

0800ccb0 <_raise_r>:
 800ccb0:	291f      	cmp	r1, #31
 800ccb2:	b538      	push	{r3, r4, r5, lr}
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	d904      	bls.n	800ccc4 <_raise_r+0x14>
 800ccba:	2316      	movs	r3, #22
 800ccbc:	6003      	str	r3, [r0, #0]
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ccc6:	b112      	cbz	r2, 800ccce <_raise_r+0x1e>
 800ccc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cccc:	b94b      	cbnz	r3, 800cce2 <_raise_r+0x32>
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f000 f830 	bl	800cd34 <_getpid_r>
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	4601      	mov	r1, r0
 800ccd8:	4620      	mov	r0, r4
 800ccda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccde:	f000 b817 	b.w	800cd10 <_kill_r>
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d00a      	beq.n	800ccfc <_raise_r+0x4c>
 800cce6:	1c59      	adds	r1, r3, #1
 800cce8:	d103      	bne.n	800ccf2 <_raise_r+0x42>
 800ccea:	2316      	movs	r3, #22
 800ccec:	6003      	str	r3, [r0, #0]
 800ccee:	2001      	movs	r0, #1
 800ccf0:	e7e7      	b.n	800ccc2 <_raise_r+0x12>
 800ccf2:	2400      	movs	r4, #0
 800ccf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	4798      	blx	r3
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e7e0      	b.n	800ccc2 <_raise_r+0x12>

0800cd00 <raise>:
 800cd00:	4b02      	ldr	r3, [pc, #8]	; (800cd0c <raise+0xc>)
 800cd02:	4601      	mov	r1, r0
 800cd04:	6818      	ldr	r0, [r3, #0]
 800cd06:	f7ff bfd3 	b.w	800ccb0 <_raise_r>
 800cd0a:	bf00      	nop
 800cd0c:	20000240 	.word	0x20000240

0800cd10 <_kill_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4d07      	ldr	r5, [pc, #28]	; (800cd30 <_kill_r+0x20>)
 800cd14:	2300      	movs	r3, #0
 800cd16:	4604      	mov	r4, r0
 800cd18:	4608      	mov	r0, r1
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	602b      	str	r3, [r5, #0]
 800cd1e:	f7f7 fbe1 	bl	80044e4 <_kill>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	d102      	bne.n	800cd2c <_kill_r+0x1c>
 800cd26:	682b      	ldr	r3, [r5, #0]
 800cd28:	b103      	cbz	r3, 800cd2c <_kill_r+0x1c>
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	bd38      	pop	{r3, r4, r5, pc}
 800cd2e:	bf00      	nop
 800cd30:	20004890 	.word	0x20004890

0800cd34 <_getpid_r>:
 800cd34:	f7f7 bbce 	b.w	80044d4 <_getpid>

0800cd38 <__swhatbuf_r>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd40:	2900      	cmp	r1, #0
 800cd42:	b096      	sub	sp, #88	; 0x58
 800cd44:	4615      	mov	r5, r2
 800cd46:	461e      	mov	r6, r3
 800cd48:	da0d      	bge.n	800cd66 <__swhatbuf_r+0x2e>
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd50:	f04f 0100 	mov.w	r1, #0
 800cd54:	bf0c      	ite	eq
 800cd56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd5a:	2340      	movne	r3, #64	; 0x40
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	6031      	str	r1, [r6, #0]
 800cd60:	602b      	str	r3, [r5, #0]
 800cd62:	b016      	add	sp, #88	; 0x58
 800cd64:	bd70      	pop	{r4, r5, r6, pc}
 800cd66:	466a      	mov	r2, sp
 800cd68:	f000 f848 	bl	800cdfc <_fstat_r>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	dbec      	blt.n	800cd4a <__swhatbuf_r+0x12>
 800cd70:	9901      	ldr	r1, [sp, #4]
 800cd72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cd76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cd7a:	4259      	negs	r1, r3
 800cd7c:	4159      	adcs	r1, r3
 800cd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd82:	e7eb      	b.n	800cd5c <__swhatbuf_r+0x24>

0800cd84 <__smakebuf_r>:
 800cd84:	898b      	ldrh	r3, [r1, #12]
 800cd86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd88:	079d      	lsls	r5, r3, #30
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	d507      	bpl.n	800cda0 <__smakebuf_r+0x1c>
 800cd90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6163      	str	r3, [r4, #20]
 800cd9c:	b002      	add	sp, #8
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	ab01      	add	r3, sp, #4
 800cda2:	466a      	mov	r2, sp
 800cda4:	f7ff ffc8 	bl	800cd38 <__swhatbuf_r>
 800cda8:	9900      	ldr	r1, [sp, #0]
 800cdaa:	4605      	mov	r5, r0
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7fe fdab 	bl	800b908 <_malloc_r>
 800cdb2:	b948      	cbnz	r0, 800cdc8 <__smakebuf_r+0x44>
 800cdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb8:	059a      	lsls	r2, r3, #22
 800cdba:	d4ef      	bmi.n	800cd9c <__smakebuf_r+0x18>
 800cdbc:	f023 0303 	bic.w	r3, r3, #3
 800cdc0:	f043 0302 	orr.w	r3, r3, #2
 800cdc4:	81a3      	strh	r3, [r4, #12]
 800cdc6:	e7e3      	b.n	800cd90 <__smakebuf_r+0xc>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	6020      	str	r0, [r4, #0]
 800cdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	9b00      	ldr	r3, [sp, #0]
 800cdd4:	6163      	str	r3, [r4, #20]
 800cdd6:	9b01      	ldr	r3, [sp, #4]
 800cdd8:	6120      	str	r0, [r4, #16]
 800cdda:	b15b      	cbz	r3, 800cdf4 <__smakebuf_r+0x70>
 800cddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde0:	4630      	mov	r0, r6
 800cde2:	f000 f81d 	bl	800ce20 <_isatty_r>
 800cde6:	b128      	cbz	r0, 800cdf4 <__smakebuf_r+0x70>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f023 0303 	bic.w	r3, r3, #3
 800cdee:	f043 0301 	orr.w	r3, r3, #1
 800cdf2:	81a3      	strh	r3, [r4, #12]
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	431d      	orrs	r5, r3
 800cdf8:	81a5      	strh	r5, [r4, #12]
 800cdfa:	e7cf      	b.n	800cd9c <__smakebuf_r+0x18>

0800cdfc <_fstat_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4d07      	ldr	r5, [pc, #28]	; (800ce1c <_fstat_r+0x20>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4604      	mov	r4, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	4611      	mov	r1, r2
 800ce08:	602b      	str	r3, [r5, #0]
 800ce0a:	f7f7 fbca 	bl	80045a2 <_fstat>
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	d102      	bne.n	800ce18 <_fstat_r+0x1c>
 800ce12:	682b      	ldr	r3, [r5, #0]
 800ce14:	b103      	cbz	r3, 800ce18 <_fstat_r+0x1c>
 800ce16:	6023      	str	r3, [r4, #0]
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20004890 	.word	0x20004890

0800ce20 <_isatty_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d06      	ldr	r5, [pc, #24]	; (800ce3c <_isatty_r+0x1c>)
 800ce24:	2300      	movs	r3, #0
 800ce26:	4604      	mov	r4, r0
 800ce28:	4608      	mov	r0, r1
 800ce2a:	602b      	str	r3, [r5, #0]
 800ce2c:	f7f7 fbc9 	bl	80045c2 <_isatty>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <_isatty_r+0x1a>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b103      	cbz	r3, 800ce3a <_isatty_r+0x1a>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}
 800ce3c:	20004890 	.word	0x20004890

0800ce40 <atan2>:
 800ce40:	f000 b956 	b.w	800d0f0 <__ieee754_atan2>

0800ce44 <pow>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	ed2d 8b02 	vpush	{d8}
 800ce4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ce4e:	eef0 8a60 	vmov.f32	s17, s1
 800ce52:	ec55 4b11 	vmov	r4, r5, d1
 800ce56:	f000 fa13 	bl	800d280 <__ieee754_pow>
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	462b      	mov	r3, r5
 800ce5e:	4620      	mov	r0, r4
 800ce60:	4629      	mov	r1, r5
 800ce62:	ec57 6b10 	vmov	r6, r7, d0
 800ce66:	f7f3 fe79 	bl	8000b5c <__aeabi_dcmpun>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d13b      	bne.n	800cee6 <pow+0xa2>
 800ce6e:	ec51 0b18 	vmov	r0, r1, d8
 800ce72:	2200      	movs	r2, #0
 800ce74:	2300      	movs	r3, #0
 800ce76:	f7f3 fe3f 	bl	8000af8 <__aeabi_dcmpeq>
 800ce7a:	b1b8      	cbz	r0, 800ceac <pow+0x68>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2300      	movs	r3, #0
 800ce80:	4620      	mov	r0, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	f7f3 fe38 	bl	8000af8 <__aeabi_dcmpeq>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d146      	bne.n	800cf1a <pow+0xd6>
 800ce8c:	ec45 4b10 	vmov	d0, r4, r5
 800ce90:	f000 f848 	bl	800cf24 <finite>
 800ce94:	b338      	cbz	r0, 800cee6 <pow+0xa2>
 800ce96:	2200      	movs	r2, #0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7f3 fe35 	bl	8000b0c <__aeabi_dcmplt>
 800cea2:	b300      	cbz	r0, 800cee6 <pow+0xa2>
 800cea4:	f7fe f928 	bl	800b0f8 <__errno>
 800cea8:	2322      	movs	r3, #34	; 0x22
 800ceaa:	e01b      	b.n	800cee4 <pow+0xa0>
 800ceac:	ec47 6b10 	vmov	d0, r6, r7
 800ceb0:	f000 f838 	bl	800cf24 <finite>
 800ceb4:	b9e0      	cbnz	r0, 800cef0 <pow+0xac>
 800ceb6:	eeb0 0a48 	vmov.f32	s0, s16
 800ceba:	eef0 0a68 	vmov.f32	s1, s17
 800cebe:	f000 f831 	bl	800cf24 <finite>
 800cec2:	b1a8      	cbz	r0, 800cef0 <pow+0xac>
 800cec4:	ec45 4b10 	vmov	d0, r4, r5
 800cec8:	f000 f82c 	bl	800cf24 <finite>
 800cecc:	b180      	cbz	r0, 800cef0 <pow+0xac>
 800cece:	4632      	mov	r2, r6
 800ced0:	463b      	mov	r3, r7
 800ced2:	4630      	mov	r0, r6
 800ced4:	4639      	mov	r1, r7
 800ced6:	f7f3 fe41 	bl	8000b5c <__aeabi_dcmpun>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d0e2      	beq.n	800cea4 <pow+0x60>
 800cede:	f7fe f90b 	bl	800b0f8 <__errno>
 800cee2:	2321      	movs	r3, #33	; 0x21
 800cee4:	6003      	str	r3, [r0, #0]
 800cee6:	ecbd 8b02 	vpop	{d8}
 800ceea:	ec47 6b10 	vmov	d0, r6, r7
 800ceee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef0:	2200      	movs	r2, #0
 800cef2:	2300      	movs	r3, #0
 800cef4:	4630      	mov	r0, r6
 800cef6:	4639      	mov	r1, r7
 800cef8:	f7f3 fdfe 	bl	8000af8 <__aeabi_dcmpeq>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d0f2      	beq.n	800cee6 <pow+0xa2>
 800cf00:	eeb0 0a48 	vmov.f32	s0, s16
 800cf04:	eef0 0a68 	vmov.f32	s1, s17
 800cf08:	f000 f80c 	bl	800cf24 <finite>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d0ea      	beq.n	800cee6 <pow+0xa2>
 800cf10:	ec45 4b10 	vmov	d0, r4, r5
 800cf14:	f000 f806 	bl	800cf24 <finite>
 800cf18:	e7c3      	b.n	800cea2 <pow+0x5e>
 800cf1a:	4f01      	ldr	r7, [pc, #4]	; (800cf20 <pow+0xdc>)
 800cf1c:	2600      	movs	r6, #0
 800cf1e:	e7e2      	b.n	800cee6 <pow+0xa2>
 800cf20:	3ff00000 	.word	0x3ff00000

0800cf24 <finite>:
 800cf24:	b082      	sub	sp, #8
 800cf26:	ed8d 0b00 	vstr	d0, [sp]
 800cf2a:	9801      	ldr	r0, [sp, #4]
 800cf2c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cf30:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cf34:	0fc0      	lsrs	r0, r0, #31
 800cf36:	b002      	add	sp, #8
 800cf38:	4770      	bx	lr
	...

0800cf3c <__ieee754_sqrt>:
 800cf3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	ec55 4b10 	vmov	r4, r5, d0
 800cf44:	4e67      	ldr	r6, [pc, #412]	; (800d0e4 <__ieee754_sqrt+0x1a8>)
 800cf46:	43ae      	bics	r6, r5
 800cf48:	ee10 0a10 	vmov	r0, s0
 800cf4c:	ee10 2a10 	vmov	r2, s0
 800cf50:	4629      	mov	r1, r5
 800cf52:	462b      	mov	r3, r5
 800cf54:	d10d      	bne.n	800cf72 <__ieee754_sqrt+0x36>
 800cf56:	f7f3 fb67 	bl	8000628 <__aeabi_dmul>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 f9ab 	bl	80002bc <__adddf3>
 800cf66:	4604      	mov	r4, r0
 800cf68:	460d      	mov	r5, r1
 800cf6a:	ec45 4b10 	vmov	d0, r4, r5
 800cf6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf72:	2d00      	cmp	r5, #0
 800cf74:	dc0b      	bgt.n	800cf8e <__ieee754_sqrt+0x52>
 800cf76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf7a:	4326      	orrs	r6, r4
 800cf7c:	d0f5      	beq.n	800cf6a <__ieee754_sqrt+0x2e>
 800cf7e:	b135      	cbz	r5, 800cf8e <__ieee754_sqrt+0x52>
 800cf80:	f7f3 f99a 	bl	80002b8 <__aeabi_dsub>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	f7f3 fc78 	bl	800087c <__aeabi_ddiv>
 800cf8c:	e7eb      	b.n	800cf66 <__ieee754_sqrt+0x2a>
 800cf8e:	1509      	asrs	r1, r1, #20
 800cf90:	f000 808d 	beq.w	800d0ae <__ieee754_sqrt+0x172>
 800cf94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf98:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cf9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfa0:	07c9      	lsls	r1, r1, #31
 800cfa2:	bf5c      	itt	pl
 800cfa4:	005b      	lslpl	r3, r3, #1
 800cfa6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cfaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfae:	bf58      	it	pl
 800cfb0:	0052      	lslpl	r2, r2, #1
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cfb8:	1076      	asrs	r6, r6, #1
 800cfba:	0052      	lsls	r2, r2, #1
 800cfbc:	f04f 0e16 	mov.w	lr, #22
 800cfc0:	46ac      	mov	ip, r5
 800cfc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfc6:	eb0c 0001 	add.w	r0, ip, r1
 800cfca:	4298      	cmp	r0, r3
 800cfcc:	bfde      	ittt	le
 800cfce:	1a1b      	suble	r3, r3, r0
 800cfd0:	eb00 0c01 	addle.w	ip, r0, r1
 800cfd4:	186d      	addle	r5, r5, r1
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	f1be 0e01 	subs.w	lr, lr, #1
 800cfdc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cfe0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfe4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cfe8:	d1ed      	bne.n	800cfc6 <__ieee754_sqrt+0x8a>
 800cfea:	4674      	mov	r4, lr
 800cfec:	2720      	movs	r7, #32
 800cfee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cff2:	4563      	cmp	r3, ip
 800cff4:	eb01 000e 	add.w	r0, r1, lr
 800cff8:	dc02      	bgt.n	800d000 <__ieee754_sqrt+0xc4>
 800cffa:	d113      	bne.n	800d024 <__ieee754_sqrt+0xe8>
 800cffc:	4290      	cmp	r0, r2
 800cffe:	d811      	bhi.n	800d024 <__ieee754_sqrt+0xe8>
 800d000:	2800      	cmp	r0, #0
 800d002:	eb00 0e01 	add.w	lr, r0, r1
 800d006:	da57      	bge.n	800d0b8 <__ieee754_sqrt+0x17c>
 800d008:	f1be 0f00 	cmp.w	lr, #0
 800d00c:	db54      	blt.n	800d0b8 <__ieee754_sqrt+0x17c>
 800d00e:	f10c 0801 	add.w	r8, ip, #1
 800d012:	eba3 030c 	sub.w	r3, r3, ip
 800d016:	4290      	cmp	r0, r2
 800d018:	bf88      	it	hi
 800d01a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d01e:	1a12      	subs	r2, r2, r0
 800d020:	440c      	add	r4, r1
 800d022:	46c4      	mov	ip, r8
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	3f01      	subs	r7, #1
 800d028:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d02c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d030:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d034:	d1dd      	bne.n	800cff2 <__ieee754_sqrt+0xb6>
 800d036:	4313      	orrs	r3, r2
 800d038:	d01b      	beq.n	800d072 <__ieee754_sqrt+0x136>
 800d03a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d0e8 <__ieee754_sqrt+0x1ac>
 800d03e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d0ec <__ieee754_sqrt+0x1b0>
 800d042:	e9da 0100 	ldrd	r0, r1, [sl]
 800d046:	e9db 2300 	ldrd	r2, r3, [fp]
 800d04a:	f7f3 f935 	bl	80002b8 <__aeabi_dsub>
 800d04e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	4640      	mov	r0, r8
 800d058:	4649      	mov	r1, r9
 800d05a:	f7f3 fd61 	bl	8000b20 <__aeabi_dcmple>
 800d05e:	b140      	cbz	r0, 800d072 <__ieee754_sqrt+0x136>
 800d060:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d064:	e9da 0100 	ldrd	r0, r1, [sl]
 800d068:	e9db 2300 	ldrd	r2, r3, [fp]
 800d06c:	d126      	bne.n	800d0bc <__ieee754_sqrt+0x180>
 800d06e:	3501      	adds	r5, #1
 800d070:	463c      	mov	r4, r7
 800d072:	106a      	asrs	r2, r5, #1
 800d074:	0863      	lsrs	r3, r4, #1
 800d076:	07e9      	lsls	r1, r5, #31
 800d078:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d07c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d080:	bf48      	it	mi
 800d082:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d086:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d08a:	461c      	mov	r4, r3
 800d08c:	e76d      	b.n	800cf6a <__ieee754_sqrt+0x2e>
 800d08e:	0ad3      	lsrs	r3, r2, #11
 800d090:	3815      	subs	r0, #21
 800d092:	0552      	lsls	r2, r2, #21
 800d094:	2b00      	cmp	r3, #0
 800d096:	d0fa      	beq.n	800d08e <__ieee754_sqrt+0x152>
 800d098:	02dc      	lsls	r4, r3, #11
 800d09a:	d50a      	bpl.n	800d0b2 <__ieee754_sqrt+0x176>
 800d09c:	f1c1 0420 	rsb	r4, r1, #32
 800d0a0:	fa22 f404 	lsr.w	r4, r2, r4
 800d0a4:	1e4d      	subs	r5, r1, #1
 800d0a6:	408a      	lsls	r2, r1
 800d0a8:	4323      	orrs	r3, r4
 800d0aa:	1b41      	subs	r1, r0, r5
 800d0ac:	e772      	b.n	800cf94 <__ieee754_sqrt+0x58>
 800d0ae:	4608      	mov	r0, r1
 800d0b0:	e7f0      	b.n	800d094 <__ieee754_sqrt+0x158>
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	3101      	adds	r1, #1
 800d0b6:	e7ef      	b.n	800d098 <__ieee754_sqrt+0x15c>
 800d0b8:	46e0      	mov	r8, ip
 800d0ba:	e7aa      	b.n	800d012 <__ieee754_sqrt+0xd6>
 800d0bc:	f7f3 f8fe 	bl	80002bc <__adddf3>
 800d0c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	f7f3 fd1e 	bl	8000b0c <__aeabi_dcmplt>
 800d0d0:	b120      	cbz	r0, 800d0dc <__ieee754_sqrt+0x1a0>
 800d0d2:	1ca0      	adds	r0, r4, #2
 800d0d4:	bf08      	it	eq
 800d0d6:	3501      	addeq	r5, #1
 800d0d8:	3402      	adds	r4, #2
 800d0da:	e7ca      	b.n	800d072 <__ieee754_sqrt+0x136>
 800d0dc:	3401      	adds	r4, #1
 800d0de:	f024 0401 	bic.w	r4, r4, #1
 800d0e2:	e7c6      	b.n	800d072 <__ieee754_sqrt+0x136>
 800d0e4:	7ff00000 	.word	0x7ff00000
 800d0e8:	20000248 	.word	0x20000248
 800d0ec:	20000250 	.word	0x20000250

0800d0f0 <__ieee754_atan2>:
 800d0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f4:	ec57 6b11 	vmov	r6, r7, d1
 800d0f8:	4273      	negs	r3, r6
 800d0fa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d278 <__ieee754_atan2+0x188>
 800d0fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d102:	4333      	orrs	r3, r6
 800d104:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d108:	4543      	cmp	r3, r8
 800d10a:	ec51 0b10 	vmov	r0, r1, d0
 800d10e:	ee11 5a10 	vmov	r5, s2
 800d112:	d80a      	bhi.n	800d12a <__ieee754_atan2+0x3a>
 800d114:	4244      	negs	r4, r0
 800d116:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d11a:	4304      	orrs	r4, r0
 800d11c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d120:	4544      	cmp	r4, r8
 800d122:	ee10 9a10 	vmov	r9, s0
 800d126:	468e      	mov	lr, r1
 800d128:	d907      	bls.n	800d13a <__ieee754_atan2+0x4a>
 800d12a:	4632      	mov	r2, r6
 800d12c:	463b      	mov	r3, r7
 800d12e:	f7f3 f8c5 	bl	80002bc <__adddf3>
 800d132:	ec41 0b10 	vmov	d0, r0, r1
 800d136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d13e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d142:	4334      	orrs	r4, r6
 800d144:	d103      	bne.n	800d14e <__ieee754_atan2+0x5e>
 800d146:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d14a:	f000 bdc5 	b.w	800dcd8 <atan>
 800d14e:	17bc      	asrs	r4, r7, #30
 800d150:	f004 0402 	and.w	r4, r4, #2
 800d154:	ea53 0909 	orrs.w	r9, r3, r9
 800d158:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d15c:	d107      	bne.n	800d16e <__ieee754_atan2+0x7e>
 800d15e:	2c02      	cmp	r4, #2
 800d160:	d05f      	beq.n	800d222 <__ieee754_atan2+0x132>
 800d162:	2c03      	cmp	r4, #3
 800d164:	d1e5      	bne.n	800d132 <__ieee754_atan2+0x42>
 800d166:	a140      	add	r1, pc, #256	; (adr r1, 800d268 <__ieee754_atan2+0x178>)
 800d168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d16c:	e7e1      	b.n	800d132 <__ieee754_atan2+0x42>
 800d16e:	4315      	orrs	r5, r2
 800d170:	d106      	bne.n	800d180 <__ieee754_atan2+0x90>
 800d172:	f1be 0f00 	cmp.w	lr, #0
 800d176:	da5f      	bge.n	800d238 <__ieee754_atan2+0x148>
 800d178:	a13d      	add	r1, pc, #244	; (adr r1, 800d270 <__ieee754_atan2+0x180>)
 800d17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d17e:	e7d8      	b.n	800d132 <__ieee754_atan2+0x42>
 800d180:	4542      	cmp	r2, r8
 800d182:	d10f      	bne.n	800d1a4 <__ieee754_atan2+0xb4>
 800d184:	4293      	cmp	r3, r2
 800d186:	f104 34ff 	add.w	r4, r4, #4294967295
 800d18a:	d107      	bne.n	800d19c <__ieee754_atan2+0xac>
 800d18c:	2c02      	cmp	r4, #2
 800d18e:	d84c      	bhi.n	800d22a <__ieee754_atan2+0x13a>
 800d190:	4b33      	ldr	r3, [pc, #204]	; (800d260 <__ieee754_atan2+0x170>)
 800d192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d19a:	e7ca      	b.n	800d132 <__ieee754_atan2+0x42>
 800d19c:	2c02      	cmp	r4, #2
 800d19e:	d848      	bhi.n	800d232 <__ieee754_atan2+0x142>
 800d1a0:	4b30      	ldr	r3, [pc, #192]	; (800d264 <__ieee754_atan2+0x174>)
 800d1a2:	e7f6      	b.n	800d192 <__ieee754_atan2+0xa2>
 800d1a4:	4543      	cmp	r3, r8
 800d1a6:	d0e4      	beq.n	800d172 <__ieee754_atan2+0x82>
 800d1a8:	1a9b      	subs	r3, r3, r2
 800d1aa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d1ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1b2:	da1e      	bge.n	800d1f2 <__ieee754_atan2+0x102>
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	da01      	bge.n	800d1bc <__ieee754_atan2+0xcc>
 800d1b8:	323c      	adds	r2, #60	; 0x3c
 800d1ba:	db1e      	blt.n	800d1fa <__ieee754_atan2+0x10a>
 800d1bc:	4632      	mov	r2, r6
 800d1be:	463b      	mov	r3, r7
 800d1c0:	f7f3 fb5c 	bl	800087c <__aeabi_ddiv>
 800d1c4:	ec41 0b10 	vmov	d0, r0, r1
 800d1c8:	f000 ff26 	bl	800e018 <fabs>
 800d1cc:	f000 fd84 	bl	800dcd8 <atan>
 800d1d0:	ec51 0b10 	vmov	r0, r1, d0
 800d1d4:	2c01      	cmp	r4, #1
 800d1d6:	d013      	beq.n	800d200 <__ieee754_atan2+0x110>
 800d1d8:	2c02      	cmp	r4, #2
 800d1da:	d015      	beq.n	800d208 <__ieee754_atan2+0x118>
 800d1dc:	2c00      	cmp	r4, #0
 800d1de:	d0a8      	beq.n	800d132 <__ieee754_atan2+0x42>
 800d1e0:	a317      	add	r3, pc, #92	; (adr r3, 800d240 <__ieee754_atan2+0x150>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	f7f3 f867 	bl	80002b8 <__aeabi_dsub>
 800d1ea:	a317      	add	r3, pc, #92	; (adr r3, 800d248 <__ieee754_atan2+0x158>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	e014      	b.n	800d21c <__ieee754_atan2+0x12c>
 800d1f2:	a117      	add	r1, pc, #92	; (adr r1, 800d250 <__ieee754_atan2+0x160>)
 800d1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f8:	e7ec      	b.n	800d1d4 <__ieee754_atan2+0xe4>
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	e7e9      	b.n	800d1d4 <__ieee754_atan2+0xe4>
 800d200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d204:	4619      	mov	r1, r3
 800d206:	e794      	b.n	800d132 <__ieee754_atan2+0x42>
 800d208:	a30d      	add	r3, pc, #52	; (adr r3, 800d240 <__ieee754_atan2+0x150>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 f853 	bl	80002b8 <__aeabi_dsub>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	a10c      	add	r1, pc, #48	; (adr r1, 800d248 <__ieee754_atan2+0x158>)
 800d218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d21c:	f7f3 f84c 	bl	80002b8 <__aeabi_dsub>
 800d220:	e787      	b.n	800d132 <__ieee754_atan2+0x42>
 800d222:	a109      	add	r1, pc, #36	; (adr r1, 800d248 <__ieee754_atan2+0x158>)
 800d224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d228:	e783      	b.n	800d132 <__ieee754_atan2+0x42>
 800d22a:	a10b      	add	r1, pc, #44	; (adr r1, 800d258 <__ieee754_atan2+0x168>)
 800d22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d230:	e77f      	b.n	800d132 <__ieee754_atan2+0x42>
 800d232:	2000      	movs	r0, #0
 800d234:	2100      	movs	r1, #0
 800d236:	e77c      	b.n	800d132 <__ieee754_atan2+0x42>
 800d238:	a105      	add	r1, pc, #20	; (adr r1, 800d250 <__ieee754_atan2+0x160>)
 800d23a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d23e:	e778      	b.n	800d132 <__ieee754_atan2+0x42>
 800d240:	33145c07 	.word	0x33145c07
 800d244:	3ca1a626 	.word	0x3ca1a626
 800d248:	54442d18 	.word	0x54442d18
 800d24c:	400921fb 	.word	0x400921fb
 800d250:	54442d18 	.word	0x54442d18
 800d254:	3ff921fb 	.word	0x3ff921fb
 800d258:	54442d18 	.word	0x54442d18
 800d25c:	3fe921fb 	.word	0x3fe921fb
 800d260:	0800e6d8 	.word	0x0800e6d8
 800d264:	0800e6f0 	.word	0x0800e6f0
 800d268:	54442d18 	.word	0x54442d18
 800d26c:	c00921fb 	.word	0xc00921fb
 800d270:	54442d18 	.word	0x54442d18
 800d274:	bff921fb 	.word	0xbff921fb
 800d278:	7ff00000 	.word	0x7ff00000
 800d27c:	00000000 	.word	0x00000000

0800d280 <__ieee754_pow>:
 800d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	ed2d 8b06 	vpush	{d8-d10}
 800d288:	b089      	sub	sp, #36	; 0x24
 800d28a:	ed8d 1b00 	vstr	d1, [sp]
 800d28e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d292:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d296:	ea58 0102 	orrs.w	r1, r8, r2
 800d29a:	ec57 6b10 	vmov	r6, r7, d0
 800d29e:	d115      	bne.n	800d2cc <__ieee754_pow+0x4c>
 800d2a0:	19b3      	adds	r3, r6, r6
 800d2a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d2a6:	4152      	adcs	r2, r2
 800d2a8:	4299      	cmp	r1, r3
 800d2aa:	4b89      	ldr	r3, [pc, #548]	; (800d4d0 <__ieee754_pow+0x250>)
 800d2ac:	4193      	sbcs	r3, r2
 800d2ae:	f080 84d1 	bcs.w	800dc54 <__ieee754_pow+0x9d4>
 800d2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	f7f2 ffff 	bl	80002bc <__adddf3>
 800d2be:	ec41 0b10 	vmov	d0, r0, r1
 800d2c2:	b009      	add	sp, #36	; 0x24
 800d2c4:	ecbd 8b06 	vpop	{d8-d10}
 800d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2cc:	4b81      	ldr	r3, [pc, #516]	; (800d4d4 <__ieee754_pow+0x254>)
 800d2ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d2d2:	429c      	cmp	r4, r3
 800d2d4:	ee10 aa10 	vmov	sl, s0
 800d2d8:	463d      	mov	r5, r7
 800d2da:	dc06      	bgt.n	800d2ea <__ieee754_pow+0x6a>
 800d2dc:	d101      	bne.n	800d2e2 <__ieee754_pow+0x62>
 800d2de:	2e00      	cmp	r6, #0
 800d2e0:	d1e7      	bne.n	800d2b2 <__ieee754_pow+0x32>
 800d2e2:	4598      	cmp	r8, r3
 800d2e4:	dc01      	bgt.n	800d2ea <__ieee754_pow+0x6a>
 800d2e6:	d10f      	bne.n	800d308 <__ieee754_pow+0x88>
 800d2e8:	b172      	cbz	r2, 800d308 <__ieee754_pow+0x88>
 800d2ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d2ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d2f2:	ea55 050a 	orrs.w	r5, r5, sl
 800d2f6:	d1dc      	bne.n	800d2b2 <__ieee754_pow+0x32>
 800d2f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2fc:	18db      	adds	r3, r3, r3
 800d2fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d302:	4152      	adcs	r2, r2
 800d304:	429d      	cmp	r5, r3
 800d306:	e7d0      	b.n	800d2aa <__ieee754_pow+0x2a>
 800d308:	2d00      	cmp	r5, #0
 800d30a:	da3b      	bge.n	800d384 <__ieee754_pow+0x104>
 800d30c:	4b72      	ldr	r3, [pc, #456]	; (800d4d8 <__ieee754_pow+0x258>)
 800d30e:	4598      	cmp	r8, r3
 800d310:	dc51      	bgt.n	800d3b6 <__ieee754_pow+0x136>
 800d312:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d316:	4598      	cmp	r8, r3
 800d318:	f340 84ab 	ble.w	800dc72 <__ieee754_pow+0x9f2>
 800d31c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d320:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d324:	2b14      	cmp	r3, #20
 800d326:	dd0f      	ble.n	800d348 <__ieee754_pow+0xc8>
 800d328:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d32c:	fa22 f103 	lsr.w	r1, r2, r3
 800d330:	fa01 f303 	lsl.w	r3, r1, r3
 800d334:	4293      	cmp	r3, r2
 800d336:	f040 849c 	bne.w	800dc72 <__ieee754_pow+0x9f2>
 800d33a:	f001 0101 	and.w	r1, r1, #1
 800d33e:	f1c1 0302 	rsb	r3, r1, #2
 800d342:	9304      	str	r3, [sp, #16]
 800d344:	b182      	cbz	r2, 800d368 <__ieee754_pow+0xe8>
 800d346:	e05f      	b.n	800d408 <__ieee754_pow+0x188>
 800d348:	2a00      	cmp	r2, #0
 800d34a:	d15b      	bne.n	800d404 <__ieee754_pow+0x184>
 800d34c:	f1c3 0314 	rsb	r3, r3, #20
 800d350:	fa48 f103 	asr.w	r1, r8, r3
 800d354:	fa01 f303 	lsl.w	r3, r1, r3
 800d358:	4543      	cmp	r3, r8
 800d35a:	f040 8487 	bne.w	800dc6c <__ieee754_pow+0x9ec>
 800d35e:	f001 0101 	and.w	r1, r1, #1
 800d362:	f1c1 0302 	rsb	r3, r1, #2
 800d366:	9304      	str	r3, [sp, #16]
 800d368:	4b5c      	ldr	r3, [pc, #368]	; (800d4dc <__ieee754_pow+0x25c>)
 800d36a:	4598      	cmp	r8, r3
 800d36c:	d132      	bne.n	800d3d4 <__ieee754_pow+0x154>
 800d36e:	f1b9 0f00 	cmp.w	r9, #0
 800d372:	f280 8477 	bge.w	800dc64 <__ieee754_pow+0x9e4>
 800d376:	4959      	ldr	r1, [pc, #356]	; (800d4dc <__ieee754_pow+0x25c>)
 800d378:	4632      	mov	r2, r6
 800d37a:	463b      	mov	r3, r7
 800d37c:	2000      	movs	r0, #0
 800d37e:	f7f3 fa7d 	bl	800087c <__aeabi_ddiv>
 800d382:	e79c      	b.n	800d2be <__ieee754_pow+0x3e>
 800d384:	2300      	movs	r3, #0
 800d386:	9304      	str	r3, [sp, #16]
 800d388:	2a00      	cmp	r2, #0
 800d38a:	d13d      	bne.n	800d408 <__ieee754_pow+0x188>
 800d38c:	4b51      	ldr	r3, [pc, #324]	; (800d4d4 <__ieee754_pow+0x254>)
 800d38e:	4598      	cmp	r8, r3
 800d390:	d1ea      	bne.n	800d368 <__ieee754_pow+0xe8>
 800d392:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d396:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d39a:	ea53 030a 	orrs.w	r3, r3, sl
 800d39e:	f000 8459 	beq.w	800dc54 <__ieee754_pow+0x9d4>
 800d3a2:	4b4f      	ldr	r3, [pc, #316]	; (800d4e0 <__ieee754_pow+0x260>)
 800d3a4:	429c      	cmp	r4, r3
 800d3a6:	dd08      	ble.n	800d3ba <__ieee754_pow+0x13a>
 800d3a8:	f1b9 0f00 	cmp.w	r9, #0
 800d3ac:	f2c0 8456 	blt.w	800dc5c <__ieee754_pow+0x9dc>
 800d3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3b4:	e783      	b.n	800d2be <__ieee754_pow+0x3e>
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	e7e5      	b.n	800d386 <__ieee754_pow+0x106>
 800d3ba:	f1b9 0f00 	cmp.w	r9, #0
 800d3be:	f04f 0000 	mov.w	r0, #0
 800d3c2:	f04f 0100 	mov.w	r1, #0
 800d3c6:	f6bf af7a 	bge.w	800d2be <__ieee754_pow+0x3e>
 800d3ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d3ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3d2:	e774      	b.n	800d2be <__ieee754_pow+0x3e>
 800d3d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d3d8:	d106      	bne.n	800d3e8 <__ieee754_pow+0x168>
 800d3da:	4632      	mov	r2, r6
 800d3dc:	463b      	mov	r3, r7
 800d3de:	4630      	mov	r0, r6
 800d3e0:	4639      	mov	r1, r7
 800d3e2:	f7f3 f921 	bl	8000628 <__aeabi_dmul>
 800d3e6:	e76a      	b.n	800d2be <__ieee754_pow+0x3e>
 800d3e8:	4b3e      	ldr	r3, [pc, #248]	; (800d4e4 <__ieee754_pow+0x264>)
 800d3ea:	4599      	cmp	r9, r3
 800d3ec:	d10c      	bne.n	800d408 <__ieee754_pow+0x188>
 800d3ee:	2d00      	cmp	r5, #0
 800d3f0:	db0a      	blt.n	800d408 <__ieee754_pow+0x188>
 800d3f2:	ec47 6b10 	vmov	d0, r6, r7
 800d3f6:	b009      	add	sp, #36	; 0x24
 800d3f8:	ecbd 8b06 	vpop	{d8-d10}
 800d3fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	f7ff bd9c 	b.w	800cf3c <__ieee754_sqrt>
 800d404:	2300      	movs	r3, #0
 800d406:	9304      	str	r3, [sp, #16]
 800d408:	ec47 6b10 	vmov	d0, r6, r7
 800d40c:	f000 fe04 	bl	800e018 <fabs>
 800d410:	ec51 0b10 	vmov	r0, r1, d0
 800d414:	f1ba 0f00 	cmp.w	sl, #0
 800d418:	d129      	bne.n	800d46e <__ieee754_pow+0x1ee>
 800d41a:	b124      	cbz	r4, 800d426 <__ieee754_pow+0x1a6>
 800d41c:	4b2f      	ldr	r3, [pc, #188]	; (800d4dc <__ieee754_pow+0x25c>)
 800d41e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d422:	429a      	cmp	r2, r3
 800d424:	d123      	bne.n	800d46e <__ieee754_pow+0x1ee>
 800d426:	f1b9 0f00 	cmp.w	r9, #0
 800d42a:	da05      	bge.n	800d438 <__ieee754_pow+0x1b8>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	2000      	movs	r0, #0
 800d432:	492a      	ldr	r1, [pc, #168]	; (800d4dc <__ieee754_pow+0x25c>)
 800d434:	f7f3 fa22 	bl	800087c <__aeabi_ddiv>
 800d438:	2d00      	cmp	r5, #0
 800d43a:	f6bf af40 	bge.w	800d2be <__ieee754_pow+0x3e>
 800d43e:	9b04      	ldr	r3, [sp, #16]
 800d440:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d444:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d448:	431c      	orrs	r4, r3
 800d44a:	d108      	bne.n	800d45e <__ieee754_pow+0x1de>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4610      	mov	r0, r2
 800d452:	4619      	mov	r1, r3
 800d454:	f7f2 ff30 	bl	80002b8 <__aeabi_dsub>
 800d458:	4602      	mov	r2, r0
 800d45a:	460b      	mov	r3, r1
 800d45c:	e78f      	b.n	800d37e <__ieee754_pow+0xfe>
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	2b01      	cmp	r3, #1
 800d462:	f47f af2c 	bne.w	800d2be <__ieee754_pow+0x3e>
 800d466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d46a:	4619      	mov	r1, r3
 800d46c:	e727      	b.n	800d2be <__ieee754_pow+0x3e>
 800d46e:	0feb      	lsrs	r3, r5, #31
 800d470:	3b01      	subs	r3, #1
 800d472:	9306      	str	r3, [sp, #24]
 800d474:	9a06      	ldr	r2, [sp, #24]
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	4313      	orrs	r3, r2
 800d47a:	d102      	bne.n	800d482 <__ieee754_pow+0x202>
 800d47c:	4632      	mov	r2, r6
 800d47e:	463b      	mov	r3, r7
 800d480:	e7e6      	b.n	800d450 <__ieee754_pow+0x1d0>
 800d482:	4b19      	ldr	r3, [pc, #100]	; (800d4e8 <__ieee754_pow+0x268>)
 800d484:	4598      	cmp	r8, r3
 800d486:	f340 80fb 	ble.w	800d680 <__ieee754_pow+0x400>
 800d48a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d48e:	4598      	cmp	r8, r3
 800d490:	4b13      	ldr	r3, [pc, #76]	; (800d4e0 <__ieee754_pow+0x260>)
 800d492:	dd0c      	ble.n	800d4ae <__ieee754_pow+0x22e>
 800d494:	429c      	cmp	r4, r3
 800d496:	dc0f      	bgt.n	800d4b8 <__ieee754_pow+0x238>
 800d498:	f1b9 0f00 	cmp.w	r9, #0
 800d49c:	da0f      	bge.n	800d4be <__ieee754_pow+0x23e>
 800d49e:	2000      	movs	r0, #0
 800d4a0:	b009      	add	sp, #36	; 0x24
 800d4a2:	ecbd 8b06 	vpop	{d8-d10}
 800d4a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4aa:	f000 be66 	b.w	800e17a <__math_oflow>
 800d4ae:	429c      	cmp	r4, r3
 800d4b0:	dbf2      	blt.n	800d498 <__ieee754_pow+0x218>
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <__ieee754_pow+0x25c>)
 800d4b4:	429c      	cmp	r4, r3
 800d4b6:	dd19      	ble.n	800d4ec <__ieee754_pow+0x26c>
 800d4b8:	f1b9 0f00 	cmp.w	r9, #0
 800d4bc:	dcef      	bgt.n	800d49e <__ieee754_pow+0x21e>
 800d4be:	2000      	movs	r0, #0
 800d4c0:	b009      	add	sp, #36	; 0x24
 800d4c2:	ecbd 8b06 	vpop	{d8-d10}
 800d4c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ca:	f000 be4d 	b.w	800e168 <__math_uflow>
 800d4ce:	bf00      	nop
 800d4d0:	fff00000 	.word	0xfff00000
 800d4d4:	7ff00000 	.word	0x7ff00000
 800d4d8:	433fffff 	.word	0x433fffff
 800d4dc:	3ff00000 	.word	0x3ff00000
 800d4e0:	3fefffff 	.word	0x3fefffff
 800d4e4:	3fe00000 	.word	0x3fe00000
 800d4e8:	41e00000 	.word	0x41e00000
 800d4ec:	4b60      	ldr	r3, [pc, #384]	; (800d670 <__ieee754_pow+0x3f0>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f7f2 fee2 	bl	80002b8 <__aeabi_dsub>
 800d4f4:	a354      	add	r3, pc, #336	; (adr r3, 800d648 <__ieee754_pow+0x3c8>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	460d      	mov	r5, r1
 800d4fe:	f7f3 f893 	bl	8000628 <__aeabi_dmul>
 800d502:	a353      	add	r3, pc, #332	; (adr r3, 800d650 <__ieee754_pow+0x3d0>)
 800d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d508:	4606      	mov	r6, r0
 800d50a:	460f      	mov	r7, r1
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f3 f88a 	bl	8000628 <__aeabi_dmul>
 800d514:	4b57      	ldr	r3, [pc, #348]	; (800d674 <__ieee754_pow+0x3f4>)
 800d516:	4682      	mov	sl, r0
 800d518:	468b      	mov	fp, r1
 800d51a:	2200      	movs	r2, #0
 800d51c:	4620      	mov	r0, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	f7f3 f882 	bl	8000628 <__aeabi_dmul>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	a14b      	add	r1, pc, #300	; (adr r1, 800d658 <__ieee754_pow+0x3d8>)
 800d52a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52e:	f7f2 fec3 	bl	80002b8 <__aeabi_dsub>
 800d532:	4622      	mov	r2, r4
 800d534:	462b      	mov	r3, r5
 800d536:	f7f3 f877 	bl	8000628 <__aeabi_dmul>
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	2000      	movs	r0, #0
 800d540:	494d      	ldr	r1, [pc, #308]	; (800d678 <__ieee754_pow+0x3f8>)
 800d542:	f7f2 feb9 	bl	80002b8 <__aeabi_dsub>
 800d546:	4622      	mov	r2, r4
 800d548:	4680      	mov	r8, r0
 800d54a:	4689      	mov	r9, r1
 800d54c:	462b      	mov	r3, r5
 800d54e:	4620      	mov	r0, r4
 800d550:	4629      	mov	r1, r5
 800d552:	f7f3 f869 	bl	8000628 <__aeabi_dmul>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4640      	mov	r0, r8
 800d55c:	4649      	mov	r1, r9
 800d55e:	f7f3 f863 	bl	8000628 <__aeabi_dmul>
 800d562:	a33f      	add	r3, pc, #252	; (adr r3, 800d660 <__ieee754_pow+0x3e0>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f3 f85e 	bl	8000628 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4650      	mov	r0, sl
 800d572:	4659      	mov	r1, fp
 800d574:	f7f2 fea0 	bl	80002b8 <__aeabi_dsub>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4680      	mov	r8, r0
 800d57e:	4689      	mov	r9, r1
 800d580:	4630      	mov	r0, r6
 800d582:	4639      	mov	r1, r7
 800d584:	f7f2 fe9a 	bl	80002bc <__adddf3>
 800d588:	2000      	movs	r0, #0
 800d58a:	4632      	mov	r2, r6
 800d58c:	463b      	mov	r3, r7
 800d58e:	4604      	mov	r4, r0
 800d590:	460d      	mov	r5, r1
 800d592:	f7f2 fe91 	bl	80002b8 <__aeabi_dsub>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4640      	mov	r0, r8
 800d59c:	4649      	mov	r1, r9
 800d59e:	f7f2 fe8b 	bl	80002b8 <__aeabi_dsub>
 800d5a2:	9b04      	ldr	r3, [sp, #16]
 800d5a4:	9a06      	ldr	r2, [sp, #24]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	4682      	mov	sl, r0
 800d5ac:	468b      	mov	fp, r1
 800d5ae:	f040 81e7 	bne.w	800d980 <__ieee754_pow+0x700>
 800d5b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d668 <__ieee754_pow+0x3e8>
 800d5b6:	eeb0 8a47 	vmov.f32	s16, s14
 800d5ba:	eef0 8a67 	vmov.f32	s17, s15
 800d5be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d5c2:	2600      	movs	r6, #0
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5cc:	f7f2 fe74 	bl	80002b8 <__aeabi_dsub>
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	462b      	mov	r3, r5
 800d5d4:	f7f3 f828 	bl	8000628 <__aeabi_dmul>
 800d5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5dc:	4680      	mov	r8, r0
 800d5de:	4689      	mov	r9, r1
 800d5e0:	4650      	mov	r0, sl
 800d5e2:	4659      	mov	r1, fp
 800d5e4:	f7f3 f820 	bl	8000628 <__aeabi_dmul>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	4649      	mov	r1, r9
 800d5f0:	f7f2 fe64 	bl	80002bc <__adddf3>
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	463b      	mov	r3, r7
 800d5f8:	4680      	mov	r8, r0
 800d5fa:	4689      	mov	r9, r1
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	4629      	mov	r1, r5
 800d600:	f7f3 f812 	bl	8000628 <__aeabi_dmul>
 800d604:	460b      	mov	r3, r1
 800d606:	4604      	mov	r4, r0
 800d608:	460d      	mov	r5, r1
 800d60a:	4602      	mov	r2, r0
 800d60c:	4649      	mov	r1, r9
 800d60e:	4640      	mov	r0, r8
 800d610:	f7f2 fe54 	bl	80002bc <__adddf3>
 800d614:	4b19      	ldr	r3, [pc, #100]	; (800d67c <__ieee754_pow+0x3fc>)
 800d616:	4299      	cmp	r1, r3
 800d618:	ec45 4b19 	vmov	d9, r4, r5
 800d61c:	4606      	mov	r6, r0
 800d61e:	460f      	mov	r7, r1
 800d620:	468b      	mov	fp, r1
 800d622:	f340 82f0 	ble.w	800dc06 <__ieee754_pow+0x986>
 800d626:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d62a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d62e:	4303      	orrs	r3, r0
 800d630:	f000 81e4 	beq.w	800d9fc <__ieee754_pow+0x77c>
 800d634:	ec51 0b18 	vmov	r0, r1, d8
 800d638:	2200      	movs	r2, #0
 800d63a:	2300      	movs	r3, #0
 800d63c:	f7f3 fa66 	bl	8000b0c <__aeabi_dcmplt>
 800d640:	3800      	subs	r0, #0
 800d642:	bf18      	it	ne
 800d644:	2001      	movne	r0, #1
 800d646:	e72b      	b.n	800d4a0 <__ieee754_pow+0x220>
 800d648:	60000000 	.word	0x60000000
 800d64c:	3ff71547 	.word	0x3ff71547
 800d650:	f85ddf44 	.word	0xf85ddf44
 800d654:	3e54ae0b 	.word	0x3e54ae0b
 800d658:	55555555 	.word	0x55555555
 800d65c:	3fd55555 	.word	0x3fd55555
 800d660:	652b82fe 	.word	0x652b82fe
 800d664:	3ff71547 	.word	0x3ff71547
 800d668:	00000000 	.word	0x00000000
 800d66c:	bff00000 	.word	0xbff00000
 800d670:	3ff00000 	.word	0x3ff00000
 800d674:	3fd00000 	.word	0x3fd00000
 800d678:	3fe00000 	.word	0x3fe00000
 800d67c:	408fffff 	.word	0x408fffff
 800d680:	4bd5      	ldr	r3, [pc, #852]	; (800d9d8 <__ieee754_pow+0x758>)
 800d682:	402b      	ands	r3, r5
 800d684:	2200      	movs	r2, #0
 800d686:	b92b      	cbnz	r3, 800d694 <__ieee754_pow+0x414>
 800d688:	4bd4      	ldr	r3, [pc, #848]	; (800d9dc <__ieee754_pow+0x75c>)
 800d68a:	f7f2 ffcd 	bl	8000628 <__aeabi_dmul>
 800d68e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d692:	460c      	mov	r4, r1
 800d694:	1523      	asrs	r3, r4, #20
 800d696:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d69a:	4413      	add	r3, r2
 800d69c:	9305      	str	r3, [sp, #20]
 800d69e:	4bd0      	ldr	r3, [pc, #832]	; (800d9e0 <__ieee754_pow+0x760>)
 800d6a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d6a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d6a8:	429c      	cmp	r4, r3
 800d6aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d6ae:	dd08      	ble.n	800d6c2 <__ieee754_pow+0x442>
 800d6b0:	4bcc      	ldr	r3, [pc, #816]	; (800d9e4 <__ieee754_pow+0x764>)
 800d6b2:	429c      	cmp	r4, r3
 800d6b4:	f340 8162 	ble.w	800d97c <__ieee754_pow+0x6fc>
 800d6b8:	9b05      	ldr	r3, [sp, #20]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	9305      	str	r3, [sp, #20]
 800d6be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d6c2:	2400      	movs	r4, #0
 800d6c4:	00e3      	lsls	r3, r4, #3
 800d6c6:	9307      	str	r3, [sp, #28]
 800d6c8:	4bc7      	ldr	r3, [pc, #796]	; (800d9e8 <__ieee754_pow+0x768>)
 800d6ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6ce:	ed93 7b00 	vldr	d7, [r3]
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	ec53 2b17 	vmov	r2, r3, d7
 800d6d8:	eeb0 9a47 	vmov.f32	s18, s14
 800d6dc:	eef0 9a67 	vmov.f32	s19, s15
 800d6e0:	4682      	mov	sl, r0
 800d6e2:	f7f2 fde9 	bl	80002b8 <__aeabi_dsub>
 800d6e6:	4652      	mov	r2, sl
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	462b      	mov	r3, r5
 800d6ee:	ec51 0b19 	vmov	r0, r1, d9
 800d6f2:	f7f2 fde3 	bl	80002bc <__adddf3>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	49bb      	ldr	r1, [pc, #748]	; (800d9ec <__ieee754_pow+0x76c>)
 800d6fe:	f7f3 f8bd 	bl	800087c <__aeabi_ddiv>
 800d702:	ec41 0b1a 	vmov	d10, r0, r1
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	4630      	mov	r0, r6
 800d70c:	4639      	mov	r1, r7
 800d70e:	f7f2 ff8b 	bl	8000628 <__aeabi_dmul>
 800d712:	2300      	movs	r3, #0
 800d714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d718:	9302      	str	r3, [sp, #8]
 800d71a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d71e:	46ab      	mov	fp, r5
 800d720:	106d      	asrs	r5, r5, #1
 800d722:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d726:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d72a:	ec41 0b18 	vmov	d8, r0, r1
 800d72e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d732:	2200      	movs	r2, #0
 800d734:	4640      	mov	r0, r8
 800d736:	4649      	mov	r1, r9
 800d738:	4614      	mov	r4, r2
 800d73a:	461d      	mov	r5, r3
 800d73c:	f7f2 ff74 	bl	8000628 <__aeabi_dmul>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4630      	mov	r0, r6
 800d746:	4639      	mov	r1, r7
 800d748:	f7f2 fdb6 	bl	80002b8 <__aeabi_dsub>
 800d74c:	ec53 2b19 	vmov	r2, r3, d9
 800d750:	4606      	mov	r6, r0
 800d752:	460f      	mov	r7, r1
 800d754:	4620      	mov	r0, r4
 800d756:	4629      	mov	r1, r5
 800d758:	f7f2 fdae 	bl	80002b8 <__aeabi_dsub>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4650      	mov	r0, sl
 800d762:	4659      	mov	r1, fp
 800d764:	f7f2 fda8 	bl	80002b8 <__aeabi_dsub>
 800d768:	4642      	mov	r2, r8
 800d76a:	464b      	mov	r3, r9
 800d76c:	f7f2 ff5c 	bl	8000628 <__aeabi_dmul>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4630      	mov	r0, r6
 800d776:	4639      	mov	r1, r7
 800d778:	f7f2 fd9e 	bl	80002b8 <__aeabi_dsub>
 800d77c:	ec53 2b1a 	vmov	r2, r3, d10
 800d780:	f7f2 ff52 	bl	8000628 <__aeabi_dmul>
 800d784:	ec53 2b18 	vmov	r2, r3, d8
 800d788:	ec41 0b19 	vmov	d9, r0, r1
 800d78c:	ec51 0b18 	vmov	r0, r1, d8
 800d790:	f7f2 ff4a 	bl	8000628 <__aeabi_dmul>
 800d794:	a37c      	add	r3, pc, #496	; (adr r3, 800d988 <__ieee754_pow+0x708>)
 800d796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79a:	4604      	mov	r4, r0
 800d79c:	460d      	mov	r5, r1
 800d79e:	f7f2 ff43 	bl	8000628 <__aeabi_dmul>
 800d7a2:	a37b      	add	r3, pc, #492	; (adr r3, 800d990 <__ieee754_pow+0x710>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 fd88 	bl	80002bc <__adddf3>
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	462b      	mov	r3, r5
 800d7b0:	f7f2 ff3a 	bl	8000628 <__aeabi_dmul>
 800d7b4:	a378      	add	r3, pc, #480	; (adr r3, 800d998 <__ieee754_pow+0x718>)
 800d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ba:	f7f2 fd7f 	bl	80002bc <__adddf3>
 800d7be:	4622      	mov	r2, r4
 800d7c0:	462b      	mov	r3, r5
 800d7c2:	f7f2 ff31 	bl	8000628 <__aeabi_dmul>
 800d7c6:	a376      	add	r3, pc, #472	; (adr r3, 800d9a0 <__ieee754_pow+0x720>)
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	f7f2 fd76 	bl	80002bc <__adddf3>
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	462b      	mov	r3, r5
 800d7d4:	f7f2 ff28 	bl	8000628 <__aeabi_dmul>
 800d7d8:	a373      	add	r3, pc, #460	; (adr r3, 800d9a8 <__ieee754_pow+0x728>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	f7f2 fd6d 	bl	80002bc <__adddf3>
 800d7e2:	4622      	mov	r2, r4
 800d7e4:	462b      	mov	r3, r5
 800d7e6:	f7f2 ff1f 	bl	8000628 <__aeabi_dmul>
 800d7ea:	a371      	add	r3, pc, #452	; (adr r3, 800d9b0 <__ieee754_pow+0x730>)
 800d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f0:	f7f2 fd64 	bl	80002bc <__adddf3>
 800d7f4:	4622      	mov	r2, r4
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	460f      	mov	r7, r1
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	4629      	mov	r1, r5
 800d800:	f7f2 ff12 	bl	8000628 <__aeabi_dmul>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4630      	mov	r0, r6
 800d80a:	4639      	mov	r1, r7
 800d80c:	f7f2 ff0c 	bl	8000628 <__aeabi_dmul>
 800d810:	4642      	mov	r2, r8
 800d812:	4604      	mov	r4, r0
 800d814:	460d      	mov	r5, r1
 800d816:	464b      	mov	r3, r9
 800d818:	ec51 0b18 	vmov	r0, r1, d8
 800d81c:	f7f2 fd4e 	bl	80002bc <__adddf3>
 800d820:	ec53 2b19 	vmov	r2, r3, d9
 800d824:	f7f2 ff00 	bl	8000628 <__aeabi_dmul>
 800d828:	4622      	mov	r2, r4
 800d82a:	462b      	mov	r3, r5
 800d82c:	f7f2 fd46 	bl	80002bc <__adddf3>
 800d830:	4642      	mov	r2, r8
 800d832:	4682      	mov	sl, r0
 800d834:	468b      	mov	fp, r1
 800d836:	464b      	mov	r3, r9
 800d838:	4640      	mov	r0, r8
 800d83a:	4649      	mov	r1, r9
 800d83c:	f7f2 fef4 	bl	8000628 <__aeabi_dmul>
 800d840:	4b6b      	ldr	r3, [pc, #428]	; (800d9f0 <__ieee754_pow+0x770>)
 800d842:	2200      	movs	r2, #0
 800d844:	4606      	mov	r6, r0
 800d846:	460f      	mov	r7, r1
 800d848:	f7f2 fd38 	bl	80002bc <__adddf3>
 800d84c:	4652      	mov	r2, sl
 800d84e:	465b      	mov	r3, fp
 800d850:	f7f2 fd34 	bl	80002bc <__adddf3>
 800d854:	2000      	movs	r0, #0
 800d856:	4604      	mov	r4, r0
 800d858:	460d      	mov	r5, r1
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
 800d85e:	4640      	mov	r0, r8
 800d860:	4649      	mov	r1, r9
 800d862:	f7f2 fee1 	bl	8000628 <__aeabi_dmul>
 800d866:	4b62      	ldr	r3, [pc, #392]	; (800d9f0 <__ieee754_pow+0x770>)
 800d868:	4680      	mov	r8, r0
 800d86a:	4689      	mov	r9, r1
 800d86c:	2200      	movs	r2, #0
 800d86e:	4620      	mov	r0, r4
 800d870:	4629      	mov	r1, r5
 800d872:	f7f2 fd21 	bl	80002b8 <__aeabi_dsub>
 800d876:	4632      	mov	r2, r6
 800d878:	463b      	mov	r3, r7
 800d87a:	f7f2 fd1d 	bl	80002b8 <__aeabi_dsub>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	4650      	mov	r0, sl
 800d884:	4659      	mov	r1, fp
 800d886:	f7f2 fd17 	bl	80002b8 <__aeabi_dsub>
 800d88a:	ec53 2b18 	vmov	r2, r3, d8
 800d88e:	f7f2 fecb 	bl	8000628 <__aeabi_dmul>
 800d892:	4622      	mov	r2, r4
 800d894:	4606      	mov	r6, r0
 800d896:	460f      	mov	r7, r1
 800d898:	462b      	mov	r3, r5
 800d89a:	ec51 0b19 	vmov	r0, r1, d9
 800d89e:	f7f2 fec3 	bl	8000628 <__aeabi_dmul>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	f7f2 fd07 	bl	80002bc <__adddf3>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	460f      	mov	r7, r1
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4640      	mov	r0, r8
 800d8b8:	4649      	mov	r1, r9
 800d8ba:	f7f2 fcff 	bl	80002bc <__adddf3>
 800d8be:	a33e      	add	r3, pc, #248	; (adr r3, 800d9b8 <__ieee754_pow+0x738>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	f7f2 fead 	bl	8000628 <__aeabi_dmul>
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	ec41 0b18 	vmov	d8, r0, r1
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f2 fced 	bl	80002b8 <__aeabi_dsub>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	f7f2 fce7 	bl	80002b8 <__aeabi_dsub>
 800d8ea:	a335      	add	r3, pc, #212	; (adr r3, 800d9c0 <__ieee754_pow+0x740>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fe9a 	bl	8000628 <__aeabi_dmul>
 800d8f4:	a334      	add	r3, pc, #208	; (adr r3, 800d9c8 <__ieee754_pow+0x748>)
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	460f      	mov	r7, r1
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f2 fe91 	bl	8000628 <__aeabi_dmul>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4630      	mov	r0, r6
 800d90c:	4639      	mov	r1, r7
 800d90e:	f7f2 fcd5 	bl	80002bc <__adddf3>
 800d912:	9a07      	ldr	r2, [sp, #28]
 800d914:	4b37      	ldr	r3, [pc, #220]	; (800d9f4 <__ieee754_pow+0x774>)
 800d916:	4413      	add	r3, r2
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	f7f2 fcce 	bl	80002bc <__adddf3>
 800d920:	4682      	mov	sl, r0
 800d922:	9805      	ldr	r0, [sp, #20]
 800d924:	468b      	mov	fp, r1
 800d926:	f7f2 fe15 	bl	8000554 <__aeabi_i2d>
 800d92a:	9a07      	ldr	r2, [sp, #28]
 800d92c:	4b32      	ldr	r3, [pc, #200]	; (800d9f8 <__ieee754_pow+0x778>)
 800d92e:	4413      	add	r3, r2
 800d930:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d934:	4606      	mov	r6, r0
 800d936:	460f      	mov	r7, r1
 800d938:	4652      	mov	r2, sl
 800d93a:	465b      	mov	r3, fp
 800d93c:	ec51 0b18 	vmov	r0, r1, d8
 800d940:	f7f2 fcbc 	bl	80002bc <__adddf3>
 800d944:	4642      	mov	r2, r8
 800d946:	464b      	mov	r3, r9
 800d948:	f7f2 fcb8 	bl	80002bc <__adddf3>
 800d94c:	4632      	mov	r2, r6
 800d94e:	463b      	mov	r3, r7
 800d950:	f7f2 fcb4 	bl	80002bc <__adddf3>
 800d954:	2000      	movs	r0, #0
 800d956:	4632      	mov	r2, r6
 800d958:	463b      	mov	r3, r7
 800d95a:	4604      	mov	r4, r0
 800d95c:	460d      	mov	r5, r1
 800d95e:	f7f2 fcab 	bl	80002b8 <__aeabi_dsub>
 800d962:	4642      	mov	r2, r8
 800d964:	464b      	mov	r3, r9
 800d966:	f7f2 fca7 	bl	80002b8 <__aeabi_dsub>
 800d96a:	ec53 2b18 	vmov	r2, r3, d8
 800d96e:	f7f2 fca3 	bl	80002b8 <__aeabi_dsub>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	e610      	b.n	800d59e <__ieee754_pow+0x31e>
 800d97c:	2401      	movs	r4, #1
 800d97e:	e6a1      	b.n	800d6c4 <__ieee754_pow+0x444>
 800d980:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d9d0 <__ieee754_pow+0x750>
 800d984:	e617      	b.n	800d5b6 <__ieee754_pow+0x336>
 800d986:	bf00      	nop
 800d988:	4a454eef 	.word	0x4a454eef
 800d98c:	3fca7e28 	.word	0x3fca7e28
 800d990:	93c9db65 	.word	0x93c9db65
 800d994:	3fcd864a 	.word	0x3fcd864a
 800d998:	a91d4101 	.word	0xa91d4101
 800d99c:	3fd17460 	.word	0x3fd17460
 800d9a0:	518f264d 	.word	0x518f264d
 800d9a4:	3fd55555 	.word	0x3fd55555
 800d9a8:	db6fabff 	.word	0xdb6fabff
 800d9ac:	3fdb6db6 	.word	0x3fdb6db6
 800d9b0:	33333303 	.word	0x33333303
 800d9b4:	3fe33333 	.word	0x3fe33333
 800d9b8:	e0000000 	.word	0xe0000000
 800d9bc:	3feec709 	.word	0x3feec709
 800d9c0:	dc3a03fd 	.word	0xdc3a03fd
 800d9c4:	3feec709 	.word	0x3feec709
 800d9c8:	145b01f5 	.word	0x145b01f5
 800d9cc:	be3e2fe0 	.word	0xbe3e2fe0
 800d9d0:	00000000 	.word	0x00000000
 800d9d4:	3ff00000 	.word	0x3ff00000
 800d9d8:	7ff00000 	.word	0x7ff00000
 800d9dc:	43400000 	.word	0x43400000
 800d9e0:	0003988e 	.word	0x0003988e
 800d9e4:	000bb679 	.word	0x000bb679
 800d9e8:	0800e708 	.word	0x0800e708
 800d9ec:	3ff00000 	.word	0x3ff00000
 800d9f0:	40080000 	.word	0x40080000
 800d9f4:	0800e728 	.word	0x0800e728
 800d9f8:	0800e718 	.word	0x0800e718
 800d9fc:	a3b3      	add	r3, pc, #716	; (adr r3, 800dccc <__ieee754_pow+0xa4c>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	4640      	mov	r0, r8
 800da04:	4649      	mov	r1, r9
 800da06:	f7f2 fc59 	bl	80002bc <__adddf3>
 800da0a:	4622      	mov	r2, r4
 800da0c:	ec41 0b1a 	vmov	d10, r0, r1
 800da10:	462b      	mov	r3, r5
 800da12:	4630      	mov	r0, r6
 800da14:	4639      	mov	r1, r7
 800da16:	f7f2 fc4f 	bl	80002b8 <__aeabi_dsub>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	ec51 0b1a 	vmov	r0, r1, d10
 800da22:	f7f3 f891 	bl	8000b48 <__aeabi_dcmpgt>
 800da26:	2800      	cmp	r0, #0
 800da28:	f47f ae04 	bne.w	800d634 <__ieee754_pow+0x3b4>
 800da2c:	4aa2      	ldr	r2, [pc, #648]	; (800dcb8 <__ieee754_pow+0xa38>)
 800da2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da32:	4293      	cmp	r3, r2
 800da34:	f340 8107 	ble.w	800dc46 <__ieee754_pow+0x9c6>
 800da38:	151b      	asrs	r3, r3, #20
 800da3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800da3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800da42:	fa4a fa03 	asr.w	sl, sl, r3
 800da46:	44da      	add	sl, fp
 800da48:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800da4c:	489b      	ldr	r0, [pc, #620]	; (800dcbc <__ieee754_pow+0xa3c>)
 800da4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800da52:	4108      	asrs	r0, r1
 800da54:	ea00 030a 	and.w	r3, r0, sl
 800da58:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800da5c:	f1c1 0114 	rsb	r1, r1, #20
 800da60:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800da64:	fa4a fa01 	asr.w	sl, sl, r1
 800da68:	f1bb 0f00 	cmp.w	fp, #0
 800da6c:	f04f 0200 	mov.w	r2, #0
 800da70:	4620      	mov	r0, r4
 800da72:	4629      	mov	r1, r5
 800da74:	bfb8      	it	lt
 800da76:	f1ca 0a00 	rsblt	sl, sl, #0
 800da7a:	f7f2 fc1d 	bl	80002b8 <__aeabi_dsub>
 800da7e:	ec41 0b19 	vmov	d9, r0, r1
 800da82:	4642      	mov	r2, r8
 800da84:	464b      	mov	r3, r9
 800da86:	ec51 0b19 	vmov	r0, r1, d9
 800da8a:	f7f2 fc17 	bl	80002bc <__adddf3>
 800da8e:	a37a      	add	r3, pc, #488	; (adr r3, 800dc78 <__ieee754_pow+0x9f8>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	2000      	movs	r0, #0
 800da96:	4604      	mov	r4, r0
 800da98:	460d      	mov	r5, r1
 800da9a:	f7f2 fdc5 	bl	8000628 <__aeabi_dmul>
 800da9e:	ec53 2b19 	vmov	r2, r3, d9
 800daa2:	4606      	mov	r6, r0
 800daa4:	460f      	mov	r7, r1
 800daa6:	4620      	mov	r0, r4
 800daa8:	4629      	mov	r1, r5
 800daaa:	f7f2 fc05 	bl	80002b8 <__aeabi_dsub>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4640      	mov	r0, r8
 800dab4:	4649      	mov	r1, r9
 800dab6:	f7f2 fbff 	bl	80002b8 <__aeabi_dsub>
 800daba:	a371      	add	r3, pc, #452	; (adr r3, 800dc80 <__ieee754_pow+0xa00>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f7f2 fdb2 	bl	8000628 <__aeabi_dmul>
 800dac4:	a370      	add	r3, pc, #448	; (adr r3, 800dc88 <__ieee754_pow+0xa08>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	4680      	mov	r8, r0
 800dacc:	4689      	mov	r9, r1
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fda9 	bl	8000628 <__aeabi_dmul>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4640      	mov	r0, r8
 800dadc:	4649      	mov	r1, r9
 800dade:	f7f2 fbed 	bl	80002bc <__adddf3>
 800dae2:	4604      	mov	r4, r0
 800dae4:	460d      	mov	r5, r1
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4630      	mov	r0, r6
 800daec:	4639      	mov	r1, r7
 800daee:	f7f2 fbe5 	bl	80002bc <__adddf3>
 800daf2:	4632      	mov	r2, r6
 800daf4:	463b      	mov	r3, r7
 800daf6:	4680      	mov	r8, r0
 800daf8:	4689      	mov	r9, r1
 800dafa:	f7f2 fbdd 	bl	80002b8 <__aeabi_dsub>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	4620      	mov	r0, r4
 800db04:	4629      	mov	r1, r5
 800db06:	f7f2 fbd7 	bl	80002b8 <__aeabi_dsub>
 800db0a:	4642      	mov	r2, r8
 800db0c:	4606      	mov	r6, r0
 800db0e:	460f      	mov	r7, r1
 800db10:	464b      	mov	r3, r9
 800db12:	4640      	mov	r0, r8
 800db14:	4649      	mov	r1, r9
 800db16:	f7f2 fd87 	bl	8000628 <__aeabi_dmul>
 800db1a:	a35d      	add	r3, pc, #372	; (adr r3, 800dc90 <__ieee754_pow+0xa10>)
 800db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db20:	4604      	mov	r4, r0
 800db22:	460d      	mov	r5, r1
 800db24:	f7f2 fd80 	bl	8000628 <__aeabi_dmul>
 800db28:	a35b      	add	r3, pc, #364	; (adr r3, 800dc98 <__ieee754_pow+0xa18>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	f7f2 fbc3 	bl	80002b8 <__aeabi_dsub>
 800db32:	4622      	mov	r2, r4
 800db34:	462b      	mov	r3, r5
 800db36:	f7f2 fd77 	bl	8000628 <__aeabi_dmul>
 800db3a:	a359      	add	r3, pc, #356	; (adr r3, 800dca0 <__ieee754_pow+0xa20>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f7f2 fbbc 	bl	80002bc <__adddf3>
 800db44:	4622      	mov	r2, r4
 800db46:	462b      	mov	r3, r5
 800db48:	f7f2 fd6e 	bl	8000628 <__aeabi_dmul>
 800db4c:	a356      	add	r3, pc, #344	; (adr r3, 800dca8 <__ieee754_pow+0xa28>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	f7f2 fbb1 	bl	80002b8 <__aeabi_dsub>
 800db56:	4622      	mov	r2, r4
 800db58:	462b      	mov	r3, r5
 800db5a:	f7f2 fd65 	bl	8000628 <__aeabi_dmul>
 800db5e:	a354      	add	r3, pc, #336	; (adr r3, 800dcb0 <__ieee754_pow+0xa30>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 fbaa 	bl	80002bc <__adddf3>
 800db68:	4622      	mov	r2, r4
 800db6a:	462b      	mov	r3, r5
 800db6c:	f7f2 fd5c 	bl	8000628 <__aeabi_dmul>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4640      	mov	r0, r8
 800db76:	4649      	mov	r1, r9
 800db78:	f7f2 fb9e 	bl	80002b8 <__aeabi_dsub>
 800db7c:	4604      	mov	r4, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	4640      	mov	r0, r8
 800db86:	4649      	mov	r1, r9
 800db88:	f7f2 fd4e 	bl	8000628 <__aeabi_dmul>
 800db8c:	2200      	movs	r2, #0
 800db8e:	ec41 0b19 	vmov	d9, r0, r1
 800db92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db96:	4620      	mov	r0, r4
 800db98:	4629      	mov	r1, r5
 800db9a:	f7f2 fb8d 	bl	80002b8 <__aeabi_dsub>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	ec51 0b19 	vmov	r0, r1, d9
 800dba6:	f7f2 fe69 	bl	800087c <__aeabi_ddiv>
 800dbaa:	4632      	mov	r2, r6
 800dbac:	4604      	mov	r4, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	463b      	mov	r3, r7
 800dbb2:	4640      	mov	r0, r8
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	f7f2 fd37 	bl	8000628 <__aeabi_dmul>
 800dbba:	4632      	mov	r2, r6
 800dbbc:	463b      	mov	r3, r7
 800dbbe:	f7f2 fb7d 	bl	80002bc <__adddf3>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7f2 fb75 	bl	80002b8 <__aeabi_dsub>
 800dbce:	4642      	mov	r2, r8
 800dbd0:	464b      	mov	r3, r9
 800dbd2:	f7f2 fb71 	bl	80002b8 <__aeabi_dsub>
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4602      	mov	r2, r0
 800dbda:	4939      	ldr	r1, [pc, #228]	; (800dcc0 <__ieee754_pow+0xa40>)
 800dbdc:	2000      	movs	r0, #0
 800dbde:	f7f2 fb6b 	bl	80002b8 <__aeabi_dsub>
 800dbe2:	ec41 0b10 	vmov	d0, r0, r1
 800dbe6:	ee10 3a90 	vmov	r3, s1
 800dbea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dbee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbf2:	da2b      	bge.n	800dc4c <__ieee754_pow+0x9cc>
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	f000 fa1b 	bl	800e030 <scalbn>
 800dbfa:	ec51 0b10 	vmov	r0, r1, d0
 800dbfe:	ec53 2b18 	vmov	r2, r3, d8
 800dc02:	f7ff bbee 	b.w	800d3e2 <__ieee754_pow+0x162>
 800dc06:	4b2f      	ldr	r3, [pc, #188]	; (800dcc4 <__ieee754_pow+0xa44>)
 800dc08:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dc0c:	429e      	cmp	r6, r3
 800dc0e:	f77f af0d 	ble.w	800da2c <__ieee754_pow+0x7ac>
 800dc12:	4b2d      	ldr	r3, [pc, #180]	; (800dcc8 <__ieee754_pow+0xa48>)
 800dc14:	440b      	add	r3, r1
 800dc16:	4303      	orrs	r3, r0
 800dc18:	d009      	beq.n	800dc2e <__ieee754_pow+0x9ae>
 800dc1a:	ec51 0b18 	vmov	r0, r1, d8
 800dc1e:	2200      	movs	r2, #0
 800dc20:	2300      	movs	r3, #0
 800dc22:	f7f2 ff73 	bl	8000b0c <__aeabi_dcmplt>
 800dc26:	3800      	subs	r0, #0
 800dc28:	bf18      	it	ne
 800dc2a:	2001      	movne	r0, #1
 800dc2c:	e448      	b.n	800d4c0 <__ieee754_pow+0x240>
 800dc2e:	4622      	mov	r2, r4
 800dc30:	462b      	mov	r3, r5
 800dc32:	f7f2 fb41 	bl	80002b8 <__aeabi_dsub>
 800dc36:	4642      	mov	r2, r8
 800dc38:	464b      	mov	r3, r9
 800dc3a:	f7f2 ff7b 	bl	8000b34 <__aeabi_dcmpge>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	f43f aef4 	beq.w	800da2c <__ieee754_pow+0x7ac>
 800dc44:	e7e9      	b.n	800dc1a <__ieee754_pow+0x99a>
 800dc46:	f04f 0a00 	mov.w	sl, #0
 800dc4a:	e71a      	b.n	800da82 <__ieee754_pow+0x802>
 800dc4c:	ec51 0b10 	vmov	r0, r1, d0
 800dc50:	4619      	mov	r1, r3
 800dc52:	e7d4      	b.n	800dbfe <__ieee754_pow+0x97e>
 800dc54:	491a      	ldr	r1, [pc, #104]	; (800dcc0 <__ieee754_pow+0xa40>)
 800dc56:	2000      	movs	r0, #0
 800dc58:	f7ff bb31 	b.w	800d2be <__ieee754_pow+0x3e>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	2100      	movs	r1, #0
 800dc60:	f7ff bb2d 	b.w	800d2be <__ieee754_pow+0x3e>
 800dc64:	4630      	mov	r0, r6
 800dc66:	4639      	mov	r1, r7
 800dc68:	f7ff bb29 	b.w	800d2be <__ieee754_pow+0x3e>
 800dc6c:	9204      	str	r2, [sp, #16]
 800dc6e:	f7ff bb7b 	b.w	800d368 <__ieee754_pow+0xe8>
 800dc72:	2300      	movs	r3, #0
 800dc74:	f7ff bb65 	b.w	800d342 <__ieee754_pow+0xc2>
 800dc78:	00000000 	.word	0x00000000
 800dc7c:	3fe62e43 	.word	0x3fe62e43
 800dc80:	fefa39ef 	.word	0xfefa39ef
 800dc84:	3fe62e42 	.word	0x3fe62e42
 800dc88:	0ca86c39 	.word	0x0ca86c39
 800dc8c:	be205c61 	.word	0xbe205c61
 800dc90:	72bea4d0 	.word	0x72bea4d0
 800dc94:	3e663769 	.word	0x3e663769
 800dc98:	c5d26bf1 	.word	0xc5d26bf1
 800dc9c:	3ebbbd41 	.word	0x3ebbbd41
 800dca0:	af25de2c 	.word	0xaf25de2c
 800dca4:	3f11566a 	.word	0x3f11566a
 800dca8:	16bebd93 	.word	0x16bebd93
 800dcac:	3f66c16c 	.word	0x3f66c16c
 800dcb0:	5555553e 	.word	0x5555553e
 800dcb4:	3fc55555 	.word	0x3fc55555
 800dcb8:	3fe00000 	.word	0x3fe00000
 800dcbc:	fff00000 	.word	0xfff00000
 800dcc0:	3ff00000 	.word	0x3ff00000
 800dcc4:	4090cbff 	.word	0x4090cbff
 800dcc8:	3f6f3400 	.word	0x3f6f3400
 800dccc:	652b82fe 	.word	0x652b82fe
 800dcd0:	3c971547 	.word	0x3c971547
 800dcd4:	00000000 	.word	0x00000000

0800dcd8 <atan>:
 800dcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	ec55 4b10 	vmov	r4, r5, d0
 800dce0:	4bc3      	ldr	r3, [pc, #780]	; (800dff0 <atan+0x318>)
 800dce2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dce6:	429e      	cmp	r6, r3
 800dce8:	46ab      	mov	fp, r5
 800dcea:	dd18      	ble.n	800dd1e <atan+0x46>
 800dcec:	4bc1      	ldr	r3, [pc, #772]	; (800dff4 <atan+0x31c>)
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	dc01      	bgt.n	800dcf6 <atan+0x1e>
 800dcf2:	d109      	bne.n	800dd08 <atan+0x30>
 800dcf4:	b144      	cbz	r4, 800dd08 <atan+0x30>
 800dcf6:	4622      	mov	r2, r4
 800dcf8:	462b      	mov	r3, r5
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	f7f2 fadd 	bl	80002bc <__adddf3>
 800dd02:	4604      	mov	r4, r0
 800dd04:	460d      	mov	r5, r1
 800dd06:	e006      	b.n	800dd16 <atan+0x3e>
 800dd08:	f1bb 0f00 	cmp.w	fp, #0
 800dd0c:	f300 8131 	bgt.w	800df72 <atan+0x29a>
 800dd10:	a59b      	add	r5, pc, #620	; (adr r5, 800df80 <atan+0x2a8>)
 800dd12:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd16:	ec45 4b10 	vmov	d0, r4, r5
 800dd1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd1e:	4bb6      	ldr	r3, [pc, #728]	; (800dff8 <atan+0x320>)
 800dd20:	429e      	cmp	r6, r3
 800dd22:	dc14      	bgt.n	800dd4e <atan+0x76>
 800dd24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dd28:	429e      	cmp	r6, r3
 800dd2a:	dc0d      	bgt.n	800dd48 <atan+0x70>
 800dd2c:	a396      	add	r3, pc, #600	; (adr r3, 800df88 <atan+0x2b0>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	ee10 0a10 	vmov	r0, s0
 800dd36:	4629      	mov	r1, r5
 800dd38:	f7f2 fac0 	bl	80002bc <__adddf3>
 800dd3c:	4baf      	ldr	r3, [pc, #700]	; (800dffc <atan+0x324>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f7f2 ff02 	bl	8000b48 <__aeabi_dcmpgt>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d1e6      	bne.n	800dd16 <atan+0x3e>
 800dd48:	f04f 3aff 	mov.w	sl, #4294967295
 800dd4c:	e02b      	b.n	800dda6 <atan+0xce>
 800dd4e:	f000 f963 	bl	800e018 <fabs>
 800dd52:	4bab      	ldr	r3, [pc, #684]	; (800e000 <atan+0x328>)
 800dd54:	429e      	cmp	r6, r3
 800dd56:	ec55 4b10 	vmov	r4, r5, d0
 800dd5a:	f300 80bf 	bgt.w	800dedc <atan+0x204>
 800dd5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dd62:	429e      	cmp	r6, r3
 800dd64:	f300 80a0 	bgt.w	800dea8 <atan+0x1d0>
 800dd68:	ee10 2a10 	vmov	r2, s0
 800dd6c:	ee10 0a10 	vmov	r0, s0
 800dd70:	462b      	mov	r3, r5
 800dd72:	4629      	mov	r1, r5
 800dd74:	f7f2 faa2 	bl	80002bc <__adddf3>
 800dd78:	4ba0      	ldr	r3, [pc, #640]	; (800dffc <atan+0x324>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f7f2 fa9c 	bl	80002b8 <__aeabi_dsub>
 800dd80:	2200      	movs	r2, #0
 800dd82:	4606      	mov	r6, r0
 800dd84:	460f      	mov	r7, r1
 800dd86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	f7f2 fa95 	bl	80002bc <__adddf3>
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	4630      	mov	r0, r6
 800dd98:	4639      	mov	r1, r7
 800dd9a:	f7f2 fd6f 	bl	800087c <__aeabi_ddiv>
 800dd9e:	f04f 0a00 	mov.w	sl, #0
 800dda2:	4604      	mov	r4, r0
 800dda4:	460d      	mov	r5, r1
 800dda6:	4622      	mov	r2, r4
 800dda8:	462b      	mov	r3, r5
 800ddaa:	4620      	mov	r0, r4
 800ddac:	4629      	mov	r1, r5
 800ddae:	f7f2 fc3b 	bl	8000628 <__aeabi_dmul>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4680      	mov	r8, r0
 800ddb8:	4689      	mov	r9, r1
 800ddba:	f7f2 fc35 	bl	8000628 <__aeabi_dmul>
 800ddbe:	a374      	add	r3, pc, #464	; (adr r3, 800df90 <atan+0x2b8>)
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	f7f2 fc2e 	bl	8000628 <__aeabi_dmul>
 800ddcc:	a372      	add	r3, pc, #456	; (adr r3, 800df98 <atan+0x2c0>)
 800ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd2:	f7f2 fa73 	bl	80002bc <__adddf3>
 800ddd6:	4632      	mov	r2, r6
 800ddd8:	463b      	mov	r3, r7
 800ddda:	f7f2 fc25 	bl	8000628 <__aeabi_dmul>
 800ddde:	a370      	add	r3, pc, #448	; (adr r3, 800dfa0 <atan+0x2c8>)
 800dde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde4:	f7f2 fa6a 	bl	80002bc <__adddf3>
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	f7f2 fc1c 	bl	8000628 <__aeabi_dmul>
 800ddf0:	a36d      	add	r3, pc, #436	; (adr r3, 800dfa8 <atan+0x2d0>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	f7f2 fa61 	bl	80002bc <__adddf3>
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	f7f2 fc13 	bl	8000628 <__aeabi_dmul>
 800de02:	a36b      	add	r3, pc, #428	; (adr r3, 800dfb0 <atan+0x2d8>)
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	f7f2 fa58 	bl	80002bc <__adddf3>
 800de0c:	4632      	mov	r2, r6
 800de0e:	463b      	mov	r3, r7
 800de10:	f7f2 fc0a 	bl	8000628 <__aeabi_dmul>
 800de14:	a368      	add	r3, pc, #416	; (adr r3, 800dfb8 <atan+0x2e0>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	f7f2 fa4f 	bl	80002bc <__adddf3>
 800de1e:	4642      	mov	r2, r8
 800de20:	464b      	mov	r3, r9
 800de22:	f7f2 fc01 	bl	8000628 <__aeabi_dmul>
 800de26:	a366      	add	r3, pc, #408	; (adr r3, 800dfc0 <atan+0x2e8>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	4680      	mov	r8, r0
 800de2e:	4689      	mov	r9, r1
 800de30:	4630      	mov	r0, r6
 800de32:	4639      	mov	r1, r7
 800de34:	f7f2 fbf8 	bl	8000628 <__aeabi_dmul>
 800de38:	a363      	add	r3, pc, #396	; (adr r3, 800dfc8 <atan+0x2f0>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fa3b 	bl	80002b8 <__aeabi_dsub>
 800de42:	4632      	mov	r2, r6
 800de44:	463b      	mov	r3, r7
 800de46:	f7f2 fbef 	bl	8000628 <__aeabi_dmul>
 800de4a:	a361      	add	r3, pc, #388	; (adr r3, 800dfd0 <atan+0x2f8>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 fa32 	bl	80002b8 <__aeabi_dsub>
 800de54:	4632      	mov	r2, r6
 800de56:	463b      	mov	r3, r7
 800de58:	f7f2 fbe6 	bl	8000628 <__aeabi_dmul>
 800de5c:	a35e      	add	r3, pc, #376	; (adr r3, 800dfd8 <atan+0x300>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 fa29 	bl	80002b8 <__aeabi_dsub>
 800de66:	4632      	mov	r2, r6
 800de68:	463b      	mov	r3, r7
 800de6a:	f7f2 fbdd 	bl	8000628 <__aeabi_dmul>
 800de6e:	a35c      	add	r3, pc, #368	; (adr r3, 800dfe0 <atan+0x308>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f7f2 fa20 	bl	80002b8 <__aeabi_dsub>
 800de78:	4632      	mov	r2, r6
 800de7a:	463b      	mov	r3, r7
 800de7c:	f7f2 fbd4 	bl	8000628 <__aeabi_dmul>
 800de80:	4602      	mov	r2, r0
 800de82:	460b      	mov	r3, r1
 800de84:	4640      	mov	r0, r8
 800de86:	4649      	mov	r1, r9
 800de88:	f7f2 fa18 	bl	80002bc <__adddf3>
 800de8c:	4622      	mov	r2, r4
 800de8e:	462b      	mov	r3, r5
 800de90:	f7f2 fbca 	bl	8000628 <__aeabi_dmul>
 800de94:	f1ba 3fff 	cmp.w	sl, #4294967295
 800de98:	4602      	mov	r2, r0
 800de9a:	460b      	mov	r3, r1
 800de9c:	d14b      	bne.n	800df36 <atan+0x25e>
 800de9e:	4620      	mov	r0, r4
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 fa09 	bl	80002b8 <__aeabi_dsub>
 800dea6:	e72c      	b.n	800dd02 <atan+0x2a>
 800dea8:	ee10 0a10 	vmov	r0, s0
 800deac:	4b53      	ldr	r3, [pc, #332]	; (800dffc <atan+0x324>)
 800deae:	2200      	movs	r2, #0
 800deb0:	4629      	mov	r1, r5
 800deb2:	f7f2 fa01 	bl	80002b8 <__aeabi_dsub>
 800deb6:	4b51      	ldr	r3, [pc, #324]	; (800dffc <atan+0x324>)
 800deb8:	4606      	mov	r6, r0
 800deba:	460f      	mov	r7, r1
 800debc:	2200      	movs	r2, #0
 800debe:	4620      	mov	r0, r4
 800dec0:	4629      	mov	r1, r5
 800dec2:	f7f2 f9fb 	bl	80002bc <__adddf3>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4630      	mov	r0, r6
 800decc:	4639      	mov	r1, r7
 800dece:	f7f2 fcd5 	bl	800087c <__aeabi_ddiv>
 800ded2:	f04f 0a01 	mov.w	sl, #1
 800ded6:	4604      	mov	r4, r0
 800ded8:	460d      	mov	r5, r1
 800deda:	e764      	b.n	800dda6 <atan+0xce>
 800dedc:	4b49      	ldr	r3, [pc, #292]	; (800e004 <atan+0x32c>)
 800dede:	429e      	cmp	r6, r3
 800dee0:	da1d      	bge.n	800df1e <atan+0x246>
 800dee2:	ee10 0a10 	vmov	r0, s0
 800dee6:	4b48      	ldr	r3, [pc, #288]	; (800e008 <atan+0x330>)
 800dee8:	2200      	movs	r2, #0
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 f9e4 	bl	80002b8 <__aeabi_dsub>
 800def0:	4b45      	ldr	r3, [pc, #276]	; (800e008 <atan+0x330>)
 800def2:	4606      	mov	r6, r0
 800def4:	460f      	mov	r7, r1
 800def6:	2200      	movs	r2, #0
 800def8:	4620      	mov	r0, r4
 800defa:	4629      	mov	r1, r5
 800defc:	f7f2 fb94 	bl	8000628 <__aeabi_dmul>
 800df00:	4b3e      	ldr	r3, [pc, #248]	; (800dffc <atan+0x324>)
 800df02:	2200      	movs	r2, #0
 800df04:	f7f2 f9da 	bl	80002bc <__adddf3>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4630      	mov	r0, r6
 800df0e:	4639      	mov	r1, r7
 800df10:	f7f2 fcb4 	bl	800087c <__aeabi_ddiv>
 800df14:	f04f 0a02 	mov.w	sl, #2
 800df18:	4604      	mov	r4, r0
 800df1a:	460d      	mov	r5, r1
 800df1c:	e743      	b.n	800dda6 <atan+0xce>
 800df1e:	462b      	mov	r3, r5
 800df20:	ee10 2a10 	vmov	r2, s0
 800df24:	4939      	ldr	r1, [pc, #228]	; (800e00c <atan+0x334>)
 800df26:	2000      	movs	r0, #0
 800df28:	f7f2 fca8 	bl	800087c <__aeabi_ddiv>
 800df2c:	f04f 0a03 	mov.w	sl, #3
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	e737      	b.n	800dda6 <atan+0xce>
 800df36:	4b36      	ldr	r3, [pc, #216]	; (800e010 <atan+0x338>)
 800df38:	4e36      	ldr	r6, [pc, #216]	; (800e014 <atan+0x33c>)
 800df3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f9b9 	bl	80002b8 <__aeabi_dsub>
 800df46:	4622      	mov	r2, r4
 800df48:	462b      	mov	r3, r5
 800df4a:	f7f2 f9b5 	bl	80002b8 <__aeabi_dsub>
 800df4e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800df52:	4602      	mov	r2, r0
 800df54:	460b      	mov	r3, r1
 800df56:	e9d6 0100 	ldrd	r0, r1, [r6]
 800df5a:	f7f2 f9ad 	bl	80002b8 <__aeabi_dsub>
 800df5e:	f1bb 0f00 	cmp.w	fp, #0
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	f6bf aed6 	bge.w	800dd16 <atan+0x3e>
 800df6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df6e:	461d      	mov	r5, r3
 800df70:	e6d1      	b.n	800dd16 <atan+0x3e>
 800df72:	a51d      	add	r5, pc, #116	; (adr r5, 800dfe8 <atan+0x310>)
 800df74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800df78:	e6cd      	b.n	800dd16 <atan+0x3e>
 800df7a:	bf00      	nop
 800df7c:	f3af 8000 	nop.w
 800df80:	54442d18 	.word	0x54442d18
 800df84:	bff921fb 	.word	0xbff921fb
 800df88:	8800759c 	.word	0x8800759c
 800df8c:	7e37e43c 	.word	0x7e37e43c
 800df90:	e322da11 	.word	0xe322da11
 800df94:	3f90ad3a 	.word	0x3f90ad3a
 800df98:	24760deb 	.word	0x24760deb
 800df9c:	3fa97b4b 	.word	0x3fa97b4b
 800dfa0:	a0d03d51 	.word	0xa0d03d51
 800dfa4:	3fb10d66 	.word	0x3fb10d66
 800dfa8:	c54c206e 	.word	0xc54c206e
 800dfac:	3fb745cd 	.word	0x3fb745cd
 800dfb0:	920083ff 	.word	0x920083ff
 800dfb4:	3fc24924 	.word	0x3fc24924
 800dfb8:	5555550d 	.word	0x5555550d
 800dfbc:	3fd55555 	.word	0x3fd55555
 800dfc0:	2c6a6c2f 	.word	0x2c6a6c2f
 800dfc4:	bfa2b444 	.word	0xbfa2b444
 800dfc8:	52defd9a 	.word	0x52defd9a
 800dfcc:	3fadde2d 	.word	0x3fadde2d
 800dfd0:	af749a6d 	.word	0xaf749a6d
 800dfd4:	3fb3b0f2 	.word	0x3fb3b0f2
 800dfd8:	fe231671 	.word	0xfe231671
 800dfdc:	3fbc71c6 	.word	0x3fbc71c6
 800dfe0:	9998ebc4 	.word	0x9998ebc4
 800dfe4:	3fc99999 	.word	0x3fc99999
 800dfe8:	54442d18 	.word	0x54442d18
 800dfec:	3ff921fb 	.word	0x3ff921fb
 800dff0:	440fffff 	.word	0x440fffff
 800dff4:	7ff00000 	.word	0x7ff00000
 800dff8:	3fdbffff 	.word	0x3fdbffff
 800dffc:	3ff00000 	.word	0x3ff00000
 800e000:	3ff2ffff 	.word	0x3ff2ffff
 800e004:	40038000 	.word	0x40038000
 800e008:	3ff80000 	.word	0x3ff80000
 800e00c:	bff00000 	.word	0xbff00000
 800e010:	0800e758 	.word	0x0800e758
 800e014:	0800e738 	.word	0x0800e738

0800e018 <fabs>:
 800e018:	ec51 0b10 	vmov	r0, r1, d0
 800e01c:	ee10 2a10 	vmov	r2, s0
 800e020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e024:	ec43 2b10 	vmov	d0, r2, r3
 800e028:	4770      	bx	lr
 800e02a:	0000      	movs	r0, r0
 800e02c:	0000      	movs	r0, r0
	...

0800e030 <scalbn>:
 800e030:	b570      	push	{r4, r5, r6, lr}
 800e032:	ec55 4b10 	vmov	r4, r5, d0
 800e036:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e03a:	4606      	mov	r6, r0
 800e03c:	462b      	mov	r3, r5
 800e03e:	b999      	cbnz	r1, 800e068 <scalbn+0x38>
 800e040:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e044:	4323      	orrs	r3, r4
 800e046:	d03f      	beq.n	800e0c8 <scalbn+0x98>
 800e048:	4b35      	ldr	r3, [pc, #212]	; (800e120 <scalbn+0xf0>)
 800e04a:	4629      	mov	r1, r5
 800e04c:	ee10 0a10 	vmov	r0, s0
 800e050:	2200      	movs	r2, #0
 800e052:	f7f2 fae9 	bl	8000628 <__aeabi_dmul>
 800e056:	4b33      	ldr	r3, [pc, #204]	; (800e124 <scalbn+0xf4>)
 800e058:	429e      	cmp	r6, r3
 800e05a:	4604      	mov	r4, r0
 800e05c:	460d      	mov	r5, r1
 800e05e:	da10      	bge.n	800e082 <scalbn+0x52>
 800e060:	a327      	add	r3, pc, #156	; (adr r3, 800e100 <scalbn+0xd0>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	e01f      	b.n	800e0a8 <scalbn+0x78>
 800e068:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e06c:	4291      	cmp	r1, r2
 800e06e:	d10c      	bne.n	800e08a <scalbn+0x5a>
 800e070:	ee10 2a10 	vmov	r2, s0
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 f920 	bl	80002bc <__adddf3>
 800e07c:	4604      	mov	r4, r0
 800e07e:	460d      	mov	r5, r1
 800e080:	e022      	b.n	800e0c8 <scalbn+0x98>
 800e082:	460b      	mov	r3, r1
 800e084:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e088:	3936      	subs	r1, #54	; 0x36
 800e08a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e08e:	4296      	cmp	r6, r2
 800e090:	dd0d      	ble.n	800e0ae <scalbn+0x7e>
 800e092:	2d00      	cmp	r5, #0
 800e094:	a11c      	add	r1, pc, #112	; (adr r1, 800e108 <scalbn+0xd8>)
 800e096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e09a:	da02      	bge.n	800e0a2 <scalbn+0x72>
 800e09c:	a11c      	add	r1, pc, #112	; (adr r1, 800e110 <scalbn+0xe0>)
 800e09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a2:	a319      	add	r3, pc, #100	; (adr r3, 800e108 <scalbn+0xd8>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f7f2 fabe 	bl	8000628 <__aeabi_dmul>
 800e0ac:	e7e6      	b.n	800e07c <scalbn+0x4c>
 800e0ae:	1872      	adds	r2, r6, r1
 800e0b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e0b4:	428a      	cmp	r2, r1
 800e0b6:	dcec      	bgt.n	800e092 <scalbn+0x62>
 800e0b8:	2a00      	cmp	r2, #0
 800e0ba:	dd08      	ble.n	800e0ce <scalbn+0x9e>
 800e0bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0c8:	ec45 4b10 	vmov	d0, r4, r5
 800e0cc:	bd70      	pop	{r4, r5, r6, pc}
 800e0ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e0d2:	da08      	bge.n	800e0e6 <scalbn+0xb6>
 800e0d4:	2d00      	cmp	r5, #0
 800e0d6:	a10a      	add	r1, pc, #40	; (adr r1, 800e100 <scalbn+0xd0>)
 800e0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0dc:	dac0      	bge.n	800e060 <scalbn+0x30>
 800e0de:	a10e      	add	r1, pc, #56	; (adr r1, 800e118 <scalbn+0xe8>)
 800e0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0e4:	e7bc      	b.n	800e060 <scalbn+0x30>
 800e0e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0ea:	3236      	adds	r2, #54	; 0x36
 800e0ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	4b0c      	ldr	r3, [pc, #48]	; (800e128 <scalbn+0xf8>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	e7d5      	b.n	800e0a8 <scalbn+0x78>
 800e0fc:	f3af 8000 	nop.w
 800e100:	c2f8f359 	.word	0xc2f8f359
 800e104:	01a56e1f 	.word	0x01a56e1f
 800e108:	8800759c 	.word	0x8800759c
 800e10c:	7e37e43c 	.word	0x7e37e43c
 800e110:	8800759c 	.word	0x8800759c
 800e114:	fe37e43c 	.word	0xfe37e43c
 800e118:	c2f8f359 	.word	0xc2f8f359
 800e11c:	81a56e1f 	.word	0x81a56e1f
 800e120:	43500000 	.word	0x43500000
 800e124:	ffff3cb0 	.word	0xffff3cb0
 800e128:	3c900000 	.word	0x3c900000

0800e12c <with_errno>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	4604      	mov	r4, r0
 800e130:	460d      	mov	r5, r1
 800e132:	4616      	mov	r6, r2
 800e134:	f7fc ffe0 	bl	800b0f8 <__errno>
 800e138:	4629      	mov	r1, r5
 800e13a:	6006      	str	r6, [r0, #0]
 800e13c:	4620      	mov	r0, r4
 800e13e:	bd70      	pop	{r4, r5, r6, pc}

0800e140 <xflow>:
 800e140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e142:	4614      	mov	r4, r2
 800e144:	461d      	mov	r5, r3
 800e146:	b108      	cbz	r0, 800e14c <xflow+0xc>
 800e148:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e14c:	e9cd 2300 	strd	r2, r3, [sp]
 800e150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e154:	4620      	mov	r0, r4
 800e156:	4629      	mov	r1, r5
 800e158:	f7f2 fa66 	bl	8000628 <__aeabi_dmul>
 800e15c:	2222      	movs	r2, #34	; 0x22
 800e15e:	b003      	add	sp, #12
 800e160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e164:	f7ff bfe2 	b.w	800e12c <with_errno>

0800e168 <__math_uflow>:
 800e168:	b508      	push	{r3, lr}
 800e16a:	2200      	movs	r2, #0
 800e16c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e170:	f7ff ffe6 	bl	800e140 <xflow>
 800e174:	ec41 0b10 	vmov	d0, r0, r1
 800e178:	bd08      	pop	{r3, pc}

0800e17a <__math_oflow>:
 800e17a:	b508      	push	{r3, lr}
 800e17c:	2200      	movs	r2, #0
 800e17e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e182:	f7ff ffdd 	bl	800e140 <xflow>
 800e186:	ec41 0b10 	vmov	d0, r0, r1
 800e18a:	bd08      	pop	{r3, pc}

0800e18c <_init>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	bf00      	nop
 800e190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e192:	bc08      	pop	{r3}
 800e194:	469e      	mov	lr, r3
 800e196:	4770      	bx	lr

0800e198 <_fini>:
 800e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19a:	bf00      	nop
 800e19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19e:	bc08      	pop	{r3}
 800e1a0:	469e      	mov	lr, r3
 800e1a2:	4770      	bx	lr
